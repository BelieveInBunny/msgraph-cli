# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class CollectionOfAccount(msrest.serialization.Model):
    """Collection of account.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphAccount]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphAccount]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfAccount, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfAgedAccountsPayable(msrest.serialization.Model):
    """Collection of agedAccountsPayable.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphAgedAccountsPayable]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphAgedAccountsPayable]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfAgedAccountsPayable, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfAgedAccountsReceivable(msrest.serialization.Model):
    """Collection of agedAccountsReceivable.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphAgedAccountsReceivable]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphAgedAccountsReceivable]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfAgedAccountsReceivable, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfCompany(msrest.serialization.Model):
    """Collection of company.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphCompany]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphCompany]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfCompany, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfCompanyInformation(msrest.serialization.Model):
    """Collection of companyInformation.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphCompanyInformation]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphCompanyInformation]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfCompanyInformation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfCountryRegion(msrest.serialization.Model):
    """Collection of countryRegion.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphCountryRegion]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphCountryRegion]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfCountryRegion, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfCurrency(msrest.serialization.Model):
    """Collection of currency.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphCurrency]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphCurrency]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfCurrency, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfCustomer(msrest.serialization.Model):
    """Collection of customer.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphCustomer]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphCustomer]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfCustomer, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfCustomerPayment(msrest.serialization.Model):
    """Collection of customerPayment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphCustomerPayment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphCustomerPayment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfCustomerPayment, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfCustomerPayment0(msrest.serialization.Model):
    """Collection of customerPayment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphCustomerPayment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphCustomerPayment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfCustomerPayment0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfCustomerPaymentJournal(msrest.serialization.Model):
    """Collection of customerPaymentJournal.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphCustomerPaymentJournal]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphCustomerPaymentJournal]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfCustomerPaymentJournal, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfDimension(msrest.serialization.Model):
    """Collection of dimension.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphDimension]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphDimension]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDimension, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfDimensionValue(msrest.serialization.Model):
    """Collection of dimensionValue.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphDimensionValue]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphDimensionValue]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDimensionValue, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfDimensionValue0(msrest.serialization.Model):
    """Collection of dimensionValue.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphDimensionValue]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphDimensionValue]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDimensionValue0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfEmployee(msrest.serialization.Model):
    """Collection of employee.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphEmployee]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphEmployee]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfEmployee, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfGeneralLedgerEntry(msrest.serialization.Model):
    """Collection of generalLedgerEntry.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphGeneralLedgerEntry]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphGeneralLedgerEntry]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfGeneralLedgerEntry, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfItem(msrest.serialization.Model):
    """Collection of item.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphItem]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphItem]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfItem, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfItemCategory(msrest.serialization.Model):
    """Collection of itemCategory.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphItemCategory]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphItemCategory]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfItemCategory, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfJournal(msrest.serialization.Model):
    """Collection of journal.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphJournal]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphJournal]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfJournal, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfJournalLine(msrest.serialization.Model):
    """Collection of journalLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphJournalLine]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphJournalLine]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfJournalLine, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfJournalLine0(msrest.serialization.Model):
    """Collection of journalLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphJournalLine]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphJournalLine]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfJournalLine0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPaymentMethod(msrest.serialization.Model):
    """Collection of paymentMethod.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPaymentMethod]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPaymentMethod]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPaymentMethod, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPaymentTerm(msrest.serialization.Model):
    """Collection of paymentTerm.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPaymentTerm]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPaymentTerm]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPaymentTerm, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture0(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture1(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture10(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture10, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture11(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture11, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture12(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture12, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture13(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture13, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture14(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture14, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture15(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture15, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture16(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture16, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture17(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture17, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture18(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture18, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture19(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture19, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture2(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture2, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture20(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture20, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture3(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture3, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture4(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture4, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture5(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture5, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture6(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture6, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture7(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture7, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture8(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture8, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPicture9(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPicture9, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPurchaseInvoice(msrest.serialization.Model):
    """Collection of purchaseInvoice.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPurchaseInvoice]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPurchaseInvoice]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPurchaseInvoice, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPurchaseInvoiceLine(msrest.serialization.Model):
    """Collection of purchaseInvoiceLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPurchaseInvoiceLine]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPurchaseInvoiceLine]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPurchaseInvoiceLine, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPurchaseInvoiceLine0(msrest.serialization.Model):
    """Collection of purchaseInvoiceLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphPurchaseInvoiceLine]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPurchaseInvoiceLine]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPurchaseInvoiceLine0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfSalesCreditMemo(msrest.serialization.Model):
    """Collection of salesCreditMemo.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphSalesCreditMemo]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSalesCreditMemo]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSalesCreditMemo, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfSalesCreditMemoLine(msrest.serialization.Model):
    """Collection of salesCreditMemoLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphSalesCreditMemoLine]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSalesCreditMemoLine]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSalesCreditMemoLine, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfSalesCreditMemoLine0(msrest.serialization.Model):
    """Collection of salesCreditMemoLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphSalesCreditMemoLine]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSalesCreditMemoLine]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSalesCreditMemoLine0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfSalesInvoice(msrest.serialization.Model):
    """Collection of salesInvoice.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphSalesInvoice]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSalesInvoice]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSalesInvoice, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfSalesInvoiceLine(msrest.serialization.Model):
    """Collection of salesInvoiceLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphSalesInvoiceLine]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSalesInvoiceLine]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSalesInvoiceLine, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfSalesInvoiceLine0(msrest.serialization.Model):
    """Collection of salesInvoiceLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphSalesInvoiceLine]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSalesInvoiceLine]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSalesInvoiceLine0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfSalesOrder(msrest.serialization.Model):
    """Collection of salesOrder.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphSalesOrder]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSalesOrder]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSalesOrder, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfSalesOrderLine(msrest.serialization.Model):
    """Collection of salesOrderLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphSalesOrderLine]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSalesOrderLine]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSalesOrderLine, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfSalesOrderLine0(msrest.serialization.Model):
    """Collection of salesOrderLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphSalesOrderLine]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSalesOrderLine]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSalesOrderLine0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfSalesQuote(msrest.serialization.Model):
    """Collection of salesQuote.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphSalesQuote]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSalesQuote]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSalesQuote, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfSalesQuoteLine(msrest.serialization.Model):
    """Collection of salesQuoteLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphSalesQuoteLine]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSalesQuoteLine]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSalesQuoteLine, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfSalesQuoteLine0(msrest.serialization.Model):
    """Collection of salesQuoteLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphSalesQuoteLine]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSalesQuoteLine]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSalesQuoteLine0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfShipmentMethod(msrest.serialization.Model):
    """Collection of shipmentMethod.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphShipmentMethod]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphShipmentMethod]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfShipmentMethod, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfTaxArea(msrest.serialization.Model):
    """Collection of taxArea.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphTaxArea]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphTaxArea]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfTaxArea, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfTaxGroup(msrest.serialization.Model):
    """Collection of taxGroup.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphTaxGroup]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphTaxGroup]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfTaxGroup, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfUnitOfMeasure(msrest.serialization.Model):
    """Collection of unitOfMeasure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphUnitOfMeasure]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphUnitOfMeasure]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfUnitOfMeasure, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfVendor(msrest.serialization.Model):
    """Collection of vendor.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.MicrosoftGraphVendor]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphVendor]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfVendor, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.id = kwargs.get('id', None)


class MicrosoftGraphAccount(MicrosoftGraphEntity):
    """account.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param blocked:
    :type blocked: bool
    :param category:
    :type category: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param number:
    :type number: str
    :param sub_category:
    :type sub_category: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'blocked': {'key': 'blocked', 'type': 'bool'},
        'category': {'key': 'category', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'number': {'key': 'number', 'type': 'str'},
        'sub_category': {'key': 'subCategory', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAccount, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.blocked = kwargs.get('blocked', None)
        self.category = kwargs.get('category', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.number = kwargs.get('number', None)
        self.sub_category = kwargs.get('sub_category', None)


class MicrosoftGraphAgedAccountsPayable(MicrosoftGraphEntity):
    """agedAccountsPayable.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param aged_as_of_date:
    :type aged_as_of_date: ~datetime.date
    :param balance_due:
    :type balance_due: float
    :param currency_code:
    :type currency_code: str
    :param current_amount:
    :type current_amount: float
    :param name:
    :type name: str
    :param period1_amount:
    :type period1_amount: float
    :param period2_amount:
    :type period2_amount: float
    :param period3_amount:
    :type period3_amount: float
    :param period_length_filter:
    :type period_length_filter: str
    :param vendor_number:
    :type vendor_number: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'aged_as_of_date': {'key': 'agedAsOfDate', 'type': 'date'},
        'balance_due': {'key': 'balanceDue', 'type': 'float'},
        'currency_code': {'key': 'currencyCode', 'type': 'str'},
        'current_amount': {'key': 'currentAmount', 'type': 'float'},
        'name': {'key': 'name', 'type': 'str'},
        'period1_amount': {'key': 'period1Amount', 'type': 'float'},
        'period2_amount': {'key': 'period2Amount', 'type': 'float'},
        'period3_amount': {'key': 'period3Amount', 'type': 'float'},
        'period_length_filter': {'key': 'periodLengthFilter', 'type': 'str'},
        'vendor_number': {'key': 'vendorNumber', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAgedAccountsPayable, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.aged_as_of_date = kwargs.get('aged_as_of_date', None)
        self.balance_due = kwargs.get('balance_due', None)
        self.currency_code = kwargs.get('currency_code', None)
        self.current_amount = kwargs.get('current_amount', None)
        self.name = kwargs.get('name', None)
        self.period1_amount = kwargs.get('period1_amount', None)
        self.period2_amount = kwargs.get('period2_amount', None)
        self.period3_amount = kwargs.get('period3_amount', None)
        self.period_length_filter = kwargs.get('period_length_filter', None)
        self.vendor_number = kwargs.get('vendor_number', None)


class MicrosoftGraphAgedAccountsReceivable(MicrosoftGraphEntity):
    """agedAccountsReceivable.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param aged_as_of_date:
    :type aged_as_of_date: ~datetime.date
    :param balance_due:
    :type balance_due: float
    :param currency_code:
    :type currency_code: str
    :param current_amount:
    :type current_amount: float
    :param customer_number:
    :type customer_number: str
    :param name:
    :type name: str
    :param period1_amount:
    :type period1_amount: float
    :param period2_amount:
    :type period2_amount: float
    :param period3_amount:
    :type period3_amount: float
    :param period_length_filter:
    :type period_length_filter: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'aged_as_of_date': {'key': 'agedAsOfDate', 'type': 'date'},
        'balance_due': {'key': 'balanceDue', 'type': 'float'},
        'currency_code': {'key': 'currencyCode', 'type': 'str'},
        'current_amount': {'key': 'currentAmount', 'type': 'float'},
        'customer_number': {'key': 'customerNumber', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'period1_amount': {'key': 'period1Amount', 'type': 'float'},
        'period2_amount': {'key': 'period2Amount', 'type': 'float'},
        'period3_amount': {'key': 'period3Amount', 'type': 'float'},
        'period_length_filter': {'key': 'periodLengthFilter', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAgedAccountsReceivable, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.aged_as_of_date = kwargs.get('aged_as_of_date', None)
        self.balance_due = kwargs.get('balance_due', None)
        self.currency_code = kwargs.get('currency_code', None)
        self.current_amount = kwargs.get('current_amount', None)
        self.customer_number = kwargs.get('customer_number', None)
        self.name = kwargs.get('name', None)
        self.period1_amount = kwargs.get('period1_amount', None)
        self.period2_amount = kwargs.get('period2_amount', None)
        self.period3_amount = kwargs.get('period3_amount', None)
        self.period_length_filter = kwargs.get('period_length_filter', None)


class MicrosoftGraphCompany(MicrosoftGraphEntity):
    """company.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param business_profile_id:
    :type business_profile_id: str
    :param display_name:
    :type display_name: str
    :param name:
    :type name: str
    :param system_version:
    :type system_version: str
    :param accounts:
    :type accounts: list[~financials.models.MicrosoftGraphAccount]
    :param aged_accounts_payable:
    :type aged_accounts_payable: list[~financials.models.MicrosoftGraphAgedAccountsPayable]
    :param aged_accounts_receivable:
    :type aged_accounts_receivable: list[~financials.models.MicrosoftGraphAgedAccountsReceivable]
    :param company_information:
    :type company_information: list[~financials.models.MicrosoftGraphCompanyInformation]
    :param countries_regions:
    :type countries_regions: list[~financials.models.MicrosoftGraphCountryRegion]
    :param currencies:
    :type currencies: list[~financials.models.MicrosoftGraphCurrency]
    :param customer_payment_journals:
    :type customer_payment_journals: list[~financials.models.MicrosoftGraphCustomerPaymentJournal]
    :param customer_payments:
    :type customer_payments: list[~financials.models.MicrosoftGraphCustomerPayment]
    :param customers:
    :type customers: list[~financials.models.MicrosoftGraphCustomer]
    :param dimensions:
    :type dimensions: list[~financials.models.MicrosoftGraphDimension]
    :param dimension_values:
    :type dimension_values: list[~financials.models.MicrosoftGraphDimensionValue]
    :param employees:
    :type employees: list[~financials.models.MicrosoftGraphEmployee]
    :param general_ledger_entries:
    :type general_ledger_entries: list[~financials.models.MicrosoftGraphGeneralLedgerEntry]
    :param item_categories:
    :type item_categories: list[~financials.models.MicrosoftGraphItemCategory]
    :param items:
    :type items: list[~financials.models.MicrosoftGraphItem]
    :param journal_lines:
    :type journal_lines: list[~financials.models.MicrosoftGraphJournalLine]
    :param journals:
    :type journals: list[~financials.models.MicrosoftGraphJournal]
    :param payment_methods:
    :type payment_methods: list[~financials.models.MicrosoftGraphPaymentMethod]
    :param payment_terms:
    :type payment_terms: list[~financials.models.MicrosoftGraphPaymentTerm]
    :param picture:
    :type picture: list[~financials.models.MicrosoftGraphPicture]
    :param purchase_invoice_lines:
    :type purchase_invoice_lines: list[~financials.models.MicrosoftGraphPurchaseInvoiceLine]
    :param purchase_invoices:
    :type purchase_invoices: list[~financials.models.MicrosoftGraphPurchaseInvoice]
    :param sales_credit_memo_lines:
    :type sales_credit_memo_lines: list[~financials.models.MicrosoftGraphSalesCreditMemoLine]
    :param sales_credit_memos:
    :type sales_credit_memos: list[~financials.models.MicrosoftGraphSalesCreditMemo]
    :param sales_invoice_lines:
    :type sales_invoice_lines: list[~financials.models.MicrosoftGraphSalesInvoiceLine]
    :param sales_invoices:
    :type sales_invoices: list[~financials.models.MicrosoftGraphSalesInvoice]
    :param sales_order_lines:
    :type sales_order_lines: list[~financials.models.MicrosoftGraphSalesOrderLine]
    :param sales_orders:
    :type sales_orders: list[~financials.models.MicrosoftGraphSalesOrder]
    :param sales_quote_lines:
    :type sales_quote_lines: list[~financials.models.MicrosoftGraphSalesQuoteLine]
    :param sales_quotes:
    :type sales_quotes: list[~financials.models.MicrosoftGraphSalesQuote]
    :param shipment_methods:
    :type shipment_methods: list[~financials.models.MicrosoftGraphShipmentMethod]
    :param tax_areas:
    :type tax_areas: list[~financials.models.MicrosoftGraphTaxArea]
    :param tax_groups:
    :type tax_groups: list[~financials.models.MicrosoftGraphTaxGroup]
    :param units_of_measure:
    :type units_of_measure: list[~financials.models.MicrosoftGraphUnitOfMeasure]
    :param vendors:
    :type vendors: list[~financials.models.MicrosoftGraphVendor]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'business_profile_id': {'key': 'businessProfileId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'system_version': {'key': 'systemVersion', 'type': 'str'},
        'accounts': {'key': 'accounts', 'type': '[MicrosoftGraphAccount]'},
        'aged_accounts_payable': {'key': 'agedAccountsPayable', 'type': '[MicrosoftGraphAgedAccountsPayable]'},
        'aged_accounts_receivable': {'key': 'agedAccountsReceivable', 'type': '[MicrosoftGraphAgedAccountsReceivable]'},
        'company_information': {'key': 'companyInformation', 'type': '[MicrosoftGraphCompanyInformation]'},
        'countries_regions': {'key': 'countriesRegions', 'type': '[MicrosoftGraphCountryRegion]'},
        'currencies': {'key': 'currencies', 'type': '[MicrosoftGraphCurrency]'},
        'customer_payment_journals': {'key': 'customerPaymentJournals', 'type': '[MicrosoftGraphCustomerPaymentJournal]'},
        'customer_payments': {'key': 'customerPayments', 'type': '[MicrosoftGraphCustomerPayment]'},
        'customers': {'key': 'customers', 'type': '[MicrosoftGraphCustomer]'},
        'dimensions': {'key': 'dimensions', 'type': '[MicrosoftGraphDimension]'},
        'dimension_values': {'key': 'dimensionValues', 'type': '[MicrosoftGraphDimensionValue]'},
        'employees': {'key': 'employees', 'type': '[MicrosoftGraphEmployee]'},
        'general_ledger_entries': {'key': 'generalLedgerEntries', 'type': '[MicrosoftGraphGeneralLedgerEntry]'},
        'item_categories': {'key': 'itemCategories', 'type': '[MicrosoftGraphItemCategory]'},
        'items': {'key': 'items', 'type': '[MicrosoftGraphItem]'},
        'journal_lines': {'key': 'journalLines', 'type': '[MicrosoftGraphJournalLine]'},
        'journals': {'key': 'journals', 'type': '[MicrosoftGraphJournal]'},
        'payment_methods': {'key': 'paymentMethods', 'type': '[MicrosoftGraphPaymentMethod]'},
        'payment_terms': {'key': 'paymentTerms', 'type': '[MicrosoftGraphPaymentTerm]'},
        'picture': {'key': 'picture', 'type': '[MicrosoftGraphPicture]'},
        'purchase_invoice_lines': {'key': 'purchaseInvoiceLines', 'type': '[MicrosoftGraphPurchaseInvoiceLine]'},
        'purchase_invoices': {'key': 'purchaseInvoices', 'type': '[MicrosoftGraphPurchaseInvoice]'},
        'sales_credit_memo_lines': {'key': 'salesCreditMemoLines', 'type': '[MicrosoftGraphSalesCreditMemoLine]'},
        'sales_credit_memos': {'key': 'salesCreditMemos', 'type': '[MicrosoftGraphSalesCreditMemo]'},
        'sales_invoice_lines': {'key': 'salesInvoiceLines', 'type': '[MicrosoftGraphSalesInvoiceLine]'},
        'sales_invoices': {'key': 'salesInvoices', 'type': '[MicrosoftGraphSalesInvoice]'},
        'sales_order_lines': {'key': 'salesOrderLines', 'type': '[MicrosoftGraphSalesOrderLine]'},
        'sales_orders': {'key': 'salesOrders', 'type': '[MicrosoftGraphSalesOrder]'},
        'sales_quote_lines': {'key': 'salesQuoteLines', 'type': '[MicrosoftGraphSalesQuoteLine]'},
        'sales_quotes': {'key': 'salesQuotes', 'type': '[MicrosoftGraphSalesQuote]'},
        'shipment_methods': {'key': 'shipmentMethods', 'type': '[MicrosoftGraphShipmentMethod]'},
        'tax_areas': {'key': 'taxAreas', 'type': '[MicrosoftGraphTaxArea]'},
        'tax_groups': {'key': 'taxGroups', 'type': '[MicrosoftGraphTaxGroup]'},
        'units_of_measure': {'key': 'unitsOfMeasure', 'type': '[MicrosoftGraphUnitOfMeasure]'},
        'vendors': {'key': 'vendors', 'type': '[MicrosoftGraphVendor]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphCompany, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.business_profile_id = kwargs.get('business_profile_id', None)
        self.display_name = kwargs.get('display_name', None)
        self.name = kwargs.get('name', None)
        self.system_version = kwargs.get('system_version', None)
        self.accounts = kwargs.get('accounts', None)
        self.aged_accounts_payable = kwargs.get('aged_accounts_payable', None)
        self.aged_accounts_receivable = kwargs.get('aged_accounts_receivable', None)
        self.company_information = kwargs.get('company_information', None)
        self.countries_regions = kwargs.get('countries_regions', None)
        self.currencies = kwargs.get('currencies', None)
        self.customer_payment_journals = kwargs.get('customer_payment_journals', None)
        self.customer_payments = kwargs.get('customer_payments', None)
        self.customers = kwargs.get('customers', None)
        self.dimensions = kwargs.get('dimensions', None)
        self.dimension_values = kwargs.get('dimension_values', None)
        self.employees = kwargs.get('employees', None)
        self.general_ledger_entries = kwargs.get('general_ledger_entries', None)
        self.item_categories = kwargs.get('item_categories', None)
        self.items = kwargs.get('items', None)
        self.journal_lines = kwargs.get('journal_lines', None)
        self.journals = kwargs.get('journals', None)
        self.payment_methods = kwargs.get('payment_methods', None)
        self.payment_terms = kwargs.get('payment_terms', None)
        self.picture = kwargs.get('picture', None)
        self.purchase_invoice_lines = kwargs.get('purchase_invoice_lines', None)
        self.purchase_invoices = kwargs.get('purchase_invoices', None)
        self.sales_credit_memo_lines = kwargs.get('sales_credit_memo_lines', None)
        self.sales_credit_memos = kwargs.get('sales_credit_memos', None)
        self.sales_invoice_lines = kwargs.get('sales_invoice_lines', None)
        self.sales_invoices = kwargs.get('sales_invoices', None)
        self.sales_order_lines = kwargs.get('sales_order_lines', None)
        self.sales_orders = kwargs.get('sales_orders', None)
        self.sales_quote_lines = kwargs.get('sales_quote_lines', None)
        self.sales_quotes = kwargs.get('sales_quotes', None)
        self.shipment_methods = kwargs.get('shipment_methods', None)
        self.tax_areas = kwargs.get('tax_areas', None)
        self.tax_groups = kwargs.get('tax_groups', None)
        self.units_of_measure = kwargs.get('units_of_measure', None)
        self.vendors = kwargs.get('vendors', None)


class MicrosoftGraphCompanyInformation(MicrosoftGraphEntity):
    """companyInformation.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: postalAddressType.
    :type address: ~financials.models.MicrosoftGraphPostalAddressType
    :param currency_code:
    :type currency_code: str
    :param current_fiscal_year_start_date:
    :type current_fiscal_year_start_date: ~datetime.date
    :param display_name:
    :type display_name: str
    :param email:
    :type email: str
    :param fax_number:
    :type fax_number: str
    :param industry:
    :type industry: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param phone_number:
    :type phone_number: str
    :param picture:
    :type picture: bytes
    :param tax_registration_number:
    :type tax_registration_number: str
    :param website:
    :type website: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'MicrosoftGraphPostalAddressType'},
        'currency_code': {'key': 'currencyCode', 'type': 'str'},
        'current_fiscal_year_start_date': {'key': 'currentFiscalYearStartDate', 'type': 'date'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
        'fax_number': {'key': 'faxNumber', 'type': 'str'},
        'industry': {'key': 'industry', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'picture': {'key': 'picture', 'type': 'base64'},
        'tax_registration_number': {'key': 'taxRegistrationNumber', 'type': 'str'},
        'website': {'key': 'website', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphCompanyInformation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.address = kwargs.get('address', None)
        self.currency_code = kwargs.get('currency_code', None)
        self.current_fiscal_year_start_date = kwargs.get('current_fiscal_year_start_date', None)
        self.display_name = kwargs.get('display_name', None)
        self.email = kwargs.get('email', None)
        self.fax_number = kwargs.get('fax_number', None)
        self.industry = kwargs.get('industry', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.phone_number = kwargs.get('phone_number', None)
        self.picture = kwargs.get('picture', None)
        self.tax_registration_number = kwargs.get('tax_registration_number', None)
        self.website = kwargs.get('website', None)


class MicrosoftGraphCountryRegion(MicrosoftGraphEntity):
    """countryRegion.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address_format:
    :type address_format: str
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'address_format': {'key': 'addressFormat', 'type': 'str'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphCountryRegion, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.address_format = kwargs.get('address_format', None)
        self.code = kwargs.get('code', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)


class MicrosoftGraphCurrency(MicrosoftGraphEntity):
    """currency.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param amount_decimal_places:
    :type amount_decimal_places: str
    :param amount_rounding_precision:
    :type amount_rounding_precision: float
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param symbol:
    :type symbol: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'amount_decimal_places': {'key': 'amountDecimalPlaces', 'type': 'str'},
        'amount_rounding_precision': {'key': 'amountRoundingPrecision', 'type': 'float'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'symbol': {'key': 'symbol', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphCurrency, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.amount_decimal_places = kwargs.get('amount_decimal_places', None)
        self.amount_rounding_precision = kwargs.get('amount_rounding_precision', None)
        self.code = kwargs.get('code', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.symbol = kwargs.get('symbol', None)


class MicrosoftGraphCustomer(MicrosoftGraphEntity):
    """customer.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: postalAddressType.
    :type address: ~financials.models.MicrosoftGraphPostalAddressType
    :param blocked:
    :type blocked: str
    :param currency_code:
    :type currency_code: str
    :param currency_id:
    :type currency_id: str
    :param display_name:
    :type display_name: str
    :param email:
    :type email: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param number:
    :type number: str
    :param payment_method_id:
    :type payment_method_id: str
    :param payment_terms_id:
    :type payment_terms_id: str
    :param phone_number:
    :type phone_number: str
    :param shipment_method_id:
    :type shipment_method_id: str
    :param tax_area_display_name:
    :type tax_area_display_name: str
    :param tax_area_id:
    :type tax_area_id: str
    :param tax_liable:
    :type tax_liable: bool
    :param tax_registration_number:
    :type tax_registration_number: str
    :param type:
    :type type: str
    :param website:
    :type website: str
    :param currency: currency.
    :type currency: ~financials.models.MicrosoftGraphCurrency
    :param payment_method: paymentMethod.
    :type payment_method: ~financials.models.MicrosoftGraphPaymentMethod
    :param payment_term: paymentTerm.
    :type payment_term: ~financials.models.MicrosoftGraphPaymentTerm
    :param picture:
    :type picture: list[~financials.models.MicrosoftGraphPicture]
    :param shipment_method: shipmentMethod.
    :type shipment_method: ~financials.models.MicrosoftGraphShipmentMethod
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'MicrosoftGraphPostalAddressType'},
        'blocked': {'key': 'blocked', 'type': 'str'},
        'currency_code': {'key': 'currencyCode', 'type': 'str'},
        'currency_id': {'key': 'currencyId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'number': {'key': 'number', 'type': 'str'},
        'payment_method_id': {'key': 'paymentMethodId', 'type': 'str'},
        'payment_terms_id': {'key': 'paymentTermsId', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'shipment_method_id': {'key': 'shipmentMethodId', 'type': 'str'},
        'tax_area_display_name': {'key': 'taxAreaDisplayName', 'type': 'str'},
        'tax_area_id': {'key': 'taxAreaId', 'type': 'str'},
        'tax_liable': {'key': 'taxLiable', 'type': 'bool'},
        'tax_registration_number': {'key': 'taxRegistrationNumber', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'website': {'key': 'website', 'type': 'str'},
        'currency': {'key': 'currency', 'type': 'MicrosoftGraphCurrency'},
        'payment_method': {'key': 'paymentMethod', 'type': 'MicrosoftGraphPaymentMethod'},
        'payment_term': {'key': 'paymentTerm', 'type': 'MicrosoftGraphPaymentTerm'},
        'picture': {'key': 'picture', 'type': '[MicrosoftGraphPicture]'},
        'shipment_method': {'key': 'shipmentMethod', 'type': 'MicrosoftGraphShipmentMethod'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphCustomer, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.address = kwargs.get('address', None)
        self.blocked = kwargs.get('blocked', None)
        self.currency_code = kwargs.get('currency_code', None)
        self.currency_id = kwargs.get('currency_id', None)
        self.display_name = kwargs.get('display_name', None)
        self.email = kwargs.get('email', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.number = kwargs.get('number', None)
        self.payment_method_id = kwargs.get('payment_method_id', None)
        self.payment_terms_id = kwargs.get('payment_terms_id', None)
        self.phone_number = kwargs.get('phone_number', None)
        self.shipment_method_id = kwargs.get('shipment_method_id', None)
        self.tax_area_display_name = kwargs.get('tax_area_display_name', None)
        self.tax_area_id = kwargs.get('tax_area_id', None)
        self.tax_liable = kwargs.get('tax_liable', None)
        self.tax_registration_number = kwargs.get('tax_registration_number', None)
        self.type = kwargs.get('type', None)
        self.website = kwargs.get('website', None)
        self.currency = kwargs.get('currency', None)
        self.payment_method = kwargs.get('payment_method', None)
        self.payment_term = kwargs.get('payment_term', None)
        self.picture = kwargs.get('picture', None)
        self.shipment_method = kwargs.get('shipment_method', None)


class MicrosoftGraphCustomerPayment(MicrosoftGraphEntity):
    """customerPayment.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param amount:
    :type amount: float
    :param applies_to_invoice_id:
    :type applies_to_invoice_id: str
    :param applies_to_invoice_number:
    :type applies_to_invoice_number: str
    :param comment:
    :type comment: str
    :param contact_id:
    :type contact_id: str
    :param customer_id:
    :type customer_id: str
    :param customer_number:
    :type customer_number: str
    :param description:
    :type description: str
    :param document_number:
    :type document_number: str
    :param external_document_number:
    :type external_document_number: str
    :param journal_display_name:
    :type journal_display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param line_number:
    :type line_number: int
    :param posting_date:
    :type posting_date: ~datetime.date
    :param customer: customer.
    :type customer: ~financials.models.MicrosoftGraphCustomer
    """

    _validation = {
        'line_number': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'amount': {'key': 'amount', 'type': 'float'},
        'applies_to_invoice_id': {'key': 'appliesToInvoiceId', 'type': 'str'},
        'applies_to_invoice_number': {'key': 'appliesToInvoiceNumber', 'type': 'str'},
        'comment': {'key': 'comment', 'type': 'str'},
        'contact_id': {'key': 'contactId', 'type': 'str'},
        'customer_id': {'key': 'customerId', 'type': 'str'},
        'customer_number': {'key': 'customerNumber', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'document_number': {'key': 'documentNumber', 'type': 'str'},
        'external_document_number': {'key': 'externalDocumentNumber', 'type': 'str'},
        'journal_display_name': {'key': 'journalDisplayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'line_number': {'key': 'lineNumber', 'type': 'int'},
        'posting_date': {'key': 'postingDate', 'type': 'date'},
        'customer': {'key': 'customer', 'type': 'MicrosoftGraphCustomer'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphCustomerPayment, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.amount = kwargs.get('amount', None)
        self.applies_to_invoice_id = kwargs.get('applies_to_invoice_id', None)
        self.applies_to_invoice_number = kwargs.get('applies_to_invoice_number', None)
        self.comment = kwargs.get('comment', None)
        self.contact_id = kwargs.get('contact_id', None)
        self.customer_id = kwargs.get('customer_id', None)
        self.customer_number = kwargs.get('customer_number', None)
        self.description = kwargs.get('description', None)
        self.document_number = kwargs.get('document_number', None)
        self.external_document_number = kwargs.get('external_document_number', None)
        self.journal_display_name = kwargs.get('journal_display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.line_number = kwargs.get('line_number', None)
        self.posting_date = kwargs.get('posting_date', None)
        self.customer = kwargs.get('customer', None)


class MicrosoftGraphCustomerPaymentJournal(MicrosoftGraphEntity):
    """customerPaymentJournal.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param balancing_account_id:
    :type balancing_account_id: str
    :param balancing_account_number:
    :type balancing_account_number: str
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param account: account.
    :type account: ~financials.models.MicrosoftGraphAccount
    :param customer_payments:
    :type customer_payments: list[~financials.models.MicrosoftGraphCustomerPayment]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'balancing_account_id': {'key': 'balancingAccountId', 'type': 'str'},
        'balancing_account_number': {'key': 'balancingAccountNumber', 'type': 'str'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'account': {'key': 'account', 'type': 'MicrosoftGraphAccount'},
        'customer_payments': {'key': 'customerPayments', 'type': '[MicrosoftGraphCustomerPayment]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphCustomerPaymentJournal, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.balancing_account_id = kwargs.get('balancing_account_id', None)
        self.balancing_account_number = kwargs.get('balancing_account_number', None)
        self.code = kwargs.get('code', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.account = kwargs.get('account', None)
        self.customer_payments = kwargs.get('customer_payments', None)


class MicrosoftGraphDimension(MicrosoftGraphEntity):
    """dimension.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param dimension_values:
    :type dimension_values: list[~financials.models.MicrosoftGraphDimensionValue]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'dimension_values': {'key': 'dimensionValues', 'type': '[MicrosoftGraphDimensionValue]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDimension, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs.get('code', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.dimension_values = kwargs.get('dimension_values', None)


class MicrosoftGraphDimensionValue(MicrosoftGraphEntity):
    """dimensionValue.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDimensionValue, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs.get('code', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)


class MicrosoftGraphEmployee(MicrosoftGraphEntity):
    """employee.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: postalAddressType.
    :type address: ~financials.models.MicrosoftGraphPostalAddressType
    :param birth_date:
    :type birth_date: ~datetime.date
    :param display_name:
    :type display_name: str
    :param email:
    :type email: str
    :param employment_date:
    :type employment_date: ~datetime.date
    :param given_name:
    :type given_name: str
    :param job_title:
    :type job_title: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param middle_name:
    :type middle_name: str
    :param mobile_phone:
    :type mobile_phone: str
    :param number:
    :type number: str
    :param personal_email:
    :type personal_email: str
    :param phone_number:
    :type phone_number: str
    :param statistics_group_code:
    :type statistics_group_code: str
    :param status:
    :type status: str
    :param surname:
    :type surname: str
    :param termination_date:
    :type termination_date: ~datetime.date
    :param picture:
    :type picture: list[~financials.models.MicrosoftGraphPicture]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'MicrosoftGraphPostalAddressType'},
        'birth_date': {'key': 'birthDate', 'type': 'date'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
        'employment_date': {'key': 'employmentDate', 'type': 'date'},
        'given_name': {'key': 'givenName', 'type': 'str'},
        'job_title': {'key': 'jobTitle', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'middle_name': {'key': 'middleName', 'type': 'str'},
        'mobile_phone': {'key': 'mobilePhone', 'type': 'str'},
        'number': {'key': 'number', 'type': 'str'},
        'personal_email': {'key': 'personalEmail', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'statistics_group_code': {'key': 'statisticsGroupCode', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'surname': {'key': 'surname', 'type': 'str'},
        'termination_date': {'key': 'terminationDate', 'type': 'date'},
        'picture': {'key': 'picture', 'type': '[MicrosoftGraphPicture]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEmployee, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.address = kwargs.get('address', None)
        self.birth_date = kwargs.get('birth_date', None)
        self.display_name = kwargs.get('display_name', None)
        self.email = kwargs.get('email', None)
        self.employment_date = kwargs.get('employment_date', None)
        self.given_name = kwargs.get('given_name', None)
        self.job_title = kwargs.get('job_title', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.middle_name = kwargs.get('middle_name', None)
        self.mobile_phone = kwargs.get('mobile_phone', None)
        self.number = kwargs.get('number', None)
        self.personal_email = kwargs.get('personal_email', None)
        self.phone_number = kwargs.get('phone_number', None)
        self.statistics_group_code = kwargs.get('statistics_group_code', None)
        self.status = kwargs.get('status', None)
        self.surname = kwargs.get('surname', None)
        self.termination_date = kwargs.get('termination_date', None)
        self.picture = kwargs.get('picture', None)


class MicrosoftGraphFinancials(msrest.serialization.Model):
    """financials.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param companies:
    :type companies: list[~financials.models.MicrosoftGraphCompany]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'companies': {'key': 'companies', 'type': '[MicrosoftGraphCompany]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphFinancials, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.companies = kwargs.get('companies', None)


class MicrosoftGraphGeneralLedgerEntry(MicrosoftGraphEntity):
    """generalLedgerEntry.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param account_id:
    :type account_id: str
    :param account_number:
    :type account_number: str
    :param credit_amount:
    :type credit_amount: float
    :param debit_amount:
    :type debit_amount: float
    :param description:
    :type description: str
    :param document_number:
    :type document_number: str
    :param document_type:
    :type document_type: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param posting_date:
    :type posting_date: ~datetime.date
    :param account: account.
    :type account: ~financials.models.MicrosoftGraphAccount
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'account_id': {'key': 'accountId', 'type': 'str'},
        'account_number': {'key': 'accountNumber', 'type': 'str'},
        'credit_amount': {'key': 'creditAmount', 'type': 'float'},
        'debit_amount': {'key': 'debitAmount', 'type': 'float'},
        'description': {'key': 'description', 'type': 'str'},
        'document_number': {'key': 'documentNumber', 'type': 'str'},
        'document_type': {'key': 'documentType', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'posting_date': {'key': 'postingDate', 'type': 'date'},
        'account': {'key': 'account', 'type': 'MicrosoftGraphAccount'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphGeneralLedgerEntry, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.account_id = kwargs.get('account_id', None)
        self.account_number = kwargs.get('account_number', None)
        self.credit_amount = kwargs.get('credit_amount', None)
        self.debit_amount = kwargs.get('debit_amount', None)
        self.description = kwargs.get('description', None)
        self.document_number = kwargs.get('document_number', None)
        self.document_type = kwargs.get('document_type', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.posting_date = kwargs.get('posting_date', None)
        self.account = kwargs.get('account', None)


class MicrosoftGraphItem(MicrosoftGraphEntity):
    """item.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param base_unit_of_measure_id:
    :type base_unit_of_measure_id: str
    :param blocked:
    :type blocked: bool
    :param display_name:
    :type display_name: str
    :param gtin:
    :type gtin: str
    :param inventory:
    :type inventory: float
    :param item_category_code:
    :type item_category_code: str
    :param item_category_id:
    :type item_category_id: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param number:
    :type number: str
    :param price_includes_tax:
    :type price_includes_tax: bool
    :param tax_group_code:
    :type tax_group_code: str
    :param tax_group_id:
    :type tax_group_id: str
    :param type:
    :type type: str
    :param unit_cost:
    :type unit_cost: float
    :param unit_price:
    :type unit_price: float
    :param item_category: itemCategory.
    :type item_category: ~financials.models.MicrosoftGraphItemCategory
    :param picture:
    :type picture: list[~financials.models.MicrosoftGraphPicture]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'base_unit_of_measure_id': {'key': 'baseUnitOfMeasureId', 'type': 'str'},
        'blocked': {'key': 'blocked', 'type': 'bool'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'gtin': {'key': 'gtin', 'type': 'str'},
        'inventory': {'key': 'inventory', 'type': 'float'},
        'item_category_code': {'key': 'itemCategoryCode', 'type': 'str'},
        'item_category_id': {'key': 'itemCategoryId', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'number': {'key': 'number', 'type': 'str'},
        'price_includes_tax': {'key': 'priceIncludesTax', 'type': 'bool'},
        'tax_group_code': {'key': 'taxGroupCode', 'type': 'str'},
        'tax_group_id': {'key': 'taxGroupId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'unit_cost': {'key': 'unitCost', 'type': 'float'},
        'unit_price': {'key': 'unitPrice', 'type': 'float'},
        'item_category': {'key': 'itemCategory', 'type': 'MicrosoftGraphItemCategory'},
        'picture': {'key': 'picture', 'type': '[MicrosoftGraphPicture]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphItem, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.base_unit_of_measure_id = kwargs.get('base_unit_of_measure_id', None)
        self.blocked = kwargs.get('blocked', None)
        self.display_name = kwargs.get('display_name', None)
        self.gtin = kwargs.get('gtin', None)
        self.inventory = kwargs.get('inventory', None)
        self.item_category_code = kwargs.get('item_category_code', None)
        self.item_category_id = kwargs.get('item_category_id', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.number = kwargs.get('number', None)
        self.price_includes_tax = kwargs.get('price_includes_tax', None)
        self.tax_group_code = kwargs.get('tax_group_code', None)
        self.tax_group_id = kwargs.get('tax_group_id', None)
        self.type = kwargs.get('type', None)
        self.unit_cost = kwargs.get('unit_cost', None)
        self.unit_price = kwargs.get('unit_price', None)
        self.item_category = kwargs.get('item_category', None)
        self.picture = kwargs.get('picture', None)


class MicrosoftGraphItemCategory(MicrosoftGraphEntity):
    """itemCategory.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphItemCategory, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs.get('code', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)


class MicrosoftGraphJournal(MicrosoftGraphEntity):
    """journal.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param balancing_account_id:
    :type balancing_account_id: str
    :param balancing_account_number:
    :type balancing_account_number: str
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param account: account.
    :type account: ~financials.models.MicrosoftGraphAccount
    :param journal_lines:
    :type journal_lines: list[~financials.models.MicrosoftGraphJournalLine]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'balancing_account_id': {'key': 'balancingAccountId', 'type': 'str'},
        'balancing_account_number': {'key': 'balancingAccountNumber', 'type': 'str'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'account': {'key': 'account', 'type': 'MicrosoftGraphAccount'},
        'journal_lines': {'key': 'journalLines', 'type': '[MicrosoftGraphJournalLine]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphJournal, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.balancing_account_id = kwargs.get('balancing_account_id', None)
        self.balancing_account_number = kwargs.get('balancing_account_number', None)
        self.code = kwargs.get('code', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.account = kwargs.get('account', None)
        self.journal_lines = kwargs.get('journal_lines', None)


class MicrosoftGraphJournalLine(MicrosoftGraphEntity):
    """journalLine.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param account_id:
    :type account_id: str
    :param account_number:
    :type account_number: str
    :param amount:
    :type amount: float
    :param comment:
    :type comment: str
    :param description:
    :type description: str
    :param document_number:
    :type document_number: str
    :param external_document_number:
    :type external_document_number: str
    :param journal_display_name:
    :type journal_display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param line_number:
    :type line_number: int
    :param posting_date:
    :type posting_date: ~datetime.date
    :param account: account.
    :type account: ~financials.models.MicrosoftGraphAccount
    """

    _validation = {
        'line_number': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'account_id': {'key': 'accountId', 'type': 'str'},
        'account_number': {'key': 'accountNumber', 'type': 'str'},
        'amount': {'key': 'amount', 'type': 'float'},
        'comment': {'key': 'comment', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'document_number': {'key': 'documentNumber', 'type': 'str'},
        'external_document_number': {'key': 'externalDocumentNumber', 'type': 'str'},
        'journal_display_name': {'key': 'journalDisplayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'line_number': {'key': 'lineNumber', 'type': 'int'},
        'posting_date': {'key': 'postingDate', 'type': 'date'},
        'account': {'key': 'account', 'type': 'MicrosoftGraphAccount'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphJournalLine, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.account_id = kwargs.get('account_id', None)
        self.account_number = kwargs.get('account_number', None)
        self.amount = kwargs.get('amount', None)
        self.comment = kwargs.get('comment', None)
        self.description = kwargs.get('description', None)
        self.document_number = kwargs.get('document_number', None)
        self.external_document_number = kwargs.get('external_document_number', None)
        self.journal_display_name = kwargs.get('journal_display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.line_number = kwargs.get('line_number', None)
        self.posting_date = kwargs.get('posting_date', None)
        self.account = kwargs.get('account', None)


class MicrosoftGraphPaymentMethod(MicrosoftGraphEntity):
    """paymentMethod.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPaymentMethod, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs.get('code', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)


class MicrosoftGraphPaymentTerm(MicrosoftGraphEntity):
    """paymentTerm.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param calculate_discount_on_credit_memos:
    :type calculate_discount_on_credit_memos: bool
    :param code:
    :type code: str
    :param discount_date_calculation:
    :type discount_date_calculation: str
    :param discount_percent:
    :type discount_percent: float
    :param display_name:
    :type display_name: str
    :param due_date_calculation:
    :type due_date_calculation: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'calculate_discount_on_credit_memos': {'key': 'calculateDiscountOnCreditMemos', 'type': 'bool'},
        'code': {'key': 'code', 'type': 'str'},
        'discount_date_calculation': {'key': 'discountDateCalculation', 'type': 'str'},
        'discount_percent': {'key': 'discountPercent', 'type': 'float'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'due_date_calculation': {'key': 'dueDateCalculation', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPaymentTerm, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.calculate_discount_on_credit_memos = kwargs.get('calculate_discount_on_credit_memos', None)
        self.code = kwargs.get('code', None)
        self.discount_date_calculation = kwargs.get('discount_date_calculation', None)
        self.discount_percent = kwargs.get('discount_percent', None)
        self.display_name = kwargs.get('display_name', None)
        self.due_date_calculation = kwargs.get('due_date_calculation', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)


class MicrosoftGraphPicture(MicrosoftGraphEntity):
    """picture.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content:
    :type content: bytes
    :param content_type:
    :type content_type: str
    :param height:
    :type height: int
    :param width:
    :type width: int
    """

    _validation = {
        'height': {'maximum': 2147483647, 'minimum': -2147483648},
        'width': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'content': {'key': 'content', 'type': 'base64'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'height': {'key': 'height', 'type': 'int'},
        'width': {'key': 'width', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPicture, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.content = kwargs.get('content', None)
        self.content_type = kwargs.get('content_type', None)
        self.height = kwargs.get('height', None)
        self.width = kwargs.get('width', None)


class MicrosoftGraphPostalAddressType(msrest.serialization.Model):
    """postalAddressType.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param city:
    :type city: str
    :param country_letter_code:
    :type country_letter_code: str
    :param postal_code:
    :type postal_code: str
    :param state:
    :type state: str
    :param street:
    :type street: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'city': {'key': 'city', 'type': 'str'},
        'country_letter_code': {'key': 'countryLetterCode', 'type': 'str'},
        'postal_code': {'key': 'postalCode', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'street': {'key': 'street', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPostalAddressType, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.city = kwargs.get('city', None)
        self.country_letter_code = kwargs.get('country_letter_code', None)
        self.postal_code = kwargs.get('postal_code', None)
        self.state = kwargs.get('state', None)
        self.street = kwargs.get('street', None)


class MicrosoftGraphPurchaseInvoice(MicrosoftGraphEntity):
    """purchaseInvoice.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param buy_from_address: postalAddressType.
    :type buy_from_address: ~financials.models.MicrosoftGraphPostalAddressType
    :param currency_code:
    :type currency_code: str
    :param currency_id:
    :type currency_id: str
    :param discount_amount:
    :type discount_amount: float
    :param discount_applied_before_tax:
    :type discount_applied_before_tax: bool
    :param due_date:
    :type due_date: ~datetime.date
    :param invoice_date:
    :type invoice_date: ~datetime.date
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param number:
    :type number: str
    :param pay_to_address: postalAddressType.
    :type pay_to_address: ~financials.models.MicrosoftGraphPostalAddressType
    :param pay_to_contact:
    :type pay_to_contact: str
    :param pay_to_name:
    :type pay_to_name: str
    :param pay_to_vendor_id:
    :type pay_to_vendor_id: str
    :param pay_to_vendor_number:
    :type pay_to_vendor_number: str
    :param prices_include_tax:
    :type prices_include_tax: bool
    :param ship_to_address: postalAddressType.
    :type ship_to_address: ~financials.models.MicrosoftGraphPostalAddressType
    :param ship_to_contact:
    :type ship_to_contact: str
    :param ship_to_name:
    :type ship_to_name: str
    :param status:
    :type status: str
    :param total_amount_excluding_tax:
    :type total_amount_excluding_tax: float
    :param total_amount_including_tax:
    :type total_amount_including_tax: float
    :param total_tax_amount:
    :type total_tax_amount: float
    :param vendor_id:
    :type vendor_id: str
    :param vendor_invoice_number:
    :type vendor_invoice_number: str
    :param vendor_name:
    :type vendor_name: str
    :param vendor_number:
    :type vendor_number: str
    :param currency: currency.
    :type currency: ~financials.models.MicrosoftGraphCurrency
    :param purchase_invoice_lines:
    :type purchase_invoice_lines: list[~financials.models.MicrosoftGraphPurchaseInvoiceLine]
    :param vendor: vendor.
    :type vendor: ~financials.models.MicrosoftGraphVendor
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'buy_from_address': {'key': 'buyFromAddress', 'type': 'MicrosoftGraphPostalAddressType'},
        'currency_code': {'key': 'currencyCode', 'type': 'str'},
        'currency_id': {'key': 'currencyId', 'type': 'str'},
        'discount_amount': {'key': 'discountAmount', 'type': 'float'},
        'discount_applied_before_tax': {'key': 'discountAppliedBeforeTax', 'type': 'bool'},
        'due_date': {'key': 'dueDate', 'type': 'date'},
        'invoice_date': {'key': 'invoiceDate', 'type': 'date'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'number': {'key': 'number', 'type': 'str'},
        'pay_to_address': {'key': 'payToAddress', 'type': 'MicrosoftGraphPostalAddressType'},
        'pay_to_contact': {'key': 'payToContact', 'type': 'str'},
        'pay_to_name': {'key': 'payToName', 'type': 'str'},
        'pay_to_vendor_id': {'key': 'payToVendorId', 'type': 'str'},
        'pay_to_vendor_number': {'key': 'payToVendorNumber', 'type': 'str'},
        'prices_include_tax': {'key': 'pricesIncludeTax', 'type': 'bool'},
        'ship_to_address': {'key': 'shipToAddress', 'type': 'MicrosoftGraphPostalAddressType'},
        'ship_to_contact': {'key': 'shipToContact', 'type': 'str'},
        'ship_to_name': {'key': 'shipToName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'total_amount_excluding_tax': {'key': 'totalAmountExcludingTax', 'type': 'float'},
        'total_amount_including_tax': {'key': 'totalAmountIncludingTax', 'type': 'float'},
        'total_tax_amount': {'key': 'totalTaxAmount', 'type': 'float'},
        'vendor_id': {'key': 'vendorId', 'type': 'str'},
        'vendor_invoice_number': {'key': 'vendorInvoiceNumber', 'type': 'str'},
        'vendor_name': {'key': 'vendorName', 'type': 'str'},
        'vendor_number': {'key': 'vendorNumber', 'type': 'str'},
        'currency': {'key': 'currency', 'type': 'MicrosoftGraphCurrency'},
        'purchase_invoice_lines': {'key': 'purchaseInvoiceLines', 'type': '[MicrosoftGraphPurchaseInvoiceLine]'},
        'vendor': {'key': 'vendor', 'type': 'MicrosoftGraphVendor'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPurchaseInvoice, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.buy_from_address = kwargs.get('buy_from_address', None)
        self.currency_code = kwargs.get('currency_code', None)
        self.currency_id = kwargs.get('currency_id', None)
        self.discount_amount = kwargs.get('discount_amount', None)
        self.discount_applied_before_tax = kwargs.get('discount_applied_before_tax', None)
        self.due_date = kwargs.get('due_date', None)
        self.invoice_date = kwargs.get('invoice_date', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.number = kwargs.get('number', None)
        self.pay_to_address = kwargs.get('pay_to_address', None)
        self.pay_to_contact = kwargs.get('pay_to_contact', None)
        self.pay_to_name = kwargs.get('pay_to_name', None)
        self.pay_to_vendor_id = kwargs.get('pay_to_vendor_id', None)
        self.pay_to_vendor_number = kwargs.get('pay_to_vendor_number', None)
        self.prices_include_tax = kwargs.get('prices_include_tax', None)
        self.ship_to_address = kwargs.get('ship_to_address', None)
        self.ship_to_contact = kwargs.get('ship_to_contact', None)
        self.ship_to_name = kwargs.get('ship_to_name', None)
        self.status = kwargs.get('status', None)
        self.total_amount_excluding_tax = kwargs.get('total_amount_excluding_tax', None)
        self.total_amount_including_tax = kwargs.get('total_amount_including_tax', None)
        self.total_tax_amount = kwargs.get('total_tax_amount', None)
        self.vendor_id = kwargs.get('vendor_id', None)
        self.vendor_invoice_number = kwargs.get('vendor_invoice_number', None)
        self.vendor_name = kwargs.get('vendor_name', None)
        self.vendor_number = kwargs.get('vendor_number', None)
        self.currency = kwargs.get('currency', None)
        self.purchase_invoice_lines = kwargs.get('purchase_invoice_lines', None)
        self.vendor = kwargs.get('vendor', None)


class MicrosoftGraphPurchaseInvoiceLine(MicrosoftGraphEntity):
    """purchaseInvoiceLine.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param account_id:
    :type account_id: str
    :param amount_excluding_tax:
    :type amount_excluding_tax: float
    :param amount_including_tax:
    :type amount_including_tax: float
    :param description:
    :type description: str
    :param discount_amount:
    :type discount_amount: float
    :param discount_applied_before_tax:
    :type discount_applied_before_tax: bool
    :param discount_percent:
    :type discount_percent: float
    :param document_id:
    :type document_id: str
    :param expected_receipt_date:
    :type expected_receipt_date: ~datetime.date
    :param invoice_discount_allocation:
    :type invoice_discount_allocation: float
    :param item_id:
    :type item_id: str
    :param line_type:
    :type line_type: str
    :param net_amount:
    :type net_amount: float
    :param net_amount_including_tax:
    :type net_amount_including_tax: float
    :param net_tax_amount:
    :type net_tax_amount: float
    :param quantity:
    :type quantity: float
    :param sequence:
    :type sequence: int
    :param tax_code:
    :type tax_code: str
    :param tax_percent:
    :type tax_percent: float
    :param total_tax_amount:
    :type total_tax_amount: float
    :param unit_cost:
    :type unit_cost: float
    :param account: account.
    :type account: ~financials.models.MicrosoftGraphAccount
    :param item: item.
    :type item: ~financials.models.MicrosoftGraphItem
    """

    _validation = {
        'sequence': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'account_id': {'key': 'accountId', 'type': 'str'},
        'amount_excluding_tax': {'key': 'amountExcludingTax', 'type': 'float'},
        'amount_including_tax': {'key': 'amountIncludingTax', 'type': 'float'},
        'description': {'key': 'description', 'type': 'str'},
        'discount_amount': {'key': 'discountAmount', 'type': 'float'},
        'discount_applied_before_tax': {'key': 'discountAppliedBeforeTax', 'type': 'bool'},
        'discount_percent': {'key': 'discountPercent', 'type': 'float'},
        'document_id': {'key': 'documentId', 'type': 'str'},
        'expected_receipt_date': {'key': 'expectedReceiptDate', 'type': 'date'},
        'invoice_discount_allocation': {'key': 'invoiceDiscountAllocation', 'type': 'float'},
        'item_id': {'key': 'itemId', 'type': 'str'},
        'line_type': {'key': 'lineType', 'type': 'str'},
        'net_amount': {'key': 'netAmount', 'type': 'float'},
        'net_amount_including_tax': {'key': 'netAmountIncludingTax', 'type': 'float'},
        'net_tax_amount': {'key': 'netTaxAmount', 'type': 'float'},
        'quantity': {'key': 'quantity', 'type': 'float'},
        'sequence': {'key': 'sequence', 'type': 'int'},
        'tax_code': {'key': 'taxCode', 'type': 'str'},
        'tax_percent': {'key': 'taxPercent', 'type': 'float'},
        'total_tax_amount': {'key': 'totalTaxAmount', 'type': 'float'},
        'unit_cost': {'key': 'unitCost', 'type': 'float'},
        'account': {'key': 'account', 'type': 'MicrosoftGraphAccount'},
        'item': {'key': 'item', 'type': 'MicrosoftGraphItem'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPurchaseInvoiceLine, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.account_id = kwargs.get('account_id', None)
        self.amount_excluding_tax = kwargs.get('amount_excluding_tax', None)
        self.amount_including_tax = kwargs.get('amount_including_tax', None)
        self.description = kwargs.get('description', None)
        self.discount_amount = kwargs.get('discount_amount', None)
        self.discount_applied_before_tax = kwargs.get('discount_applied_before_tax', None)
        self.discount_percent = kwargs.get('discount_percent', None)
        self.document_id = kwargs.get('document_id', None)
        self.expected_receipt_date = kwargs.get('expected_receipt_date', None)
        self.invoice_discount_allocation = kwargs.get('invoice_discount_allocation', None)
        self.item_id = kwargs.get('item_id', None)
        self.line_type = kwargs.get('line_type', None)
        self.net_amount = kwargs.get('net_amount', None)
        self.net_amount_including_tax = kwargs.get('net_amount_including_tax', None)
        self.net_tax_amount = kwargs.get('net_tax_amount', None)
        self.quantity = kwargs.get('quantity', None)
        self.sequence = kwargs.get('sequence', None)
        self.tax_code = kwargs.get('tax_code', None)
        self.tax_percent = kwargs.get('tax_percent', None)
        self.total_tax_amount = kwargs.get('total_tax_amount', None)
        self.unit_cost = kwargs.get('unit_cost', None)
        self.account = kwargs.get('account', None)
        self.item = kwargs.get('item', None)


class MicrosoftGraphSalesCreditMemo(MicrosoftGraphEntity):
    """salesCreditMemo.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param billing_postal_address: postalAddressType.
    :type billing_postal_address: ~financials.models.MicrosoftGraphPostalAddressType
    :param bill_to_customer_id:
    :type bill_to_customer_id: str
    :param bill_to_customer_number:
    :type bill_to_customer_number: str
    :param bill_to_name:
    :type bill_to_name: str
    :param credit_memo_date:
    :type credit_memo_date: ~datetime.date
    :param currency_code:
    :type currency_code: str
    :param currency_id:
    :type currency_id: str
    :param customer_id:
    :type customer_id: str
    :param customer_name:
    :type customer_name: str
    :param customer_number:
    :type customer_number: str
    :param discount_amount:
    :type discount_amount: float
    :param discount_applied_before_tax:
    :type discount_applied_before_tax: bool
    :param due_date:
    :type due_date: ~datetime.date
    :param email:
    :type email: str
    :param external_document_number:
    :type external_document_number: str
    :param invoice_id:
    :type invoice_id: str
    :param invoice_number:
    :type invoice_number: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param number:
    :type number: str
    :param payment_terms_id:
    :type payment_terms_id: str
    :param phone_number:
    :type phone_number: str
    :param prices_include_tax:
    :type prices_include_tax: bool
    :param salesperson:
    :type salesperson: str
    :param selling_postal_address: postalAddressType.
    :type selling_postal_address: ~financials.models.MicrosoftGraphPostalAddressType
    :param status:
    :type status: str
    :param total_amount_excluding_tax:
    :type total_amount_excluding_tax: float
    :param total_amount_including_tax:
    :type total_amount_including_tax: float
    :param total_tax_amount:
    :type total_tax_amount: float
    :param currency: currency.
    :type currency: ~financials.models.MicrosoftGraphCurrency
    :param customer: customer.
    :type customer: ~financials.models.MicrosoftGraphCustomer
    :param payment_term: paymentTerm.
    :type payment_term: ~financials.models.MicrosoftGraphPaymentTerm
    :param sales_credit_memo_lines:
    :type sales_credit_memo_lines: list[~financials.models.MicrosoftGraphSalesCreditMemoLine]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'billing_postal_address': {'key': 'billingPostalAddress', 'type': 'MicrosoftGraphPostalAddressType'},
        'bill_to_customer_id': {'key': 'billToCustomerId', 'type': 'str'},
        'bill_to_customer_number': {'key': 'billToCustomerNumber', 'type': 'str'},
        'bill_to_name': {'key': 'billToName', 'type': 'str'},
        'credit_memo_date': {'key': 'creditMemoDate', 'type': 'date'},
        'currency_code': {'key': 'currencyCode', 'type': 'str'},
        'currency_id': {'key': 'currencyId', 'type': 'str'},
        'customer_id': {'key': 'customerId', 'type': 'str'},
        'customer_name': {'key': 'customerName', 'type': 'str'},
        'customer_number': {'key': 'customerNumber', 'type': 'str'},
        'discount_amount': {'key': 'discountAmount', 'type': 'float'},
        'discount_applied_before_tax': {'key': 'discountAppliedBeforeTax', 'type': 'bool'},
        'due_date': {'key': 'dueDate', 'type': 'date'},
        'email': {'key': 'email', 'type': 'str'},
        'external_document_number': {'key': 'externalDocumentNumber', 'type': 'str'},
        'invoice_id': {'key': 'invoiceId', 'type': 'str'},
        'invoice_number': {'key': 'invoiceNumber', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'number': {'key': 'number', 'type': 'str'},
        'payment_terms_id': {'key': 'paymentTermsId', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'prices_include_tax': {'key': 'pricesIncludeTax', 'type': 'bool'},
        'salesperson': {'key': 'salesperson', 'type': 'str'},
        'selling_postal_address': {'key': 'sellingPostalAddress', 'type': 'MicrosoftGraphPostalAddressType'},
        'status': {'key': 'status', 'type': 'str'},
        'total_amount_excluding_tax': {'key': 'totalAmountExcludingTax', 'type': 'float'},
        'total_amount_including_tax': {'key': 'totalAmountIncludingTax', 'type': 'float'},
        'total_tax_amount': {'key': 'totalTaxAmount', 'type': 'float'},
        'currency': {'key': 'currency', 'type': 'MicrosoftGraphCurrency'},
        'customer': {'key': 'customer', 'type': 'MicrosoftGraphCustomer'},
        'payment_term': {'key': 'paymentTerm', 'type': 'MicrosoftGraphPaymentTerm'},
        'sales_credit_memo_lines': {'key': 'salesCreditMemoLines', 'type': '[MicrosoftGraphSalesCreditMemoLine]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSalesCreditMemo, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.billing_postal_address = kwargs.get('billing_postal_address', None)
        self.bill_to_customer_id = kwargs.get('bill_to_customer_id', None)
        self.bill_to_customer_number = kwargs.get('bill_to_customer_number', None)
        self.bill_to_name = kwargs.get('bill_to_name', None)
        self.credit_memo_date = kwargs.get('credit_memo_date', None)
        self.currency_code = kwargs.get('currency_code', None)
        self.currency_id = kwargs.get('currency_id', None)
        self.customer_id = kwargs.get('customer_id', None)
        self.customer_name = kwargs.get('customer_name', None)
        self.customer_number = kwargs.get('customer_number', None)
        self.discount_amount = kwargs.get('discount_amount', None)
        self.discount_applied_before_tax = kwargs.get('discount_applied_before_tax', None)
        self.due_date = kwargs.get('due_date', None)
        self.email = kwargs.get('email', None)
        self.external_document_number = kwargs.get('external_document_number', None)
        self.invoice_id = kwargs.get('invoice_id', None)
        self.invoice_number = kwargs.get('invoice_number', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.number = kwargs.get('number', None)
        self.payment_terms_id = kwargs.get('payment_terms_id', None)
        self.phone_number = kwargs.get('phone_number', None)
        self.prices_include_tax = kwargs.get('prices_include_tax', None)
        self.salesperson = kwargs.get('salesperson', None)
        self.selling_postal_address = kwargs.get('selling_postal_address', None)
        self.status = kwargs.get('status', None)
        self.total_amount_excluding_tax = kwargs.get('total_amount_excluding_tax', None)
        self.total_amount_including_tax = kwargs.get('total_amount_including_tax', None)
        self.total_tax_amount = kwargs.get('total_tax_amount', None)
        self.currency = kwargs.get('currency', None)
        self.customer = kwargs.get('customer', None)
        self.payment_term = kwargs.get('payment_term', None)
        self.sales_credit_memo_lines = kwargs.get('sales_credit_memo_lines', None)


class MicrosoftGraphSalesCreditMemoLine(MicrosoftGraphEntity):
    """salesCreditMemoLine.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param account_id:
    :type account_id: str
    :param amount_excluding_tax:
    :type amount_excluding_tax: float
    :param amount_including_tax:
    :type amount_including_tax: float
    :param description:
    :type description: str
    :param discount_amount:
    :type discount_amount: float
    :param discount_applied_before_tax:
    :type discount_applied_before_tax: bool
    :param discount_percent:
    :type discount_percent: float
    :param document_id:
    :type document_id: str
    :param invoice_discount_allocation:
    :type invoice_discount_allocation: float
    :param item_id:
    :type item_id: str
    :param line_type:
    :type line_type: str
    :param net_amount:
    :type net_amount: float
    :param net_amount_including_tax:
    :type net_amount_including_tax: float
    :param net_tax_amount:
    :type net_tax_amount: float
    :param quantity:
    :type quantity: float
    :param sequence:
    :type sequence: int
    :param shipment_date:
    :type shipment_date: ~datetime.date
    :param tax_code:
    :type tax_code: str
    :param tax_percent:
    :type tax_percent: float
    :param total_tax_amount:
    :type total_tax_amount: float
    :param unit_of_measure_id:
    :type unit_of_measure_id: str
    :param unit_price:
    :type unit_price: float
    :param account: account.
    :type account: ~financials.models.MicrosoftGraphAccount
    :param item: item.
    :type item: ~financials.models.MicrosoftGraphItem
    """

    _validation = {
        'sequence': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'account_id': {'key': 'accountId', 'type': 'str'},
        'amount_excluding_tax': {'key': 'amountExcludingTax', 'type': 'float'},
        'amount_including_tax': {'key': 'amountIncludingTax', 'type': 'float'},
        'description': {'key': 'description', 'type': 'str'},
        'discount_amount': {'key': 'discountAmount', 'type': 'float'},
        'discount_applied_before_tax': {'key': 'discountAppliedBeforeTax', 'type': 'bool'},
        'discount_percent': {'key': 'discountPercent', 'type': 'float'},
        'document_id': {'key': 'documentId', 'type': 'str'},
        'invoice_discount_allocation': {'key': 'invoiceDiscountAllocation', 'type': 'float'},
        'item_id': {'key': 'itemId', 'type': 'str'},
        'line_type': {'key': 'lineType', 'type': 'str'},
        'net_amount': {'key': 'netAmount', 'type': 'float'},
        'net_amount_including_tax': {'key': 'netAmountIncludingTax', 'type': 'float'},
        'net_tax_amount': {'key': 'netTaxAmount', 'type': 'float'},
        'quantity': {'key': 'quantity', 'type': 'float'},
        'sequence': {'key': 'sequence', 'type': 'int'},
        'shipment_date': {'key': 'shipmentDate', 'type': 'date'},
        'tax_code': {'key': 'taxCode', 'type': 'str'},
        'tax_percent': {'key': 'taxPercent', 'type': 'float'},
        'total_tax_amount': {'key': 'totalTaxAmount', 'type': 'float'},
        'unit_of_measure_id': {'key': 'unitOfMeasureId', 'type': 'str'},
        'unit_price': {'key': 'unitPrice', 'type': 'float'},
        'account': {'key': 'account', 'type': 'MicrosoftGraphAccount'},
        'item': {'key': 'item', 'type': 'MicrosoftGraphItem'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSalesCreditMemoLine, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.account_id = kwargs.get('account_id', None)
        self.amount_excluding_tax = kwargs.get('amount_excluding_tax', None)
        self.amount_including_tax = kwargs.get('amount_including_tax', None)
        self.description = kwargs.get('description', None)
        self.discount_amount = kwargs.get('discount_amount', None)
        self.discount_applied_before_tax = kwargs.get('discount_applied_before_tax', None)
        self.discount_percent = kwargs.get('discount_percent', None)
        self.document_id = kwargs.get('document_id', None)
        self.invoice_discount_allocation = kwargs.get('invoice_discount_allocation', None)
        self.item_id = kwargs.get('item_id', None)
        self.line_type = kwargs.get('line_type', None)
        self.net_amount = kwargs.get('net_amount', None)
        self.net_amount_including_tax = kwargs.get('net_amount_including_tax', None)
        self.net_tax_amount = kwargs.get('net_tax_amount', None)
        self.quantity = kwargs.get('quantity', None)
        self.sequence = kwargs.get('sequence', None)
        self.shipment_date = kwargs.get('shipment_date', None)
        self.tax_code = kwargs.get('tax_code', None)
        self.tax_percent = kwargs.get('tax_percent', None)
        self.total_tax_amount = kwargs.get('total_tax_amount', None)
        self.unit_of_measure_id = kwargs.get('unit_of_measure_id', None)
        self.unit_price = kwargs.get('unit_price', None)
        self.account = kwargs.get('account', None)
        self.item = kwargs.get('item', None)


class MicrosoftGraphSalesInvoice(MicrosoftGraphEntity):
    """salesInvoice.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param billing_postal_address: postalAddressType.
    :type billing_postal_address: ~financials.models.MicrosoftGraphPostalAddressType
    :param bill_to_customer_id:
    :type bill_to_customer_id: str
    :param bill_to_customer_number:
    :type bill_to_customer_number: str
    :param bill_to_name:
    :type bill_to_name: str
    :param currency_code:
    :type currency_code: str
    :param currency_id:
    :type currency_id: str
    :param customer_id:
    :type customer_id: str
    :param customer_name:
    :type customer_name: str
    :param customer_number:
    :type customer_number: str
    :param customer_purchase_order_reference:
    :type customer_purchase_order_reference: str
    :param discount_amount:
    :type discount_amount: float
    :param discount_applied_before_tax:
    :type discount_applied_before_tax: bool
    :param due_date:
    :type due_date: ~datetime.date
    :param email:
    :type email: str
    :param external_document_number:
    :type external_document_number: str
    :param invoice_date:
    :type invoice_date: ~datetime.date
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param number:
    :type number: str
    :param order_id:
    :type order_id: str
    :param order_number:
    :type order_number: str
    :param payment_terms_id:
    :type payment_terms_id: str
    :param phone_number:
    :type phone_number: str
    :param prices_include_tax:
    :type prices_include_tax: bool
    :param salesperson:
    :type salesperson: str
    :param selling_postal_address: postalAddressType.
    :type selling_postal_address: ~financials.models.MicrosoftGraphPostalAddressType
    :param shipment_method_id:
    :type shipment_method_id: str
    :param shipping_postal_address: postalAddressType.
    :type shipping_postal_address: ~financials.models.MicrosoftGraphPostalAddressType
    :param ship_to_contact:
    :type ship_to_contact: str
    :param ship_to_name:
    :type ship_to_name: str
    :param status:
    :type status: str
    :param total_amount_excluding_tax:
    :type total_amount_excluding_tax: float
    :param total_amount_including_tax:
    :type total_amount_including_tax: float
    :param total_tax_amount:
    :type total_tax_amount: float
    :param currency: currency.
    :type currency: ~financials.models.MicrosoftGraphCurrency
    :param customer: customer.
    :type customer: ~financials.models.MicrosoftGraphCustomer
    :param payment_term: paymentTerm.
    :type payment_term: ~financials.models.MicrosoftGraphPaymentTerm
    :param sales_invoice_lines:
    :type sales_invoice_lines: list[~financials.models.MicrosoftGraphSalesInvoiceLine]
    :param shipment_method: shipmentMethod.
    :type shipment_method: ~financials.models.MicrosoftGraphShipmentMethod
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'billing_postal_address': {'key': 'billingPostalAddress', 'type': 'MicrosoftGraphPostalAddressType'},
        'bill_to_customer_id': {'key': 'billToCustomerId', 'type': 'str'},
        'bill_to_customer_number': {'key': 'billToCustomerNumber', 'type': 'str'},
        'bill_to_name': {'key': 'billToName', 'type': 'str'},
        'currency_code': {'key': 'currencyCode', 'type': 'str'},
        'currency_id': {'key': 'currencyId', 'type': 'str'},
        'customer_id': {'key': 'customerId', 'type': 'str'},
        'customer_name': {'key': 'customerName', 'type': 'str'},
        'customer_number': {'key': 'customerNumber', 'type': 'str'},
        'customer_purchase_order_reference': {'key': 'customerPurchaseOrderReference', 'type': 'str'},
        'discount_amount': {'key': 'discountAmount', 'type': 'float'},
        'discount_applied_before_tax': {'key': 'discountAppliedBeforeTax', 'type': 'bool'},
        'due_date': {'key': 'dueDate', 'type': 'date'},
        'email': {'key': 'email', 'type': 'str'},
        'external_document_number': {'key': 'externalDocumentNumber', 'type': 'str'},
        'invoice_date': {'key': 'invoiceDate', 'type': 'date'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'number': {'key': 'number', 'type': 'str'},
        'order_id': {'key': 'orderId', 'type': 'str'},
        'order_number': {'key': 'orderNumber', 'type': 'str'},
        'payment_terms_id': {'key': 'paymentTermsId', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'prices_include_tax': {'key': 'pricesIncludeTax', 'type': 'bool'},
        'salesperson': {'key': 'salesperson', 'type': 'str'},
        'selling_postal_address': {'key': 'sellingPostalAddress', 'type': 'MicrosoftGraphPostalAddressType'},
        'shipment_method_id': {'key': 'shipmentMethodId', 'type': 'str'},
        'shipping_postal_address': {'key': 'shippingPostalAddress', 'type': 'MicrosoftGraphPostalAddressType'},
        'ship_to_contact': {'key': 'shipToContact', 'type': 'str'},
        'ship_to_name': {'key': 'shipToName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'total_amount_excluding_tax': {'key': 'totalAmountExcludingTax', 'type': 'float'},
        'total_amount_including_tax': {'key': 'totalAmountIncludingTax', 'type': 'float'},
        'total_tax_amount': {'key': 'totalTaxAmount', 'type': 'float'},
        'currency': {'key': 'currency', 'type': 'MicrosoftGraphCurrency'},
        'customer': {'key': 'customer', 'type': 'MicrosoftGraphCustomer'},
        'payment_term': {'key': 'paymentTerm', 'type': 'MicrosoftGraphPaymentTerm'},
        'sales_invoice_lines': {'key': 'salesInvoiceLines', 'type': '[MicrosoftGraphSalesInvoiceLine]'},
        'shipment_method': {'key': 'shipmentMethod', 'type': 'MicrosoftGraphShipmentMethod'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSalesInvoice, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.billing_postal_address = kwargs.get('billing_postal_address', None)
        self.bill_to_customer_id = kwargs.get('bill_to_customer_id', None)
        self.bill_to_customer_number = kwargs.get('bill_to_customer_number', None)
        self.bill_to_name = kwargs.get('bill_to_name', None)
        self.currency_code = kwargs.get('currency_code', None)
        self.currency_id = kwargs.get('currency_id', None)
        self.customer_id = kwargs.get('customer_id', None)
        self.customer_name = kwargs.get('customer_name', None)
        self.customer_number = kwargs.get('customer_number', None)
        self.customer_purchase_order_reference = kwargs.get('customer_purchase_order_reference', None)
        self.discount_amount = kwargs.get('discount_amount', None)
        self.discount_applied_before_tax = kwargs.get('discount_applied_before_tax', None)
        self.due_date = kwargs.get('due_date', None)
        self.email = kwargs.get('email', None)
        self.external_document_number = kwargs.get('external_document_number', None)
        self.invoice_date = kwargs.get('invoice_date', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.number = kwargs.get('number', None)
        self.order_id = kwargs.get('order_id', None)
        self.order_number = kwargs.get('order_number', None)
        self.payment_terms_id = kwargs.get('payment_terms_id', None)
        self.phone_number = kwargs.get('phone_number', None)
        self.prices_include_tax = kwargs.get('prices_include_tax', None)
        self.salesperson = kwargs.get('salesperson', None)
        self.selling_postal_address = kwargs.get('selling_postal_address', None)
        self.shipment_method_id = kwargs.get('shipment_method_id', None)
        self.shipping_postal_address = kwargs.get('shipping_postal_address', None)
        self.ship_to_contact = kwargs.get('ship_to_contact', None)
        self.ship_to_name = kwargs.get('ship_to_name', None)
        self.status = kwargs.get('status', None)
        self.total_amount_excluding_tax = kwargs.get('total_amount_excluding_tax', None)
        self.total_amount_including_tax = kwargs.get('total_amount_including_tax', None)
        self.total_tax_amount = kwargs.get('total_tax_amount', None)
        self.currency = kwargs.get('currency', None)
        self.customer = kwargs.get('customer', None)
        self.payment_term = kwargs.get('payment_term', None)
        self.sales_invoice_lines = kwargs.get('sales_invoice_lines', None)
        self.shipment_method = kwargs.get('shipment_method', None)


class MicrosoftGraphSalesInvoiceLine(MicrosoftGraphEntity):
    """salesInvoiceLine.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param account_id:
    :type account_id: str
    :param amount_excluding_tax:
    :type amount_excluding_tax: float
    :param amount_including_tax:
    :type amount_including_tax: float
    :param description:
    :type description: str
    :param discount_amount:
    :type discount_amount: float
    :param discount_applied_before_tax:
    :type discount_applied_before_tax: bool
    :param discount_percent:
    :type discount_percent: float
    :param document_id:
    :type document_id: str
    :param invoice_discount_allocation:
    :type invoice_discount_allocation: float
    :param item_id:
    :type item_id: str
    :param line_type:
    :type line_type: str
    :param net_amount:
    :type net_amount: float
    :param net_amount_including_tax:
    :type net_amount_including_tax: float
    :param net_tax_amount:
    :type net_tax_amount: float
    :param quantity:
    :type quantity: float
    :param sequence:
    :type sequence: int
    :param shipment_date:
    :type shipment_date: ~datetime.date
    :param tax_code:
    :type tax_code: str
    :param tax_percent:
    :type tax_percent: float
    :param total_tax_amount:
    :type total_tax_amount: float
    :param unit_of_measure_id:
    :type unit_of_measure_id: str
    :param unit_price:
    :type unit_price: float
    :param account: account.
    :type account: ~financials.models.MicrosoftGraphAccount
    :param item: item.
    :type item: ~financials.models.MicrosoftGraphItem
    """

    _validation = {
        'sequence': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'account_id': {'key': 'accountId', 'type': 'str'},
        'amount_excluding_tax': {'key': 'amountExcludingTax', 'type': 'float'},
        'amount_including_tax': {'key': 'amountIncludingTax', 'type': 'float'},
        'description': {'key': 'description', 'type': 'str'},
        'discount_amount': {'key': 'discountAmount', 'type': 'float'},
        'discount_applied_before_tax': {'key': 'discountAppliedBeforeTax', 'type': 'bool'},
        'discount_percent': {'key': 'discountPercent', 'type': 'float'},
        'document_id': {'key': 'documentId', 'type': 'str'},
        'invoice_discount_allocation': {'key': 'invoiceDiscountAllocation', 'type': 'float'},
        'item_id': {'key': 'itemId', 'type': 'str'},
        'line_type': {'key': 'lineType', 'type': 'str'},
        'net_amount': {'key': 'netAmount', 'type': 'float'},
        'net_amount_including_tax': {'key': 'netAmountIncludingTax', 'type': 'float'},
        'net_tax_amount': {'key': 'netTaxAmount', 'type': 'float'},
        'quantity': {'key': 'quantity', 'type': 'float'},
        'sequence': {'key': 'sequence', 'type': 'int'},
        'shipment_date': {'key': 'shipmentDate', 'type': 'date'},
        'tax_code': {'key': 'taxCode', 'type': 'str'},
        'tax_percent': {'key': 'taxPercent', 'type': 'float'},
        'total_tax_amount': {'key': 'totalTaxAmount', 'type': 'float'},
        'unit_of_measure_id': {'key': 'unitOfMeasureId', 'type': 'str'},
        'unit_price': {'key': 'unitPrice', 'type': 'float'},
        'account': {'key': 'account', 'type': 'MicrosoftGraphAccount'},
        'item': {'key': 'item', 'type': 'MicrosoftGraphItem'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSalesInvoiceLine, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.account_id = kwargs.get('account_id', None)
        self.amount_excluding_tax = kwargs.get('amount_excluding_tax', None)
        self.amount_including_tax = kwargs.get('amount_including_tax', None)
        self.description = kwargs.get('description', None)
        self.discount_amount = kwargs.get('discount_amount', None)
        self.discount_applied_before_tax = kwargs.get('discount_applied_before_tax', None)
        self.discount_percent = kwargs.get('discount_percent', None)
        self.document_id = kwargs.get('document_id', None)
        self.invoice_discount_allocation = kwargs.get('invoice_discount_allocation', None)
        self.item_id = kwargs.get('item_id', None)
        self.line_type = kwargs.get('line_type', None)
        self.net_amount = kwargs.get('net_amount', None)
        self.net_amount_including_tax = kwargs.get('net_amount_including_tax', None)
        self.net_tax_amount = kwargs.get('net_tax_amount', None)
        self.quantity = kwargs.get('quantity', None)
        self.sequence = kwargs.get('sequence', None)
        self.shipment_date = kwargs.get('shipment_date', None)
        self.tax_code = kwargs.get('tax_code', None)
        self.tax_percent = kwargs.get('tax_percent', None)
        self.total_tax_amount = kwargs.get('total_tax_amount', None)
        self.unit_of_measure_id = kwargs.get('unit_of_measure_id', None)
        self.unit_price = kwargs.get('unit_price', None)
        self.account = kwargs.get('account', None)
        self.item = kwargs.get('item', None)


class MicrosoftGraphSalesOrder(MicrosoftGraphEntity):
    """salesOrder.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param billing_postal_address: postalAddressType.
    :type billing_postal_address: ~financials.models.MicrosoftGraphPostalAddressType
    :param bill_to_customer_id:
    :type bill_to_customer_id: str
    :param bill_to_customer_number:
    :type bill_to_customer_number: str
    :param bill_to_name:
    :type bill_to_name: str
    :param currency_code:
    :type currency_code: str
    :param currency_id:
    :type currency_id: str
    :param customer_id:
    :type customer_id: str
    :param customer_name:
    :type customer_name: str
    :param customer_number:
    :type customer_number: str
    :param discount_amount:
    :type discount_amount: float
    :param discount_applied_before_tax:
    :type discount_applied_before_tax: bool
    :param email:
    :type email: str
    :param external_document_number:
    :type external_document_number: str
    :param fully_shipped:
    :type fully_shipped: bool
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param number:
    :type number: str
    :param order_date:
    :type order_date: ~datetime.date
    :param partial_shipping:
    :type partial_shipping: bool
    :param payment_terms_id:
    :type payment_terms_id: str
    :param phone_number:
    :type phone_number: str
    :param prices_include_tax:
    :type prices_include_tax: bool
    :param requested_delivery_date:
    :type requested_delivery_date: ~datetime.date
    :param salesperson:
    :type salesperson: str
    :param selling_postal_address: postalAddressType.
    :type selling_postal_address: ~financials.models.MicrosoftGraphPostalAddressType
    :param shipping_postal_address: postalAddressType.
    :type shipping_postal_address: ~financials.models.MicrosoftGraphPostalAddressType
    :param ship_to_contact:
    :type ship_to_contact: str
    :param ship_to_name:
    :type ship_to_name: str
    :param status:
    :type status: str
    :param total_amount_excluding_tax:
    :type total_amount_excluding_tax: float
    :param total_amount_including_tax:
    :type total_amount_including_tax: float
    :param total_tax_amount:
    :type total_tax_amount: float
    :param currency: currency.
    :type currency: ~financials.models.MicrosoftGraphCurrency
    :param customer: customer.
    :type customer: ~financials.models.MicrosoftGraphCustomer
    :param payment_term: paymentTerm.
    :type payment_term: ~financials.models.MicrosoftGraphPaymentTerm
    :param sales_order_lines:
    :type sales_order_lines: list[~financials.models.MicrosoftGraphSalesOrderLine]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'billing_postal_address': {'key': 'billingPostalAddress', 'type': 'MicrosoftGraphPostalAddressType'},
        'bill_to_customer_id': {'key': 'billToCustomerId', 'type': 'str'},
        'bill_to_customer_number': {'key': 'billToCustomerNumber', 'type': 'str'},
        'bill_to_name': {'key': 'billToName', 'type': 'str'},
        'currency_code': {'key': 'currencyCode', 'type': 'str'},
        'currency_id': {'key': 'currencyId', 'type': 'str'},
        'customer_id': {'key': 'customerId', 'type': 'str'},
        'customer_name': {'key': 'customerName', 'type': 'str'},
        'customer_number': {'key': 'customerNumber', 'type': 'str'},
        'discount_amount': {'key': 'discountAmount', 'type': 'float'},
        'discount_applied_before_tax': {'key': 'discountAppliedBeforeTax', 'type': 'bool'},
        'email': {'key': 'email', 'type': 'str'},
        'external_document_number': {'key': 'externalDocumentNumber', 'type': 'str'},
        'fully_shipped': {'key': 'fullyShipped', 'type': 'bool'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'number': {'key': 'number', 'type': 'str'},
        'order_date': {'key': 'orderDate', 'type': 'date'},
        'partial_shipping': {'key': 'partialShipping', 'type': 'bool'},
        'payment_terms_id': {'key': 'paymentTermsId', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'prices_include_tax': {'key': 'pricesIncludeTax', 'type': 'bool'},
        'requested_delivery_date': {'key': 'requestedDeliveryDate', 'type': 'date'},
        'salesperson': {'key': 'salesperson', 'type': 'str'},
        'selling_postal_address': {'key': 'sellingPostalAddress', 'type': 'MicrosoftGraphPostalAddressType'},
        'shipping_postal_address': {'key': 'shippingPostalAddress', 'type': 'MicrosoftGraphPostalAddressType'},
        'ship_to_contact': {'key': 'shipToContact', 'type': 'str'},
        'ship_to_name': {'key': 'shipToName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'total_amount_excluding_tax': {'key': 'totalAmountExcludingTax', 'type': 'float'},
        'total_amount_including_tax': {'key': 'totalAmountIncludingTax', 'type': 'float'},
        'total_tax_amount': {'key': 'totalTaxAmount', 'type': 'float'},
        'currency': {'key': 'currency', 'type': 'MicrosoftGraphCurrency'},
        'customer': {'key': 'customer', 'type': 'MicrosoftGraphCustomer'},
        'payment_term': {'key': 'paymentTerm', 'type': 'MicrosoftGraphPaymentTerm'},
        'sales_order_lines': {'key': 'salesOrderLines', 'type': '[MicrosoftGraphSalesOrderLine]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSalesOrder, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.billing_postal_address = kwargs.get('billing_postal_address', None)
        self.bill_to_customer_id = kwargs.get('bill_to_customer_id', None)
        self.bill_to_customer_number = kwargs.get('bill_to_customer_number', None)
        self.bill_to_name = kwargs.get('bill_to_name', None)
        self.currency_code = kwargs.get('currency_code', None)
        self.currency_id = kwargs.get('currency_id', None)
        self.customer_id = kwargs.get('customer_id', None)
        self.customer_name = kwargs.get('customer_name', None)
        self.customer_number = kwargs.get('customer_number', None)
        self.discount_amount = kwargs.get('discount_amount', None)
        self.discount_applied_before_tax = kwargs.get('discount_applied_before_tax', None)
        self.email = kwargs.get('email', None)
        self.external_document_number = kwargs.get('external_document_number', None)
        self.fully_shipped = kwargs.get('fully_shipped', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.number = kwargs.get('number', None)
        self.order_date = kwargs.get('order_date', None)
        self.partial_shipping = kwargs.get('partial_shipping', None)
        self.payment_terms_id = kwargs.get('payment_terms_id', None)
        self.phone_number = kwargs.get('phone_number', None)
        self.prices_include_tax = kwargs.get('prices_include_tax', None)
        self.requested_delivery_date = kwargs.get('requested_delivery_date', None)
        self.salesperson = kwargs.get('salesperson', None)
        self.selling_postal_address = kwargs.get('selling_postal_address', None)
        self.shipping_postal_address = kwargs.get('shipping_postal_address', None)
        self.ship_to_contact = kwargs.get('ship_to_contact', None)
        self.ship_to_name = kwargs.get('ship_to_name', None)
        self.status = kwargs.get('status', None)
        self.total_amount_excluding_tax = kwargs.get('total_amount_excluding_tax', None)
        self.total_amount_including_tax = kwargs.get('total_amount_including_tax', None)
        self.total_tax_amount = kwargs.get('total_tax_amount', None)
        self.currency = kwargs.get('currency', None)
        self.customer = kwargs.get('customer', None)
        self.payment_term = kwargs.get('payment_term', None)
        self.sales_order_lines = kwargs.get('sales_order_lines', None)


class MicrosoftGraphSalesOrderLine(MicrosoftGraphEntity):
    """salesOrderLine.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param account_id:
    :type account_id: str
    :param amount_excluding_tax:
    :type amount_excluding_tax: float
    :param amount_including_tax:
    :type amount_including_tax: float
    :param description:
    :type description: str
    :param discount_amount:
    :type discount_amount: float
    :param discount_applied_before_tax:
    :type discount_applied_before_tax: bool
    :param discount_percent:
    :type discount_percent: float
    :param document_id:
    :type document_id: str
    :param invoice_discount_allocation:
    :type invoice_discount_allocation: float
    :param invoiced_quantity:
    :type invoiced_quantity: float
    :param invoice_quantity:
    :type invoice_quantity: float
    :param item_id:
    :type item_id: str
    :param line_type:
    :type line_type: str
    :param net_amount:
    :type net_amount: float
    :param net_amount_including_tax:
    :type net_amount_including_tax: float
    :param net_tax_amount:
    :type net_tax_amount: float
    :param quantity:
    :type quantity: float
    :param sequence:
    :type sequence: int
    :param shipment_date:
    :type shipment_date: ~datetime.date
    :param shipped_quantity:
    :type shipped_quantity: float
    :param ship_quantity:
    :type ship_quantity: float
    :param tax_code:
    :type tax_code: str
    :param tax_percent:
    :type tax_percent: float
    :param total_tax_amount:
    :type total_tax_amount: float
    :param unit_of_measure_id:
    :type unit_of_measure_id: str
    :param unit_price:
    :type unit_price: float
    :param account: account.
    :type account: ~financials.models.MicrosoftGraphAccount
    :param item: item.
    :type item: ~financials.models.MicrosoftGraphItem
    """

    _validation = {
        'sequence': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'account_id': {'key': 'accountId', 'type': 'str'},
        'amount_excluding_tax': {'key': 'amountExcludingTax', 'type': 'float'},
        'amount_including_tax': {'key': 'amountIncludingTax', 'type': 'float'},
        'description': {'key': 'description', 'type': 'str'},
        'discount_amount': {'key': 'discountAmount', 'type': 'float'},
        'discount_applied_before_tax': {'key': 'discountAppliedBeforeTax', 'type': 'bool'},
        'discount_percent': {'key': 'discountPercent', 'type': 'float'},
        'document_id': {'key': 'documentId', 'type': 'str'},
        'invoice_discount_allocation': {'key': 'invoiceDiscountAllocation', 'type': 'float'},
        'invoiced_quantity': {'key': 'invoicedQuantity', 'type': 'float'},
        'invoice_quantity': {'key': 'invoiceQuantity', 'type': 'float'},
        'item_id': {'key': 'itemId', 'type': 'str'},
        'line_type': {'key': 'lineType', 'type': 'str'},
        'net_amount': {'key': 'netAmount', 'type': 'float'},
        'net_amount_including_tax': {'key': 'netAmountIncludingTax', 'type': 'float'},
        'net_tax_amount': {'key': 'netTaxAmount', 'type': 'float'},
        'quantity': {'key': 'quantity', 'type': 'float'},
        'sequence': {'key': 'sequence', 'type': 'int'},
        'shipment_date': {'key': 'shipmentDate', 'type': 'date'},
        'shipped_quantity': {'key': 'shippedQuantity', 'type': 'float'},
        'ship_quantity': {'key': 'shipQuantity', 'type': 'float'},
        'tax_code': {'key': 'taxCode', 'type': 'str'},
        'tax_percent': {'key': 'taxPercent', 'type': 'float'},
        'total_tax_amount': {'key': 'totalTaxAmount', 'type': 'float'},
        'unit_of_measure_id': {'key': 'unitOfMeasureId', 'type': 'str'},
        'unit_price': {'key': 'unitPrice', 'type': 'float'},
        'account': {'key': 'account', 'type': 'MicrosoftGraphAccount'},
        'item': {'key': 'item', 'type': 'MicrosoftGraphItem'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSalesOrderLine, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.account_id = kwargs.get('account_id', None)
        self.amount_excluding_tax = kwargs.get('amount_excluding_tax', None)
        self.amount_including_tax = kwargs.get('amount_including_tax', None)
        self.description = kwargs.get('description', None)
        self.discount_amount = kwargs.get('discount_amount', None)
        self.discount_applied_before_tax = kwargs.get('discount_applied_before_tax', None)
        self.discount_percent = kwargs.get('discount_percent', None)
        self.document_id = kwargs.get('document_id', None)
        self.invoice_discount_allocation = kwargs.get('invoice_discount_allocation', None)
        self.invoiced_quantity = kwargs.get('invoiced_quantity', None)
        self.invoice_quantity = kwargs.get('invoice_quantity', None)
        self.item_id = kwargs.get('item_id', None)
        self.line_type = kwargs.get('line_type', None)
        self.net_amount = kwargs.get('net_amount', None)
        self.net_amount_including_tax = kwargs.get('net_amount_including_tax', None)
        self.net_tax_amount = kwargs.get('net_tax_amount', None)
        self.quantity = kwargs.get('quantity', None)
        self.sequence = kwargs.get('sequence', None)
        self.shipment_date = kwargs.get('shipment_date', None)
        self.shipped_quantity = kwargs.get('shipped_quantity', None)
        self.ship_quantity = kwargs.get('ship_quantity', None)
        self.tax_code = kwargs.get('tax_code', None)
        self.tax_percent = kwargs.get('tax_percent', None)
        self.total_tax_amount = kwargs.get('total_tax_amount', None)
        self.unit_of_measure_id = kwargs.get('unit_of_measure_id', None)
        self.unit_price = kwargs.get('unit_price', None)
        self.account = kwargs.get('account', None)
        self.item = kwargs.get('item', None)


class MicrosoftGraphSalesQuote(MicrosoftGraphEntity):
    """salesQuote.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param accepted_date:
    :type accepted_date: ~datetime.date
    :param billing_postal_address: postalAddressType.
    :type billing_postal_address: ~financials.models.MicrosoftGraphPostalAddressType
    :param bill_to_customer_id:
    :type bill_to_customer_id: str
    :param bill_to_customer_number:
    :type bill_to_customer_number: str
    :param bill_to_name:
    :type bill_to_name: str
    :param currency_code:
    :type currency_code: str
    :param currency_id:
    :type currency_id: str
    :param customer_id:
    :type customer_id: str
    :param customer_name:
    :type customer_name: str
    :param customer_number:
    :type customer_number: str
    :param discount_amount:
    :type discount_amount: float
    :param document_date:
    :type document_date: ~datetime.date
    :param due_date:
    :type due_date: ~datetime.date
    :param email:
    :type email: str
    :param external_document_number:
    :type external_document_number: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param number:
    :type number: str
    :param payment_terms_id:
    :type payment_terms_id: str
    :param phone_number:
    :type phone_number: str
    :param salesperson:
    :type salesperson: str
    :param selling_postal_address: postalAddressType.
    :type selling_postal_address: ~financials.models.MicrosoftGraphPostalAddressType
    :param sent_date:
    :type sent_date: ~datetime.datetime
    :param shipment_method_id:
    :type shipment_method_id: str
    :param shipping_postal_address: postalAddressType.
    :type shipping_postal_address: ~financials.models.MicrosoftGraphPostalAddressType
    :param ship_to_contact:
    :type ship_to_contact: str
    :param ship_to_name:
    :type ship_to_name: str
    :param status:
    :type status: str
    :param total_amount_excluding_tax:
    :type total_amount_excluding_tax: float
    :param total_amount_including_tax:
    :type total_amount_including_tax: float
    :param total_tax_amount:
    :type total_tax_amount: float
    :param valid_until_date:
    :type valid_until_date: ~datetime.date
    :param currency: currency.
    :type currency: ~financials.models.MicrosoftGraphCurrency
    :param customer: customer.
    :type customer: ~financials.models.MicrosoftGraphCustomer
    :param payment_term: paymentTerm.
    :type payment_term: ~financials.models.MicrosoftGraphPaymentTerm
    :param sales_quote_lines:
    :type sales_quote_lines: list[~financials.models.MicrosoftGraphSalesQuoteLine]
    :param shipment_method: shipmentMethod.
    :type shipment_method: ~financials.models.MicrosoftGraphShipmentMethod
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'accepted_date': {'key': 'acceptedDate', 'type': 'date'},
        'billing_postal_address': {'key': 'billingPostalAddress', 'type': 'MicrosoftGraphPostalAddressType'},
        'bill_to_customer_id': {'key': 'billToCustomerId', 'type': 'str'},
        'bill_to_customer_number': {'key': 'billToCustomerNumber', 'type': 'str'},
        'bill_to_name': {'key': 'billToName', 'type': 'str'},
        'currency_code': {'key': 'currencyCode', 'type': 'str'},
        'currency_id': {'key': 'currencyId', 'type': 'str'},
        'customer_id': {'key': 'customerId', 'type': 'str'},
        'customer_name': {'key': 'customerName', 'type': 'str'},
        'customer_number': {'key': 'customerNumber', 'type': 'str'},
        'discount_amount': {'key': 'discountAmount', 'type': 'float'},
        'document_date': {'key': 'documentDate', 'type': 'date'},
        'due_date': {'key': 'dueDate', 'type': 'date'},
        'email': {'key': 'email', 'type': 'str'},
        'external_document_number': {'key': 'externalDocumentNumber', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'number': {'key': 'number', 'type': 'str'},
        'payment_terms_id': {'key': 'paymentTermsId', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'salesperson': {'key': 'salesperson', 'type': 'str'},
        'selling_postal_address': {'key': 'sellingPostalAddress', 'type': 'MicrosoftGraphPostalAddressType'},
        'sent_date': {'key': 'sentDate', 'type': 'iso-8601'},
        'shipment_method_id': {'key': 'shipmentMethodId', 'type': 'str'},
        'shipping_postal_address': {'key': 'shippingPostalAddress', 'type': 'MicrosoftGraphPostalAddressType'},
        'ship_to_contact': {'key': 'shipToContact', 'type': 'str'},
        'ship_to_name': {'key': 'shipToName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'total_amount_excluding_tax': {'key': 'totalAmountExcludingTax', 'type': 'float'},
        'total_amount_including_tax': {'key': 'totalAmountIncludingTax', 'type': 'float'},
        'total_tax_amount': {'key': 'totalTaxAmount', 'type': 'float'},
        'valid_until_date': {'key': 'validUntilDate', 'type': 'date'},
        'currency': {'key': 'currency', 'type': 'MicrosoftGraphCurrency'},
        'customer': {'key': 'customer', 'type': 'MicrosoftGraphCustomer'},
        'payment_term': {'key': 'paymentTerm', 'type': 'MicrosoftGraphPaymentTerm'},
        'sales_quote_lines': {'key': 'salesQuoteLines', 'type': '[MicrosoftGraphSalesQuoteLine]'},
        'shipment_method': {'key': 'shipmentMethod', 'type': 'MicrosoftGraphShipmentMethod'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSalesQuote, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.accepted_date = kwargs.get('accepted_date', None)
        self.billing_postal_address = kwargs.get('billing_postal_address', None)
        self.bill_to_customer_id = kwargs.get('bill_to_customer_id', None)
        self.bill_to_customer_number = kwargs.get('bill_to_customer_number', None)
        self.bill_to_name = kwargs.get('bill_to_name', None)
        self.currency_code = kwargs.get('currency_code', None)
        self.currency_id = kwargs.get('currency_id', None)
        self.customer_id = kwargs.get('customer_id', None)
        self.customer_name = kwargs.get('customer_name', None)
        self.customer_number = kwargs.get('customer_number', None)
        self.discount_amount = kwargs.get('discount_amount', None)
        self.document_date = kwargs.get('document_date', None)
        self.due_date = kwargs.get('due_date', None)
        self.email = kwargs.get('email', None)
        self.external_document_number = kwargs.get('external_document_number', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.number = kwargs.get('number', None)
        self.payment_terms_id = kwargs.get('payment_terms_id', None)
        self.phone_number = kwargs.get('phone_number', None)
        self.salesperson = kwargs.get('salesperson', None)
        self.selling_postal_address = kwargs.get('selling_postal_address', None)
        self.sent_date = kwargs.get('sent_date', None)
        self.shipment_method_id = kwargs.get('shipment_method_id', None)
        self.shipping_postal_address = kwargs.get('shipping_postal_address', None)
        self.ship_to_contact = kwargs.get('ship_to_contact', None)
        self.ship_to_name = kwargs.get('ship_to_name', None)
        self.status = kwargs.get('status', None)
        self.total_amount_excluding_tax = kwargs.get('total_amount_excluding_tax', None)
        self.total_amount_including_tax = kwargs.get('total_amount_including_tax', None)
        self.total_tax_amount = kwargs.get('total_tax_amount', None)
        self.valid_until_date = kwargs.get('valid_until_date', None)
        self.currency = kwargs.get('currency', None)
        self.customer = kwargs.get('customer', None)
        self.payment_term = kwargs.get('payment_term', None)
        self.sales_quote_lines = kwargs.get('sales_quote_lines', None)
        self.shipment_method = kwargs.get('shipment_method', None)


class MicrosoftGraphSalesQuoteLine(MicrosoftGraphEntity):
    """salesQuoteLine.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param account_id:
    :type account_id: str
    :param amount_excluding_tax:
    :type amount_excluding_tax: float
    :param amount_including_tax:
    :type amount_including_tax: float
    :param description:
    :type description: str
    :param discount_amount:
    :type discount_amount: float
    :param discount_applied_before_tax:
    :type discount_applied_before_tax: bool
    :param discount_percent:
    :type discount_percent: float
    :param document_id:
    :type document_id: str
    :param item_id:
    :type item_id: str
    :param line_type:
    :type line_type: str
    :param net_amount:
    :type net_amount: float
    :param net_amount_including_tax:
    :type net_amount_including_tax: float
    :param net_tax_amount:
    :type net_tax_amount: float
    :param quantity:
    :type quantity: float
    :param sequence:
    :type sequence: int
    :param tax_code:
    :type tax_code: str
    :param tax_percent:
    :type tax_percent: float
    :param total_tax_amount:
    :type total_tax_amount: float
    :param unit_of_measure_id:
    :type unit_of_measure_id: str
    :param unit_price:
    :type unit_price: float
    :param account: account.
    :type account: ~financials.models.MicrosoftGraphAccount
    :param item: item.
    :type item: ~financials.models.MicrosoftGraphItem
    """

    _validation = {
        'sequence': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'account_id': {'key': 'accountId', 'type': 'str'},
        'amount_excluding_tax': {'key': 'amountExcludingTax', 'type': 'float'},
        'amount_including_tax': {'key': 'amountIncludingTax', 'type': 'float'},
        'description': {'key': 'description', 'type': 'str'},
        'discount_amount': {'key': 'discountAmount', 'type': 'float'},
        'discount_applied_before_tax': {'key': 'discountAppliedBeforeTax', 'type': 'bool'},
        'discount_percent': {'key': 'discountPercent', 'type': 'float'},
        'document_id': {'key': 'documentId', 'type': 'str'},
        'item_id': {'key': 'itemId', 'type': 'str'},
        'line_type': {'key': 'lineType', 'type': 'str'},
        'net_amount': {'key': 'netAmount', 'type': 'float'},
        'net_amount_including_tax': {'key': 'netAmountIncludingTax', 'type': 'float'},
        'net_tax_amount': {'key': 'netTaxAmount', 'type': 'float'},
        'quantity': {'key': 'quantity', 'type': 'float'},
        'sequence': {'key': 'sequence', 'type': 'int'},
        'tax_code': {'key': 'taxCode', 'type': 'str'},
        'tax_percent': {'key': 'taxPercent', 'type': 'float'},
        'total_tax_amount': {'key': 'totalTaxAmount', 'type': 'float'},
        'unit_of_measure_id': {'key': 'unitOfMeasureId', 'type': 'str'},
        'unit_price': {'key': 'unitPrice', 'type': 'float'},
        'account': {'key': 'account', 'type': 'MicrosoftGraphAccount'},
        'item': {'key': 'item', 'type': 'MicrosoftGraphItem'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSalesQuoteLine, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.account_id = kwargs.get('account_id', None)
        self.amount_excluding_tax = kwargs.get('amount_excluding_tax', None)
        self.amount_including_tax = kwargs.get('amount_including_tax', None)
        self.description = kwargs.get('description', None)
        self.discount_amount = kwargs.get('discount_amount', None)
        self.discount_applied_before_tax = kwargs.get('discount_applied_before_tax', None)
        self.discount_percent = kwargs.get('discount_percent', None)
        self.document_id = kwargs.get('document_id', None)
        self.item_id = kwargs.get('item_id', None)
        self.line_type = kwargs.get('line_type', None)
        self.net_amount = kwargs.get('net_amount', None)
        self.net_amount_including_tax = kwargs.get('net_amount_including_tax', None)
        self.net_tax_amount = kwargs.get('net_tax_amount', None)
        self.quantity = kwargs.get('quantity', None)
        self.sequence = kwargs.get('sequence', None)
        self.tax_code = kwargs.get('tax_code', None)
        self.tax_percent = kwargs.get('tax_percent', None)
        self.total_tax_amount = kwargs.get('total_tax_amount', None)
        self.unit_of_measure_id = kwargs.get('unit_of_measure_id', None)
        self.unit_price = kwargs.get('unit_price', None)
        self.account = kwargs.get('account', None)
        self.item = kwargs.get('item', None)


class MicrosoftGraphShipmentMethod(MicrosoftGraphEntity):
    """shipmentMethod.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphShipmentMethod, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs.get('code', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)


class MicrosoftGraphTaxArea(MicrosoftGraphEntity):
    """taxArea.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param tax_type:
    :type tax_type: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'tax_type': {'key': 'taxType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTaxArea, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs.get('code', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.tax_type = kwargs.get('tax_type', None)


class MicrosoftGraphTaxGroup(MicrosoftGraphEntity):
    """taxGroup.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param tax_type:
    :type tax_type: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'tax_type': {'key': 'taxType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTaxGroup, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs.get('code', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.tax_type = kwargs.get('tax_type', None)


class MicrosoftGraphUnitOfMeasure(MicrosoftGraphEntity):
    """unitOfMeasure.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param international_standard_code:
    :type international_standard_code: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'international_standard_code': {'key': 'internationalStandardCode', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphUnitOfMeasure, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs.get('code', None)
        self.display_name = kwargs.get('display_name', None)
        self.international_standard_code = kwargs.get('international_standard_code', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)


class MicrosoftGraphVendor(MicrosoftGraphEntity):
    """vendor.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: postalAddressType.
    :type address: ~financials.models.MicrosoftGraphPostalAddressType
    :param balance:
    :type balance: float
    :param blocked:
    :type blocked: str
    :param currency_code:
    :type currency_code: str
    :param currency_id:
    :type currency_id: str
    :param display_name:
    :type display_name: str
    :param email:
    :type email: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param number:
    :type number: str
    :param payment_method_id:
    :type payment_method_id: str
    :param payment_terms_id:
    :type payment_terms_id: str
    :param phone_number:
    :type phone_number: str
    :param tax_liable:
    :type tax_liable: bool
    :param tax_registration_number:
    :type tax_registration_number: str
    :param website:
    :type website: str
    :param currency: currency.
    :type currency: ~financials.models.MicrosoftGraphCurrency
    :param payment_method: paymentMethod.
    :type payment_method: ~financials.models.MicrosoftGraphPaymentMethod
    :param payment_term: paymentTerm.
    :type payment_term: ~financials.models.MicrosoftGraphPaymentTerm
    :param picture:
    :type picture: list[~financials.models.MicrosoftGraphPicture]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'MicrosoftGraphPostalAddressType'},
        'balance': {'key': 'balance', 'type': 'float'},
        'blocked': {'key': 'blocked', 'type': 'str'},
        'currency_code': {'key': 'currencyCode', 'type': 'str'},
        'currency_id': {'key': 'currencyId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'number': {'key': 'number', 'type': 'str'},
        'payment_method_id': {'key': 'paymentMethodId', 'type': 'str'},
        'payment_terms_id': {'key': 'paymentTermsId', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'tax_liable': {'key': 'taxLiable', 'type': 'bool'},
        'tax_registration_number': {'key': 'taxRegistrationNumber', 'type': 'str'},
        'website': {'key': 'website', 'type': 'str'},
        'currency': {'key': 'currency', 'type': 'MicrosoftGraphCurrency'},
        'payment_method': {'key': 'paymentMethod', 'type': 'MicrosoftGraphPaymentMethod'},
        'payment_term': {'key': 'paymentTerm', 'type': 'MicrosoftGraphPaymentTerm'},
        'picture': {'key': 'picture', 'type': '[MicrosoftGraphPicture]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphVendor, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.address = kwargs.get('address', None)
        self.balance = kwargs.get('balance', None)
        self.blocked = kwargs.get('blocked', None)
        self.currency_code = kwargs.get('currency_code', None)
        self.currency_id = kwargs.get('currency_id', None)
        self.display_name = kwargs.get('display_name', None)
        self.email = kwargs.get('email', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.number = kwargs.get('number', None)
        self.payment_method_id = kwargs.get('payment_method_id', None)
        self.payment_terms_id = kwargs.get('payment_terms_id', None)
        self.phone_number = kwargs.get('phone_number', None)
        self.tax_liable = kwargs.get('tax_liable', None)
        self.tax_registration_number = kwargs.get('tax_registration_number', None)
        self.website = kwargs.get('website', None)
        self.currency = kwargs.get('currency', None)
        self.payment_method = kwargs.get('payment_method', None)
        self.payment_term = kwargs.get('payment_term', None)
        self.picture = kwargs.get('picture', None)


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error: Required.
    :type error: ~financials.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.error = kwargs['error']


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~financials.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: dict[str, object]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)
