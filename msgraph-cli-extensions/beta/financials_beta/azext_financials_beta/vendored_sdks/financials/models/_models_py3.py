# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class collectionofaccount(msrest.serialization.Model):
    """Collection of account.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphaccount]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphaccount]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphaccount"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofaccount, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofagedaccountspayable(msrest.serialization.Model):
    """Collection of agedAccountsPayable.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphagedaccountspayable]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphagedaccountspayable]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphagedaccountspayable"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofagedaccountspayable, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofagedaccountsreceivable(msrest.serialization.Model):
    """Collection of agedAccountsReceivable.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphagedaccountsreceivable]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphagedaccountsreceivable]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphagedaccountsreceivable"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofagedaccountsreceivable, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofcompany(msrest.serialization.Model):
    """Collection of company.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphcompany]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcompany]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphcompany"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofcompany, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofcompanyinformation(msrest.serialization.Model):
    """Collection of companyInformation.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphcompanyinformation]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcompanyinformation]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphcompanyinformation"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofcompanyinformation, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofcountryregion(msrest.serialization.Model):
    """Collection of countryRegion.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphcountryregion]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcountryregion]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphcountryregion"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofcountryregion, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofcurrency(msrest.serialization.Model):
    """Collection of currency.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphcurrency]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcurrency]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphcurrency"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofcurrency, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofcustomer(msrest.serialization.Model):
    """Collection of customer.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphcustomer]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcustomer]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphcustomer"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofcustomer, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofcustomerpayment(msrest.serialization.Model):
    """Collection of customerPayment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphcustomerpayment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcustomerpayment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphcustomerpayment"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofcustomerpayment, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofcustomerpayment0(msrest.serialization.Model):
    """Collection of customerPayment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphcustomerpayment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcustomerpayment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphcustomerpayment"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofcustomerpayment0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofcustomerpaymentjournal(msrest.serialization.Model):
    """Collection of customerPaymentJournal.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphcustomerpaymentjournal]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcustomerpaymentjournal]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphcustomerpaymentjournal"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofcustomerpaymentjournal, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofdimension(msrest.serialization.Model):
    """Collection of dimension.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphdimension]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdimension]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphdimension"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofdimension, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofdimensionvalue(msrest.serialization.Model):
    """Collection of dimensionValue.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphdimensionvalue]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdimensionvalue]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphdimensionvalue"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofdimensionvalue, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofdimensionvalue0(msrest.serialization.Model):
    """Collection of dimensionValue.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphdimensionvalue]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdimensionvalue]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphdimensionvalue"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofdimensionvalue0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofemployee(msrest.serialization.Model):
    """Collection of employee.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphemployee]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphemployee]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphemployee"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofemployee, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofgeneralledgerentry(msrest.serialization.Model):
    """Collection of generalLedgerEntry.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphgeneralledgerentry]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphgeneralledgerentry]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphgeneralledgerentry"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofgeneralledgerentry, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofitem(msrest.serialization.Model):
    """Collection of item.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphitem]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphitem]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphitem"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofitem, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofitemcategory(msrest.serialization.Model):
    """Collection of itemCategory.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphitemcategory]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphitemcategory]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphitemcategory"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofitemcategory, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofjournal(msrest.serialization.Model):
    """Collection of journal.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphjournal]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphjournal]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphjournal"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofjournal, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofjournalline(msrest.serialization.Model):
    """Collection of journalLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphjournalline]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphjournalline]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphjournalline"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofjournalline, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofjournalline0(msrest.serialization.Model):
    """Collection of journalLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphjournalline]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphjournalline]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphjournalline"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofjournalline0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpaymentmethod(msrest.serialization.Model):
    """Collection of paymentMethod.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpaymentmethod]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpaymentmethod]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpaymentmethod"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpaymentmethod, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpaymentterm(msrest.serialization.Model):
    """Collection of paymentTerm.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpaymentterm]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpaymentterm]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpaymentterm"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpaymentterm, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture0(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture1(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture1, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture10(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture10, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture11(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture11, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture12(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture12, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture13(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture13, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture14(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture14, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture15(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture15, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture16(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture16, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture17(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture17, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture18(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture18, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture19(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture19, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture2(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture2, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture20(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture20, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture3(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture3, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture4(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture4, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture5(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture5, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture6(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture6, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture7(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture7, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture8(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture8, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpicture9(msrest.serialization.Model):
    """Collection of picture.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpicture]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpicture]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpicture"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpicture9, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpurchaseinvoice(msrest.serialization.Model):
    """Collection of purchaseInvoice.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpurchaseinvoice]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpurchaseinvoice]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpurchaseinvoice"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpurchaseinvoice, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpurchaseinvoiceline(msrest.serialization.Model):
    """Collection of purchaseInvoiceLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpurchaseinvoiceline]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpurchaseinvoiceline]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpurchaseinvoiceline"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpurchaseinvoiceline, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpurchaseinvoiceline0(msrest.serialization.Model):
    """Collection of purchaseInvoiceLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphpurchaseinvoiceline]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpurchaseinvoiceline]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpurchaseinvoiceline"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpurchaseinvoiceline0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofsalescreditmemo(msrest.serialization.Model):
    """Collection of salesCreditMemo.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphsalescreditmemo]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsalescreditmemo]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphsalescreditmemo"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofsalescreditmemo, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofsalescreditmemoline(msrest.serialization.Model):
    """Collection of salesCreditMemoLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphsalescreditmemoline]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsalescreditmemoline]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphsalescreditmemoline"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofsalescreditmemoline, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofsalescreditmemoline0(msrest.serialization.Model):
    """Collection of salesCreditMemoLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphsalescreditmemoline]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsalescreditmemoline]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphsalescreditmemoline"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofsalescreditmemoline0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofsalesinvoice(msrest.serialization.Model):
    """Collection of salesInvoice.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphsalesinvoice]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsalesinvoice]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphsalesinvoice"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofsalesinvoice, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofsalesinvoiceline(msrest.serialization.Model):
    """Collection of salesInvoiceLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphsalesinvoiceline]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsalesinvoiceline]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphsalesinvoiceline"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofsalesinvoiceline, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofsalesinvoiceline0(msrest.serialization.Model):
    """Collection of salesInvoiceLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphsalesinvoiceline]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsalesinvoiceline]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphsalesinvoiceline"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofsalesinvoiceline0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofsalesorder(msrest.serialization.Model):
    """Collection of salesOrder.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphsalesorder]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsalesorder]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphsalesorder"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofsalesorder, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofsalesorderline(msrest.serialization.Model):
    """Collection of salesOrderLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphsalesorderline]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsalesorderline]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphsalesorderline"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofsalesorderline, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofsalesorderline0(msrest.serialization.Model):
    """Collection of salesOrderLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphsalesorderline]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsalesorderline]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphsalesorderline"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofsalesorderline0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofsalesquote(msrest.serialization.Model):
    """Collection of salesQuote.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphsalesquote]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsalesquote]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphsalesquote"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofsalesquote, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofsalesquoteline(msrest.serialization.Model):
    """Collection of salesQuoteLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphsalesquoteline]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsalesquoteline]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphsalesquoteline"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofsalesquoteline, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofsalesquoteline0(msrest.serialization.Model):
    """Collection of salesQuoteLine.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphsalesquoteline]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsalesquoteline]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphsalesquoteline"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofsalesquoteline0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofshipmentmethod(msrest.serialization.Model):
    """Collection of shipmentMethod.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphshipmentmethod]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphshipmentmethod]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphshipmentmethod"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofshipmentmethod, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionoftaxarea(msrest.serialization.Model):
    """Collection of taxArea.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphtaxarea]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphtaxarea]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphtaxarea"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionoftaxarea, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionoftaxgroup(msrest.serialization.Model):
    """Collection of taxGroup.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphtaxgroup]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphtaxgroup]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphtaxgroup"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionoftaxgroup, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofunitofmeasure(msrest.serialization.Model):
    """Collection of unitOfMeasure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphunitofmeasure]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphunitofmeasure]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphunitofmeasure"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofunitofmeasure, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofvendor(msrest.serialization.Model):
    """Collection of vendor.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~financials.models.microsoftgraphvendor]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphvendor]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphvendor"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofvendor, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class microsoftgraphentity(msrest.serialization.Model):
    """entity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        id: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphentity, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.id = id


class microsoftgraphaccount(microsoftgraphentity):
    """account.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param blocked:
    :type blocked: bool
    :param category:
    :type category: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param number:
    :type number: str
    :param sub_category:
    :type sub_category: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'blocked': {'key': 'blocked', 'type': 'bool'},
        'category': {'key': 'category', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'number': {'key': 'number', 'type': 'str'},
        'sub_category': {'key': 'subCategory', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        blocked: Optional[bool] = None,
        category: Optional[str] = None,
        display_name: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        number: Optional[str] = None,
        sub_category: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphaccount, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.blocked = blocked
        self.category = category
        self.display_name = display_name
        self.last_modified_date_time = last_modified_date_time
        self.number = number
        self.sub_category = sub_category


class microsoftgraphagedaccountspayable(microsoftgraphentity):
    """agedAccountsPayable.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param aged_as_of_date:
    :type aged_as_of_date: ~datetime.date
    :param balance_due:
    :type balance_due: float
    :param currency_code:
    :type currency_code: str
    :param current_amount:
    :type current_amount: float
    :param name:
    :type name: str
    :param period1_amount:
    :type period1_amount: float
    :param period2_amount:
    :type period2_amount: float
    :param period3_amount:
    :type period3_amount: float
    :param period_length_filter:
    :type period_length_filter: str
    :param vendor_number:
    :type vendor_number: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'aged_as_of_date': {'key': 'agedAsOfDate', 'type': 'date'},
        'balance_due': {'key': 'balanceDue', 'type': 'float'},
        'currency_code': {'key': 'currencyCode', 'type': 'str'},
        'current_amount': {'key': 'currentAmount', 'type': 'float'},
        'name': {'key': 'name', 'type': 'str'},
        'period1_amount': {'key': 'period1Amount', 'type': 'float'},
        'period2_amount': {'key': 'period2Amount', 'type': 'float'},
        'period3_amount': {'key': 'period3Amount', 'type': 'float'},
        'period_length_filter': {'key': 'periodLengthFilter', 'type': 'str'},
        'vendor_number': {'key': 'vendorNumber', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        aged_as_of_date: Optional[datetime.date] = None,
        balance_due: Optional[float] = None,
        currency_code: Optional[str] = None,
        current_amount: Optional[float] = None,
        name: Optional[str] = None,
        period1_amount: Optional[float] = None,
        period2_amount: Optional[float] = None,
        period3_amount: Optional[float] = None,
        period_length_filter: Optional[str] = None,
        vendor_number: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphagedaccountspayable, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.aged_as_of_date = aged_as_of_date
        self.balance_due = balance_due
        self.currency_code = currency_code
        self.current_amount = current_amount
        self.name = name
        self.period1_amount = period1_amount
        self.period2_amount = period2_amount
        self.period3_amount = period3_amount
        self.period_length_filter = period_length_filter
        self.vendor_number = vendor_number


class microsoftgraphagedaccountsreceivable(microsoftgraphentity):
    """agedAccountsReceivable.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param aged_as_of_date:
    :type aged_as_of_date: ~datetime.date
    :param balance_due:
    :type balance_due: float
    :param currency_code:
    :type currency_code: str
    :param current_amount:
    :type current_amount: float
    :param customer_number:
    :type customer_number: str
    :param name:
    :type name: str
    :param period1_amount:
    :type period1_amount: float
    :param period2_amount:
    :type period2_amount: float
    :param period3_amount:
    :type period3_amount: float
    :param period_length_filter:
    :type period_length_filter: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'aged_as_of_date': {'key': 'agedAsOfDate', 'type': 'date'},
        'balance_due': {'key': 'balanceDue', 'type': 'float'},
        'currency_code': {'key': 'currencyCode', 'type': 'str'},
        'current_amount': {'key': 'currentAmount', 'type': 'float'},
        'customer_number': {'key': 'customerNumber', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'period1_amount': {'key': 'period1Amount', 'type': 'float'},
        'period2_amount': {'key': 'period2Amount', 'type': 'float'},
        'period3_amount': {'key': 'period3Amount', 'type': 'float'},
        'period_length_filter': {'key': 'periodLengthFilter', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        aged_as_of_date: Optional[datetime.date] = None,
        balance_due: Optional[float] = None,
        currency_code: Optional[str] = None,
        current_amount: Optional[float] = None,
        customer_number: Optional[str] = None,
        name: Optional[str] = None,
        period1_amount: Optional[float] = None,
        period2_amount: Optional[float] = None,
        period3_amount: Optional[float] = None,
        period_length_filter: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphagedaccountsreceivable, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.aged_as_of_date = aged_as_of_date
        self.balance_due = balance_due
        self.currency_code = currency_code
        self.current_amount = current_amount
        self.customer_number = customer_number
        self.name = name
        self.period1_amount = period1_amount
        self.period2_amount = period2_amount
        self.period3_amount = period3_amount
        self.period_length_filter = period_length_filter


class microsoftgraphcompany(microsoftgraphentity):
    """company.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param business_profile_id:
    :type business_profile_id: str
    :param display_name:
    :type display_name: str
    :param name:
    :type name: str
    :param system_version:
    :type system_version: str
    :param accounts:
    :type accounts: list[~financials.models.microsoftgraphaccount]
    :param aged_accounts_payable:
    :type aged_accounts_payable: list[~financials.models.microsoftgraphagedaccountspayable]
    :param aged_accounts_receivable:
    :type aged_accounts_receivable: list[~financials.models.microsoftgraphagedaccountsreceivable]
    :param company_information:
    :type company_information: list[~financials.models.microsoftgraphcompanyinformation]
    :param countries_regions:
    :type countries_regions: list[~financials.models.microsoftgraphcountryregion]
    :param currencies:
    :type currencies: list[~financials.models.microsoftgraphcurrency]
    :param customer_payment_journals:
    :type customer_payment_journals: list[~financials.models.microsoftgraphcustomerpaymentjournal]
    :param customer_payments:
    :type customer_payments: list[~financials.models.microsoftgraphcustomerpayment]
    :param customers:
    :type customers: list[~financials.models.microsoftgraphcustomer]
    :param dimensions:
    :type dimensions: list[~financials.models.microsoftgraphdimension]
    :param dimension_values:
    :type dimension_values: list[~financials.models.microsoftgraphdimensionvalue]
    :param employees:
    :type employees: list[~financials.models.microsoftgraphemployee]
    :param general_ledger_entries:
    :type general_ledger_entries: list[~financials.models.microsoftgraphgeneralledgerentry]
    :param item_categories:
    :type item_categories: list[~financials.models.microsoftgraphitemcategory]
    :param items:
    :type items: list[~financials.models.microsoftgraphitem]
    :param journal_lines:
    :type journal_lines: list[~financials.models.microsoftgraphjournalline]
    :param journals:
    :type journals: list[~financials.models.microsoftgraphjournal]
    :param payment_methods:
    :type payment_methods: list[~financials.models.microsoftgraphpaymentmethod]
    :param payment_terms:
    :type payment_terms: list[~financials.models.microsoftgraphpaymentterm]
    :param picture:
    :type picture: list[~financials.models.microsoftgraphpicture]
    :param purchase_invoice_lines:
    :type purchase_invoice_lines: list[~financials.models.microsoftgraphpurchaseinvoiceline]
    :param purchase_invoices:
    :type purchase_invoices: list[~financials.models.microsoftgraphpurchaseinvoice]
    :param sales_credit_memo_lines:
    :type sales_credit_memo_lines: list[~financials.models.microsoftgraphsalescreditmemoline]
    :param sales_credit_memos:
    :type sales_credit_memos: list[~financials.models.microsoftgraphsalescreditmemo]
    :param sales_invoice_lines:
    :type sales_invoice_lines: list[~financials.models.microsoftgraphsalesinvoiceline]
    :param sales_invoices:
    :type sales_invoices: list[~financials.models.microsoftgraphsalesinvoice]
    :param sales_order_lines:
    :type sales_order_lines: list[~financials.models.microsoftgraphsalesorderline]
    :param sales_orders:
    :type sales_orders: list[~financials.models.microsoftgraphsalesorder]
    :param sales_quote_lines:
    :type sales_quote_lines: list[~financials.models.microsoftgraphsalesquoteline]
    :param sales_quotes:
    :type sales_quotes: list[~financials.models.microsoftgraphsalesquote]
    :param shipment_methods:
    :type shipment_methods: list[~financials.models.microsoftgraphshipmentmethod]
    :param tax_areas:
    :type tax_areas: list[~financials.models.microsoftgraphtaxarea]
    :param tax_groups:
    :type tax_groups: list[~financials.models.microsoftgraphtaxgroup]
    :param units_of_measure:
    :type units_of_measure: list[~financials.models.microsoftgraphunitofmeasure]
    :param vendors:
    :type vendors: list[~financials.models.microsoftgraphvendor]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'business_profile_id': {'key': 'businessProfileId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'system_version': {'key': 'systemVersion', 'type': 'str'},
        'accounts': {'key': 'accounts', 'type': '[microsoftgraphaccount]'},
        'aged_accounts_payable': {'key': 'agedAccountsPayable', 'type': '[microsoftgraphagedaccountspayable]'},
        'aged_accounts_receivable': {'key': 'agedAccountsReceivable', 'type': '[microsoftgraphagedaccountsreceivable]'},
        'company_information': {'key': 'companyInformation', 'type': '[microsoftgraphcompanyinformation]'},
        'countries_regions': {'key': 'countriesRegions', 'type': '[microsoftgraphcountryregion]'},
        'currencies': {'key': 'currencies', 'type': '[microsoftgraphcurrency]'},
        'customer_payment_journals': {'key': 'customerPaymentJournals', 'type': '[microsoftgraphcustomerpaymentjournal]'},
        'customer_payments': {'key': 'customerPayments', 'type': '[microsoftgraphcustomerpayment]'},
        'customers': {'key': 'customers', 'type': '[microsoftgraphcustomer]'},
        'dimensions': {'key': 'dimensions', 'type': '[microsoftgraphdimension]'},
        'dimension_values': {'key': 'dimensionValues', 'type': '[microsoftgraphdimensionvalue]'},
        'employees': {'key': 'employees', 'type': '[microsoftgraphemployee]'},
        'general_ledger_entries': {'key': 'generalLedgerEntries', 'type': '[microsoftgraphgeneralledgerentry]'},
        'item_categories': {'key': 'itemCategories', 'type': '[microsoftgraphitemcategory]'},
        'items': {'key': 'items', 'type': '[microsoftgraphitem]'},
        'journal_lines': {'key': 'journalLines', 'type': '[microsoftgraphjournalline]'},
        'journals': {'key': 'journals', 'type': '[microsoftgraphjournal]'},
        'payment_methods': {'key': 'paymentMethods', 'type': '[microsoftgraphpaymentmethod]'},
        'payment_terms': {'key': 'paymentTerms', 'type': '[microsoftgraphpaymentterm]'},
        'picture': {'key': 'picture', 'type': '[microsoftgraphpicture]'},
        'purchase_invoice_lines': {'key': 'purchaseInvoiceLines', 'type': '[microsoftgraphpurchaseinvoiceline]'},
        'purchase_invoices': {'key': 'purchaseInvoices', 'type': '[microsoftgraphpurchaseinvoice]'},
        'sales_credit_memo_lines': {'key': 'salesCreditMemoLines', 'type': '[microsoftgraphsalescreditmemoline]'},
        'sales_credit_memos': {'key': 'salesCreditMemos', 'type': '[microsoftgraphsalescreditmemo]'},
        'sales_invoice_lines': {'key': 'salesInvoiceLines', 'type': '[microsoftgraphsalesinvoiceline]'},
        'sales_invoices': {'key': 'salesInvoices', 'type': '[microsoftgraphsalesinvoice]'},
        'sales_order_lines': {'key': 'salesOrderLines', 'type': '[microsoftgraphsalesorderline]'},
        'sales_orders': {'key': 'salesOrders', 'type': '[microsoftgraphsalesorder]'},
        'sales_quote_lines': {'key': 'salesQuoteLines', 'type': '[microsoftgraphsalesquoteline]'},
        'sales_quotes': {'key': 'salesQuotes', 'type': '[microsoftgraphsalesquote]'},
        'shipment_methods': {'key': 'shipmentMethods', 'type': '[microsoftgraphshipmentmethod]'},
        'tax_areas': {'key': 'taxAreas', 'type': '[microsoftgraphtaxarea]'},
        'tax_groups': {'key': 'taxGroups', 'type': '[microsoftgraphtaxgroup]'},
        'units_of_measure': {'key': 'unitsOfMeasure', 'type': '[microsoftgraphunitofmeasure]'},
        'vendors': {'key': 'vendors', 'type': '[microsoftgraphvendor]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        business_profile_id: Optional[str] = None,
        display_name: Optional[str] = None,
        name: Optional[str] = None,
        system_version: Optional[str] = None,
        accounts: Optional[List["microsoftgraphaccount"]] = None,
        aged_accounts_payable: Optional[List["microsoftgraphagedaccountspayable"]] = None,
        aged_accounts_receivable: Optional[List["microsoftgraphagedaccountsreceivable"]] = None,
        company_information: Optional[List["microsoftgraphcompanyinformation"]] = None,
        countries_regions: Optional[List["microsoftgraphcountryregion"]] = None,
        currencies: Optional[List["microsoftgraphcurrency"]] = None,
        customer_payment_journals: Optional[List["microsoftgraphcustomerpaymentjournal"]] = None,
        customer_payments: Optional[List["microsoftgraphcustomerpayment"]] = None,
        customers: Optional[List["microsoftgraphcustomer"]] = None,
        dimensions: Optional[List["microsoftgraphdimension"]] = None,
        dimension_values: Optional[List["microsoftgraphdimensionvalue"]] = None,
        employees: Optional[List["microsoftgraphemployee"]] = None,
        general_ledger_entries: Optional[List["microsoftgraphgeneralledgerentry"]] = None,
        item_categories: Optional[List["microsoftgraphitemcategory"]] = None,
        items: Optional[List["microsoftgraphitem"]] = None,
        journal_lines: Optional[List["microsoftgraphjournalline"]] = None,
        journals: Optional[List["microsoftgraphjournal"]] = None,
        payment_methods: Optional[List["microsoftgraphpaymentmethod"]] = None,
        payment_terms: Optional[List["microsoftgraphpaymentterm"]] = None,
        picture: Optional[List["microsoftgraphpicture"]] = None,
        purchase_invoice_lines: Optional[List["microsoftgraphpurchaseinvoiceline"]] = None,
        purchase_invoices: Optional[List["microsoftgraphpurchaseinvoice"]] = None,
        sales_credit_memo_lines: Optional[List["microsoftgraphsalescreditmemoline"]] = None,
        sales_credit_memos: Optional[List["microsoftgraphsalescreditmemo"]] = None,
        sales_invoice_lines: Optional[List["microsoftgraphsalesinvoiceline"]] = None,
        sales_invoices: Optional[List["microsoftgraphsalesinvoice"]] = None,
        sales_order_lines: Optional[List["microsoftgraphsalesorderline"]] = None,
        sales_orders: Optional[List["microsoftgraphsalesorder"]] = None,
        sales_quote_lines: Optional[List["microsoftgraphsalesquoteline"]] = None,
        sales_quotes: Optional[List["microsoftgraphsalesquote"]] = None,
        shipment_methods: Optional[List["microsoftgraphshipmentmethod"]] = None,
        tax_areas: Optional[List["microsoftgraphtaxarea"]] = None,
        tax_groups: Optional[List["microsoftgraphtaxgroup"]] = None,
        units_of_measure: Optional[List["microsoftgraphunitofmeasure"]] = None,
        vendors: Optional[List["microsoftgraphvendor"]] = None,
        **kwargs
    ):
        super(microsoftgraphcompany, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.business_profile_id = business_profile_id
        self.display_name = display_name
        self.name = name
        self.system_version = system_version
        self.accounts = accounts
        self.aged_accounts_payable = aged_accounts_payable
        self.aged_accounts_receivable = aged_accounts_receivable
        self.company_information = company_information
        self.countries_regions = countries_regions
        self.currencies = currencies
        self.customer_payment_journals = customer_payment_journals
        self.customer_payments = customer_payments
        self.customers = customers
        self.dimensions = dimensions
        self.dimension_values = dimension_values
        self.employees = employees
        self.general_ledger_entries = general_ledger_entries
        self.item_categories = item_categories
        self.items = items
        self.journal_lines = journal_lines
        self.journals = journals
        self.payment_methods = payment_methods
        self.payment_terms = payment_terms
        self.picture = picture
        self.purchase_invoice_lines = purchase_invoice_lines
        self.purchase_invoices = purchase_invoices
        self.sales_credit_memo_lines = sales_credit_memo_lines
        self.sales_credit_memos = sales_credit_memos
        self.sales_invoice_lines = sales_invoice_lines
        self.sales_invoices = sales_invoices
        self.sales_order_lines = sales_order_lines
        self.sales_orders = sales_orders
        self.sales_quote_lines = sales_quote_lines
        self.sales_quotes = sales_quotes
        self.shipment_methods = shipment_methods
        self.tax_areas = tax_areas
        self.tax_groups = tax_groups
        self.units_of_measure = units_of_measure
        self.vendors = vendors


class microsoftgraphcompanyinformation(microsoftgraphentity):
    """companyInformation.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: postalAddressType.
    :type address: ~financials.models.microsoftgraphpostaladdresstype
    :param currency_code:
    :type currency_code: str
    :param current_fiscal_year_start_date:
    :type current_fiscal_year_start_date: ~datetime.date
    :param display_name:
    :type display_name: str
    :param email:
    :type email: str
    :param fax_number:
    :type fax_number: str
    :param industry:
    :type industry: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param phone_number:
    :type phone_number: str
    :param picture:
    :type picture: bytes
    :param tax_registration_number:
    :type tax_registration_number: str
    :param website:
    :type website: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'microsoftgraphpostaladdresstype'},
        'currency_code': {'key': 'currencyCode', 'type': 'str'},
        'current_fiscal_year_start_date': {'key': 'currentFiscalYearStartDate', 'type': 'date'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
        'fax_number': {'key': 'faxNumber', 'type': 'str'},
        'industry': {'key': 'industry', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'picture': {'key': 'picture', 'type': 'base64'},
        'tax_registration_number': {'key': 'taxRegistrationNumber', 'type': 'str'},
        'website': {'key': 'website', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        address: Optional["microsoftgraphpostaladdresstype"] = None,
        currency_code: Optional[str] = None,
        current_fiscal_year_start_date: Optional[datetime.date] = None,
        display_name: Optional[str] = None,
        email: Optional[str] = None,
        fax_number: Optional[str] = None,
        industry: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        phone_number: Optional[str] = None,
        picture: Optional[bytes] = None,
        tax_registration_number: Optional[str] = None,
        website: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphcompanyinformation, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.address = address
        self.currency_code = currency_code
        self.current_fiscal_year_start_date = current_fiscal_year_start_date
        self.display_name = display_name
        self.email = email
        self.fax_number = fax_number
        self.industry = industry
        self.last_modified_date_time = last_modified_date_time
        self.phone_number = phone_number
        self.picture = picture
        self.tax_registration_number = tax_registration_number
        self.website = website


class microsoftgraphcountryregion(microsoftgraphentity):
    """countryRegion.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address_format:
    :type address_format: str
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'address_format': {'key': 'addressFormat', 'type': 'str'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        address_format: Optional[str] = None,
        code: Optional[str] = None,
        display_name: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(microsoftgraphcountryregion, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.address_format = address_format
        self.code = code
        self.display_name = display_name
        self.last_modified_date_time = last_modified_date_time


class microsoftgraphcurrency(microsoftgraphentity):
    """currency.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param amount_decimal_places:
    :type amount_decimal_places: str
    :param amount_rounding_precision:
    :type amount_rounding_precision: float
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param symbol:
    :type symbol: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'amount_decimal_places': {'key': 'amountDecimalPlaces', 'type': 'str'},
        'amount_rounding_precision': {'key': 'amountRoundingPrecision', 'type': 'float'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'symbol': {'key': 'symbol', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        amount_decimal_places: Optional[str] = None,
        amount_rounding_precision: Optional[float] = None,
        code: Optional[str] = None,
        display_name: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        symbol: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphcurrency, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.amount_decimal_places = amount_decimal_places
        self.amount_rounding_precision = amount_rounding_precision
        self.code = code
        self.display_name = display_name
        self.last_modified_date_time = last_modified_date_time
        self.symbol = symbol


class microsoftgraphcustomer(microsoftgraphentity):
    """customer.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: postalAddressType.
    :type address: ~financials.models.microsoftgraphpostaladdresstype
    :param blocked:
    :type blocked: str
    :param currency_code:
    :type currency_code: str
    :param currency_id:
    :type currency_id: str
    :param display_name:
    :type display_name: str
    :param email:
    :type email: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param number:
    :type number: str
    :param payment_method_id:
    :type payment_method_id: str
    :param payment_terms_id:
    :type payment_terms_id: str
    :param phone_number:
    :type phone_number: str
    :param shipment_method_id:
    :type shipment_method_id: str
    :param tax_area_display_name:
    :type tax_area_display_name: str
    :param tax_area_id:
    :type tax_area_id: str
    :param tax_liable:
    :type tax_liable: bool
    :param tax_registration_number:
    :type tax_registration_number: str
    :param type:
    :type type: str
    :param website:
    :type website: str
    :param currency: currency.
    :type currency: ~financials.models.microsoftgraphcurrency
    :param payment_method: paymentMethod.
    :type payment_method: ~financials.models.microsoftgraphpaymentmethod
    :param payment_term: paymentTerm.
    :type payment_term: ~financials.models.microsoftgraphpaymentterm
    :param picture:
    :type picture: list[~financials.models.microsoftgraphpicture]
    :param shipment_method: shipmentMethod.
    :type shipment_method: ~financials.models.microsoftgraphshipmentmethod
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'microsoftgraphpostaladdresstype'},
        'blocked': {'key': 'blocked', 'type': 'str'},
        'currency_code': {'key': 'currencyCode', 'type': 'str'},
        'currency_id': {'key': 'currencyId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'number': {'key': 'number', 'type': 'str'},
        'payment_method_id': {'key': 'paymentMethodId', 'type': 'str'},
        'payment_terms_id': {'key': 'paymentTermsId', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'shipment_method_id': {'key': 'shipmentMethodId', 'type': 'str'},
        'tax_area_display_name': {'key': 'taxAreaDisplayName', 'type': 'str'},
        'tax_area_id': {'key': 'taxAreaId', 'type': 'str'},
        'tax_liable': {'key': 'taxLiable', 'type': 'bool'},
        'tax_registration_number': {'key': 'taxRegistrationNumber', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'website': {'key': 'website', 'type': 'str'},
        'currency': {'key': 'currency', 'type': 'microsoftgraphcurrency'},
        'payment_method': {'key': 'paymentMethod', 'type': 'microsoftgraphpaymentmethod'},
        'payment_term': {'key': 'paymentTerm', 'type': 'microsoftgraphpaymentterm'},
        'picture': {'key': 'picture', 'type': '[microsoftgraphpicture]'},
        'shipment_method': {'key': 'shipmentMethod', 'type': 'microsoftgraphshipmentmethod'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        address: Optional["microsoftgraphpostaladdresstype"] = None,
        blocked: Optional[str] = None,
        currency_code: Optional[str] = None,
        currency_id: Optional[str] = None,
        display_name: Optional[str] = None,
        email: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        number: Optional[str] = None,
        payment_method_id: Optional[str] = None,
        payment_terms_id: Optional[str] = None,
        phone_number: Optional[str] = None,
        shipment_method_id: Optional[str] = None,
        tax_area_display_name: Optional[str] = None,
        tax_area_id: Optional[str] = None,
        tax_liable: Optional[bool] = None,
        tax_registration_number: Optional[str] = None,
        type: Optional[str] = None,
        website: Optional[str] = None,
        currency: Optional["microsoftgraphcurrency"] = None,
        payment_method: Optional["microsoftgraphpaymentmethod"] = None,
        payment_term: Optional["microsoftgraphpaymentterm"] = None,
        picture: Optional[List["microsoftgraphpicture"]] = None,
        shipment_method: Optional["microsoftgraphshipmentmethod"] = None,
        **kwargs
    ):
        super(microsoftgraphcustomer, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.address = address
        self.blocked = blocked
        self.currency_code = currency_code
        self.currency_id = currency_id
        self.display_name = display_name
        self.email = email
        self.last_modified_date_time = last_modified_date_time
        self.number = number
        self.payment_method_id = payment_method_id
        self.payment_terms_id = payment_terms_id
        self.phone_number = phone_number
        self.shipment_method_id = shipment_method_id
        self.tax_area_display_name = tax_area_display_name
        self.tax_area_id = tax_area_id
        self.tax_liable = tax_liable
        self.tax_registration_number = tax_registration_number
        self.type = type
        self.website = website
        self.currency = currency
        self.payment_method = payment_method
        self.payment_term = payment_term
        self.picture = picture
        self.shipment_method = shipment_method


class microsoftgraphcustomerpayment(microsoftgraphentity):
    """customerPayment.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param amount:
    :type amount: float
    :param applies_to_invoice_id:
    :type applies_to_invoice_id: str
    :param applies_to_invoice_number:
    :type applies_to_invoice_number: str
    :param comment:
    :type comment: str
    :param contact_id:
    :type contact_id: str
    :param customer_id:
    :type customer_id: str
    :param customer_number:
    :type customer_number: str
    :param description:
    :type description: str
    :param document_number:
    :type document_number: str
    :param external_document_number:
    :type external_document_number: str
    :param journal_display_name:
    :type journal_display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param line_number:
    :type line_number: int
    :param posting_date:
    :type posting_date: ~datetime.date
    :param customer: customer.
    :type customer: ~financials.models.microsoftgraphcustomer
    """

    _validation = {
        'line_number': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'amount': {'key': 'amount', 'type': 'float'},
        'applies_to_invoice_id': {'key': 'appliesToInvoiceId', 'type': 'str'},
        'applies_to_invoice_number': {'key': 'appliesToInvoiceNumber', 'type': 'str'},
        'comment': {'key': 'comment', 'type': 'str'},
        'contact_id': {'key': 'contactId', 'type': 'str'},
        'customer_id': {'key': 'customerId', 'type': 'str'},
        'customer_number': {'key': 'customerNumber', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'document_number': {'key': 'documentNumber', 'type': 'str'},
        'external_document_number': {'key': 'externalDocumentNumber', 'type': 'str'},
        'journal_display_name': {'key': 'journalDisplayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'line_number': {'key': 'lineNumber', 'type': 'int'},
        'posting_date': {'key': 'postingDate', 'type': 'date'},
        'customer': {'key': 'customer', 'type': 'microsoftgraphcustomer'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        amount: Optional[float] = None,
        applies_to_invoice_id: Optional[str] = None,
        applies_to_invoice_number: Optional[str] = None,
        comment: Optional[str] = None,
        contact_id: Optional[str] = None,
        customer_id: Optional[str] = None,
        customer_number: Optional[str] = None,
        description: Optional[str] = None,
        document_number: Optional[str] = None,
        external_document_number: Optional[str] = None,
        journal_display_name: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        line_number: Optional[int] = None,
        posting_date: Optional[datetime.date] = None,
        customer: Optional["microsoftgraphcustomer"] = None,
        **kwargs
    ):
        super(microsoftgraphcustomerpayment, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.amount = amount
        self.applies_to_invoice_id = applies_to_invoice_id
        self.applies_to_invoice_number = applies_to_invoice_number
        self.comment = comment
        self.contact_id = contact_id
        self.customer_id = customer_id
        self.customer_number = customer_number
        self.description = description
        self.document_number = document_number
        self.external_document_number = external_document_number
        self.journal_display_name = journal_display_name
        self.last_modified_date_time = last_modified_date_time
        self.line_number = line_number
        self.posting_date = posting_date
        self.customer = customer


class microsoftgraphcustomerpaymentjournal(microsoftgraphentity):
    """customerPaymentJournal.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param balancing_account_id:
    :type balancing_account_id: str
    :param balancing_account_number:
    :type balancing_account_number: str
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param account: account.
    :type account: ~financials.models.microsoftgraphaccount
    :param customer_payments:
    :type customer_payments: list[~financials.models.microsoftgraphcustomerpayment]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'balancing_account_id': {'key': 'balancingAccountId', 'type': 'str'},
        'balancing_account_number': {'key': 'balancingAccountNumber', 'type': 'str'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'account': {'key': 'account', 'type': 'microsoftgraphaccount'},
        'customer_payments': {'key': 'customerPayments', 'type': '[microsoftgraphcustomerpayment]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        balancing_account_id: Optional[str] = None,
        balancing_account_number: Optional[str] = None,
        code: Optional[str] = None,
        display_name: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        account: Optional["microsoftgraphaccount"] = None,
        customer_payments: Optional[List["microsoftgraphcustomerpayment"]] = None,
        **kwargs
    ):
        super(microsoftgraphcustomerpaymentjournal, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.balancing_account_id = balancing_account_id
        self.balancing_account_number = balancing_account_number
        self.code = code
        self.display_name = display_name
        self.last_modified_date_time = last_modified_date_time
        self.account = account
        self.customer_payments = customer_payments


class microsoftgraphdimension(microsoftgraphentity):
    """dimension.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param dimension_values:
    :type dimension_values: list[~financials.models.microsoftgraphdimensionvalue]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'dimension_values': {'key': 'dimensionValues', 'type': '[microsoftgraphdimensionvalue]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        code: Optional[str] = None,
        display_name: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        dimension_values: Optional[List["microsoftgraphdimensionvalue"]] = None,
        **kwargs
    ):
        super(microsoftgraphdimension, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.display_name = display_name
        self.last_modified_date_time = last_modified_date_time
        self.dimension_values = dimension_values


class microsoftgraphdimensionvalue(microsoftgraphentity):
    """dimensionValue.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        code: Optional[str] = None,
        display_name: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(microsoftgraphdimensionvalue, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.display_name = display_name
        self.last_modified_date_time = last_modified_date_time


class microsoftgraphemployee(microsoftgraphentity):
    """employee.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: postalAddressType.
    :type address: ~financials.models.microsoftgraphpostaladdresstype
    :param birth_date:
    :type birth_date: ~datetime.date
    :param display_name:
    :type display_name: str
    :param email:
    :type email: str
    :param employment_date:
    :type employment_date: ~datetime.date
    :param given_name:
    :type given_name: str
    :param job_title:
    :type job_title: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param middle_name:
    :type middle_name: str
    :param mobile_phone:
    :type mobile_phone: str
    :param number:
    :type number: str
    :param personal_email:
    :type personal_email: str
    :param phone_number:
    :type phone_number: str
    :param statistics_group_code:
    :type statistics_group_code: str
    :param status:
    :type status: str
    :param surname:
    :type surname: str
    :param termination_date:
    :type termination_date: ~datetime.date
    :param picture:
    :type picture: list[~financials.models.microsoftgraphpicture]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'microsoftgraphpostaladdresstype'},
        'birth_date': {'key': 'birthDate', 'type': 'date'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
        'employment_date': {'key': 'employmentDate', 'type': 'date'},
        'given_name': {'key': 'givenName', 'type': 'str'},
        'job_title': {'key': 'jobTitle', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'middle_name': {'key': 'middleName', 'type': 'str'},
        'mobile_phone': {'key': 'mobilePhone', 'type': 'str'},
        'number': {'key': 'number', 'type': 'str'},
        'personal_email': {'key': 'personalEmail', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'statistics_group_code': {'key': 'statisticsGroupCode', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'surname': {'key': 'surname', 'type': 'str'},
        'termination_date': {'key': 'terminationDate', 'type': 'date'},
        'picture': {'key': 'picture', 'type': '[microsoftgraphpicture]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        address: Optional["microsoftgraphpostaladdresstype"] = None,
        birth_date: Optional[datetime.date] = None,
        display_name: Optional[str] = None,
        email: Optional[str] = None,
        employment_date: Optional[datetime.date] = None,
        given_name: Optional[str] = None,
        job_title: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        middle_name: Optional[str] = None,
        mobile_phone: Optional[str] = None,
        number: Optional[str] = None,
        personal_email: Optional[str] = None,
        phone_number: Optional[str] = None,
        statistics_group_code: Optional[str] = None,
        status: Optional[str] = None,
        surname: Optional[str] = None,
        termination_date: Optional[datetime.date] = None,
        picture: Optional[List["microsoftgraphpicture"]] = None,
        **kwargs
    ):
        super(microsoftgraphemployee, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.address = address
        self.birth_date = birth_date
        self.display_name = display_name
        self.email = email
        self.employment_date = employment_date
        self.given_name = given_name
        self.job_title = job_title
        self.last_modified_date_time = last_modified_date_time
        self.middle_name = middle_name
        self.mobile_phone = mobile_phone
        self.number = number
        self.personal_email = personal_email
        self.phone_number = phone_number
        self.statistics_group_code = statistics_group_code
        self.status = status
        self.surname = surname
        self.termination_date = termination_date
        self.picture = picture


class microsoftgraphfinancials(msrest.serialization.Model):
    """financials.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param companies:
    :type companies: list[~financials.models.microsoftgraphcompany]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'companies': {'key': 'companies', 'type': '[microsoftgraphcompany]'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        companies: Optional[List["microsoftgraphcompany"]] = None,
        **kwargs
    ):
        super(microsoftgraphfinancials, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.companies = companies


class microsoftgraphgeneralledgerentry(microsoftgraphentity):
    """generalLedgerEntry.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param account_id:
    :type account_id: str
    :param account_number:
    :type account_number: str
    :param credit_amount:
    :type credit_amount: float
    :param debit_amount:
    :type debit_amount: float
    :param description:
    :type description: str
    :param document_number:
    :type document_number: str
    :param document_type:
    :type document_type: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param posting_date:
    :type posting_date: ~datetime.date
    :param account: account.
    :type account: ~financials.models.microsoftgraphaccount
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'account_id': {'key': 'accountId', 'type': 'str'},
        'account_number': {'key': 'accountNumber', 'type': 'str'},
        'credit_amount': {'key': 'creditAmount', 'type': 'float'},
        'debit_amount': {'key': 'debitAmount', 'type': 'float'},
        'description': {'key': 'description', 'type': 'str'},
        'document_number': {'key': 'documentNumber', 'type': 'str'},
        'document_type': {'key': 'documentType', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'posting_date': {'key': 'postingDate', 'type': 'date'},
        'account': {'key': 'account', 'type': 'microsoftgraphaccount'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        account_id: Optional[str] = None,
        account_number: Optional[str] = None,
        credit_amount: Optional[float] = None,
        debit_amount: Optional[float] = None,
        description: Optional[str] = None,
        document_number: Optional[str] = None,
        document_type: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        posting_date: Optional[datetime.date] = None,
        account: Optional["microsoftgraphaccount"] = None,
        **kwargs
    ):
        super(microsoftgraphgeneralledgerentry, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.account_id = account_id
        self.account_number = account_number
        self.credit_amount = credit_amount
        self.debit_amount = debit_amount
        self.description = description
        self.document_number = document_number
        self.document_type = document_type
        self.last_modified_date_time = last_modified_date_time
        self.posting_date = posting_date
        self.account = account


class microsoftgraphitem(microsoftgraphentity):
    """item.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param base_unit_of_measure_id:
    :type base_unit_of_measure_id: str
    :param blocked:
    :type blocked: bool
    :param display_name:
    :type display_name: str
    :param gtin:
    :type gtin: str
    :param inventory:
    :type inventory: float
    :param item_category_code:
    :type item_category_code: str
    :param item_category_id:
    :type item_category_id: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param number:
    :type number: str
    :param price_includes_tax:
    :type price_includes_tax: bool
    :param tax_group_code:
    :type tax_group_code: str
    :param tax_group_id:
    :type tax_group_id: str
    :param type:
    :type type: str
    :param unit_cost:
    :type unit_cost: float
    :param unit_price:
    :type unit_price: float
    :param item_category: itemCategory.
    :type item_category: ~financials.models.microsoftgraphitemcategory
    :param picture:
    :type picture: list[~financials.models.microsoftgraphpicture]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'base_unit_of_measure_id': {'key': 'baseUnitOfMeasureId', 'type': 'str'},
        'blocked': {'key': 'blocked', 'type': 'bool'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'gtin': {'key': 'gtin', 'type': 'str'},
        'inventory': {'key': 'inventory', 'type': 'float'},
        'item_category_code': {'key': 'itemCategoryCode', 'type': 'str'},
        'item_category_id': {'key': 'itemCategoryId', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'number': {'key': 'number', 'type': 'str'},
        'price_includes_tax': {'key': 'priceIncludesTax', 'type': 'bool'},
        'tax_group_code': {'key': 'taxGroupCode', 'type': 'str'},
        'tax_group_id': {'key': 'taxGroupId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'unit_cost': {'key': 'unitCost', 'type': 'float'},
        'unit_price': {'key': 'unitPrice', 'type': 'float'},
        'item_category': {'key': 'itemCategory', 'type': 'microsoftgraphitemcategory'},
        'picture': {'key': 'picture', 'type': '[microsoftgraphpicture]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        base_unit_of_measure_id: Optional[str] = None,
        blocked: Optional[bool] = None,
        display_name: Optional[str] = None,
        gtin: Optional[str] = None,
        inventory: Optional[float] = None,
        item_category_code: Optional[str] = None,
        item_category_id: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        number: Optional[str] = None,
        price_includes_tax: Optional[bool] = None,
        tax_group_code: Optional[str] = None,
        tax_group_id: Optional[str] = None,
        type: Optional[str] = None,
        unit_cost: Optional[float] = None,
        unit_price: Optional[float] = None,
        item_category: Optional["microsoftgraphitemcategory"] = None,
        picture: Optional[List["microsoftgraphpicture"]] = None,
        **kwargs
    ):
        super(microsoftgraphitem, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.base_unit_of_measure_id = base_unit_of_measure_id
        self.blocked = blocked
        self.display_name = display_name
        self.gtin = gtin
        self.inventory = inventory
        self.item_category_code = item_category_code
        self.item_category_id = item_category_id
        self.last_modified_date_time = last_modified_date_time
        self.number = number
        self.price_includes_tax = price_includes_tax
        self.tax_group_code = tax_group_code
        self.tax_group_id = tax_group_id
        self.type = type
        self.unit_cost = unit_cost
        self.unit_price = unit_price
        self.item_category = item_category
        self.picture = picture


class microsoftgraphitemcategory(microsoftgraphentity):
    """itemCategory.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        code: Optional[str] = None,
        display_name: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(microsoftgraphitemcategory, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.display_name = display_name
        self.last_modified_date_time = last_modified_date_time


class microsoftgraphjournal(microsoftgraphentity):
    """journal.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param balancing_account_id:
    :type balancing_account_id: str
    :param balancing_account_number:
    :type balancing_account_number: str
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param account: account.
    :type account: ~financials.models.microsoftgraphaccount
    :param journal_lines:
    :type journal_lines: list[~financials.models.microsoftgraphjournalline]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'balancing_account_id': {'key': 'balancingAccountId', 'type': 'str'},
        'balancing_account_number': {'key': 'balancingAccountNumber', 'type': 'str'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'account': {'key': 'account', 'type': 'microsoftgraphaccount'},
        'journal_lines': {'key': 'journalLines', 'type': '[microsoftgraphjournalline]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        balancing_account_id: Optional[str] = None,
        balancing_account_number: Optional[str] = None,
        code: Optional[str] = None,
        display_name: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        account: Optional["microsoftgraphaccount"] = None,
        journal_lines: Optional[List["microsoftgraphjournalline"]] = None,
        **kwargs
    ):
        super(microsoftgraphjournal, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.balancing_account_id = balancing_account_id
        self.balancing_account_number = balancing_account_number
        self.code = code
        self.display_name = display_name
        self.last_modified_date_time = last_modified_date_time
        self.account = account
        self.journal_lines = journal_lines


class microsoftgraphjournalline(microsoftgraphentity):
    """journalLine.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param account_id:
    :type account_id: str
    :param account_number:
    :type account_number: str
    :param amount:
    :type amount: float
    :param comment:
    :type comment: str
    :param description:
    :type description: str
    :param document_number:
    :type document_number: str
    :param external_document_number:
    :type external_document_number: str
    :param journal_display_name:
    :type journal_display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param line_number:
    :type line_number: int
    :param posting_date:
    :type posting_date: ~datetime.date
    :param account: account.
    :type account: ~financials.models.microsoftgraphaccount
    """

    _validation = {
        'line_number': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'account_id': {'key': 'accountId', 'type': 'str'},
        'account_number': {'key': 'accountNumber', 'type': 'str'},
        'amount': {'key': 'amount', 'type': 'float'},
        'comment': {'key': 'comment', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'document_number': {'key': 'documentNumber', 'type': 'str'},
        'external_document_number': {'key': 'externalDocumentNumber', 'type': 'str'},
        'journal_display_name': {'key': 'journalDisplayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'line_number': {'key': 'lineNumber', 'type': 'int'},
        'posting_date': {'key': 'postingDate', 'type': 'date'},
        'account': {'key': 'account', 'type': 'microsoftgraphaccount'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        account_id: Optional[str] = None,
        account_number: Optional[str] = None,
        amount: Optional[float] = None,
        comment: Optional[str] = None,
        description: Optional[str] = None,
        document_number: Optional[str] = None,
        external_document_number: Optional[str] = None,
        journal_display_name: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        line_number: Optional[int] = None,
        posting_date: Optional[datetime.date] = None,
        account: Optional["microsoftgraphaccount"] = None,
        **kwargs
    ):
        super(microsoftgraphjournalline, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.account_id = account_id
        self.account_number = account_number
        self.amount = amount
        self.comment = comment
        self.description = description
        self.document_number = document_number
        self.external_document_number = external_document_number
        self.journal_display_name = journal_display_name
        self.last_modified_date_time = last_modified_date_time
        self.line_number = line_number
        self.posting_date = posting_date
        self.account = account


class microsoftgraphpaymentmethod(microsoftgraphentity):
    """paymentMethod.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        code: Optional[str] = None,
        display_name: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(microsoftgraphpaymentmethod, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.display_name = display_name
        self.last_modified_date_time = last_modified_date_time


class microsoftgraphpaymentterm(microsoftgraphentity):
    """paymentTerm.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param calculate_discount_on_credit_memos:
    :type calculate_discount_on_credit_memos: bool
    :param code:
    :type code: str
    :param discount_date_calculation:
    :type discount_date_calculation: str
    :param discount_percent:
    :type discount_percent: float
    :param display_name:
    :type display_name: str
    :param due_date_calculation:
    :type due_date_calculation: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'calculate_discount_on_credit_memos': {'key': 'calculateDiscountOnCreditMemos', 'type': 'bool'},
        'code': {'key': 'code', 'type': 'str'},
        'discount_date_calculation': {'key': 'discountDateCalculation', 'type': 'str'},
        'discount_percent': {'key': 'discountPercent', 'type': 'float'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'due_date_calculation': {'key': 'dueDateCalculation', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        calculate_discount_on_credit_memos: Optional[bool] = None,
        code: Optional[str] = None,
        discount_date_calculation: Optional[str] = None,
        discount_percent: Optional[float] = None,
        display_name: Optional[str] = None,
        due_date_calculation: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(microsoftgraphpaymentterm, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.calculate_discount_on_credit_memos = calculate_discount_on_credit_memos
        self.code = code
        self.discount_date_calculation = discount_date_calculation
        self.discount_percent = discount_percent
        self.display_name = display_name
        self.due_date_calculation = due_date_calculation
        self.last_modified_date_time = last_modified_date_time


class microsoftgraphpicture(microsoftgraphentity):
    """picture.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content:
    :type content: bytes
    :param content_type:
    :type content_type: str
    :param height:
    :type height: int
    :param width:
    :type width: int
    """

    _validation = {
        'height': {'maximum': 2147483647, 'minimum': -2147483648},
        'width': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'content': {'key': 'content', 'type': 'base64'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'height': {'key': 'height', 'type': 'int'},
        'width': {'key': 'width', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        content: Optional[bytes] = None,
        content_type: Optional[str] = None,
        height: Optional[int] = None,
        width: Optional[int] = None,
        **kwargs
    ):
        super(microsoftgraphpicture, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.content = content
        self.content_type = content_type
        self.height = height
        self.width = width


class microsoftgraphpostaladdresstype(msrest.serialization.Model):
    """postalAddressType.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param city:
    :type city: str
    :param country_letter_code:
    :type country_letter_code: str
    :param postal_code:
    :type postal_code: str
    :param state:
    :type state: str
    :param street:
    :type street: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'city': {'key': 'city', 'type': 'str'},
        'country_letter_code': {'key': 'countryLetterCode', 'type': 'str'},
        'postal_code': {'key': 'postalCode', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'street': {'key': 'street', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        city: Optional[str] = None,
        country_letter_code: Optional[str] = None,
        postal_code: Optional[str] = None,
        state: Optional[str] = None,
        street: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphpostaladdresstype, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.city = city
        self.country_letter_code = country_letter_code
        self.postal_code = postal_code
        self.state = state
        self.street = street


class microsoftgraphpurchaseinvoice(microsoftgraphentity):
    """purchaseInvoice.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param buy_from_address: postalAddressType.
    :type buy_from_address: ~financials.models.microsoftgraphpostaladdresstype
    :param currency_code:
    :type currency_code: str
    :param currency_id:
    :type currency_id: str
    :param discount_amount:
    :type discount_amount: float
    :param discount_applied_before_tax:
    :type discount_applied_before_tax: bool
    :param due_date:
    :type due_date: ~datetime.date
    :param invoice_date:
    :type invoice_date: ~datetime.date
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param number:
    :type number: str
    :param pay_to_address: postalAddressType.
    :type pay_to_address: ~financials.models.microsoftgraphpostaladdresstype
    :param pay_to_contact:
    :type pay_to_contact: str
    :param pay_to_name:
    :type pay_to_name: str
    :param pay_to_vendor_id:
    :type pay_to_vendor_id: str
    :param pay_to_vendor_number:
    :type pay_to_vendor_number: str
    :param prices_include_tax:
    :type prices_include_tax: bool
    :param ship_to_address: postalAddressType.
    :type ship_to_address: ~financials.models.microsoftgraphpostaladdresstype
    :param ship_to_contact:
    :type ship_to_contact: str
    :param ship_to_name:
    :type ship_to_name: str
    :param status:
    :type status: str
    :param total_amount_excluding_tax:
    :type total_amount_excluding_tax: float
    :param total_amount_including_tax:
    :type total_amount_including_tax: float
    :param total_tax_amount:
    :type total_tax_amount: float
    :param vendor_id:
    :type vendor_id: str
    :param vendor_invoice_number:
    :type vendor_invoice_number: str
    :param vendor_name:
    :type vendor_name: str
    :param vendor_number:
    :type vendor_number: str
    :param currency: currency.
    :type currency: ~financials.models.microsoftgraphcurrency
    :param purchase_invoice_lines:
    :type purchase_invoice_lines: list[~financials.models.microsoftgraphpurchaseinvoiceline]
    :param vendor: vendor.
    :type vendor: ~financials.models.microsoftgraphvendor
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'buy_from_address': {'key': 'buyFromAddress', 'type': 'microsoftgraphpostaladdresstype'},
        'currency_code': {'key': 'currencyCode', 'type': 'str'},
        'currency_id': {'key': 'currencyId', 'type': 'str'},
        'discount_amount': {'key': 'discountAmount', 'type': 'float'},
        'discount_applied_before_tax': {'key': 'discountAppliedBeforeTax', 'type': 'bool'},
        'due_date': {'key': 'dueDate', 'type': 'date'},
        'invoice_date': {'key': 'invoiceDate', 'type': 'date'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'number': {'key': 'number', 'type': 'str'},
        'pay_to_address': {'key': 'payToAddress', 'type': 'microsoftgraphpostaladdresstype'},
        'pay_to_contact': {'key': 'payToContact', 'type': 'str'},
        'pay_to_name': {'key': 'payToName', 'type': 'str'},
        'pay_to_vendor_id': {'key': 'payToVendorId', 'type': 'str'},
        'pay_to_vendor_number': {'key': 'payToVendorNumber', 'type': 'str'},
        'prices_include_tax': {'key': 'pricesIncludeTax', 'type': 'bool'},
        'ship_to_address': {'key': 'shipToAddress', 'type': 'microsoftgraphpostaladdresstype'},
        'ship_to_contact': {'key': 'shipToContact', 'type': 'str'},
        'ship_to_name': {'key': 'shipToName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'total_amount_excluding_tax': {'key': 'totalAmountExcludingTax', 'type': 'float'},
        'total_amount_including_tax': {'key': 'totalAmountIncludingTax', 'type': 'float'},
        'total_tax_amount': {'key': 'totalTaxAmount', 'type': 'float'},
        'vendor_id': {'key': 'vendorId', 'type': 'str'},
        'vendor_invoice_number': {'key': 'vendorInvoiceNumber', 'type': 'str'},
        'vendor_name': {'key': 'vendorName', 'type': 'str'},
        'vendor_number': {'key': 'vendorNumber', 'type': 'str'},
        'currency': {'key': 'currency', 'type': 'microsoftgraphcurrency'},
        'purchase_invoice_lines': {'key': 'purchaseInvoiceLines', 'type': '[microsoftgraphpurchaseinvoiceline]'},
        'vendor': {'key': 'vendor', 'type': 'microsoftgraphvendor'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        buy_from_address: Optional["microsoftgraphpostaladdresstype"] = None,
        currency_code: Optional[str] = None,
        currency_id: Optional[str] = None,
        discount_amount: Optional[float] = None,
        discount_applied_before_tax: Optional[bool] = None,
        due_date: Optional[datetime.date] = None,
        invoice_date: Optional[datetime.date] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        number: Optional[str] = None,
        pay_to_address: Optional["microsoftgraphpostaladdresstype"] = None,
        pay_to_contact: Optional[str] = None,
        pay_to_name: Optional[str] = None,
        pay_to_vendor_id: Optional[str] = None,
        pay_to_vendor_number: Optional[str] = None,
        prices_include_tax: Optional[bool] = None,
        ship_to_address: Optional["microsoftgraphpostaladdresstype"] = None,
        ship_to_contact: Optional[str] = None,
        ship_to_name: Optional[str] = None,
        status: Optional[str] = None,
        total_amount_excluding_tax: Optional[float] = None,
        total_amount_including_tax: Optional[float] = None,
        total_tax_amount: Optional[float] = None,
        vendor_id: Optional[str] = None,
        vendor_invoice_number: Optional[str] = None,
        vendor_name: Optional[str] = None,
        vendor_number: Optional[str] = None,
        currency: Optional["microsoftgraphcurrency"] = None,
        purchase_invoice_lines: Optional[List["microsoftgraphpurchaseinvoiceline"]] = None,
        vendor: Optional["microsoftgraphvendor"] = None,
        **kwargs
    ):
        super(microsoftgraphpurchaseinvoice, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.buy_from_address = buy_from_address
        self.currency_code = currency_code
        self.currency_id = currency_id
        self.discount_amount = discount_amount
        self.discount_applied_before_tax = discount_applied_before_tax
        self.due_date = due_date
        self.invoice_date = invoice_date
        self.last_modified_date_time = last_modified_date_time
        self.number = number
        self.pay_to_address = pay_to_address
        self.pay_to_contact = pay_to_contact
        self.pay_to_name = pay_to_name
        self.pay_to_vendor_id = pay_to_vendor_id
        self.pay_to_vendor_number = pay_to_vendor_number
        self.prices_include_tax = prices_include_tax
        self.ship_to_address = ship_to_address
        self.ship_to_contact = ship_to_contact
        self.ship_to_name = ship_to_name
        self.status = status
        self.total_amount_excluding_tax = total_amount_excluding_tax
        self.total_amount_including_tax = total_amount_including_tax
        self.total_tax_amount = total_tax_amount
        self.vendor_id = vendor_id
        self.vendor_invoice_number = vendor_invoice_number
        self.vendor_name = vendor_name
        self.vendor_number = vendor_number
        self.currency = currency
        self.purchase_invoice_lines = purchase_invoice_lines
        self.vendor = vendor


class microsoftgraphpurchaseinvoiceline(microsoftgraphentity):
    """purchaseInvoiceLine.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param account_id:
    :type account_id: str
    :param amount_excluding_tax:
    :type amount_excluding_tax: float
    :param amount_including_tax:
    :type amount_including_tax: float
    :param description:
    :type description: str
    :param discount_amount:
    :type discount_amount: float
    :param discount_applied_before_tax:
    :type discount_applied_before_tax: bool
    :param discount_percent:
    :type discount_percent: float
    :param document_id:
    :type document_id: str
    :param expected_receipt_date:
    :type expected_receipt_date: ~datetime.date
    :param invoice_discount_allocation:
    :type invoice_discount_allocation: float
    :param item_id:
    :type item_id: str
    :param line_type:
    :type line_type: str
    :param net_amount:
    :type net_amount: float
    :param net_amount_including_tax:
    :type net_amount_including_tax: float
    :param net_tax_amount:
    :type net_tax_amount: float
    :param quantity:
    :type quantity: float
    :param sequence:
    :type sequence: int
    :param tax_code:
    :type tax_code: str
    :param tax_percent:
    :type tax_percent: float
    :param total_tax_amount:
    :type total_tax_amount: float
    :param unit_cost:
    :type unit_cost: float
    :param account: account.
    :type account: ~financials.models.microsoftgraphaccount
    :param item: item.
    :type item: ~financials.models.microsoftgraphitem
    """

    _validation = {
        'sequence': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'account_id': {'key': 'accountId', 'type': 'str'},
        'amount_excluding_tax': {'key': 'amountExcludingTax', 'type': 'float'},
        'amount_including_tax': {'key': 'amountIncludingTax', 'type': 'float'},
        'description': {'key': 'description', 'type': 'str'},
        'discount_amount': {'key': 'discountAmount', 'type': 'float'},
        'discount_applied_before_tax': {'key': 'discountAppliedBeforeTax', 'type': 'bool'},
        'discount_percent': {'key': 'discountPercent', 'type': 'float'},
        'document_id': {'key': 'documentId', 'type': 'str'},
        'expected_receipt_date': {'key': 'expectedReceiptDate', 'type': 'date'},
        'invoice_discount_allocation': {'key': 'invoiceDiscountAllocation', 'type': 'float'},
        'item_id': {'key': 'itemId', 'type': 'str'},
        'line_type': {'key': 'lineType', 'type': 'str'},
        'net_amount': {'key': 'netAmount', 'type': 'float'},
        'net_amount_including_tax': {'key': 'netAmountIncludingTax', 'type': 'float'},
        'net_tax_amount': {'key': 'netTaxAmount', 'type': 'float'},
        'quantity': {'key': 'quantity', 'type': 'float'},
        'sequence': {'key': 'sequence', 'type': 'int'},
        'tax_code': {'key': 'taxCode', 'type': 'str'},
        'tax_percent': {'key': 'taxPercent', 'type': 'float'},
        'total_tax_amount': {'key': 'totalTaxAmount', 'type': 'float'},
        'unit_cost': {'key': 'unitCost', 'type': 'float'},
        'account': {'key': 'account', 'type': 'microsoftgraphaccount'},
        'item': {'key': 'item', 'type': 'microsoftgraphitem'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        account_id: Optional[str] = None,
        amount_excluding_tax: Optional[float] = None,
        amount_including_tax: Optional[float] = None,
        description: Optional[str] = None,
        discount_amount: Optional[float] = None,
        discount_applied_before_tax: Optional[bool] = None,
        discount_percent: Optional[float] = None,
        document_id: Optional[str] = None,
        expected_receipt_date: Optional[datetime.date] = None,
        invoice_discount_allocation: Optional[float] = None,
        item_id: Optional[str] = None,
        line_type: Optional[str] = None,
        net_amount: Optional[float] = None,
        net_amount_including_tax: Optional[float] = None,
        net_tax_amount: Optional[float] = None,
        quantity: Optional[float] = None,
        sequence: Optional[int] = None,
        tax_code: Optional[str] = None,
        tax_percent: Optional[float] = None,
        total_tax_amount: Optional[float] = None,
        unit_cost: Optional[float] = None,
        account: Optional["microsoftgraphaccount"] = None,
        item: Optional["microsoftgraphitem"] = None,
        **kwargs
    ):
        super(microsoftgraphpurchaseinvoiceline, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.account_id = account_id
        self.amount_excluding_tax = amount_excluding_tax
        self.amount_including_tax = amount_including_tax
        self.description = description
        self.discount_amount = discount_amount
        self.discount_applied_before_tax = discount_applied_before_tax
        self.discount_percent = discount_percent
        self.document_id = document_id
        self.expected_receipt_date = expected_receipt_date
        self.invoice_discount_allocation = invoice_discount_allocation
        self.item_id = item_id
        self.line_type = line_type
        self.net_amount = net_amount
        self.net_amount_including_tax = net_amount_including_tax
        self.net_tax_amount = net_tax_amount
        self.quantity = quantity
        self.sequence = sequence
        self.tax_code = tax_code
        self.tax_percent = tax_percent
        self.total_tax_amount = total_tax_amount
        self.unit_cost = unit_cost
        self.account = account
        self.item = item


class microsoftgraphsalescreditmemo(microsoftgraphentity):
    """salesCreditMemo.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param billing_postal_address: postalAddressType.
    :type billing_postal_address: ~financials.models.microsoftgraphpostaladdresstype
    :param bill_to_customer_id:
    :type bill_to_customer_id: str
    :param bill_to_customer_number:
    :type bill_to_customer_number: str
    :param bill_to_name:
    :type bill_to_name: str
    :param credit_memo_date:
    :type credit_memo_date: ~datetime.date
    :param currency_code:
    :type currency_code: str
    :param currency_id:
    :type currency_id: str
    :param customer_id:
    :type customer_id: str
    :param customer_name:
    :type customer_name: str
    :param customer_number:
    :type customer_number: str
    :param discount_amount:
    :type discount_amount: float
    :param discount_applied_before_tax:
    :type discount_applied_before_tax: bool
    :param due_date:
    :type due_date: ~datetime.date
    :param email:
    :type email: str
    :param external_document_number:
    :type external_document_number: str
    :param invoice_id:
    :type invoice_id: str
    :param invoice_number:
    :type invoice_number: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param number:
    :type number: str
    :param payment_terms_id:
    :type payment_terms_id: str
    :param phone_number:
    :type phone_number: str
    :param prices_include_tax:
    :type prices_include_tax: bool
    :param salesperson:
    :type salesperson: str
    :param selling_postal_address: postalAddressType.
    :type selling_postal_address: ~financials.models.microsoftgraphpostaladdresstype
    :param status:
    :type status: str
    :param total_amount_excluding_tax:
    :type total_amount_excluding_tax: float
    :param total_amount_including_tax:
    :type total_amount_including_tax: float
    :param total_tax_amount:
    :type total_tax_amount: float
    :param currency: currency.
    :type currency: ~financials.models.microsoftgraphcurrency
    :param customer: customer.
    :type customer: ~financials.models.microsoftgraphcustomer
    :param payment_term: paymentTerm.
    :type payment_term: ~financials.models.microsoftgraphpaymentterm
    :param sales_credit_memo_lines:
    :type sales_credit_memo_lines: list[~financials.models.microsoftgraphsalescreditmemoline]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'billing_postal_address': {'key': 'billingPostalAddress', 'type': 'microsoftgraphpostaladdresstype'},
        'bill_to_customer_id': {'key': 'billToCustomerId', 'type': 'str'},
        'bill_to_customer_number': {'key': 'billToCustomerNumber', 'type': 'str'},
        'bill_to_name': {'key': 'billToName', 'type': 'str'},
        'credit_memo_date': {'key': 'creditMemoDate', 'type': 'date'},
        'currency_code': {'key': 'currencyCode', 'type': 'str'},
        'currency_id': {'key': 'currencyId', 'type': 'str'},
        'customer_id': {'key': 'customerId', 'type': 'str'},
        'customer_name': {'key': 'customerName', 'type': 'str'},
        'customer_number': {'key': 'customerNumber', 'type': 'str'},
        'discount_amount': {'key': 'discountAmount', 'type': 'float'},
        'discount_applied_before_tax': {'key': 'discountAppliedBeforeTax', 'type': 'bool'},
        'due_date': {'key': 'dueDate', 'type': 'date'},
        'email': {'key': 'email', 'type': 'str'},
        'external_document_number': {'key': 'externalDocumentNumber', 'type': 'str'},
        'invoice_id': {'key': 'invoiceId', 'type': 'str'},
        'invoice_number': {'key': 'invoiceNumber', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'number': {'key': 'number', 'type': 'str'},
        'payment_terms_id': {'key': 'paymentTermsId', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'prices_include_tax': {'key': 'pricesIncludeTax', 'type': 'bool'},
        'salesperson': {'key': 'salesperson', 'type': 'str'},
        'selling_postal_address': {'key': 'sellingPostalAddress', 'type': 'microsoftgraphpostaladdresstype'},
        'status': {'key': 'status', 'type': 'str'},
        'total_amount_excluding_tax': {'key': 'totalAmountExcludingTax', 'type': 'float'},
        'total_amount_including_tax': {'key': 'totalAmountIncludingTax', 'type': 'float'},
        'total_tax_amount': {'key': 'totalTaxAmount', 'type': 'float'},
        'currency': {'key': 'currency', 'type': 'microsoftgraphcurrency'},
        'customer': {'key': 'customer', 'type': 'microsoftgraphcustomer'},
        'payment_term': {'key': 'paymentTerm', 'type': 'microsoftgraphpaymentterm'},
        'sales_credit_memo_lines': {'key': 'salesCreditMemoLines', 'type': '[microsoftgraphsalescreditmemoline]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        billing_postal_address: Optional["microsoftgraphpostaladdresstype"] = None,
        bill_to_customer_id: Optional[str] = None,
        bill_to_customer_number: Optional[str] = None,
        bill_to_name: Optional[str] = None,
        credit_memo_date: Optional[datetime.date] = None,
        currency_code: Optional[str] = None,
        currency_id: Optional[str] = None,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        customer_number: Optional[str] = None,
        discount_amount: Optional[float] = None,
        discount_applied_before_tax: Optional[bool] = None,
        due_date: Optional[datetime.date] = None,
        email: Optional[str] = None,
        external_document_number: Optional[str] = None,
        invoice_id: Optional[str] = None,
        invoice_number: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        number: Optional[str] = None,
        payment_terms_id: Optional[str] = None,
        phone_number: Optional[str] = None,
        prices_include_tax: Optional[bool] = None,
        salesperson: Optional[str] = None,
        selling_postal_address: Optional["microsoftgraphpostaladdresstype"] = None,
        status: Optional[str] = None,
        total_amount_excluding_tax: Optional[float] = None,
        total_amount_including_tax: Optional[float] = None,
        total_tax_amount: Optional[float] = None,
        currency: Optional["microsoftgraphcurrency"] = None,
        customer: Optional["microsoftgraphcustomer"] = None,
        payment_term: Optional["microsoftgraphpaymentterm"] = None,
        sales_credit_memo_lines: Optional[List["microsoftgraphsalescreditmemoline"]] = None,
        **kwargs
    ):
        super(microsoftgraphsalescreditmemo, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.billing_postal_address = billing_postal_address
        self.bill_to_customer_id = bill_to_customer_id
        self.bill_to_customer_number = bill_to_customer_number
        self.bill_to_name = bill_to_name
        self.credit_memo_date = credit_memo_date
        self.currency_code = currency_code
        self.currency_id = currency_id
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.customer_number = customer_number
        self.discount_amount = discount_amount
        self.discount_applied_before_tax = discount_applied_before_tax
        self.due_date = due_date
        self.email = email
        self.external_document_number = external_document_number
        self.invoice_id = invoice_id
        self.invoice_number = invoice_number
        self.last_modified_date_time = last_modified_date_time
        self.number = number
        self.payment_terms_id = payment_terms_id
        self.phone_number = phone_number
        self.prices_include_tax = prices_include_tax
        self.salesperson = salesperson
        self.selling_postal_address = selling_postal_address
        self.status = status
        self.total_amount_excluding_tax = total_amount_excluding_tax
        self.total_amount_including_tax = total_amount_including_tax
        self.total_tax_amount = total_tax_amount
        self.currency = currency
        self.customer = customer
        self.payment_term = payment_term
        self.sales_credit_memo_lines = sales_credit_memo_lines


class microsoftgraphsalescreditmemoline(microsoftgraphentity):
    """salesCreditMemoLine.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param account_id:
    :type account_id: str
    :param amount_excluding_tax:
    :type amount_excluding_tax: float
    :param amount_including_tax:
    :type amount_including_tax: float
    :param description:
    :type description: str
    :param discount_amount:
    :type discount_amount: float
    :param discount_applied_before_tax:
    :type discount_applied_before_tax: bool
    :param discount_percent:
    :type discount_percent: float
    :param document_id:
    :type document_id: str
    :param invoice_discount_allocation:
    :type invoice_discount_allocation: float
    :param item_id:
    :type item_id: str
    :param line_type:
    :type line_type: str
    :param net_amount:
    :type net_amount: float
    :param net_amount_including_tax:
    :type net_amount_including_tax: float
    :param net_tax_amount:
    :type net_tax_amount: float
    :param quantity:
    :type quantity: float
    :param sequence:
    :type sequence: int
    :param shipment_date:
    :type shipment_date: ~datetime.date
    :param tax_code:
    :type tax_code: str
    :param tax_percent:
    :type tax_percent: float
    :param total_tax_amount:
    :type total_tax_amount: float
    :param unit_of_measure_id:
    :type unit_of_measure_id: str
    :param unit_price:
    :type unit_price: float
    :param account: account.
    :type account: ~financials.models.microsoftgraphaccount
    :param item: item.
    :type item: ~financials.models.microsoftgraphitem
    """

    _validation = {
        'sequence': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'account_id': {'key': 'accountId', 'type': 'str'},
        'amount_excluding_tax': {'key': 'amountExcludingTax', 'type': 'float'},
        'amount_including_tax': {'key': 'amountIncludingTax', 'type': 'float'},
        'description': {'key': 'description', 'type': 'str'},
        'discount_amount': {'key': 'discountAmount', 'type': 'float'},
        'discount_applied_before_tax': {'key': 'discountAppliedBeforeTax', 'type': 'bool'},
        'discount_percent': {'key': 'discountPercent', 'type': 'float'},
        'document_id': {'key': 'documentId', 'type': 'str'},
        'invoice_discount_allocation': {'key': 'invoiceDiscountAllocation', 'type': 'float'},
        'item_id': {'key': 'itemId', 'type': 'str'},
        'line_type': {'key': 'lineType', 'type': 'str'},
        'net_amount': {'key': 'netAmount', 'type': 'float'},
        'net_amount_including_tax': {'key': 'netAmountIncludingTax', 'type': 'float'},
        'net_tax_amount': {'key': 'netTaxAmount', 'type': 'float'},
        'quantity': {'key': 'quantity', 'type': 'float'},
        'sequence': {'key': 'sequence', 'type': 'int'},
        'shipment_date': {'key': 'shipmentDate', 'type': 'date'},
        'tax_code': {'key': 'taxCode', 'type': 'str'},
        'tax_percent': {'key': 'taxPercent', 'type': 'float'},
        'total_tax_amount': {'key': 'totalTaxAmount', 'type': 'float'},
        'unit_of_measure_id': {'key': 'unitOfMeasureId', 'type': 'str'},
        'unit_price': {'key': 'unitPrice', 'type': 'float'},
        'account': {'key': 'account', 'type': 'microsoftgraphaccount'},
        'item': {'key': 'item', 'type': 'microsoftgraphitem'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        account_id: Optional[str] = None,
        amount_excluding_tax: Optional[float] = None,
        amount_including_tax: Optional[float] = None,
        description: Optional[str] = None,
        discount_amount: Optional[float] = None,
        discount_applied_before_tax: Optional[bool] = None,
        discount_percent: Optional[float] = None,
        document_id: Optional[str] = None,
        invoice_discount_allocation: Optional[float] = None,
        item_id: Optional[str] = None,
        line_type: Optional[str] = None,
        net_amount: Optional[float] = None,
        net_amount_including_tax: Optional[float] = None,
        net_tax_amount: Optional[float] = None,
        quantity: Optional[float] = None,
        sequence: Optional[int] = None,
        shipment_date: Optional[datetime.date] = None,
        tax_code: Optional[str] = None,
        tax_percent: Optional[float] = None,
        total_tax_amount: Optional[float] = None,
        unit_of_measure_id: Optional[str] = None,
        unit_price: Optional[float] = None,
        account: Optional["microsoftgraphaccount"] = None,
        item: Optional["microsoftgraphitem"] = None,
        **kwargs
    ):
        super(microsoftgraphsalescreditmemoline, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.account_id = account_id
        self.amount_excluding_tax = amount_excluding_tax
        self.amount_including_tax = amount_including_tax
        self.description = description
        self.discount_amount = discount_amount
        self.discount_applied_before_tax = discount_applied_before_tax
        self.discount_percent = discount_percent
        self.document_id = document_id
        self.invoice_discount_allocation = invoice_discount_allocation
        self.item_id = item_id
        self.line_type = line_type
        self.net_amount = net_amount
        self.net_amount_including_tax = net_amount_including_tax
        self.net_tax_amount = net_tax_amount
        self.quantity = quantity
        self.sequence = sequence
        self.shipment_date = shipment_date
        self.tax_code = tax_code
        self.tax_percent = tax_percent
        self.total_tax_amount = total_tax_amount
        self.unit_of_measure_id = unit_of_measure_id
        self.unit_price = unit_price
        self.account = account
        self.item = item


class microsoftgraphsalesinvoice(microsoftgraphentity):
    """salesInvoice.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param billing_postal_address: postalAddressType.
    :type billing_postal_address: ~financials.models.microsoftgraphpostaladdresstype
    :param bill_to_customer_id:
    :type bill_to_customer_id: str
    :param bill_to_customer_number:
    :type bill_to_customer_number: str
    :param bill_to_name:
    :type bill_to_name: str
    :param currency_code:
    :type currency_code: str
    :param currency_id:
    :type currency_id: str
    :param customer_id:
    :type customer_id: str
    :param customer_name:
    :type customer_name: str
    :param customer_number:
    :type customer_number: str
    :param customer_purchase_order_reference:
    :type customer_purchase_order_reference: str
    :param discount_amount:
    :type discount_amount: float
    :param discount_applied_before_tax:
    :type discount_applied_before_tax: bool
    :param due_date:
    :type due_date: ~datetime.date
    :param email:
    :type email: str
    :param external_document_number:
    :type external_document_number: str
    :param invoice_date:
    :type invoice_date: ~datetime.date
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param number:
    :type number: str
    :param order_id:
    :type order_id: str
    :param order_number:
    :type order_number: str
    :param payment_terms_id:
    :type payment_terms_id: str
    :param phone_number:
    :type phone_number: str
    :param prices_include_tax:
    :type prices_include_tax: bool
    :param salesperson:
    :type salesperson: str
    :param selling_postal_address: postalAddressType.
    :type selling_postal_address: ~financials.models.microsoftgraphpostaladdresstype
    :param shipment_method_id:
    :type shipment_method_id: str
    :param shipping_postal_address: postalAddressType.
    :type shipping_postal_address: ~financials.models.microsoftgraphpostaladdresstype
    :param ship_to_contact:
    :type ship_to_contact: str
    :param ship_to_name:
    :type ship_to_name: str
    :param status:
    :type status: str
    :param total_amount_excluding_tax:
    :type total_amount_excluding_tax: float
    :param total_amount_including_tax:
    :type total_amount_including_tax: float
    :param total_tax_amount:
    :type total_tax_amount: float
    :param currency: currency.
    :type currency: ~financials.models.microsoftgraphcurrency
    :param customer: customer.
    :type customer: ~financials.models.microsoftgraphcustomer
    :param payment_term: paymentTerm.
    :type payment_term: ~financials.models.microsoftgraphpaymentterm
    :param sales_invoice_lines:
    :type sales_invoice_lines: list[~financials.models.microsoftgraphsalesinvoiceline]
    :param shipment_method: shipmentMethod.
    :type shipment_method: ~financials.models.microsoftgraphshipmentmethod
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'billing_postal_address': {'key': 'billingPostalAddress', 'type': 'microsoftgraphpostaladdresstype'},
        'bill_to_customer_id': {'key': 'billToCustomerId', 'type': 'str'},
        'bill_to_customer_number': {'key': 'billToCustomerNumber', 'type': 'str'},
        'bill_to_name': {'key': 'billToName', 'type': 'str'},
        'currency_code': {'key': 'currencyCode', 'type': 'str'},
        'currency_id': {'key': 'currencyId', 'type': 'str'},
        'customer_id': {'key': 'customerId', 'type': 'str'},
        'customer_name': {'key': 'customerName', 'type': 'str'},
        'customer_number': {'key': 'customerNumber', 'type': 'str'},
        'customer_purchase_order_reference': {'key': 'customerPurchaseOrderReference', 'type': 'str'},
        'discount_amount': {'key': 'discountAmount', 'type': 'float'},
        'discount_applied_before_tax': {'key': 'discountAppliedBeforeTax', 'type': 'bool'},
        'due_date': {'key': 'dueDate', 'type': 'date'},
        'email': {'key': 'email', 'type': 'str'},
        'external_document_number': {'key': 'externalDocumentNumber', 'type': 'str'},
        'invoice_date': {'key': 'invoiceDate', 'type': 'date'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'number': {'key': 'number', 'type': 'str'},
        'order_id': {'key': 'orderId', 'type': 'str'},
        'order_number': {'key': 'orderNumber', 'type': 'str'},
        'payment_terms_id': {'key': 'paymentTermsId', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'prices_include_tax': {'key': 'pricesIncludeTax', 'type': 'bool'},
        'salesperson': {'key': 'salesperson', 'type': 'str'},
        'selling_postal_address': {'key': 'sellingPostalAddress', 'type': 'microsoftgraphpostaladdresstype'},
        'shipment_method_id': {'key': 'shipmentMethodId', 'type': 'str'},
        'shipping_postal_address': {'key': 'shippingPostalAddress', 'type': 'microsoftgraphpostaladdresstype'},
        'ship_to_contact': {'key': 'shipToContact', 'type': 'str'},
        'ship_to_name': {'key': 'shipToName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'total_amount_excluding_tax': {'key': 'totalAmountExcludingTax', 'type': 'float'},
        'total_amount_including_tax': {'key': 'totalAmountIncludingTax', 'type': 'float'},
        'total_tax_amount': {'key': 'totalTaxAmount', 'type': 'float'},
        'currency': {'key': 'currency', 'type': 'microsoftgraphcurrency'},
        'customer': {'key': 'customer', 'type': 'microsoftgraphcustomer'},
        'payment_term': {'key': 'paymentTerm', 'type': 'microsoftgraphpaymentterm'},
        'sales_invoice_lines': {'key': 'salesInvoiceLines', 'type': '[microsoftgraphsalesinvoiceline]'},
        'shipment_method': {'key': 'shipmentMethod', 'type': 'microsoftgraphshipmentmethod'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        billing_postal_address: Optional["microsoftgraphpostaladdresstype"] = None,
        bill_to_customer_id: Optional[str] = None,
        bill_to_customer_number: Optional[str] = None,
        bill_to_name: Optional[str] = None,
        currency_code: Optional[str] = None,
        currency_id: Optional[str] = None,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        customer_number: Optional[str] = None,
        customer_purchase_order_reference: Optional[str] = None,
        discount_amount: Optional[float] = None,
        discount_applied_before_tax: Optional[bool] = None,
        due_date: Optional[datetime.date] = None,
        email: Optional[str] = None,
        external_document_number: Optional[str] = None,
        invoice_date: Optional[datetime.date] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        number: Optional[str] = None,
        order_id: Optional[str] = None,
        order_number: Optional[str] = None,
        payment_terms_id: Optional[str] = None,
        phone_number: Optional[str] = None,
        prices_include_tax: Optional[bool] = None,
        salesperson: Optional[str] = None,
        selling_postal_address: Optional["microsoftgraphpostaladdresstype"] = None,
        shipment_method_id: Optional[str] = None,
        shipping_postal_address: Optional["microsoftgraphpostaladdresstype"] = None,
        ship_to_contact: Optional[str] = None,
        ship_to_name: Optional[str] = None,
        status: Optional[str] = None,
        total_amount_excluding_tax: Optional[float] = None,
        total_amount_including_tax: Optional[float] = None,
        total_tax_amount: Optional[float] = None,
        currency: Optional["microsoftgraphcurrency"] = None,
        customer: Optional["microsoftgraphcustomer"] = None,
        payment_term: Optional["microsoftgraphpaymentterm"] = None,
        sales_invoice_lines: Optional[List["microsoftgraphsalesinvoiceline"]] = None,
        shipment_method: Optional["microsoftgraphshipmentmethod"] = None,
        **kwargs
    ):
        super(microsoftgraphsalesinvoice, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.billing_postal_address = billing_postal_address
        self.bill_to_customer_id = bill_to_customer_id
        self.bill_to_customer_number = bill_to_customer_number
        self.bill_to_name = bill_to_name
        self.currency_code = currency_code
        self.currency_id = currency_id
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.customer_number = customer_number
        self.customer_purchase_order_reference = customer_purchase_order_reference
        self.discount_amount = discount_amount
        self.discount_applied_before_tax = discount_applied_before_tax
        self.due_date = due_date
        self.email = email
        self.external_document_number = external_document_number
        self.invoice_date = invoice_date
        self.last_modified_date_time = last_modified_date_time
        self.number = number
        self.order_id = order_id
        self.order_number = order_number
        self.payment_terms_id = payment_terms_id
        self.phone_number = phone_number
        self.prices_include_tax = prices_include_tax
        self.salesperson = salesperson
        self.selling_postal_address = selling_postal_address
        self.shipment_method_id = shipment_method_id
        self.shipping_postal_address = shipping_postal_address
        self.ship_to_contact = ship_to_contact
        self.ship_to_name = ship_to_name
        self.status = status
        self.total_amount_excluding_tax = total_amount_excluding_tax
        self.total_amount_including_tax = total_amount_including_tax
        self.total_tax_amount = total_tax_amount
        self.currency = currency
        self.customer = customer
        self.payment_term = payment_term
        self.sales_invoice_lines = sales_invoice_lines
        self.shipment_method = shipment_method


class microsoftgraphsalesinvoiceline(microsoftgraphentity):
    """salesInvoiceLine.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param account_id:
    :type account_id: str
    :param amount_excluding_tax:
    :type amount_excluding_tax: float
    :param amount_including_tax:
    :type amount_including_tax: float
    :param description:
    :type description: str
    :param discount_amount:
    :type discount_amount: float
    :param discount_applied_before_tax:
    :type discount_applied_before_tax: bool
    :param discount_percent:
    :type discount_percent: float
    :param document_id:
    :type document_id: str
    :param invoice_discount_allocation:
    :type invoice_discount_allocation: float
    :param item_id:
    :type item_id: str
    :param line_type:
    :type line_type: str
    :param net_amount:
    :type net_amount: float
    :param net_amount_including_tax:
    :type net_amount_including_tax: float
    :param net_tax_amount:
    :type net_tax_amount: float
    :param quantity:
    :type quantity: float
    :param sequence:
    :type sequence: int
    :param shipment_date:
    :type shipment_date: ~datetime.date
    :param tax_code:
    :type tax_code: str
    :param tax_percent:
    :type tax_percent: float
    :param total_tax_amount:
    :type total_tax_amount: float
    :param unit_of_measure_id:
    :type unit_of_measure_id: str
    :param unit_price:
    :type unit_price: float
    :param account: account.
    :type account: ~financials.models.microsoftgraphaccount
    :param item: item.
    :type item: ~financials.models.microsoftgraphitem
    """

    _validation = {
        'sequence': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'account_id': {'key': 'accountId', 'type': 'str'},
        'amount_excluding_tax': {'key': 'amountExcludingTax', 'type': 'float'},
        'amount_including_tax': {'key': 'amountIncludingTax', 'type': 'float'},
        'description': {'key': 'description', 'type': 'str'},
        'discount_amount': {'key': 'discountAmount', 'type': 'float'},
        'discount_applied_before_tax': {'key': 'discountAppliedBeforeTax', 'type': 'bool'},
        'discount_percent': {'key': 'discountPercent', 'type': 'float'},
        'document_id': {'key': 'documentId', 'type': 'str'},
        'invoice_discount_allocation': {'key': 'invoiceDiscountAllocation', 'type': 'float'},
        'item_id': {'key': 'itemId', 'type': 'str'},
        'line_type': {'key': 'lineType', 'type': 'str'},
        'net_amount': {'key': 'netAmount', 'type': 'float'},
        'net_amount_including_tax': {'key': 'netAmountIncludingTax', 'type': 'float'},
        'net_tax_amount': {'key': 'netTaxAmount', 'type': 'float'},
        'quantity': {'key': 'quantity', 'type': 'float'},
        'sequence': {'key': 'sequence', 'type': 'int'},
        'shipment_date': {'key': 'shipmentDate', 'type': 'date'},
        'tax_code': {'key': 'taxCode', 'type': 'str'},
        'tax_percent': {'key': 'taxPercent', 'type': 'float'},
        'total_tax_amount': {'key': 'totalTaxAmount', 'type': 'float'},
        'unit_of_measure_id': {'key': 'unitOfMeasureId', 'type': 'str'},
        'unit_price': {'key': 'unitPrice', 'type': 'float'},
        'account': {'key': 'account', 'type': 'microsoftgraphaccount'},
        'item': {'key': 'item', 'type': 'microsoftgraphitem'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        account_id: Optional[str] = None,
        amount_excluding_tax: Optional[float] = None,
        amount_including_tax: Optional[float] = None,
        description: Optional[str] = None,
        discount_amount: Optional[float] = None,
        discount_applied_before_tax: Optional[bool] = None,
        discount_percent: Optional[float] = None,
        document_id: Optional[str] = None,
        invoice_discount_allocation: Optional[float] = None,
        item_id: Optional[str] = None,
        line_type: Optional[str] = None,
        net_amount: Optional[float] = None,
        net_amount_including_tax: Optional[float] = None,
        net_tax_amount: Optional[float] = None,
        quantity: Optional[float] = None,
        sequence: Optional[int] = None,
        shipment_date: Optional[datetime.date] = None,
        tax_code: Optional[str] = None,
        tax_percent: Optional[float] = None,
        total_tax_amount: Optional[float] = None,
        unit_of_measure_id: Optional[str] = None,
        unit_price: Optional[float] = None,
        account: Optional["microsoftgraphaccount"] = None,
        item: Optional["microsoftgraphitem"] = None,
        **kwargs
    ):
        super(microsoftgraphsalesinvoiceline, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.account_id = account_id
        self.amount_excluding_tax = amount_excluding_tax
        self.amount_including_tax = amount_including_tax
        self.description = description
        self.discount_amount = discount_amount
        self.discount_applied_before_tax = discount_applied_before_tax
        self.discount_percent = discount_percent
        self.document_id = document_id
        self.invoice_discount_allocation = invoice_discount_allocation
        self.item_id = item_id
        self.line_type = line_type
        self.net_amount = net_amount
        self.net_amount_including_tax = net_amount_including_tax
        self.net_tax_amount = net_tax_amount
        self.quantity = quantity
        self.sequence = sequence
        self.shipment_date = shipment_date
        self.tax_code = tax_code
        self.tax_percent = tax_percent
        self.total_tax_amount = total_tax_amount
        self.unit_of_measure_id = unit_of_measure_id
        self.unit_price = unit_price
        self.account = account
        self.item = item


class microsoftgraphsalesorder(microsoftgraphentity):
    """salesOrder.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param billing_postal_address: postalAddressType.
    :type billing_postal_address: ~financials.models.microsoftgraphpostaladdresstype
    :param bill_to_customer_id:
    :type bill_to_customer_id: str
    :param bill_to_customer_number:
    :type bill_to_customer_number: str
    :param bill_to_name:
    :type bill_to_name: str
    :param currency_code:
    :type currency_code: str
    :param currency_id:
    :type currency_id: str
    :param customer_id:
    :type customer_id: str
    :param customer_name:
    :type customer_name: str
    :param customer_number:
    :type customer_number: str
    :param discount_amount:
    :type discount_amount: float
    :param discount_applied_before_tax:
    :type discount_applied_before_tax: bool
    :param email:
    :type email: str
    :param external_document_number:
    :type external_document_number: str
    :param fully_shipped:
    :type fully_shipped: bool
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param number:
    :type number: str
    :param order_date:
    :type order_date: ~datetime.date
    :param partial_shipping:
    :type partial_shipping: bool
    :param payment_terms_id:
    :type payment_terms_id: str
    :param phone_number:
    :type phone_number: str
    :param prices_include_tax:
    :type prices_include_tax: bool
    :param requested_delivery_date:
    :type requested_delivery_date: ~datetime.date
    :param salesperson:
    :type salesperson: str
    :param selling_postal_address: postalAddressType.
    :type selling_postal_address: ~financials.models.microsoftgraphpostaladdresstype
    :param shipping_postal_address: postalAddressType.
    :type shipping_postal_address: ~financials.models.microsoftgraphpostaladdresstype
    :param ship_to_contact:
    :type ship_to_contact: str
    :param ship_to_name:
    :type ship_to_name: str
    :param status:
    :type status: str
    :param total_amount_excluding_tax:
    :type total_amount_excluding_tax: float
    :param total_amount_including_tax:
    :type total_amount_including_tax: float
    :param total_tax_amount:
    :type total_tax_amount: float
    :param currency: currency.
    :type currency: ~financials.models.microsoftgraphcurrency
    :param customer: customer.
    :type customer: ~financials.models.microsoftgraphcustomer
    :param payment_term: paymentTerm.
    :type payment_term: ~financials.models.microsoftgraphpaymentterm
    :param sales_order_lines:
    :type sales_order_lines: list[~financials.models.microsoftgraphsalesorderline]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'billing_postal_address': {'key': 'billingPostalAddress', 'type': 'microsoftgraphpostaladdresstype'},
        'bill_to_customer_id': {'key': 'billToCustomerId', 'type': 'str'},
        'bill_to_customer_number': {'key': 'billToCustomerNumber', 'type': 'str'},
        'bill_to_name': {'key': 'billToName', 'type': 'str'},
        'currency_code': {'key': 'currencyCode', 'type': 'str'},
        'currency_id': {'key': 'currencyId', 'type': 'str'},
        'customer_id': {'key': 'customerId', 'type': 'str'},
        'customer_name': {'key': 'customerName', 'type': 'str'},
        'customer_number': {'key': 'customerNumber', 'type': 'str'},
        'discount_amount': {'key': 'discountAmount', 'type': 'float'},
        'discount_applied_before_tax': {'key': 'discountAppliedBeforeTax', 'type': 'bool'},
        'email': {'key': 'email', 'type': 'str'},
        'external_document_number': {'key': 'externalDocumentNumber', 'type': 'str'},
        'fully_shipped': {'key': 'fullyShipped', 'type': 'bool'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'number': {'key': 'number', 'type': 'str'},
        'order_date': {'key': 'orderDate', 'type': 'date'},
        'partial_shipping': {'key': 'partialShipping', 'type': 'bool'},
        'payment_terms_id': {'key': 'paymentTermsId', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'prices_include_tax': {'key': 'pricesIncludeTax', 'type': 'bool'},
        'requested_delivery_date': {'key': 'requestedDeliveryDate', 'type': 'date'},
        'salesperson': {'key': 'salesperson', 'type': 'str'},
        'selling_postal_address': {'key': 'sellingPostalAddress', 'type': 'microsoftgraphpostaladdresstype'},
        'shipping_postal_address': {'key': 'shippingPostalAddress', 'type': 'microsoftgraphpostaladdresstype'},
        'ship_to_contact': {'key': 'shipToContact', 'type': 'str'},
        'ship_to_name': {'key': 'shipToName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'total_amount_excluding_tax': {'key': 'totalAmountExcludingTax', 'type': 'float'},
        'total_amount_including_tax': {'key': 'totalAmountIncludingTax', 'type': 'float'},
        'total_tax_amount': {'key': 'totalTaxAmount', 'type': 'float'},
        'currency': {'key': 'currency', 'type': 'microsoftgraphcurrency'},
        'customer': {'key': 'customer', 'type': 'microsoftgraphcustomer'},
        'payment_term': {'key': 'paymentTerm', 'type': 'microsoftgraphpaymentterm'},
        'sales_order_lines': {'key': 'salesOrderLines', 'type': '[microsoftgraphsalesorderline]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        billing_postal_address: Optional["microsoftgraphpostaladdresstype"] = None,
        bill_to_customer_id: Optional[str] = None,
        bill_to_customer_number: Optional[str] = None,
        bill_to_name: Optional[str] = None,
        currency_code: Optional[str] = None,
        currency_id: Optional[str] = None,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        customer_number: Optional[str] = None,
        discount_amount: Optional[float] = None,
        discount_applied_before_tax: Optional[bool] = None,
        email: Optional[str] = None,
        external_document_number: Optional[str] = None,
        fully_shipped: Optional[bool] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        number: Optional[str] = None,
        order_date: Optional[datetime.date] = None,
        partial_shipping: Optional[bool] = None,
        payment_terms_id: Optional[str] = None,
        phone_number: Optional[str] = None,
        prices_include_tax: Optional[bool] = None,
        requested_delivery_date: Optional[datetime.date] = None,
        salesperson: Optional[str] = None,
        selling_postal_address: Optional["microsoftgraphpostaladdresstype"] = None,
        shipping_postal_address: Optional["microsoftgraphpostaladdresstype"] = None,
        ship_to_contact: Optional[str] = None,
        ship_to_name: Optional[str] = None,
        status: Optional[str] = None,
        total_amount_excluding_tax: Optional[float] = None,
        total_amount_including_tax: Optional[float] = None,
        total_tax_amount: Optional[float] = None,
        currency: Optional["microsoftgraphcurrency"] = None,
        customer: Optional["microsoftgraphcustomer"] = None,
        payment_term: Optional["microsoftgraphpaymentterm"] = None,
        sales_order_lines: Optional[List["microsoftgraphsalesorderline"]] = None,
        **kwargs
    ):
        super(microsoftgraphsalesorder, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.billing_postal_address = billing_postal_address
        self.bill_to_customer_id = bill_to_customer_id
        self.bill_to_customer_number = bill_to_customer_number
        self.bill_to_name = bill_to_name
        self.currency_code = currency_code
        self.currency_id = currency_id
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.customer_number = customer_number
        self.discount_amount = discount_amount
        self.discount_applied_before_tax = discount_applied_before_tax
        self.email = email
        self.external_document_number = external_document_number
        self.fully_shipped = fully_shipped
        self.last_modified_date_time = last_modified_date_time
        self.number = number
        self.order_date = order_date
        self.partial_shipping = partial_shipping
        self.payment_terms_id = payment_terms_id
        self.phone_number = phone_number
        self.prices_include_tax = prices_include_tax
        self.requested_delivery_date = requested_delivery_date
        self.salesperson = salesperson
        self.selling_postal_address = selling_postal_address
        self.shipping_postal_address = shipping_postal_address
        self.ship_to_contact = ship_to_contact
        self.ship_to_name = ship_to_name
        self.status = status
        self.total_amount_excluding_tax = total_amount_excluding_tax
        self.total_amount_including_tax = total_amount_including_tax
        self.total_tax_amount = total_tax_amount
        self.currency = currency
        self.customer = customer
        self.payment_term = payment_term
        self.sales_order_lines = sales_order_lines


class microsoftgraphsalesorderline(microsoftgraphentity):
    """salesOrderLine.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param account_id:
    :type account_id: str
    :param amount_excluding_tax:
    :type amount_excluding_tax: float
    :param amount_including_tax:
    :type amount_including_tax: float
    :param description:
    :type description: str
    :param discount_amount:
    :type discount_amount: float
    :param discount_applied_before_tax:
    :type discount_applied_before_tax: bool
    :param discount_percent:
    :type discount_percent: float
    :param document_id:
    :type document_id: str
    :param invoice_discount_allocation:
    :type invoice_discount_allocation: float
    :param invoiced_quantity:
    :type invoiced_quantity: float
    :param invoice_quantity:
    :type invoice_quantity: float
    :param item_id:
    :type item_id: str
    :param line_type:
    :type line_type: str
    :param net_amount:
    :type net_amount: float
    :param net_amount_including_tax:
    :type net_amount_including_tax: float
    :param net_tax_amount:
    :type net_tax_amount: float
    :param quantity:
    :type quantity: float
    :param sequence:
    :type sequence: int
    :param shipment_date:
    :type shipment_date: ~datetime.date
    :param shipped_quantity:
    :type shipped_quantity: float
    :param ship_quantity:
    :type ship_quantity: float
    :param tax_code:
    :type tax_code: str
    :param tax_percent:
    :type tax_percent: float
    :param total_tax_amount:
    :type total_tax_amount: float
    :param unit_of_measure_id:
    :type unit_of_measure_id: str
    :param unit_price:
    :type unit_price: float
    :param account: account.
    :type account: ~financials.models.microsoftgraphaccount
    :param item: item.
    :type item: ~financials.models.microsoftgraphitem
    """

    _validation = {
        'sequence': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'account_id': {'key': 'accountId', 'type': 'str'},
        'amount_excluding_tax': {'key': 'amountExcludingTax', 'type': 'float'},
        'amount_including_tax': {'key': 'amountIncludingTax', 'type': 'float'},
        'description': {'key': 'description', 'type': 'str'},
        'discount_amount': {'key': 'discountAmount', 'type': 'float'},
        'discount_applied_before_tax': {'key': 'discountAppliedBeforeTax', 'type': 'bool'},
        'discount_percent': {'key': 'discountPercent', 'type': 'float'},
        'document_id': {'key': 'documentId', 'type': 'str'},
        'invoice_discount_allocation': {'key': 'invoiceDiscountAllocation', 'type': 'float'},
        'invoiced_quantity': {'key': 'invoicedQuantity', 'type': 'float'},
        'invoice_quantity': {'key': 'invoiceQuantity', 'type': 'float'},
        'item_id': {'key': 'itemId', 'type': 'str'},
        'line_type': {'key': 'lineType', 'type': 'str'},
        'net_amount': {'key': 'netAmount', 'type': 'float'},
        'net_amount_including_tax': {'key': 'netAmountIncludingTax', 'type': 'float'},
        'net_tax_amount': {'key': 'netTaxAmount', 'type': 'float'},
        'quantity': {'key': 'quantity', 'type': 'float'},
        'sequence': {'key': 'sequence', 'type': 'int'},
        'shipment_date': {'key': 'shipmentDate', 'type': 'date'},
        'shipped_quantity': {'key': 'shippedQuantity', 'type': 'float'},
        'ship_quantity': {'key': 'shipQuantity', 'type': 'float'},
        'tax_code': {'key': 'taxCode', 'type': 'str'},
        'tax_percent': {'key': 'taxPercent', 'type': 'float'},
        'total_tax_amount': {'key': 'totalTaxAmount', 'type': 'float'},
        'unit_of_measure_id': {'key': 'unitOfMeasureId', 'type': 'str'},
        'unit_price': {'key': 'unitPrice', 'type': 'float'},
        'account': {'key': 'account', 'type': 'microsoftgraphaccount'},
        'item': {'key': 'item', 'type': 'microsoftgraphitem'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        account_id: Optional[str] = None,
        amount_excluding_tax: Optional[float] = None,
        amount_including_tax: Optional[float] = None,
        description: Optional[str] = None,
        discount_amount: Optional[float] = None,
        discount_applied_before_tax: Optional[bool] = None,
        discount_percent: Optional[float] = None,
        document_id: Optional[str] = None,
        invoice_discount_allocation: Optional[float] = None,
        invoiced_quantity: Optional[float] = None,
        invoice_quantity: Optional[float] = None,
        item_id: Optional[str] = None,
        line_type: Optional[str] = None,
        net_amount: Optional[float] = None,
        net_amount_including_tax: Optional[float] = None,
        net_tax_amount: Optional[float] = None,
        quantity: Optional[float] = None,
        sequence: Optional[int] = None,
        shipment_date: Optional[datetime.date] = None,
        shipped_quantity: Optional[float] = None,
        ship_quantity: Optional[float] = None,
        tax_code: Optional[str] = None,
        tax_percent: Optional[float] = None,
        total_tax_amount: Optional[float] = None,
        unit_of_measure_id: Optional[str] = None,
        unit_price: Optional[float] = None,
        account: Optional["microsoftgraphaccount"] = None,
        item: Optional["microsoftgraphitem"] = None,
        **kwargs
    ):
        super(microsoftgraphsalesorderline, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.account_id = account_id
        self.amount_excluding_tax = amount_excluding_tax
        self.amount_including_tax = amount_including_tax
        self.description = description
        self.discount_amount = discount_amount
        self.discount_applied_before_tax = discount_applied_before_tax
        self.discount_percent = discount_percent
        self.document_id = document_id
        self.invoice_discount_allocation = invoice_discount_allocation
        self.invoiced_quantity = invoiced_quantity
        self.invoice_quantity = invoice_quantity
        self.item_id = item_id
        self.line_type = line_type
        self.net_amount = net_amount
        self.net_amount_including_tax = net_amount_including_tax
        self.net_tax_amount = net_tax_amount
        self.quantity = quantity
        self.sequence = sequence
        self.shipment_date = shipment_date
        self.shipped_quantity = shipped_quantity
        self.ship_quantity = ship_quantity
        self.tax_code = tax_code
        self.tax_percent = tax_percent
        self.total_tax_amount = total_tax_amount
        self.unit_of_measure_id = unit_of_measure_id
        self.unit_price = unit_price
        self.account = account
        self.item = item


class microsoftgraphsalesquote(microsoftgraphentity):
    """salesQuote.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param accepted_date:
    :type accepted_date: ~datetime.date
    :param billing_postal_address: postalAddressType.
    :type billing_postal_address: ~financials.models.microsoftgraphpostaladdresstype
    :param bill_to_customer_id:
    :type bill_to_customer_id: str
    :param bill_to_customer_number:
    :type bill_to_customer_number: str
    :param bill_to_name:
    :type bill_to_name: str
    :param currency_code:
    :type currency_code: str
    :param currency_id:
    :type currency_id: str
    :param customer_id:
    :type customer_id: str
    :param customer_name:
    :type customer_name: str
    :param customer_number:
    :type customer_number: str
    :param discount_amount:
    :type discount_amount: float
    :param document_date:
    :type document_date: ~datetime.date
    :param due_date:
    :type due_date: ~datetime.date
    :param email:
    :type email: str
    :param external_document_number:
    :type external_document_number: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param number:
    :type number: str
    :param payment_terms_id:
    :type payment_terms_id: str
    :param phone_number:
    :type phone_number: str
    :param salesperson:
    :type salesperson: str
    :param selling_postal_address: postalAddressType.
    :type selling_postal_address: ~financials.models.microsoftgraphpostaladdresstype
    :param sent_date:
    :type sent_date: ~datetime.datetime
    :param shipment_method_id:
    :type shipment_method_id: str
    :param shipping_postal_address: postalAddressType.
    :type shipping_postal_address: ~financials.models.microsoftgraphpostaladdresstype
    :param ship_to_contact:
    :type ship_to_contact: str
    :param ship_to_name:
    :type ship_to_name: str
    :param status:
    :type status: str
    :param total_amount_excluding_tax:
    :type total_amount_excluding_tax: float
    :param total_amount_including_tax:
    :type total_amount_including_tax: float
    :param total_tax_amount:
    :type total_tax_amount: float
    :param valid_until_date:
    :type valid_until_date: ~datetime.date
    :param currency: currency.
    :type currency: ~financials.models.microsoftgraphcurrency
    :param customer: customer.
    :type customer: ~financials.models.microsoftgraphcustomer
    :param payment_term: paymentTerm.
    :type payment_term: ~financials.models.microsoftgraphpaymentterm
    :param sales_quote_lines:
    :type sales_quote_lines: list[~financials.models.microsoftgraphsalesquoteline]
    :param shipment_method: shipmentMethod.
    :type shipment_method: ~financials.models.microsoftgraphshipmentmethod
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'accepted_date': {'key': 'acceptedDate', 'type': 'date'},
        'billing_postal_address': {'key': 'billingPostalAddress', 'type': 'microsoftgraphpostaladdresstype'},
        'bill_to_customer_id': {'key': 'billToCustomerId', 'type': 'str'},
        'bill_to_customer_number': {'key': 'billToCustomerNumber', 'type': 'str'},
        'bill_to_name': {'key': 'billToName', 'type': 'str'},
        'currency_code': {'key': 'currencyCode', 'type': 'str'},
        'currency_id': {'key': 'currencyId', 'type': 'str'},
        'customer_id': {'key': 'customerId', 'type': 'str'},
        'customer_name': {'key': 'customerName', 'type': 'str'},
        'customer_number': {'key': 'customerNumber', 'type': 'str'},
        'discount_amount': {'key': 'discountAmount', 'type': 'float'},
        'document_date': {'key': 'documentDate', 'type': 'date'},
        'due_date': {'key': 'dueDate', 'type': 'date'},
        'email': {'key': 'email', 'type': 'str'},
        'external_document_number': {'key': 'externalDocumentNumber', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'number': {'key': 'number', 'type': 'str'},
        'payment_terms_id': {'key': 'paymentTermsId', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'salesperson': {'key': 'salesperson', 'type': 'str'},
        'selling_postal_address': {'key': 'sellingPostalAddress', 'type': 'microsoftgraphpostaladdresstype'},
        'sent_date': {'key': 'sentDate', 'type': 'iso-8601'},
        'shipment_method_id': {'key': 'shipmentMethodId', 'type': 'str'},
        'shipping_postal_address': {'key': 'shippingPostalAddress', 'type': 'microsoftgraphpostaladdresstype'},
        'ship_to_contact': {'key': 'shipToContact', 'type': 'str'},
        'ship_to_name': {'key': 'shipToName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'total_amount_excluding_tax': {'key': 'totalAmountExcludingTax', 'type': 'float'},
        'total_amount_including_tax': {'key': 'totalAmountIncludingTax', 'type': 'float'},
        'total_tax_amount': {'key': 'totalTaxAmount', 'type': 'float'},
        'valid_until_date': {'key': 'validUntilDate', 'type': 'date'},
        'currency': {'key': 'currency', 'type': 'microsoftgraphcurrency'},
        'customer': {'key': 'customer', 'type': 'microsoftgraphcustomer'},
        'payment_term': {'key': 'paymentTerm', 'type': 'microsoftgraphpaymentterm'},
        'sales_quote_lines': {'key': 'salesQuoteLines', 'type': '[microsoftgraphsalesquoteline]'},
        'shipment_method': {'key': 'shipmentMethod', 'type': 'microsoftgraphshipmentmethod'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        accepted_date: Optional[datetime.date] = None,
        billing_postal_address: Optional["microsoftgraphpostaladdresstype"] = None,
        bill_to_customer_id: Optional[str] = None,
        bill_to_customer_number: Optional[str] = None,
        bill_to_name: Optional[str] = None,
        currency_code: Optional[str] = None,
        currency_id: Optional[str] = None,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        customer_number: Optional[str] = None,
        discount_amount: Optional[float] = None,
        document_date: Optional[datetime.date] = None,
        due_date: Optional[datetime.date] = None,
        email: Optional[str] = None,
        external_document_number: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        number: Optional[str] = None,
        payment_terms_id: Optional[str] = None,
        phone_number: Optional[str] = None,
        salesperson: Optional[str] = None,
        selling_postal_address: Optional["microsoftgraphpostaladdresstype"] = None,
        sent_date: Optional[datetime.datetime] = None,
        shipment_method_id: Optional[str] = None,
        shipping_postal_address: Optional["microsoftgraphpostaladdresstype"] = None,
        ship_to_contact: Optional[str] = None,
        ship_to_name: Optional[str] = None,
        status: Optional[str] = None,
        total_amount_excluding_tax: Optional[float] = None,
        total_amount_including_tax: Optional[float] = None,
        total_tax_amount: Optional[float] = None,
        valid_until_date: Optional[datetime.date] = None,
        currency: Optional["microsoftgraphcurrency"] = None,
        customer: Optional["microsoftgraphcustomer"] = None,
        payment_term: Optional["microsoftgraphpaymentterm"] = None,
        sales_quote_lines: Optional[List["microsoftgraphsalesquoteline"]] = None,
        shipment_method: Optional["microsoftgraphshipmentmethod"] = None,
        **kwargs
    ):
        super(microsoftgraphsalesquote, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.accepted_date = accepted_date
        self.billing_postal_address = billing_postal_address
        self.bill_to_customer_id = bill_to_customer_id
        self.bill_to_customer_number = bill_to_customer_number
        self.bill_to_name = bill_to_name
        self.currency_code = currency_code
        self.currency_id = currency_id
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.customer_number = customer_number
        self.discount_amount = discount_amount
        self.document_date = document_date
        self.due_date = due_date
        self.email = email
        self.external_document_number = external_document_number
        self.last_modified_date_time = last_modified_date_time
        self.number = number
        self.payment_terms_id = payment_terms_id
        self.phone_number = phone_number
        self.salesperson = salesperson
        self.selling_postal_address = selling_postal_address
        self.sent_date = sent_date
        self.shipment_method_id = shipment_method_id
        self.shipping_postal_address = shipping_postal_address
        self.ship_to_contact = ship_to_contact
        self.ship_to_name = ship_to_name
        self.status = status
        self.total_amount_excluding_tax = total_amount_excluding_tax
        self.total_amount_including_tax = total_amount_including_tax
        self.total_tax_amount = total_tax_amount
        self.valid_until_date = valid_until_date
        self.currency = currency
        self.customer = customer
        self.payment_term = payment_term
        self.sales_quote_lines = sales_quote_lines
        self.shipment_method = shipment_method


class microsoftgraphsalesquoteline(microsoftgraphentity):
    """salesQuoteLine.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param account_id:
    :type account_id: str
    :param amount_excluding_tax:
    :type amount_excluding_tax: float
    :param amount_including_tax:
    :type amount_including_tax: float
    :param description:
    :type description: str
    :param discount_amount:
    :type discount_amount: float
    :param discount_applied_before_tax:
    :type discount_applied_before_tax: bool
    :param discount_percent:
    :type discount_percent: float
    :param document_id:
    :type document_id: str
    :param item_id:
    :type item_id: str
    :param line_type:
    :type line_type: str
    :param net_amount:
    :type net_amount: float
    :param net_amount_including_tax:
    :type net_amount_including_tax: float
    :param net_tax_amount:
    :type net_tax_amount: float
    :param quantity:
    :type quantity: float
    :param sequence:
    :type sequence: int
    :param tax_code:
    :type tax_code: str
    :param tax_percent:
    :type tax_percent: float
    :param total_tax_amount:
    :type total_tax_amount: float
    :param unit_of_measure_id:
    :type unit_of_measure_id: str
    :param unit_price:
    :type unit_price: float
    :param account: account.
    :type account: ~financials.models.microsoftgraphaccount
    :param item: item.
    :type item: ~financials.models.microsoftgraphitem
    """

    _validation = {
        'sequence': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'account_id': {'key': 'accountId', 'type': 'str'},
        'amount_excluding_tax': {'key': 'amountExcludingTax', 'type': 'float'},
        'amount_including_tax': {'key': 'amountIncludingTax', 'type': 'float'},
        'description': {'key': 'description', 'type': 'str'},
        'discount_amount': {'key': 'discountAmount', 'type': 'float'},
        'discount_applied_before_tax': {'key': 'discountAppliedBeforeTax', 'type': 'bool'},
        'discount_percent': {'key': 'discountPercent', 'type': 'float'},
        'document_id': {'key': 'documentId', 'type': 'str'},
        'item_id': {'key': 'itemId', 'type': 'str'},
        'line_type': {'key': 'lineType', 'type': 'str'},
        'net_amount': {'key': 'netAmount', 'type': 'float'},
        'net_amount_including_tax': {'key': 'netAmountIncludingTax', 'type': 'float'},
        'net_tax_amount': {'key': 'netTaxAmount', 'type': 'float'},
        'quantity': {'key': 'quantity', 'type': 'float'},
        'sequence': {'key': 'sequence', 'type': 'int'},
        'tax_code': {'key': 'taxCode', 'type': 'str'},
        'tax_percent': {'key': 'taxPercent', 'type': 'float'},
        'total_tax_amount': {'key': 'totalTaxAmount', 'type': 'float'},
        'unit_of_measure_id': {'key': 'unitOfMeasureId', 'type': 'str'},
        'unit_price': {'key': 'unitPrice', 'type': 'float'},
        'account': {'key': 'account', 'type': 'microsoftgraphaccount'},
        'item': {'key': 'item', 'type': 'microsoftgraphitem'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        account_id: Optional[str] = None,
        amount_excluding_tax: Optional[float] = None,
        amount_including_tax: Optional[float] = None,
        description: Optional[str] = None,
        discount_amount: Optional[float] = None,
        discount_applied_before_tax: Optional[bool] = None,
        discount_percent: Optional[float] = None,
        document_id: Optional[str] = None,
        item_id: Optional[str] = None,
        line_type: Optional[str] = None,
        net_amount: Optional[float] = None,
        net_amount_including_tax: Optional[float] = None,
        net_tax_amount: Optional[float] = None,
        quantity: Optional[float] = None,
        sequence: Optional[int] = None,
        tax_code: Optional[str] = None,
        tax_percent: Optional[float] = None,
        total_tax_amount: Optional[float] = None,
        unit_of_measure_id: Optional[str] = None,
        unit_price: Optional[float] = None,
        account: Optional["microsoftgraphaccount"] = None,
        item: Optional["microsoftgraphitem"] = None,
        **kwargs
    ):
        super(microsoftgraphsalesquoteline, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.account_id = account_id
        self.amount_excluding_tax = amount_excluding_tax
        self.amount_including_tax = amount_including_tax
        self.description = description
        self.discount_amount = discount_amount
        self.discount_applied_before_tax = discount_applied_before_tax
        self.discount_percent = discount_percent
        self.document_id = document_id
        self.item_id = item_id
        self.line_type = line_type
        self.net_amount = net_amount
        self.net_amount_including_tax = net_amount_including_tax
        self.net_tax_amount = net_tax_amount
        self.quantity = quantity
        self.sequence = sequence
        self.tax_code = tax_code
        self.tax_percent = tax_percent
        self.total_tax_amount = total_tax_amount
        self.unit_of_measure_id = unit_of_measure_id
        self.unit_price = unit_price
        self.account = account
        self.item = item


class microsoftgraphshipmentmethod(microsoftgraphentity):
    """shipmentMethod.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        code: Optional[str] = None,
        display_name: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(microsoftgraphshipmentmethod, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.display_name = display_name
        self.last_modified_date_time = last_modified_date_time


class microsoftgraphtaxarea(microsoftgraphentity):
    """taxArea.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param tax_type:
    :type tax_type: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'tax_type': {'key': 'taxType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        code: Optional[str] = None,
        display_name: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        tax_type: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphtaxarea, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.display_name = display_name
        self.last_modified_date_time = last_modified_date_time
        self.tax_type = tax_type


class microsoftgraphtaxgroup(microsoftgraphentity):
    """taxGroup.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param tax_type:
    :type tax_type: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'tax_type': {'key': 'taxType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        code: Optional[str] = None,
        display_name: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        tax_type: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphtaxgroup, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.display_name = display_name
        self.last_modified_date_time = last_modified_date_time
        self.tax_type = tax_type


class microsoftgraphunitofmeasure(microsoftgraphentity):
    """unitOfMeasure.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code:
    :type code: str
    :param display_name:
    :type display_name: str
    :param international_standard_code:
    :type international_standard_code: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'international_standard_code': {'key': 'internationalStandardCode', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        code: Optional[str] = None,
        display_name: Optional[str] = None,
        international_standard_code: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(microsoftgraphunitofmeasure, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.display_name = display_name
        self.international_standard_code = international_standard_code
        self.last_modified_date_time = last_modified_date_time


class microsoftgraphvendor(microsoftgraphentity):
    """vendor.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: postalAddressType.
    :type address: ~financials.models.microsoftgraphpostaladdresstype
    :param balance:
    :type balance: float
    :param blocked:
    :type blocked: str
    :param currency_code:
    :type currency_code: str
    :param currency_id:
    :type currency_id: str
    :param display_name:
    :type display_name: str
    :param email:
    :type email: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param number:
    :type number: str
    :param payment_method_id:
    :type payment_method_id: str
    :param payment_terms_id:
    :type payment_terms_id: str
    :param phone_number:
    :type phone_number: str
    :param tax_liable:
    :type tax_liable: bool
    :param tax_registration_number:
    :type tax_registration_number: str
    :param website:
    :type website: str
    :param currency: currency.
    :type currency: ~financials.models.microsoftgraphcurrency
    :param payment_method: paymentMethod.
    :type payment_method: ~financials.models.microsoftgraphpaymentmethod
    :param payment_term: paymentTerm.
    :type payment_term: ~financials.models.microsoftgraphpaymentterm
    :param picture:
    :type picture: list[~financials.models.microsoftgraphpicture]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'microsoftgraphpostaladdresstype'},
        'balance': {'key': 'balance', 'type': 'float'},
        'blocked': {'key': 'blocked', 'type': 'str'},
        'currency_code': {'key': 'currencyCode', 'type': 'str'},
        'currency_id': {'key': 'currencyId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'number': {'key': 'number', 'type': 'str'},
        'payment_method_id': {'key': 'paymentMethodId', 'type': 'str'},
        'payment_terms_id': {'key': 'paymentTermsId', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'tax_liable': {'key': 'taxLiable', 'type': 'bool'},
        'tax_registration_number': {'key': 'taxRegistrationNumber', 'type': 'str'},
        'website': {'key': 'website', 'type': 'str'},
        'currency': {'key': 'currency', 'type': 'microsoftgraphcurrency'},
        'payment_method': {'key': 'paymentMethod', 'type': 'microsoftgraphpaymentmethod'},
        'payment_term': {'key': 'paymentTerm', 'type': 'microsoftgraphpaymentterm'},
        'picture': {'key': 'picture', 'type': '[microsoftgraphpicture]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        address: Optional["microsoftgraphpostaladdresstype"] = None,
        balance: Optional[float] = None,
        blocked: Optional[str] = None,
        currency_code: Optional[str] = None,
        currency_id: Optional[str] = None,
        display_name: Optional[str] = None,
        email: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        number: Optional[str] = None,
        payment_method_id: Optional[str] = None,
        payment_terms_id: Optional[str] = None,
        phone_number: Optional[str] = None,
        tax_liable: Optional[bool] = None,
        tax_registration_number: Optional[str] = None,
        website: Optional[str] = None,
        currency: Optional["microsoftgraphcurrency"] = None,
        payment_method: Optional["microsoftgraphpaymentmethod"] = None,
        payment_term: Optional["microsoftgraphpaymentterm"] = None,
        picture: Optional[List["microsoftgraphpicture"]] = None,
        **kwargs
    ):
        super(microsoftgraphvendor, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.address = address
        self.balance = balance
        self.blocked = blocked
        self.currency_code = currency_code
        self.currency_id = currency_id
        self.display_name = display_name
        self.email = email
        self.last_modified_date_time = last_modified_date_time
        self.number = number
        self.payment_method_id = payment_method_id
        self.payment_terms_id = payment_terms_id
        self.phone_number = phone_number
        self.tax_liable = tax_liable
        self.tax_registration_number = tax_registration_number
        self.website = website
        self.currency = currency
        self.payment_method = payment_method
        self.payment_term = payment_term
        self.picture = picture


class odataerror(msrest.serialization.Model):
    """odataerror.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error: Required.
    :type error: ~financials.models.odataerrormain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'error': {'key': 'error', 'type': 'odataerrormain'},
    }

    def __init__(
        self,
        *,
        error: "odataerrormain",
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(odataerror, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.error = error


class odataerrordetail(msrest.serialization.Model):
    """odataerrordetail.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        additional_properties: Optional[Dict[str, object]] = None,
        target: Optional[str] = None,
        **kwargs
    ):
        super(odataerrordetail, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.message = message
        self.target = target


class odataerrormain(msrest.serialization.Model):
    """odataerrormain.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~financials.models.odataerrordetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: dict[str, object]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[odataerrordetail]'},
        'innererror': {'key': 'innererror', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        additional_properties: Optional[Dict[str, object]] = None,
        target: Optional[str] = None,
        details: Optional[List["odataerrordetail"]] = None,
        innererror: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(odataerrormain, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror
