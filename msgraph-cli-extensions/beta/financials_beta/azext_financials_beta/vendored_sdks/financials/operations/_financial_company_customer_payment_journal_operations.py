# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class FinancialCompanyCustomerPaymentJournalOperations(object):
    """FinancialCompanyCustomerPaymentJournalOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~financials.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def get_account(
        self,
        company_id,  # type: str
        customer_payment_journal_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum29"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphAccount"
        """Get account from financials.

        Get account from financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param customer_payment_journal_id: key: id of customerPaymentJournal.
        :type customer_payment_journal_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~financials.models.Enum29]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccount, or the result of cls(response)
        :rtype: ~financials.models.MicrosoftGraphAccount
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccount"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_account.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'customerPaymentJournal-id': self._serialize.url("customer_payment_journal_id", customer_payment_journal_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccount', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_account.metadata = {'url': '/financials/companies/{company-id}/customerPaymentJournals/{customerPaymentJournal-id}/account'}  # type: ignore

    def update_account(
        self,
        company_id,  # type: str
        customer_payment_journal_id,  # type: str
        id=None,  # type: Optional[str]
        blocked=None,  # type: Optional[bool]
        category=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        number=None,  # type: Optional[str]
        sub_category=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property account in financials.

        Update the navigation property account in financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param customer_payment_journal_id: key: id of customerPaymentJournal.
        :type customer_payment_journal_id: str
        :param id: Read-only.
        :type id: str
        :param blocked:
        :type blocked: bool
        :param category:
        :type category: str
        :param display_name:
        :type display_name: str
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param number:
        :type number: str
        :param sub_category:
        :type sub_category: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphAccount(id=id, blocked=blocked, category=category, display_name=display_name, last_modified_date_time=last_modified_date_time, number=number, sub_category=sub_category)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_account.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'customerPaymentJournal-id': self._serialize.url("customer_payment_journal_id", customer_payment_journal_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphAccount')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_account.metadata = {'url': '/financials/companies/{company-id}/customerPaymentJournals/{customerPaymentJournal-id}/account'}  # type: ignore

    def delete_account(
        self,
        company_id,  # type: str
        customer_payment_journal_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property account for financials.

        Delete navigation property account for financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param customer_payment_journal_id: key: id of customerPaymentJournal.
        :type customer_payment_journal_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_account.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'customerPaymentJournal-id': self._serialize.url("customer_payment_journal_id", customer_payment_journal_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_account.metadata = {'url': '/financials/companies/{company-id}/customerPaymentJournals/{customerPaymentJournal-id}/account'}  # type: ignore

    def list_customer_payment(
        self,
        company_id,  # type: str
        customer_payment_journal_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum30"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum31"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get9ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfCustomerPayment"]
        """Get customerPayments from financials.

        Get customerPayments from financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param customer_payment_journal_id: key: id of customerPaymentJournal.
        :type customer_payment_journal_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~financials.models.Enum30]
        :param select: Select properties to be returned.
        :type select: list[str or ~financials.models.Enum31]
        :param expand: Expand related entities.
        :type expand: list[str or ~financials.models.Get9ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfCustomerPayment or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~financials.models.CollectionOfCustomerPayment]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfCustomerPayment"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_customer_payment.metadata['url']  # type: ignore
                path_format_arguments = {
                    'company-id': self._serialize.url("company_id", company_id, 'str'),
                    'customerPaymentJournal-id': self._serialize.url("customer_payment_journal_id", customer_payment_journal_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfCustomerPayment', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_customer_payment.metadata = {'url': '/financials/companies/{company-id}/customerPaymentJournals/{customerPaymentJournal-id}/customerPayments'}  # type: ignore

    def create_customer_payment(
        self,
        company_id,  # type: str
        customer_payment_journal_id,  # type: str
        id=None,  # type: Optional[str]
        amount=None,  # type: Optional[float]
        applies_to_invoice_id=None,  # type: Optional[str]
        applies_to_invoice_number=None,  # type: Optional[str]
        comment=None,  # type: Optional[str]
        contact_id=None,  # type: Optional[str]
        customer_id=None,  # type: Optional[str]
        customer_number=None,  # type: Optional[str]
        description=None,  # type: Optional[str]
        document_number=None,  # type: Optional[str]
        external_document_number=None,  # type: Optional[str]
        journal_display_name=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        line_number=None,  # type: Optional[int]
        posting_date=None,  # type: Optional[datetime.date]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        address=None,  # type: Optional["models.MicrosoftGraphPostalAddressType"]
        blocked=None,  # type: Optional[str]
        currency_code=None,  # type: Optional[str]
        currency_id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        email=None,  # type: Optional[str]
        microsoft_graph_customer_last_modified_date_time_last_modified_date_time=None,  # type: Optional[datetime.datetime]
        number=None,  # type: Optional[str]
        payment_method_id=None,  # type: Optional[str]
        payment_terms_id=None,  # type: Optional[str]
        phone_number=None,  # type: Optional[str]
        shipment_method_id=None,  # type: Optional[str]
        tax_area_display_name=None,  # type: Optional[str]
        tax_area_id=None,  # type: Optional[str]
        tax_liable=None,  # type: Optional[bool]
        tax_registration_number=None,  # type: Optional[str]
        type=None,  # type: Optional[str]
        website=None,  # type: Optional[str]
        currency=None,  # type: Optional["models.MicrosoftGraphCurrency"]
        payment_method=None,  # type: Optional["models.MicrosoftGraphPaymentMethod"]
        payment_term=None,  # type: Optional["models.MicrosoftGraphPaymentTerm"]
        picture=None,  # type: Optional[List["models.MicrosoftGraphPicture"]]
        shipment_method=None,  # type: Optional["models.MicrosoftGraphShipmentMethod"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphCustomerPayment"
        """Create new navigation property to customerPayments for financials.

        Create new navigation property to customerPayments for financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param customer_payment_journal_id: key: id of customerPaymentJournal.
        :type customer_payment_journal_id: str
        :param id: Read-only.
        :type id: str
        :param amount:
        :type amount: float
        :param applies_to_invoice_id:
        :type applies_to_invoice_id: str
        :param applies_to_invoice_number:
        :type applies_to_invoice_number: str
        :param comment:
        :type comment: str
        :param contact_id:
        :type contact_id: str
        :param customer_id:
        :type customer_id: str
        :param customer_number:
        :type customer_number: str
        :param description:
        :type description: str
        :param document_number:
        :type document_number: str
        :param external_document_number:
        :type external_document_number: str
        :param journal_display_name:
        :type journal_display_name: str
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param line_number:
        :type line_number: int
        :param posting_date:
        :type posting_date: ~datetime.date
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param address: postalAddressType.
        :type address: ~financials.models.MicrosoftGraphPostalAddressType
        :param blocked:
        :type blocked: str
        :param currency_code:
        :type currency_code: str
        :param currency_id:
        :type currency_id: str
        :param display_name:
        :type display_name: str
        :param email:
        :type email: str
        :param microsoft_graph_customer_last_modified_date_time_last_modified_date_time:
        :type microsoft_graph_customer_last_modified_date_time_last_modified_date_time: ~datetime.datetime
        :param number:
        :type number: str
        :param payment_method_id:
        :type payment_method_id: str
        :param payment_terms_id:
        :type payment_terms_id: str
        :param phone_number:
        :type phone_number: str
        :param shipment_method_id:
        :type shipment_method_id: str
        :param tax_area_display_name:
        :type tax_area_display_name: str
        :param tax_area_id:
        :type tax_area_id: str
        :param tax_liable:
        :type tax_liable: bool
        :param tax_registration_number:
        :type tax_registration_number: str
        :param type:
        :type type: str
        :param website:
        :type website: str
        :param currency: currency.
        :type currency: ~financials.models.MicrosoftGraphCurrency
        :param payment_method: paymentMethod.
        :type payment_method: ~financials.models.MicrosoftGraphPaymentMethod
        :param payment_term: paymentTerm.
        :type payment_term: ~financials.models.MicrosoftGraphPaymentTerm
        :param picture:
        :type picture: list[~financials.models.MicrosoftGraphPicture]
        :param shipment_method: shipmentMethod.
        :type shipment_method: ~financials.models.MicrosoftGraphShipmentMethod
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCustomerPayment, or the result of cls(response)
        :rtype: ~financials.models.MicrosoftGraphCustomerPayment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCustomerPayment"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphCustomerPayment(id=id, amount=amount, applies_to_invoice_id=applies_to_invoice_id, applies_to_invoice_number=applies_to_invoice_number, comment=comment, contact_id=contact_id, customer_id=customer_id, customer_number=customer_number, description=description, document_number=document_number, external_document_number=external_document_number, journal_display_name=journal_display_name, last_modified_date_time=last_modified_date_time, line_number=line_number, posting_date=posting_date, id_customer_id=microsoft_graph_entity_id, address=address, blocked=blocked, currency_code=currency_code, currency_id=currency_id, display_name=display_name, email=email, last_modified_date_time_customer_last_modified_date_time=microsoft_graph_customer_last_modified_date_time_last_modified_date_time, number=number, payment_method_id=payment_method_id, payment_terms_id=payment_terms_id, phone_number=phone_number, shipment_method_id=shipment_method_id, tax_area_display_name=tax_area_display_name, tax_area_id=tax_area_id, tax_liable=tax_liable, tax_registration_number=tax_registration_number, type=type, website=website, currency=currency, payment_method=payment_method, payment_term=payment_term, picture=picture, shipment_method=shipment_method)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_customer_payment.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'customerPaymentJournal-id': self._serialize.url("customer_payment_journal_id", customer_payment_journal_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphCustomerPayment')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCustomerPayment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_customer_payment.metadata = {'url': '/financials/companies/{company-id}/customerPaymentJournals/{customerPaymentJournal-id}/customerPayments'}  # type: ignore

    def get_customer_payment(
        self,
        company_id,  # type: str
        customer_payment_journal_id,  # type: str
        customer_payment_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum33"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get4ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphCustomerPayment"
        """Get customerPayments from financials.

        Get customerPayments from financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param customer_payment_journal_id: key: id of customerPaymentJournal.
        :type customer_payment_journal_id: str
        :param customer_payment_id: key: id of customerPayment.
        :type customer_payment_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~financials.models.Enum33]
        :param expand: Expand related entities.
        :type expand: list[str or ~financials.models.Get4ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCustomerPayment, or the result of cls(response)
        :rtype: ~financials.models.MicrosoftGraphCustomerPayment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCustomerPayment"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_customer_payment.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'customerPaymentJournal-id': self._serialize.url("customer_payment_journal_id", customer_payment_journal_id, 'str'),
            'customerPayment-id': self._serialize.url("customer_payment_id", customer_payment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCustomerPayment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_customer_payment.metadata = {'url': '/financials/companies/{company-id}/customerPaymentJournals/{customerPaymentJournal-id}/customerPayments/{customerPayment-id}'}  # type: ignore

    def update_customer_payment(
        self,
        company_id,  # type: str
        customer_payment_journal_id,  # type: str
        customer_payment_id,  # type: str
        id=None,  # type: Optional[str]
        amount=None,  # type: Optional[float]
        applies_to_invoice_id=None,  # type: Optional[str]
        applies_to_invoice_number=None,  # type: Optional[str]
        comment=None,  # type: Optional[str]
        contact_id=None,  # type: Optional[str]
        customer_id=None,  # type: Optional[str]
        customer_number=None,  # type: Optional[str]
        description=None,  # type: Optional[str]
        document_number=None,  # type: Optional[str]
        external_document_number=None,  # type: Optional[str]
        journal_display_name=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        line_number=None,  # type: Optional[int]
        posting_date=None,  # type: Optional[datetime.date]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        address=None,  # type: Optional["models.MicrosoftGraphPostalAddressType"]
        blocked=None,  # type: Optional[str]
        currency_code=None,  # type: Optional[str]
        currency_id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        email=None,  # type: Optional[str]
        microsoft_graph_customer_last_modified_date_time_last_modified_date_time=None,  # type: Optional[datetime.datetime]
        number=None,  # type: Optional[str]
        payment_method_id=None,  # type: Optional[str]
        payment_terms_id=None,  # type: Optional[str]
        phone_number=None,  # type: Optional[str]
        shipment_method_id=None,  # type: Optional[str]
        tax_area_display_name=None,  # type: Optional[str]
        tax_area_id=None,  # type: Optional[str]
        tax_liable=None,  # type: Optional[bool]
        tax_registration_number=None,  # type: Optional[str]
        type=None,  # type: Optional[str]
        website=None,  # type: Optional[str]
        currency=None,  # type: Optional["models.MicrosoftGraphCurrency"]
        payment_method=None,  # type: Optional["models.MicrosoftGraphPaymentMethod"]
        payment_term=None,  # type: Optional["models.MicrosoftGraphPaymentTerm"]
        picture=None,  # type: Optional[List["models.MicrosoftGraphPicture"]]
        shipment_method=None,  # type: Optional["models.MicrosoftGraphShipmentMethod"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property customerPayments in financials.

        Update the navigation property customerPayments in financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param customer_payment_journal_id: key: id of customerPaymentJournal.
        :type customer_payment_journal_id: str
        :param customer_payment_id: key: id of customerPayment.
        :type customer_payment_id: str
        :param id: Read-only.
        :type id: str
        :param amount:
        :type amount: float
        :param applies_to_invoice_id:
        :type applies_to_invoice_id: str
        :param applies_to_invoice_number:
        :type applies_to_invoice_number: str
        :param comment:
        :type comment: str
        :param contact_id:
        :type contact_id: str
        :param customer_id:
        :type customer_id: str
        :param customer_number:
        :type customer_number: str
        :param description:
        :type description: str
        :param document_number:
        :type document_number: str
        :param external_document_number:
        :type external_document_number: str
        :param journal_display_name:
        :type journal_display_name: str
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param line_number:
        :type line_number: int
        :param posting_date:
        :type posting_date: ~datetime.date
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param address: postalAddressType.
        :type address: ~financials.models.MicrosoftGraphPostalAddressType
        :param blocked:
        :type blocked: str
        :param currency_code:
        :type currency_code: str
        :param currency_id:
        :type currency_id: str
        :param display_name:
        :type display_name: str
        :param email:
        :type email: str
        :param microsoft_graph_customer_last_modified_date_time_last_modified_date_time:
        :type microsoft_graph_customer_last_modified_date_time_last_modified_date_time: ~datetime.datetime
        :param number:
        :type number: str
        :param payment_method_id:
        :type payment_method_id: str
        :param payment_terms_id:
        :type payment_terms_id: str
        :param phone_number:
        :type phone_number: str
        :param shipment_method_id:
        :type shipment_method_id: str
        :param tax_area_display_name:
        :type tax_area_display_name: str
        :param tax_area_id:
        :type tax_area_id: str
        :param tax_liable:
        :type tax_liable: bool
        :param tax_registration_number:
        :type tax_registration_number: str
        :param type:
        :type type: str
        :param website:
        :type website: str
        :param currency: currency.
        :type currency: ~financials.models.MicrosoftGraphCurrency
        :param payment_method: paymentMethod.
        :type payment_method: ~financials.models.MicrosoftGraphPaymentMethod
        :param payment_term: paymentTerm.
        :type payment_term: ~financials.models.MicrosoftGraphPaymentTerm
        :param picture:
        :type picture: list[~financials.models.MicrosoftGraphPicture]
        :param shipment_method: shipmentMethod.
        :type shipment_method: ~financials.models.MicrosoftGraphShipmentMethod
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphCustomerPayment(id=id, amount=amount, applies_to_invoice_id=applies_to_invoice_id, applies_to_invoice_number=applies_to_invoice_number, comment=comment, contact_id=contact_id, customer_id=customer_id, customer_number=customer_number, description=description, document_number=document_number, external_document_number=external_document_number, journal_display_name=journal_display_name, last_modified_date_time=last_modified_date_time, line_number=line_number, posting_date=posting_date, id_customer_id=microsoft_graph_entity_id, address=address, blocked=blocked, currency_code=currency_code, currency_id=currency_id, display_name=display_name, email=email, last_modified_date_time_customer_last_modified_date_time=microsoft_graph_customer_last_modified_date_time_last_modified_date_time, number=number, payment_method_id=payment_method_id, payment_terms_id=payment_terms_id, phone_number=phone_number, shipment_method_id=shipment_method_id, tax_area_display_name=tax_area_display_name, tax_area_id=tax_area_id, tax_liable=tax_liable, tax_registration_number=tax_registration_number, type=type, website=website, currency=currency, payment_method=payment_method, payment_term=payment_term, picture=picture, shipment_method=shipment_method)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_customer_payment.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'customerPaymentJournal-id': self._serialize.url("customer_payment_journal_id", customer_payment_journal_id, 'str'),
            'customerPayment-id': self._serialize.url("customer_payment_id", customer_payment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphCustomerPayment')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_customer_payment.metadata = {'url': '/financials/companies/{company-id}/customerPaymentJournals/{customerPaymentJournal-id}/customerPayments/{customerPayment-id}'}  # type: ignore

    def delete_customer_payment(
        self,
        company_id,  # type: str
        customer_payment_journal_id,  # type: str
        customer_payment_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property customerPayments for financials.

        Delete navigation property customerPayments for financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param customer_payment_journal_id: key: id of customerPaymentJournal.
        :type customer_payment_journal_id: str
        :param customer_payment_id: key: id of customerPayment.
        :type customer_payment_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_customer_payment.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'customerPaymentJournal-id': self._serialize.url("customer_payment_journal_id", customer_payment_journal_id, 'str'),
            'customerPayment-id': self._serialize.url("customer_payment_id", customer_payment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_customer_payment.metadata = {'url': '/financials/companies/{company-id}/customerPaymentJournals/{customerPaymentJournal-id}/customerPayments/{customerPayment-id}'}  # type: ignore
