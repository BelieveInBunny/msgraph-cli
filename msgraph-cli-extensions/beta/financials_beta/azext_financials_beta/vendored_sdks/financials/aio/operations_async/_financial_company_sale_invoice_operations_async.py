# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class FinancialCompanySaleInvoiceOperations:
    """FinancialCompanySaleInvoiceOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~financials.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def get_currency(
        self,
        company_id: str,
        sales_invoice_id: str,
        select: Optional[List[Union[str, "models.Enum229"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphCurrency":
        """Get currency from financials.

        Get currency from financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~financials.models.Enum229]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCurrency, or the result of cls(response)
        :rtype: ~financials.models.MicrosoftGraphCurrency
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCurrency"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_currency.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCurrency', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_currency.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/currency'}  # type: ignore

    async def update_currency(
        self,
        company_id: str,
        sales_invoice_id: str,
        id: Optional[str] = None,
        amount_decimal_places: Optional[str] = None,
        amount_rounding_precision: Optional[float] = None,
        code: Optional[str] = None,
        display_name: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        symbol: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property currency in financials.

        Update the navigation property currency in financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :param id: Read-only.
        :type id: str
        :param amount_decimal_places:
        :type amount_decimal_places: str
        :param amount_rounding_precision:
        :type amount_rounding_precision: float
        :param code:
        :type code: str
        :param display_name:
        :type display_name: str
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param symbol:
        :type symbol: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphCurrency(id=id, amount_decimal_places=amount_decimal_places, amount_rounding_precision=amount_rounding_precision, code=code, display_name=display_name, last_modified_date_time=last_modified_date_time, symbol=symbol)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_currency.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphCurrency')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_currency.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/currency'}  # type: ignore

    async def delete_currency(
        self,
        company_id: str,
        sales_invoice_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property currency for financials.

        Delete navigation property currency for financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_currency.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_currency.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/currency'}  # type: ignore

    async def get_customer(
        self,
        company_id: str,
        sales_invoice_id: str,
        select: Optional[List[Union[str, "models.Enum230"]]] = None,
        expand: Optional[List[Union[str, "models.Enum231"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphCustomer":
        """Get customer from financials.

        Get customer from financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~financials.models.Enum230]
        :param expand: Expand related entities.
        :type expand: list[str or ~financials.models.Enum231]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCustomer, or the result of cls(response)
        :rtype: ~financials.models.MicrosoftGraphCustomer
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCustomer"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_customer.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCustomer', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_customer.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/customer'}  # type: ignore

    async def update_customer(
        self,
        company_id: str,
        sales_invoice_id: str,
        id: Optional[str] = None,
        address: Optional["models.MicrosoftGraphPostalAddressType"] = None,
        blocked: Optional[str] = None,
        currency_code: Optional[str] = None,
        currency_id: Optional[str] = None,
        display_name: Optional[str] = None,
        email: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        number: Optional[str] = None,
        payment_method_id: Optional[str] = None,
        payment_terms_id: Optional[str] = None,
        phone_number: Optional[str] = None,
        shipment_method_id: Optional[str] = None,
        tax_area_display_name: Optional[str] = None,
        tax_area_id: Optional[str] = None,
        tax_liable: Optional[bool] = None,
        tax_registration_number: Optional[str] = None,
        type: Optional[str] = None,
        website: Optional[str] = None,
        currency: Optional["models.MicrosoftGraphCurrency"] = None,
        payment_method: Optional["models.MicrosoftGraphPaymentMethod"] = None,
        payment_term: Optional["models.MicrosoftGraphPaymentTerm"] = None,
        picture: Optional[List["models.MicrosoftGraphPicture"]] = None,
        shipment_method: Optional["models.MicrosoftGraphShipmentMethod"] = None,
        **kwargs
    ) -> None:
        """Update the navigation property customer in financials.

        Update the navigation property customer in financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :param id: Read-only.
        :type id: str
        :param address: postalAddressType.
        :type address: ~financials.models.MicrosoftGraphPostalAddressType
        :param blocked:
        :type blocked: str
        :param currency_code:
        :type currency_code: str
        :param currency_id:
        :type currency_id: str
        :param display_name:
        :type display_name: str
        :param email:
        :type email: str
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param number:
        :type number: str
        :param payment_method_id:
        :type payment_method_id: str
        :param payment_terms_id:
        :type payment_terms_id: str
        :param phone_number:
        :type phone_number: str
        :param shipment_method_id:
        :type shipment_method_id: str
        :param tax_area_display_name:
        :type tax_area_display_name: str
        :param tax_area_id:
        :type tax_area_id: str
        :param tax_liable:
        :type tax_liable: bool
        :param tax_registration_number:
        :type tax_registration_number: str
        :param type:
        :type type: str
        :param website:
        :type website: str
        :param currency: currency.
        :type currency: ~financials.models.MicrosoftGraphCurrency
        :param payment_method: paymentMethod.
        :type payment_method: ~financials.models.MicrosoftGraphPaymentMethod
        :param payment_term: paymentTerm.
        :type payment_term: ~financials.models.MicrosoftGraphPaymentTerm
        :param picture:
        :type picture: list[~financials.models.MicrosoftGraphPicture]
        :param shipment_method: shipmentMethod.
        :type shipment_method: ~financials.models.MicrosoftGraphShipmentMethod
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphCustomer(id=id, address=address, blocked=blocked, currency_code=currency_code, currency_id=currency_id, display_name=display_name, email=email, last_modified_date_time=last_modified_date_time, number=number, payment_method_id=payment_method_id, payment_terms_id=payment_terms_id, phone_number=phone_number, shipment_method_id=shipment_method_id, tax_area_display_name=tax_area_display_name, tax_area_id=tax_area_id, tax_liable=tax_liable, tax_registration_number=tax_registration_number, type=type, website=website, currency=currency, payment_method=payment_method, payment_term=payment_term, picture=picture, shipment_method=shipment_method)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_customer.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphCustomer')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_customer.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/customer'}  # type: ignore

    async def delete_customer(
        self,
        company_id: str,
        sales_invoice_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property customer for financials.

        Delete navigation property customer for financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_customer.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_customer.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/customer'}  # type: ignore

    async def cancel(
        self,
        company_id: str,
        sales_invoice_id: str,
        **kwargs
    ) -> None:
        """Invoke action cancel.

        Invoke action cancel.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.cancel.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    cancel.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/microsoft.graph.cancel'}  # type: ignore

    async def cancel_and_send(
        self,
        company_id: str,
        sales_invoice_id: str,
        **kwargs
    ) -> None:
        """Invoke action cancelAndSend.

        Invoke action cancelAndSend.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.cancel_and_send.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    cancel_and_send.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/microsoft.graph.cancelAndSend'}  # type: ignore

    async def post(
        self,
        company_id: str,
        sales_invoice_id: str,
        **kwargs
    ) -> None:
        """Invoke action post.

        Invoke action post.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.post.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    post.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/microsoft.graph.post'}  # type: ignore

    async def post_and_send(
        self,
        company_id: str,
        sales_invoice_id: str,
        **kwargs
    ) -> None:
        """Invoke action postAndSend.

        Invoke action postAndSend.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.post_and_send.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    post_and_send.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/microsoft.graph.postAndSend'}  # type: ignore

    async def send(
        self,
        company_id: str,
        sales_invoice_id: str,
        **kwargs
    ) -> None:
        """Invoke action send.

        Invoke action send.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.send.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    send.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/microsoft.graph.send'}  # type: ignore

    async def get_payment_term(
        self,
        company_id: str,
        sales_invoice_id: str,
        select: Optional[List[Union[str, "models.Enum239"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphPaymentTerm":
        """Get paymentTerm from financials.

        Get paymentTerm from financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~financials.models.Enum239]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPaymentTerm, or the result of cls(response)
        :rtype: ~financials.models.MicrosoftGraphPaymentTerm
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPaymentTerm"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_payment_term.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPaymentTerm', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_payment_term.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/paymentTerm'}  # type: ignore

    async def update_payment_term(
        self,
        company_id: str,
        sales_invoice_id: str,
        id: Optional[str] = None,
        calculate_discount_on_credit_memos: Optional[bool] = None,
        code: Optional[str] = None,
        discount_date_calculation: Optional[str] = None,
        discount_percent: Optional[float] = None,
        display_name: Optional[str] = None,
        due_date_calculation: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ) -> None:
        """Update the navigation property paymentTerm in financials.

        Update the navigation property paymentTerm in financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :param id: Read-only.
        :type id: str
        :param calculate_discount_on_credit_memos:
        :type calculate_discount_on_credit_memos: bool
        :param code:
        :type code: str
        :param discount_date_calculation:
        :type discount_date_calculation: str
        :param discount_percent:
        :type discount_percent: float
        :param display_name:
        :type display_name: str
        :param due_date_calculation:
        :type due_date_calculation: str
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphPaymentTerm(id=id, calculate_discount_on_credit_memos=calculate_discount_on_credit_memos, code=code, discount_date_calculation=discount_date_calculation, discount_percent=discount_percent, display_name=display_name, due_date_calculation=due_date_calculation, last_modified_date_time=last_modified_date_time)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_payment_term.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphPaymentTerm')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_payment_term.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/paymentTerm'}  # type: ignore

    async def delete_payment_term(
        self,
        company_id: str,
        sales_invoice_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property paymentTerm for financials.

        Delete navigation property paymentTerm for financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_payment_term.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_payment_term.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/paymentTerm'}  # type: ignore

    def list_sale_invoice_line(
        self,
        company_id: str,
        sales_invoice_id: str,
        orderby: Optional[List[Union[str, "models.Enum240"]]] = None,
        select: Optional[List[Union[str, "models.Enum241"]]] = None,
        expand: Optional[List[Union[str, "models.Enum242"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfSalesInvoiceLine0"]:
        """Get salesInvoiceLines from financials.

        Get salesInvoiceLines from financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~financials.models.Enum240]
        :param select: Select properties to be returned.
        :type select: list[str or ~financials.models.Enum241]
        :param expand: Expand related entities.
        :type expand: list[str or ~financials.models.Enum242]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfSalesInvoiceLine0 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~financials.models.CollectionOfSalesInvoiceLine0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfSalesInvoiceLine0"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_sale_invoice_line.metadata['url']  # type: ignore
                path_format_arguments = {
                    'company-id': self._serialize.url("company_id", company_id, 'str'),
                    'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfSalesInvoiceLine0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_sale_invoice_line.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/salesInvoiceLines'}  # type: ignore

    async def create_sale_invoice_line(
        self,
        company_id: str,
        sales_invoice_id: str,
        id: Optional[str] = None,
        account_id: Optional[str] = None,
        amount_excluding_tax: Optional[float] = None,
        amount_including_tax: Optional[float] = None,
        description: Optional[str] = None,
        discount_amount: Optional[float] = None,
        discount_applied_before_tax: Optional[bool] = None,
        discount_percent: Optional[float] = None,
        document_id: Optional[str] = None,
        invoice_discount_allocation: Optional[float] = None,
        item_id: Optional[str] = None,
        line_type: Optional[str] = None,
        net_amount: Optional[float] = None,
        net_amount_including_tax: Optional[float] = None,
        net_tax_amount: Optional[float] = None,
        quantity: Optional[float] = None,
        sequence: Optional[int] = None,
        shipment_date: Optional[datetime.date] = None,
        tax_code: Optional[str] = None,
        tax_percent: Optional[float] = None,
        total_tax_amount: Optional[float] = None,
        unit_of_measure_id: Optional[str] = None,
        unit_price: Optional[float] = None,
        account: Optional["models.MicrosoftGraphAccount"] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        base_unit_of_measure_id: Optional[str] = None,
        blocked: Optional[bool] = None,
        display_name: Optional[str] = None,
        gtin: Optional[str] = None,
        inventory: Optional[float] = None,
        item_category_code: Optional[str] = None,
        item_category_id: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        number: Optional[str] = None,
        price_includes_tax: Optional[bool] = None,
        tax_group_code: Optional[str] = None,
        tax_group_id: Optional[str] = None,
        type: Optional[str] = None,
        unit_cost: Optional[float] = None,
        number_unit_price: Optional[float] = None,
        item_category: Optional["models.MicrosoftGraphItemCategory"] = None,
        picture: Optional[List["models.MicrosoftGraphPicture"]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphSalesInvoiceLine":
        """Create new navigation property to salesInvoiceLines for financials.

        Create new navigation property to salesInvoiceLines for financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :param id: Read-only.
        :type id: str
        :param account_id:
        :type account_id: str
        :param amount_excluding_tax:
        :type amount_excluding_tax: float
        :param amount_including_tax:
        :type amount_including_tax: float
        :param description:
        :type description: str
        :param discount_amount:
        :type discount_amount: float
        :param discount_applied_before_tax:
        :type discount_applied_before_tax: bool
        :param discount_percent:
        :type discount_percent: float
        :param document_id:
        :type document_id: str
        :param invoice_discount_allocation:
        :type invoice_discount_allocation: float
        :param item_id:
        :type item_id: str
        :param line_type:
        :type line_type: str
        :param net_amount:
        :type net_amount: float
        :param net_amount_including_tax:
        :type net_amount_including_tax: float
        :param net_tax_amount:
        :type net_tax_amount: float
        :param quantity:
        :type quantity: float
        :param sequence:
        :type sequence: int
        :param shipment_date:
        :type shipment_date: ~datetime.date
        :param tax_code:
        :type tax_code: str
        :param tax_percent:
        :type tax_percent: float
        :param total_tax_amount:
        :type total_tax_amount: float
        :param unit_of_measure_id:
        :type unit_of_measure_id: str
        :param unit_price:
        :type unit_price: float
        :param account: account.
        :type account: ~financials.models.MicrosoftGraphAccount
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param base_unit_of_measure_id:
        :type base_unit_of_measure_id: str
        :param blocked:
        :type blocked: bool
        :param display_name:
        :type display_name: str
        :param gtin:
        :type gtin: str
        :param inventory:
        :type inventory: float
        :param item_category_code:
        :type item_category_code: str
        :param item_category_id:
        :type item_category_id: str
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param number:
        :type number: str
        :param price_includes_tax:
        :type price_includes_tax: bool
        :param tax_group_code:
        :type tax_group_code: str
        :param tax_group_id:
        :type tax_group_id: str
        :param type:
        :type type: str
        :param unit_cost:
        :type unit_cost: float
        :param number_unit_price:
        :type number_unit_price: float
        :param item_category: itemCategory.
        :type item_category: ~financials.models.MicrosoftGraphItemCategory
        :param picture:
        :type picture: list[~financials.models.MicrosoftGraphPicture]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSalesInvoiceLine, or the result of cls(response)
        :rtype: ~financials.models.MicrosoftGraphSalesInvoiceLine
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSalesInvoiceLine"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphSalesInvoiceLine(id=id, account_id=account_id, amount_excluding_tax=amount_excluding_tax, amount_including_tax=amount_including_tax, description=description, discount_amount=discount_amount, discount_applied_before_tax=discount_applied_before_tax, discount_percent=discount_percent, document_id=document_id, invoice_discount_allocation=invoice_discount_allocation, item_id=item_id, line_type=line_type, net_amount=net_amount, net_amount_including_tax=net_amount_including_tax, net_tax_amount=net_tax_amount, quantity=quantity, sequence=sequence, shipment_date=shipment_date, tax_code=tax_code, tax_percent=tax_percent, total_tax_amount=total_tax_amount, unit_of_measure_id=unit_of_measure_id, unit_price=unit_price, account=account, id_item_id=microsoft_graph_entity_id, base_unit_of_measure_id=base_unit_of_measure_id, blocked=blocked, display_name=display_name, gtin=gtin, inventory=inventory, item_category_code=item_category_code, item_category_id=item_category_id, last_modified_date_time=last_modified_date_time, number=number, price_includes_tax=price_includes_tax, tax_group_code=tax_group_code, tax_group_id=tax_group_id, type=type, unit_cost=unit_cost, unit_price_item_unit_price=number_unit_price, item_category=item_category, picture=picture)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_sale_invoice_line.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphSalesInvoiceLine')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSalesInvoiceLine', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_sale_invoice_line.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/salesInvoiceLines'}  # type: ignore

    async def get_sale_invoice_line(
        self,
        company_id: str,
        sales_invoice_id: str,
        sales_invoice_line_id: str,
        select: Optional[List[Union[str, "models.Enum243"]]] = None,
        expand: Optional[List[Union[str, "models.Enum244"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphSalesInvoiceLine":
        """Get salesInvoiceLines from financials.

        Get salesInvoiceLines from financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :param sales_invoice_line_id: key: id of salesInvoiceLine.
        :type sales_invoice_line_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~financials.models.Enum243]
        :param expand: Expand related entities.
        :type expand: list[str or ~financials.models.Enum244]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSalesInvoiceLine, or the result of cls(response)
        :rtype: ~financials.models.MicrosoftGraphSalesInvoiceLine
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSalesInvoiceLine"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_sale_invoice_line.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
            'salesInvoiceLine-id': self._serialize.url("sales_invoice_line_id", sales_invoice_line_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSalesInvoiceLine', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_sale_invoice_line.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/salesInvoiceLines/{salesInvoiceLine-id}'}  # type: ignore

    async def update_sale_invoice_line(
        self,
        company_id: str,
        sales_invoice_id: str,
        sales_invoice_line_id: str,
        id: Optional[str] = None,
        account_id: Optional[str] = None,
        amount_excluding_tax: Optional[float] = None,
        amount_including_tax: Optional[float] = None,
        description: Optional[str] = None,
        discount_amount: Optional[float] = None,
        discount_applied_before_tax: Optional[bool] = None,
        discount_percent: Optional[float] = None,
        document_id: Optional[str] = None,
        invoice_discount_allocation: Optional[float] = None,
        item_id: Optional[str] = None,
        line_type: Optional[str] = None,
        net_amount: Optional[float] = None,
        net_amount_including_tax: Optional[float] = None,
        net_tax_amount: Optional[float] = None,
        quantity: Optional[float] = None,
        sequence: Optional[int] = None,
        shipment_date: Optional[datetime.date] = None,
        tax_code: Optional[str] = None,
        tax_percent: Optional[float] = None,
        total_tax_amount: Optional[float] = None,
        unit_of_measure_id: Optional[str] = None,
        unit_price: Optional[float] = None,
        account: Optional["models.MicrosoftGraphAccount"] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        base_unit_of_measure_id: Optional[str] = None,
        blocked: Optional[bool] = None,
        display_name: Optional[str] = None,
        gtin: Optional[str] = None,
        inventory: Optional[float] = None,
        item_category_code: Optional[str] = None,
        item_category_id: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        number: Optional[str] = None,
        price_includes_tax: Optional[bool] = None,
        tax_group_code: Optional[str] = None,
        tax_group_id: Optional[str] = None,
        type: Optional[str] = None,
        unit_cost: Optional[float] = None,
        number_unit_price: Optional[float] = None,
        item_category: Optional["models.MicrosoftGraphItemCategory"] = None,
        picture: Optional[List["models.MicrosoftGraphPicture"]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property salesInvoiceLines in financials.

        Update the navigation property salesInvoiceLines in financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :param sales_invoice_line_id: key: id of salesInvoiceLine.
        :type sales_invoice_line_id: str
        :param id: Read-only.
        :type id: str
        :param account_id:
        :type account_id: str
        :param amount_excluding_tax:
        :type amount_excluding_tax: float
        :param amount_including_tax:
        :type amount_including_tax: float
        :param description:
        :type description: str
        :param discount_amount:
        :type discount_amount: float
        :param discount_applied_before_tax:
        :type discount_applied_before_tax: bool
        :param discount_percent:
        :type discount_percent: float
        :param document_id:
        :type document_id: str
        :param invoice_discount_allocation:
        :type invoice_discount_allocation: float
        :param item_id:
        :type item_id: str
        :param line_type:
        :type line_type: str
        :param net_amount:
        :type net_amount: float
        :param net_amount_including_tax:
        :type net_amount_including_tax: float
        :param net_tax_amount:
        :type net_tax_amount: float
        :param quantity:
        :type quantity: float
        :param sequence:
        :type sequence: int
        :param shipment_date:
        :type shipment_date: ~datetime.date
        :param tax_code:
        :type tax_code: str
        :param tax_percent:
        :type tax_percent: float
        :param total_tax_amount:
        :type total_tax_amount: float
        :param unit_of_measure_id:
        :type unit_of_measure_id: str
        :param unit_price:
        :type unit_price: float
        :param account: account.
        :type account: ~financials.models.MicrosoftGraphAccount
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param base_unit_of_measure_id:
        :type base_unit_of_measure_id: str
        :param blocked:
        :type blocked: bool
        :param display_name:
        :type display_name: str
        :param gtin:
        :type gtin: str
        :param inventory:
        :type inventory: float
        :param item_category_code:
        :type item_category_code: str
        :param item_category_id:
        :type item_category_id: str
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param number:
        :type number: str
        :param price_includes_tax:
        :type price_includes_tax: bool
        :param tax_group_code:
        :type tax_group_code: str
        :param tax_group_id:
        :type tax_group_id: str
        :param type:
        :type type: str
        :param unit_cost:
        :type unit_cost: float
        :param number_unit_price:
        :type number_unit_price: float
        :param item_category: itemCategory.
        :type item_category: ~financials.models.MicrosoftGraphItemCategory
        :param picture:
        :type picture: list[~financials.models.MicrosoftGraphPicture]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphSalesInvoiceLine(id=id, account_id=account_id, amount_excluding_tax=amount_excluding_tax, amount_including_tax=amount_including_tax, description=description, discount_amount=discount_amount, discount_applied_before_tax=discount_applied_before_tax, discount_percent=discount_percent, document_id=document_id, invoice_discount_allocation=invoice_discount_allocation, item_id=item_id, line_type=line_type, net_amount=net_amount, net_amount_including_tax=net_amount_including_tax, net_tax_amount=net_tax_amount, quantity=quantity, sequence=sequence, shipment_date=shipment_date, tax_code=tax_code, tax_percent=tax_percent, total_tax_amount=total_tax_amount, unit_of_measure_id=unit_of_measure_id, unit_price=unit_price, account=account, id_item_id=microsoft_graph_entity_id, base_unit_of_measure_id=base_unit_of_measure_id, blocked=blocked, display_name=display_name, gtin=gtin, inventory=inventory, item_category_code=item_category_code, item_category_id=item_category_id, last_modified_date_time=last_modified_date_time, number=number, price_includes_tax=price_includes_tax, tax_group_code=tax_group_code, tax_group_id=tax_group_id, type=type, unit_cost=unit_cost, unit_price_item_unit_price=number_unit_price, item_category=item_category, picture=picture)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_sale_invoice_line.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
            'salesInvoiceLine-id': self._serialize.url("sales_invoice_line_id", sales_invoice_line_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphSalesInvoiceLine')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_sale_invoice_line.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/salesInvoiceLines/{salesInvoiceLine-id}'}  # type: ignore

    async def delete_sale_invoice_line(
        self,
        company_id: str,
        sales_invoice_id: str,
        sales_invoice_line_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property salesInvoiceLines for financials.

        Delete navigation property salesInvoiceLines for financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :param sales_invoice_line_id: key: id of salesInvoiceLine.
        :type sales_invoice_line_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_sale_invoice_line.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
            'salesInvoiceLine-id': self._serialize.url("sales_invoice_line_id", sales_invoice_line_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_sale_invoice_line.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/salesInvoiceLines/{salesInvoiceLine-id}'}  # type: ignore

    async def get_shipment_method(
        self,
        company_id: str,
        sales_invoice_id: str,
        select: Optional[List[Union[str, "models.Enum252"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphShipmentMethod":
        """Get shipmentMethod from financials.

        Get shipmentMethod from financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~financials.models.Enum252]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphShipmentMethod, or the result of cls(response)
        :rtype: ~financials.models.MicrosoftGraphShipmentMethod
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphShipmentMethod"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_shipment_method.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphShipmentMethod', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_shipment_method.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/shipmentMethod'}  # type: ignore

    async def update_shipment_method(
        self,
        company_id: str,
        sales_invoice_id: str,
        id: Optional[str] = None,
        code: Optional[str] = None,
        display_name: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ) -> None:
        """Update the navigation property shipmentMethod in financials.

        Update the navigation property shipmentMethod in financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :param id: Read-only.
        :type id: str
        :param code:
        :type code: str
        :param display_name:
        :type display_name: str
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphShipmentMethod(id=id, code=code, display_name=display_name, last_modified_date_time=last_modified_date_time)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_shipment_method.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphShipmentMethod')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_shipment_method.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/shipmentMethod'}  # type: ignore

    async def delete_shipment_method(
        self,
        company_id: str,
        sales_invoice_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property shipmentMethod for financials.

        Delete navigation property shipmentMethod for financials.

        :param company_id: key: id of company.
        :type company_id: str
        :param sales_invoice_id: key: id of salesInvoice.
        :type sales_invoice_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_shipment_method.metadata['url']  # type: ignore
        path_format_arguments = {
            'company-id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice-id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_shipment_method.metadata = {'url': '/financials/companies/{company-id}/salesInvoices/{salesInvoice-id}/shipmentMethod'}  # type: ignore
