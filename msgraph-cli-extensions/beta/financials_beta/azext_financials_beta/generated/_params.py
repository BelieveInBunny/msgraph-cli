# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import get_three_state_flag
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_financials_beta.action import (
    AddAddress,
    AddCustomerCurrency,
    AddCustomerPaymentMethod,
    AddCustomerPaymentTerm,
    AddCustomerPicture,
    AddCustomerShipmentMethod,
    AddAccount,
    AddDimensionValues,
    AddFinancialsCreateEmployeePicture,
    AddItemCategory,
    AddFinancialsCreateItemPicture,
    AddVendorPicture
)


def load_arguments(self, _):

    with self.argument_context('financials get-financial') as c:
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials update-financial') as c:
        c.argument('companies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-company') as c:
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('financials get-company') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-company') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials update-company') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('account_id', type=str, help='key: id of account')
        c.argument('if_match', type=str, help='ETag')
        c.argument('aged_accounts_payable_id', type=str, help='key: id of agedAccountsPayable')
        c.argument('aged_accounts_receivable_id', type=str, help='key: id of agedAccountsReceivable')
        c.argument('company_information_id', type=str, help='key: id of companyInformation')
        c.argument('country_region_id', type=str, help='key: id of countryRegion')
        c.argument('currency_id', type=str, help='key: id of currency')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('dimension_id', type=str, help='key: id of dimension')
        c.argument('dimension_value_id', type=str, help='key: id of dimensionValue')
        c.argument('employee_id', type=str, help='key: id of employee')
        c.argument('general_ledger_entry_id', type=str, help='key: id of generalLedgerEntry')
        c.argument('item_category_id', type=str, help='key: id of itemCategory')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('payment_method_id', type=str, help='key: id of paymentMethod')
        c.argument('payment_term_id', type=str, help='key: id of paymentTerm')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('shipment_method_id', type=str, help='key: id of shipmentMethod')
        c.argument('tax_area_id', type=str, help='key: id of taxArea')
        c.argument('tax_group_id', type=str, help='key: id of taxGroup')
        c.argument('unit_of_measure_id', type=str, help='key: id of unitOfMeasure')
        c.argument('vendor_id', type=str, help='key: id of vendor')

    with self.argument_context('financials create-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials create-aged-account-payable') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('aged_as_of_date', help='')
        c.argument('balance_due', type=float, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('current_amount', type=float, help='')
        c.argument('name', type=str, help='')
        c.argument('period1_amount', type=float, help='')
        c.argument('period2_amount', type=float, help='')
        c.argument('period3_amount', type=float, help='')
        c.argument('period_length_filter', type=str, help='')
        c.argument('vendor_number', type=str, help='')

    with self.argument_context('financials create-aged-account-receivable') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('aged_as_of_date', help='')
        c.argument('balance_due', type=float, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('current_amount', type=float, help='')
        c.argument('customer_number', type=str, help='')
        c.argument('name', type=str, help='')
        c.argument('period1_amount', type=float, help='')
        c.argument('period2_amount', type=float, help='')
        c.argument('period3_amount', type=float, help='')
        c.argument('period_length_filter', type=str, help='')

    with self.argument_context('financials create-company-information') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('currency_code', type=str, help='')
        c.argument('current_fiscal_year_start_date', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('fax_number', type=str, help='')
        c.argument('industry', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('picture', help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('website', type=str, help='')

    with self.argument_context('financials create-country-region') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address_format', type=str, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials create-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials create-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('shipment_method_id', help='')
        c.argument('tax_area_display_name', type=str, help='')
        c.argument('tax_area_id', help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCustomerCurrency, nargs='*', help='currency')
        c.argument('payment_method', action=AddCustomerPaymentMethod, nargs='*', help='paymentMethod')
        c.argument('payment_term', action=AddCustomerPaymentTerm, nargs='*', help='paymentTerm')
        c.argument('picture', action=AddCustomerPicture, nargs='*', help='')
        c.argument('shipment_method', action=AddCustomerShipmentMethod, nargs='*', help='shipmentMethod')

    with self.argument_context('financials create-customer-payment') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount', type=float, help='')
        c.argument('applies_to_invoice_id', help='')
        c.argument('applies_to_invoice_number', type=str, help='')
        c.argument('comment', type=str, help='')
        c.argument('contact_id', type=str, help='')
        c.argument('customer_id', help='')
        c.argument('customer_number', type=str, help='')
        c.argument('description', type=str, help='')
        c.argument('document_number', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('journal_display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('line_number', type=int, help='')
        c.argument('posting_date', help='')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('customer_address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('customer_blocked', type=str, help='')
        c.argument('customer_currency_code', type=str, help='')
        c.argument('customer_currency_id', help='')
        c.argument('customer_display_name', type=str, help='')
        c.argument('customer_email', type=str, help='')
        c.argument('customer_last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('customer_payment_method_id', help='')
        c.argument('customer_payment_terms_id', help='')
        c.argument('customer_phone_number', type=str, help='')
        c.argument('customer_shipment_method_id', help='')
        c.argument('customer_tax_area_display_name', type=str, help='')
        c.argument('customer_tax_area_id', help='')
        c.argument('customer_tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('customer_tax_registration_number', type=str, help='')
        c.argument('customer_type', type=str, help='')
        c.argument('customer_website', type=str, help='')
        c.argument('customer_currency', action=AddCustomerCurrency, nargs='*', help='currency')
        c.argument('customer_payment_method', action=AddCustomerPaymentMethod, nargs='*', help='paymentMethod')
        c.argument('customer_payment_term', action=AddCustomerPaymentTerm, nargs='*', help='paymentTerm')
        c.argument('customer_picture', action=AddCustomerPicture, nargs='*', help='')
        c.argument('customer_shipment_method', action=AddCustomerShipmentMethod, nargs='*', help='shipmentMethod')

    with self.argument_context('financials create-customer-payment-journal') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('balancing_account_id', help='')
        c.argument('balancing_account_number', type=str, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('customer_payments', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('financials create-dimension') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('dimension_values', action=AddDimensionValues, nargs='*', help='')

    with self.argument_context('financials create-dimension-value') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials create-employee') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('birth_date', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('employment_date', help='')
        c.argument('given_name', type=str, help='')
        c.argument('job_title', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('middle_name', type=str, help='')
        c.argument('mobile_phone', type=str, help='')
        c.argument('number', type=str, help='')
        c.argument('personal_email', type=str, help='')
        c.argument('phone_number', type=str, help='')
        c.argument('statistics_group_code', type=str, help='')
        c.argument('status', type=str, help='')
        c.argument('surname', type=str, help='')
        c.argument('termination_date', help='')
        c.argument('picture', action=AddFinancialsCreateEmployeePicture, nargs='*', help='')

    with self.argument_context('financials create-general-ledger-entry') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('account_number', type=str, help='')
        c.argument('credit_amount', type=float, help='')
        c.argument('debit_amount', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('document_number', type=str, help='')
        c.argument('document_type', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('posting_date', help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')

    with self.argument_context('financials create-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials create-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials create-journal') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('balancing_account_id', help='')
        c.argument('balancing_account_number', type=str, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('journal_lines', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('financials create-journal-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('account_number', type=str, help='')
        c.argument('amount', type=float, help='')
        c.argument('comment', type=str, help='')
        c.argument('description', type=str, help='')
        c.argument('document_number', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('journal_display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('line_number', type=int, help='')
        c.argument('posting_date', help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')

    with self.argument_context('financials create-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials create-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials create-purchase-invoice') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('buy_from_address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('due_date', help='')
        c.argument('invoice_date', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('pay_to_address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('pay_to_contact', type=str, help='')
        c.argument('pay_to_name', type=str, help='')
        c.argument('pay_to_vendor_id', help='')
        c.argument('pay_to_vendor_number', type=str, help='')
        c.argument('prices_include_tax', arg_type=get_three_state_flag(), help='')
        c.argument('ship_to_address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('ship_to_contact', type=str, help='')
        c.argument('ship_to_name', type=str, help='')
        c.argument('status', type=str, help='')
        c.argument('total_amount_excluding_tax', type=float, help='')
        c.argument('total_amount_including_tax', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('vendor_id', help='')
        c.argument('vendor_invoice_number', type=str, help='')
        c.argument('vendor_name', type=str, help='')
        c.argument('vendor_number', type=str, help='')
        c.argument('currency', action=AddCustomerCurrency, nargs='*', help='currency')
        c.argument('purchase_invoice_lines', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('vendor_address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('vendor_balance', type=float, help='')
        c.argument('vendor_blocked', type=str, help='')
        c.argument('vendor_currency_code', type=str, help='')
        c.argument('vendor_currency_id', help='')
        c.argument('vendor_display_name', type=str, help='')
        c.argument('vendor_email', type=str, help='')
        c.argument('vendor_last_modified_date_time', help='')
        c.argument('microsoft_graph_vendor_number', type=str, help='')
        c.argument('vendor_payment_method_id', help='')
        c.argument('vendor_payment_terms_id', help='')
        c.argument('vendor_phone_number', type=str, help='')
        c.argument('vendor_tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('vendor_tax_registration_number', type=str, help='')
        c.argument('vendor_website', type=str, help='')
        c.argument('vendor_currency', action=AddCustomerCurrency, nargs='*', help='currency')
        c.argument('vendor_payment_method', action=AddCustomerPaymentMethod, nargs='*', help='paymentMethod')
        c.argument('vendor_payment_term', action=AddCustomerPaymentTerm, nargs='*', help='paymentTerm')
        c.argument('vendor_picture', action=AddVendorPicture, nargs='*', help='')

    with self.argument_context('financials create-purchase-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('expected_receipt_date', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('item_base_unit_of_measure_id', help='')
        c.argument('item_blocked', arg_type=get_three_state_flag(), help='')
        c.argument('item_display_name', type=str, help='')
        c.argument('item_gtin', type=str, help='')
        c.argument('item_inventory', type=float, help='')
        c.argument('item_item_category_code', type=str, help='')
        c.argument('item_item_category_id', help='')
        c.argument('item_last_modified_date_time', help='')
        c.argument('item_number', type=str, help='')
        c.argument('item_price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('item_tax_group_code', type=str, help='')
        c.argument('item_tax_group_id', help='')
        c.argument('item_type', type=str, help='')
        c.argument('item_unit_cost', type=float, help='')
        c.argument('item_unit_price', type=float, help='')
        c.argument('item_item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('item_picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials create-sale-credit-memo') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('financials create-sale-credit-memo-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('item_base_unit_of_measure_id', help='')
        c.argument('item_blocked', arg_type=get_three_state_flag(), help='')
        c.argument('item_display_name', type=str, help='')
        c.argument('item_gtin', type=str, help='')
        c.argument('item_inventory', type=float, help='')
        c.argument('item_item_category_code', type=str, help='')
        c.argument('item_item_category_id', help='')
        c.argument('item_last_modified_date_time', help='')
        c.argument('item_number', type=str, help='')
        c.argument('item_price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('item_tax_group_code', type=str, help='')
        c.argument('item_tax_group_id', help='')
        c.argument('item_type', type=str, help='')
        c.argument('item_unit_cost', type=float, help='')
        c.argument('item_unit_price', type=float, help='')
        c.argument('item_item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('item_picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials create-sale-invoice') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('financials create-sale-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('item_base_unit_of_measure_id', help='')
        c.argument('item_blocked', arg_type=get_three_state_flag(), help='')
        c.argument('item_display_name', type=str, help='')
        c.argument('item_gtin', type=str, help='')
        c.argument('item_inventory', type=float, help='')
        c.argument('item_item_category_code', type=str, help='')
        c.argument('item_item_category_id', help='')
        c.argument('item_last_modified_date_time', help='')
        c.argument('item_number', type=str, help='')
        c.argument('item_price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('item_tax_group_code', type=str, help='')
        c.argument('item_tax_group_id', help='')
        c.argument('item_type', type=str, help='')
        c.argument('item_unit_cost', type=float, help='')
        c.argument('item_unit_price', type=float, help='')
        c.argument('item_item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('item_picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials create-sale-order') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('financials create-sale-order-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('invoiced_quantity', type=float, help='')
        c.argument('invoice_quantity', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('shipped_quantity', type=float, help='')
        c.argument('ship_quantity', type=float, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('item_base_unit_of_measure_id', help='')
        c.argument('item_blocked', arg_type=get_three_state_flag(), help='')
        c.argument('item_display_name', type=str, help='')
        c.argument('item_gtin', type=str, help='')
        c.argument('item_inventory', type=float, help='')
        c.argument('item_item_category_code', type=str, help='')
        c.argument('item_item_category_id', help='')
        c.argument('item_last_modified_date_time', help='')
        c.argument('item_number', type=str, help='')
        c.argument('item_price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('item_tax_group_code', type=str, help='')
        c.argument('item_tax_group_id', help='')
        c.argument('item_type', type=str, help='')
        c.argument('item_unit_cost', type=float, help='')
        c.argument('item_unit_price', type=float, help='')
        c.argument('item_item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('item_picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials create-sale-quote') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('financials create-sale-quote-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('item_base_unit_of_measure_id', help='')
        c.argument('item_blocked', arg_type=get_three_state_flag(), help='')
        c.argument('item_display_name', type=str, help='')
        c.argument('item_gtin', type=str, help='')
        c.argument('item_inventory', type=float, help='')
        c.argument('item_item_category_code', type=str, help='')
        c.argument('item_item_category_id', help='')
        c.argument('item_last_modified_date_time', help='')
        c.argument('item_number', type=str, help='')
        c.argument('item_price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('item_tax_group_code', type=str, help='')
        c.argument('item_tax_group_id', help='')
        c.argument('item_type', type=str, help='')
        c.argument('item_unit_cost', type=float, help='')
        c.argument('item_unit_price', type=float, help='')
        c.argument('item_item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('item_picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials create-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials create-tax-area') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('tax_type', type=str, help='')

    with self.argument_context('financials create-tax-group') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('tax_type', type=str, help='')

    with self.argument_context('financials create-unit-of-measure') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('international_standard_code', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials create-vendor') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('balance', type=float, help='')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCustomerCurrency, nargs='*', help='currency')
        c.argument('payment_method', action=AddCustomerPaymentMethod, nargs='*', help='paymentMethod')
        c.argument('payment_term', action=AddCustomerPaymentTerm, nargs='*', help='paymentTerm')
        c.argument('picture', action=AddVendorPicture, nargs='*', help='')

    with self.argument_context('financials get-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('account_id', type=str, help='key: id of account')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-aged-account-payable') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('aged_accounts_payable_id', type=str, help='key: id of agedAccountsPayable')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-aged-account-receivable') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('aged_accounts_receivable_id', type=str, help='key: id of agedAccountsReceivable')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-company-information') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('company_information_id', type=str, help='key: id of companyInformation')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-company-information-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('company_information_id', type=str, help='key: id of companyInformation')

    with self.argument_context('financials get-country-region') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('country_region_id', type=str, help='key: id of countryRegion')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('currency_id', type=str, help='key: id of currency')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-customer-payment') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-customer-payment-journal') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-dimension') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('dimension_id', type=str, help='key: id of dimension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-dimension-value') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('dimension_value_id', type=str, help='key: id of dimensionValue')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-employee') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('employee_id', type=str, help='key: id of employee')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-general-ledger-entry') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('general_ledger_entry_id', type=str, help='key: id of generalLedgerEntry')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_category_id', type=str, help='key: id of itemCategory')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-journal') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-journal-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('payment_method_id', type=str, help='key: id of paymentMethod')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('payment_term_id', type=str, help='key: id of paymentTerm')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials get-purchase-invoice') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-purchase-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-sale-credit-memo') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-sale-credit-memo-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-sale-invoice') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-sale-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-sale-order') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-sale-order-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-sale-quote') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-sale-quote-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('shipment_method_id', type=str, help='key: id of shipmentMethod')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-tax-area') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('tax_area_id', type=str, help='key: id of taxArea')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-tax-group') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('tax_group_id', type=str, help='key: id of taxGroup')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-unit-of-measure') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('unit_of_measure_id', type=str, help='key: id of unitOfMeasure')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-vendor') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-aged-account-payable') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-aged-account-receivable') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-company-information') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-country-region') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-customer-payment') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-customer-payment-journal') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-dimension') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-dimension-value') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-employee') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-general-ledger-entry') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-journal') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-journal-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-purchase-invoice') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-purchase-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-sale-credit-memo') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-sale-credit-memo-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-sale-invoice') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-sale-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-sale-order') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-sale-order-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-sale-quote') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-sale-quote-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-tax-area') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-tax-group') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-unit-of-measure') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-vendor') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-company-information-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('company_information_id', type=str, help='key: id of companyInformation')
        c.argument('data', help='New media content.')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('account_id', type=str, help='key: id of account')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials update-aged-account-payable') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('aged_accounts_payable_id', type=str, help='key: id of agedAccountsPayable')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('aged_as_of_date', help='')
        c.argument('balance_due', type=float, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('current_amount', type=float, help='')
        c.argument('name', type=str, help='')
        c.argument('period1_amount', type=float, help='')
        c.argument('period2_amount', type=float, help='')
        c.argument('period3_amount', type=float, help='')
        c.argument('period_length_filter', type=str, help='')
        c.argument('vendor_number', type=str, help='')

    with self.argument_context('financials update-aged-account-receivable') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('aged_accounts_receivable_id', type=str, help='key: id of agedAccountsReceivable')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('aged_as_of_date', help='')
        c.argument('balance_due', type=float, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('current_amount', type=float, help='')
        c.argument('customer_number', type=str, help='')
        c.argument('name', type=str, help='')
        c.argument('period1_amount', type=float, help='')
        c.argument('period2_amount', type=float, help='')
        c.argument('period3_amount', type=float, help='')
        c.argument('period_length_filter', type=str, help='')

    with self.argument_context('financials update-company-information') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('company_information_id', type=str, help='key: id of companyInformation')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('currency_code', type=str, help='')
        c.argument('current_fiscal_year_start_date', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('fax_number', type=str, help='')
        c.argument('industry', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('picture', help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('website', type=str, help='')

    with self.argument_context('financials update-country-region') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('country_region_id', type=str, help='key: id of countryRegion')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address_format', type=str, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('currency_id', type=str, help='key: id of currency')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials update-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('shipment_method_id', help='')
        c.argument('tax_area_display_name', type=str, help='')
        c.argument('tax_area_id', help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCustomerCurrency, nargs='*', help='currency')
        c.argument('payment_method', action=AddCustomerPaymentMethod, nargs='*', help='paymentMethod')
        c.argument('payment_term', action=AddCustomerPaymentTerm, nargs='*', help='paymentTerm')
        c.argument('picture', action=AddCustomerPicture, nargs='*', help='')
        c.argument('shipment_method', action=AddCustomerShipmentMethod, nargs='*', help='shipmentMethod')

    with self.argument_context('financials update-customer-payment') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount', type=float, help='')
        c.argument('applies_to_invoice_id', help='')
        c.argument('applies_to_invoice_number', type=str, help='')
        c.argument('comment', type=str, help='')
        c.argument('contact_id', type=str, help='')
        c.argument('customer_id', help='')
        c.argument('customer_number', type=str, help='')
        c.argument('description', type=str, help='')
        c.argument('document_number', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('journal_display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('line_number', type=int, help='')
        c.argument('posting_date', help='')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('customer_address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('customer_blocked', type=str, help='')
        c.argument('customer_currency_code', type=str, help='')
        c.argument('customer_currency_id', help='')
        c.argument('customer_display_name', type=str, help='')
        c.argument('customer_email', type=str, help='')
        c.argument('customer_last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('customer_payment_method_id', help='')
        c.argument('customer_payment_terms_id', help='')
        c.argument('customer_phone_number', type=str, help='')
        c.argument('customer_shipment_method_id', help='')
        c.argument('customer_tax_area_display_name', type=str, help='')
        c.argument('customer_tax_area_id', help='')
        c.argument('customer_tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('customer_tax_registration_number', type=str, help='')
        c.argument('customer_type', type=str, help='')
        c.argument('customer_website', type=str, help='')
        c.argument('customer_currency', action=AddCustomerCurrency, nargs='*', help='currency')
        c.argument('customer_payment_method', action=AddCustomerPaymentMethod, nargs='*', help='paymentMethod')
        c.argument('customer_payment_term', action=AddCustomerPaymentTerm, nargs='*', help='paymentTerm')
        c.argument('customer_picture', action=AddCustomerPicture, nargs='*', help='')
        c.argument('customer_shipment_method', action=AddCustomerShipmentMethod, nargs='*', help='shipmentMethod')

    with self.argument_context('financials update-customer-payment-journal') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('balancing_account_id', help='')
        c.argument('balancing_account_number', type=str, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('customer_payments', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('financials update-dimension') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('dimension_id', type=str, help='key: id of dimension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('dimension_values', action=AddDimensionValues, nargs='*', help='')

    with self.argument_context('financials update-dimension-value') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('dimension_value_id', type=str, help='key: id of dimensionValue')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-employee') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('employee_id', type=str, help='key: id of employee')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('birth_date', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('employment_date', help='')
        c.argument('given_name', type=str, help='')
        c.argument('job_title', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('middle_name', type=str, help='')
        c.argument('mobile_phone', type=str, help='')
        c.argument('number', type=str, help='')
        c.argument('personal_email', type=str, help='')
        c.argument('phone_number', type=str, help='')
        c.argument('statistics_group_code', type=str, help='')
        c.argument('status', type=str, help='')
        c.argument('surname', type=str, help='')
        c.argument('termination_date', help='')
        c.argument('picture', action=AddFinancialsCreateEmployeePicture, nargs='*', help='')

    with self.argument_context('financials update-general-ledger-entry') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('general_ledger_entry_id', type=str, help='key: id of generalLedgerEntry')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('account_number', type=str, help='')
        c.argument('credit_amount', type=float, help='')
        c.argument('debit_amount', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('document_number', type=str, help='')
        c.argument('document_type', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('posting_date', help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')

    with self.argument_context('financials update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_category_id', type=str, help='key: id of itemCategory')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-journal') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('balancing_account_id', help='')
        c.argument('balancing_account_number', type=str, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('journal_lines', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('financials update-journal-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('account_number', type=str, help='')
        c.argument('amount', type=float, help='')
        c.argument('comment', type=str, help='')
        c.argument('description', type=str, help='')
        c.argument('document_number', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('journal_display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('line_number', type=int, help='')
        c.argument('posting_date', help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')

    with self.argument_context('financials update-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('payment_method_id', type=str, help='key: id of paymentMethod')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('payment_term_id', type=str, help='key: id of paymentTerm')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials update-purchase-invoice') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('buy_from_address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('due_date', help='')
        c.argument('invoice_date', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('pay_to_address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('pay_to_contact', type=str, help='')
        c.argument('pay_to_name', type=str, help='')
        c.argument('pay_to_vendor_id', help='')
        c.argument('pay_to_vendor_number', type=str, help='')
        c.argument('prices_include_tax', arg_type=get_three_state_flag(), help='')
        c.argument('ship_to_address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('ship_to_contact', type=str, help='')
        c.argument('ship_to_name', type=str, help='')
        c.argument('status', type=str, help='')
        c.argument('total_amount_excluding_tax', type=float, help='')
        c.argument('total_amount_including_tax', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('vendor_id', help='')
        c.argument('vendor_invoice_number', type=str, help='')
        c.argument('vendor_name', type=str, help='')
        c.argument('vendor_number', type=str, help='')
        c.argument('currency', action=AddCustomerCurrency, nargs='*', help='currency')
        c.argument('purchase_invoice_lines', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('vendor_address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('vendor_balance', type=float, help='')
        c.argument('vendor_blocked', type=str, help='')
        c.argument('vendor_currency_code', type=str, help='')
        c.argument('vendor_currency_id', help='')
        c.argument('vendor_display_name', type=str, help='')
        c.argument('vendor_email', type=str, help='')
        c.argument('vendor_last_modified_date_time', help='')
        c.argument('microsoft_graph_vendor_number', type=str, help='')
        c.argument('vendor_payment_method_id', help='')
        c.argument('vendor_payment_terms_id', help='')
        c.argument('vendor_phone_number', type=str, help='')
        c.argument('vendor_tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('vendor_tax_registration_number', type=str, help='')
        c.argument('vendor_website', type=str, help='')
        c.argument('vendor_currency', action=AddCustomerCurrency, nargs='*', help='currency')
        c.argument('vendor_payment_method', action=AddCustomerPaymentMethod, nargs='*', help='paymentMethod')
        c.argument('vendor_payment_term', action=AddCustomerPaymentTerm, nargs='*', help='paymentTerm')
        c.argument('vendor_picture', action=AddVendorPicture, nargs='*', help='')

    with self.argument_context('financials update-purchase-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('expected_receipt_date', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('item_base_unit_of_measure_id', help='')
        c.argument('item_blocked', arg_type=get_three_state_flag(), help='')
        c.argument('item_display_name', type=str, help='')
        c.argument('item_gtin', type=str, help='')
        c.argument('item_inventory', type=float, help='')
        c.argument('item_item_category_code', type=str, help='')
        c.argument('item_item_category_id', help='')
        c.argument('item_last_modified_date_time', help='')
        c.argument('item_number', type=str, help='')
        c.argument('item_price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('item_tax_group_code', type=str, help='')
        c.argument('item_tax_group_id', help='')
        c.argument('item_type', type=str, help='')
        c.argument('item_unit_cost', type=float, help='')
        c.argument('item_unit_price', type=float, help='')
        c.argument('item_item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('item_picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials update-sale-credit-memo') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('financials update-sale-credit-memo-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('item_base_unit_of_measure_id', help='')
        c.argument('item_blocked', arg_type=get_three_state_flag(), help='')
        c.argument('item_display_name', type=str, help='')
        c.argument('item_gtin', type=str, help='')
        c.argument('item_inventory', type=float, help='')
        c.argument('item_item_category_code', type=str, help='')
        c.argument('item_item_category_id', help='')
        c.argument('item_last_modified_date_time', help='')
        c.argument('item_number', type=str, help='')
        c.argument('item_price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('item_tax_group_code', type=str, help='')
        c.argument('item_tax_group_id', help='')
        c.argument('item_type', type=str, help='')
        c.argument('item_unit_cost', type=float, help='')
        c.argument('item_unit_price', type=float, help='')
        c.argument('item_item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('item_picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials update-sale-invoice') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('financials update-sale-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('item_base_unit_of_measure_id', help='')
        c.argument('item_blocked', arg_type=get_three_state_flag(), help='')
        c.argument('item_display_name', type=str, help='')
        c.argument('item_gtin', type=str, help='')
        c.argument('item_inventory', type=float, help='')
        c.argument('item_item_category_code', type=str, help='')
        c.argument('item_item_category_id', help='')
        c.argument('item_last_modified_date_time', help='')
        c.argument('item_number', type=str, help='')
        c.argument('item_price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('item_tax_group_code', type=str, help='')
        c.argument('item_tax_group_id', help='')
        c.argument('item_type', type=str, help='')
        c.argument('item_unit_cost', type=float, help='')
        c.argument('item_unit_price', type=float, help='')
        c.argument('item_item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('item_picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials update-sale-order') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('financials update-sale-order-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('invoiced_quantity', type=float, help='')
        c.argument('invoice_quantity', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('shipped_quantity', type=float, help='')
        c.argument('ship_quantity', type=float, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('item_base_unit_of_measure_id', help='')
        c.argument('item_blocked', arg_type=get_three_state_flag(), help='')
        c.argument('item_display_name', type=str, help='')
        c.argument('item_gtin', type=str, help='')
        c.argument('item_inventory', type=float, help='')
        c.argument('item_item_category_code', type=str, help='')
        c.argument('item_item_category_id', help='')
        c.argument('item_last_modified_date_time', help='')
        c.argument('item_number', type=str, help='')
        c.argument('item_price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('item_tax_group_code', type=str, help='')
        c.argument('item_tax_group_id', help='')
        c.argument('item_type', type=str, help='')
        c.argument('item_unit_cost', type=float, help='')
        c.argument('item_unit_price', type=float, help='')
        c.argument('item_item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('item_picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials update-sale-quote') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('financials update-sale-quote-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('item_base_unit_of_measure_id', help='')
        c.argument('item_blocked', arg_type=get_three_state_flag(), help='')
        c.argument('item_display_name', type=str, help='')
        c.argument('item_gtin', type=str, help='')
        c.argument('item_inventory', type=float, help='')
        c.argument('item_item_category_code', type=str, help='')
        c.argument('item_item_category_id', help='')
        c.argument('item_last_modified_date_time', help='')
        c.argument('item_number', type=str, help='')
        c.argument('item_price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('item_tax_group_code', type=str, help='')
        c.argument('item_tax_group_id', help='')
        c.argument('item_type', type=str, help='')
        c.argument('item_unit_cost', type=float, help='')
        c.argument('item_unit_price', type=float, help='')
        c.argument('item_item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('item_picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials update-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('shipment_method_id', type=str, help='key: id of shipmentMethod')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-tax-area') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('tax_area_id', type=str, help='key: id of taxArea')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('tax_type', type=str, help='')

    with self.argument_context('financials update-tax-group') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('tax_group_id', type=str, help='key: id of taxGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('tax_type', type=str, help='')

    with self.argument_context('financials update-unit-of-measure') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('unit_of_measure_id', type=str, help='key: id of unitOfMeasure')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('international_standard_code', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-vendor') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('balance', type=float, help='')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCustomerCurrency, nargs='*', help='currency')
        c.argument('payment_method', action=AddCustomerPaymentMethod, nargs='*', help='paymentMethod')
        c.argument('payment_term', action=AddCustomerPaymentTerm, nargs='*', help='paymentTerm')
        c.argument('picture', action=AddVendorPicture, nargs='*', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-customer-payment') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount', type=float, help='')
        c.argument('applies_to_invoice_id', help='')
        c.argument('applies_to_invoice_number', type=str, help='')
        c.argument('comment', type=str, help='')
        c.argument('contact_id', type=str, help='')
        c.argument('customer_id', help='')
        c.argument('customer_number', type=str, help='')
        c.argument('description', type=str, help='')
        c.argument('document_number', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('journal_display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('line_number', type=int, help='')
        c.argument('posting_date', help='')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('customer_address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('customer_blocked', type=str, help='')
        c.argument('customer_currency_code', type=str, help='')
        c.argument('customer_currency_id', help='')
        c.argument('customer_display_name', type=str, help='')
        c.argument('customer_email', type=str, help='')
        c.argument('customer_last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('customer_payment_method_id', help='')
        c.argument('customer_payment_terms_id', help='')
        c.argument('customer_phone_number', type=str, help='')
        c.argument('customer_shipment_method_id', help='')
        c.argument('customer_tax_area_display_name', type=str, help='')
        c.argument('customer_tax_area_id', help='')
        c.argument('customer_tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('customer_tax_registration_number', type=str, help='')
        c.argument('customer_type', type=str, help='')
        c.argument('customer_website', type=str, help='')
        c.argument('customer_currency', action=AddCustomerCurrency, nargs='*', help='currency')
        c.argument('customer_payment_method', action=AddCustomerPaymentMethod, nargs='*', help='paymentMethod')
        c.argument('customer_payment_term', action=AddCustomerPaymentTerm, nargs='*', help='paymentTerm')
        c.argument('customer_picture', action=AddCustomerPicture, nargs='*', help='')
        c.argument('customer_shipment_method', action=AddCustomerShipmentMethod, nargs='*', help='shipmentMethod')

    with self.argument_context('financials get-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-customer-payment') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-customer-payment') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials update-customer-payment') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount', type=float, help='')
        c.argument('applies_to_invoice_id', help='')
        c.argument('applies_to_invoice_number', type=str, help='')
        c.argument('comment', type=str, help='')
        c.argument('contact_id', type=str, help='')
        c.argument('customer_id', help='')
        c.argument('customer_number', type=str, help='')
        c.argument('description', type=str, help='')
        c.argument('document_number', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('journal_display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('line_number', type=int, help='')
        c.argument('posting_date', help='')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('customer_address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('customer_blocked', type=str, help='')
        c.argument('customer_currency_code', type=str, help='')
        c.argument('customer_currency_id', help='')
        c.argument('customer_display_name', type=str, help='')
        c.argument('customer_email', type=str, help='')
        c.argument('customer_last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('customer_payment_method_id', help='')
        c.argument('customer_payment_terms_id', help='')
        c.argument('customer_phone_number', type=str, help='')
        c.argument('customer_shipment_method_id', help='')
        c.argument('customer_tax_area_display_name', type=str, help='')
        c.argument('customer_tax_area_id', help='')
        c.argument('customer_tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('customer_tax_registration_number', type=str, help='')
        c.argument('customer_type', type=str, help='')
        c.argument('customer_website', type=str, help='')
        c.argument('customer_currency', action=AddCustomerCurrency, nargs='*', help='currency')
        c.argument('customer_payment_method', action=AddCustomerPaymentMethod, nargs='*', help='paymentMethod')
        c.argument('customer_payment_term', action=AddCustomerPaymentTerm, nargs='*', help='paymentTerm')
        c.argument('customer_picture', action=AddCustomerPicture, nargs='*', help='')
        c.argument('customer_shipment_method', action=AddCustomerShipmentMethod, nargs='*', help='shipmentMethod')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials get-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials update-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('shipment_method_id', help='')
        c.argument('tax_area_display_name', type=str, help='')
        c.argument('tax_area_id', help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCustomerCurrency, nargs='*', help='currency')
        c.argument('payment_method', action=AddCustomerPaymentMethod, nargs='*', help='paymentMethod')
        c.argument('payment_term', action=AddCustomerPaymentTerm, nargs='*', help='paymentTerm')
        c.argument('picture', action=AddCustomerPicture, nargs='*', help='')
        c.argument('shipment_method', action=AddCustomerShipmentMethod, nargs='*', help='shipmentMethod')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials get-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials get-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials update-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials update-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials get-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials update-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('shipment_method_id', help='')
        c.argument('tax_area_display_name', type=str, help='')
        c.argument('tax_area_id', help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCustomerCurrency, nargs='*', help='currency')
        c.argument('payment_method', action=AddCustomerPaymentMethod, nargs='*', help='paymentMethod')
        c.argument('payment_term', action=AddCustomerPaymentTerm, nargs='*', help='paymentTerm')
        c.argument('picture', action=AddCustomerPicture, nargs='*', help='')
        c.argument('shipment_method', action=AddCustomerShipmentMethod, nargs='*', help='shipmentMethod')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials get-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials get-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials update-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials update-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials get-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials get-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials update-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials update-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('dimension_id', type=str, help='key: id of dimension')
        c.argument('dimension_value_id', type=str, help='key: id of dimensionValue')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-dimension-value') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('dimension_id', type=str, help='key: id of dimension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials get-dimension-value') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('dimension_id', type=str, help='key: id of dimension')
        c.argument('dimension_value_id', type=str, help='key: id of dimensionValue')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-dimension-value') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('dimension_id', type=str, help='key: id of dimension')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials update-dimension-value') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('dimension_id', type=str, help='key: id of dimension')
        c.argument('dimension_value_id', type=str, help='key: id of dimensionValue')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('employee_id', type=str, help='key: id of employee')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('employee_id', type=str, help='key: id of employee')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('employee_id', type=str, help='key: id of employee')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('employee_id', type=str, help='key: id of employee')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('employee_id', type=str, help='key: id of employee')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('employee_id', type=str, help='key: id of employee')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('employee_id', type=str, help='key: id of employee')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('general_ledger_entry_id', type=str, help='key: id of generalLedgerEntry')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials get-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('general_ledger_entry_id', type=str, help='key: id of generalLedgerEntry')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('general_ledger_entry_id', type=str, help='key: id of generalLedgerEntry')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials get-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials get-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-journal-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('account_number', type=str, help='')
        c.argument('amount', type=float, help='')
        c.argument('comment', type=str, help='')
        c.argument('description', type=str, help='')
        c.argument('document_number', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('journal_display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('line_number', type=int, help='')
        c.argument('posting_date', help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')

    with self.argument_context('financials get-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-journal-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-journal-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials post') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')

    with self.argument_context('financials update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials update-journal-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('account_number', type=str, help='')
        c.argument('amount', type=float, help='')
        c.argument('comment', type=str, help='')
        c.argument('description', type=str, help='')
        c.argument('document_number', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('journal_display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('line_number', type=int, help='')
        c.argument('posting_date', help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials get-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials get-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials get-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-purchase-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('expected_receipt_date', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('item_base_unit_of_measure_id', help='')
        c.argument('item_blocked', arg_type=get_three_state_flag(), help='')
        c.argument('item_display_name', type=str, help='')
        c.argument('item_gtin', type=str, help='')
        c.argument('item_inventory', type=float, help='')
        c.argument('item_item_category_code', type=str, help='')
        c.argument('item_item_category_id', help='')
        c.argument('item_last_modified_date_time', help='')
        c.argument('item_number', type=str, help='')
        c.argument('item_price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('item_tax_group_code', type=str, help='')
        c.argument('item_tax_group_id', help='')
        c.argument('item_type', type=str, help='')
        c.argument('item_unit_cost', type=float, help='')
        c.argument('item_unit_price', type=float, help='')
        c.argument('item_item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('item_picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials get-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-purchase-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-vendor') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-purchase-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials post') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')

    with self.argument_context('financials update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials update-purchase-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('expected_receipt_date', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('item_base_unit_of_measure_id', help='')
        c.argument('item_blocked', arg_type=get_three_state_flag(), help='')
        c.argument('item_display_name', type=str, help='')
        c.argument('item_gtin', type=str, help='')
        c.argument('item_inventory', type=float, help='')
        c.argument('item_item_category_code', type=str, help='')
        c.argument('item_item_category_id', help='')
        c.argument('item_last_modified_date_time', help='')
        c.argument('item_number', type=str, help='')
        c.argument('item_price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('item_tax_group_code', type=str, help='')
        c.argument('item_tax_group_id', help='')
        c.argument('item_type', type=str, help='')
        c.argument('item_unit_cost', type=float, help='')
        c.argument('item_unit_price', type=float, help='')
        c.argument('item_item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('item_picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials update-vendor') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('balance', type=float, help='')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCustomerCurrency, nargs='*', help='currency')
        c.argument('payment_method', action=AddCustomerPaymentMethod, nargs='*', help='paymentMethod')
        c.argument('payment_term', action=AddCustomerPaymentTerm, nargs='*', help='paymentTerm')
        c.argument('picture', action=AddVendorPicture, nargs='*', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials get-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials get-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials get-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials update-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials get-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials get-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-sale-credit-memo-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('item_base_unit_of_measure_id', help='')
        c.argument('item_blocked', arg_type=get_three_state_flag(), help='')
        c.argument('item_display_name', type=str, help='')
        c.argument('item_gtin', type=str, help='')
        c.argument('item_inventory', type=float, help='')
        c.argument('item_item_category_code', type=str, help='')
        c.argument('item_item_category_id', help='')
        c.argument('item_last_modified_date_time', help='')
        c.argument('item_number', type=str, help='')
        c.argument('item_price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('item_tax_group_code', type=str, help='')
        c.argument('item_tax_group_id', help='')
        c.argument('item_type', type=str, help='')
        c.argument('item_unit_cost', type=float, help='')
        c.argument('item_unit_price', type=float, help='')
        c.argument('item_item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('item_picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials get-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-sale-credit-memo-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-sale-credit-memo-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials update-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('shipment_method_id', help='')
        c.argument('tax_area_display_name', type=str, help='')
        c.argument('tax_area_id', help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCustomerCurrency, nargs='*', help='currency')
        c.argument('payment_method', action=AddCustomerPaymentMethod, nargs='*', help='paymentMethod')
        c.argument('payment_term', action=AddCustomerPaymentTerm, nargs='*', help='paymentTerm')
        c.argument('picture', action=AddCustomerPicture, nargs='*', help='')
        c.argument('shipment_method', action=AddCustomerShipmentMethod, nargs='*', help='shipmentMethod')

    with self.argument_context('financials update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-sale-credit-memo-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('item_base_unit_of_measure_id', help='')
        c.argument('item_blocked', arg_type=get_three_state_flag(), help='')
        c.argument('item_display_name', type=str, help='')
        c.argument('item_gtin', type=str, help='')
        c.argument('item_inventory', type=float, help='')
        c.argument('item_item_category_code', type=str, help='')
        c.argument('item_item_category_id', help='')
        c.argument('item_last_modified_date_time', help='')
        c.argument('item_number', type=str, help='')
        c.argument('item_price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('item_tax_group_code', type=str, help='')
        c.argument('item_tax_group_id', help='')
        c.argument('item_type', type=str, help='')
        c.argument('item_unit_cost', type=float, help='')
        c.argument('item_unit_price', type=float, help='')
        c.argument('item_item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('item_picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials get-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials get-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials update-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials update-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials get-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials get-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials get-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials get-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials cancel') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')

    with self.argument_context('financials cancel-and-send') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')

    with self.argument_context('financials create-sale-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('item_base_unit_of_measure_id', help='')
        c.argument('item_blocked', arg_type=get_three_state_flag(), help='')
        c.argument('item_display_name', type=str, help='')
        c.argument('item_gtin', type=str, help='')
        c.argument('item_inventory', type=float, help='')
        c.argument('item_item_category_code', type=str, help='')
        c.argument('item_item_category_id', help='')
        c.argument('item_last_modified_date_time', help='')
        c.argument('item_number', type=str, help='')
        c.argument('item_price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('item_tax_group_code', type=str, help='')
        c.argument('item_tax_group_id', help='')
        c.argument('item_type', type=str, help='')
        c.argument('item_unit_cost', type=float, help='')
        c.argument('item_unit_price', type=float, help='')
        c.argument('item_item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('item_picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials get-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-sale-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-sale-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials post') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')

    with self.argument_context('financials post-and-send') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')

    with self.argument_context('financials send') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')

    with self.argument_context('financials update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials update-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('shipment_method_id', help='')
        c.argument('tax_area_display_name', type=str, help='')
        c.argument('tax_area_id', help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCustomerCurrency, nargs='*', help='currency')
        c.argument('payment_method', action=AddCustomerPaymentMethod, nargs='*', help='paymentMethod')
        c.argument('payment_term', action=AddCustomerPaymentTerm, nargs='*', help='paymentTerm')
        c.argument('picture', action=AddCustomerPicture, nargs='*', help='')
        c.argument('shipment_method', action=AddCustomerShipmentMethod, nargs='*', help='shipmentMethod')

    with self.argument_context('financials update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-sale-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('item_base_unit_of_measure_id', help='')
        c.argument('item_blocked', arg_type=get_three_state_flag(), help='')
        c.argument('item_display_name', type=str, help='')
        c.argument('item_gtin', type=str, help='')
        c.argument('item_inventory', type=float, help='')
        c.argument('item_item_category_code', type=str, help='')
        c.argument('item_item_category_id', help='')
        c.argument('item_last_modified_date_time', help='')
        c.argument('item_number', type=str, help='')
        c.argument('item_price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('item_tax_group_code', type=str, help='')
        c.argument('item_tax_group_id', help='')
        c.argument('item_type', type=str, help='')
        c.argument('item_unit_cost', type=float, help='')
        c.argument('item_unit_price', type=float, help='')
        c.argument('item_item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('item_picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials update-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials get-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials get-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials update-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials update-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials get-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials get-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials get-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials get-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-sale-order-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('invoiced_quantity', type=float, help='')
        c.argument('invoice_quantity', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('shipped_quantity', type=float, help='')
        c.argument('ship_quantity', type=float, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('item_base_unit_of_measure_id', help='')
        c.argument('item_blocked', arg_type=get_three_state_flag(), help='')
        c.argument('item_display_name', type=str, help='')
        c.argument('item_gtin', type=str, help='')
        c.argument('item_inventory', type=float, help='')
        c.argument('item_item_category_code', type=str, help='')
        c.argument('item_item_category_id', help='')
        c.argument('item_last_modified_date_time', help='')
        c.argument('item_number', type=str, help='')
        c.argument('item_price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('item_tax_group_code', type=str, help='')
        c.argument('item_tax_group_id', help='')
        c.argument('item_type', type=str, help='')
        c.argument('item_unit_cost', type=float, help='')
        c.argument('item_unit_price', type=float, help='')
        c.argument('item_item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('item_picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials get-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-sale-order-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-sale-order-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials update-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('shipment_method_id', help='')
        c.argument('tax_area_display_name', type=str, help='')
        c.argument('tax_area_id', help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCustomerCurrency, nargs='*', help='currency')
        c.argument('payment_method', action=AddCustomerPaymentMethod, nargs='*', help='paymentMethod')
        c.argument('payment_term', action=AddCustomerPaymentTerm, nargs='*', help='paymentTerm')
        c.argument('picture', action=AddCustomerPicture, nargs='*', help='')
        c.argument('shipment_method', action=AddCustomerShipmentMethod, nargs='*', help='shipmentMethod')

    with self.argument_context('financials update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-sale-order-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('invoiced_quantity', type=float, help='')
        c.argument('invoice_quantity', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('shipped_quantity', type=float, help='')
        c.argument('ship_quantity', type=float, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('item_base_unit_of_measure_id', help='')
        c.argument('item_blocked', arg_type=get_three_state_flag(), help='')
        c.argument('item_display_name', type=str, help='')
        c.argument('item_gtin', type=str, help='')
        c.argument('item_inventory', type=float, help='')
        c.argument('item_item_category_code', type=str, help='')
        c.argument('item_item_category_id', help='')
        c.argument('item_last_modified_date_time', help='')
        c.argument('item_number', type=str, help='')
        c.argument('item_price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('item_tax_group_code', type=str, help='')
        c.argument('item_tax_group_id', help='')
        c.argument('item_type', type=str, help='')
        c.argument('item_unit_cost', type=float, help='')
        c.argument('item_unit_price', type=float, help='')
        c.argument('item_item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('item_picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials get-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials get-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials update-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials update-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials get-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials get-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials get-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials get-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-sale-quote-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('item_base_unit_of_measure_id', help='')
        c.argument('item_blocked', arg_type=get_three_state_flag(), help='')
        c.argument('item_display_name', type=str, help='')
        c.argument('item_gtin', type=str, help='')
        c.argument('item_inventory', type=float, help='')
        c.argument('item_item_category_code', type=str, help='')
        c.argument('item_item_category_id', help='')
        c.argument('item_last_modified_date_time', help='')
        c.argument('item_number', type=str, help='')
        c.argument('item_price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('item_tax_group_code', type=str, help='')
        c.argument('item_tax_group_id', help='')
        c.argument('item_type', type=str, help='')
        c.argument('item_unit_cost', type=float, help='')
        c.argument('item_unit_price', type=float, help='')
        c.argument('item_item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('item_picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials get-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-sale-quote-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-sale-quote-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials make-invoice') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')

    with self.argument_context('financials send') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')

    with self.argument_context('financials update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials update-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='*', help='postalAddressType')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('shipment_method_id', help='')
        c.argument('tax_area_display_name', type=str, help='')
        c.argument('tax_area_id', help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCustomerCurrency, nargs='*', help='currency')
        c.argument('payment_method', action=AddCustomerPaymentMethod, nargs='*', help='paymentMethod')
        c.argument('payment_term', action=AddCustomerPaymentTerm, nargs='*', help='paymentTerm')
        c.argument('picture', action=AddCustomerPicture, nargs='*', help='')
        c.argument('shipment_method', action=AddCustomerShipmentMethod, nargs='*', help='shipmentMethod')

    with self.argument_context('financials update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-sale-quote-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='*', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('item_base_unit_of_measure_id', help='')
        c.argument('item_blocked', arg_type=get_three_state_flag(), help='')
        c.argument('item_display_name', type=str, help='')
        c.argument('item_gtin', type=str, help='')
        c.argument('item_inventory', type=float, help='')
        c.argument('item_item_category_code', type=str, help='')
        c.argument('item_item_category_id', help='')
        c.argument('item_last_modified_date_time', help='')
        c.argument('item_number', type=str, help='')
        c.argument('item_price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('item_tax_group_code', type=str, help='')
        c.argument('item_tax_group_id', help='')
        c.argument('item_type', type=str, help='')
        c.argument('item_unit_cost', type=float, help='')
        c.argument('item_unit_price', type=float, help='')
        c.argument('item_item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('item_picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials update-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials get-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials get-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials update-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials update-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials get-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='*', help='itemCategory')
        c.argument('picture', action=AddFinancialsCreateItemPicture, nargs='*', help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials get-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials delete') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials get-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials get-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('financials set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials update-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')
