# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class TeamScheduleOperations(object):
    """TeamScheduleOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~teams.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def share(
        self,
        team_id,  # type: str
        notify_team=False,  # type: Optional[bool]
        start_date_time=None,  # type: Optional[datetime.datetime]
        end_date_time=None,  # type: Optional[datetime.datetime]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action share.

        Invoke action share.

        :param team_id: key: id of team.
        :type team_id: str
        :param notify_team:
        :type notify_team: bool
        :param start_date_time:
        :type start_date_time: ~datetime.datetime
        :param end_date_time:
        :type end_date_time: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.PathsCo6ShtTeamsTeamIdScheduleMicrosoftGraphSharePostRequestbodyContentApplicationJsonSchema(notify_team=notify_team, start_date_time=start_date_time, end_date_time=end_date_time)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.share.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'PathsCo6ShtTeamsTeamIdScheduleMicrosoftGraphSharePostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    share.metadata = {'url': '/teams/{team-id}/schedule/microsoft.graph.share'}  # type: ignore

    def list_offer_shift_request(
        self,
        team_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum252"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum253"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfOfferShiftRequest"]
        """Get offerShiftRequests from teams.

        Get offerShiftRequests from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams.models.Enum252]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum253]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfOfferShiftRequest or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~teams.models.CollectionOfOfferShiftRequest]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfOfferShiftRequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_offer_shift_request.metadata['url']  # type: ignore
                path_format_arguments = {
                    'team-id': self._serialize.url("team_id", team_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfOfferShiftRequest', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_offer_shift_request.metadata = {'url': '/teams/{team-id}/schedule/offerShiftRequests'}  # type: ignore

    def create_offer_shift_request(
        self,
        team_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        assigned_to=None,  # type: Optional[Union[str, "models.MicrosoftGraphScheduleChangeRequestActor"]]
        manager_action_date_time=None,  # type: Optional[datetime.datetime]
        manager_action_message=None,  # type: Optional[str]
        manager_user_id=None,  # type: Optional[str]
        sender_date_time=None,  # type: Optional[datetime.datetime]
        sender_message=None,  # type: Optional[str]
        sender_user_id=None,  # type: Optional[str]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphScheduleChangeState"]]
        recipient_action_date_time=None,  # type: Optional[datetime.datetime]
        recipient_action_message=None,  # type: Optional[str]
        recipient_user_id=None,  # type: Optional[str]
        sender_shift_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphOfferShiftRequest"
        """Create new navigation property to offerShiftRequests for teams.

        Create new navigation property to offerShiftRequests for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param assigned_to:
        :type assigned_to: str or ~teams.models.MicrosoftGraphScheduleChangeRequestActor
        :param manager_action_date_time:
        :type manager_action_date_time: ~datetime.datetime
        :param manager_action_message:
        :type manager_action_message: str
        :param manager_user_id:
        :type manager_user_id: str
        :param sender_date_time:
        :type sender_date_time: ~datetime.datetime
        :param sender_message:
        :type sender_message: str
        :param sender_user_id:
        :type sender_user_id: str
        :param state:
        :type state: str or ~teams.models.MicrosoftGraphScheduleChangeState
        :param recipient_action_date_time: The Timestamp type represents date and time information
         using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would
         look like this: '2014-01-01T00:00:00Z'.
        :type recipient_action_date_time: ~datetime.datetime
        :param recipient_action_message: Custom message sent by recipient of the offer shift request.
        :type recipient_action_message: str
        :param recipient_user_id: User ID of the recipient of the offer shift request.
        :type recipient_user_id: str
        :param sender_shift_id: User ID of the sender of the offer shift request.
        :type sender_shift_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphOfferShiftRequest, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphOfferShiftRequest
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphOfferShiftRequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphOfferShiftRequest(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, assigned_to=assigned_to, manager_action_date_time=manager_action_date_time, manager_action_message=manager_action_message, manager_user_id=manager_user_id, sender_date_time=sender_date_time, sender_message=sender_message, sender_user_id=sender_user_id, state=state, recipient_action_date_time=recipient_action_date_time, recipient_action_message=recipient_action_message, recipient_user_id=recipient_user_id, sender_shift_id=sender_shift_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_offer_shift_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphOfferShiftRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphOfferShiftRequest', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_offer_shift_request.metadata = {'url': '/teams/{team-id}/schedule/offerShiftRequests'}  # type: ignore

    def get_offer_shift_request(
        self,
        team_id,  # type: str
        offer_shift_request_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum254"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphOfferShiftRequest"
        """Get offerShiftRequests from teams.

        Get offerShiftRequests from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param offer_shift_request_id: key: id of offerShiftRequest.
        :type offer_shift_request_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum254]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphOfferShiftRequest, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphOfferShiftRequest
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphOfferShiftRequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_offer_shift_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'offerShiftRequest-id': self._serialize.url("offer_shift_request_id", offer_shift_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphOfferShiftRequest', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_offer_shift_request.metadata = {'url': '/teams/{team-id}/schedule/offerShiftRequests/{offerShiftRequest-id}'}  # type: ignore

    def update_offer_shift_request(
        self,
        team_id,  # type: str
        offer_shift_request_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        assigned_to=None,  # type: Optional[Union[str, "models.MicrosoftGraphScheduleChangeRequestActor"]]
        manager_action_date_time=None,  # type: Optional[datetime.datetime]
        manager_action_message=None,  # type: Optional[str]
        manager_user_id=None,  # type: Optional[str]
        sender_date_time=None,  # type: Optional[datetime.datetime]
        sender_message=None,  # type: Optional[str]
        sender_user_id=None,  # type: Optional[str]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphScheduleChangeState"]]
        recipient_action_date_time=None,  # type: Optional[datetime.datetime]
        recipient_action_message=None,  # type: Optional[str]
        recipient_user_id=None,  # type: Optional[str]
        sender_shift_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property offerShiftRequests in teams.

        Update the navigation property offerShiftRequests in teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param offer_shift_request_id: key: id of offerShiftRequest.
        :type offer_shift_request_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param assigned_to:
        :type assigned_to: str or ~teams.models.MicrosoftGraphScheduleChangeRequestActor
        :param manager_action_date_time:
        :type manager_action_date_time: ~datetime.datetime
        :param manager_action_message:
        :type manager_action_message: str
        :param manager_user_id:
        :type manager_user_id: str
        :param sender_date_time:
        :type sender_date_time: ~datetime.datetime
        :param sender_message:
        :type sender_message: str
        :param sender_user_id:
        :type sender_user_id: str
        :param state:
        :type state: str or ~teams.models.MicrosoftGraphScheduleChangeState
        :param recipient_action_date_time: The Timestamp type represents date and time information
         using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would
         look like this: '2014-01-01T00:00:00Z'.
        :type recipient_action_date_time: ~datetime.datetime
        :param recipient_action_message: Custom message sent by recipient of the offer shift request.
        :type recipient_action_message: str
        :param recipient_user_id: User ID of the recipient of the offer shift request.
        :type recipient_user_id: str
        :param sender_shift_id: User ID of the sender of the offer shift request.
        :type sender_shift_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphOfferShiftRequest(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, assigned_to=assigned_to, manager_action_date_time=manager_action_date_time, manager_action_message=manager_action_message, manager_user_id=manager_user_id, sender_date_time=sender_date_time, sender_message=sender_message, sender_user_id=sender_user_id, state=state, recipient_action_date_time=recipient_action_date_time, recipient_action_message=recipient_action_message, recipient_user_id=recipient_user_id, sender_shift_id=sender_shift_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_offer_shift_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'offerShiftRequest-id': self._serialize.url("offer_shift_request_id", offer_shift_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphOfferShiftRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_offer_shift_request.metadata = {'url': '/teams/{team-id}/schedule/offerShiftRequests/{offerShiftRequest-id}'}  # type: ignore

    def delete_offer_shift_request(
        self,
        team_id,  # type: str
        offer_shift_request_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property offerShiftRequests for teams.

        Delete navigation property offerShiftRequests for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param offer_shift_request_id: key: id of offerShiftRequest.
        :type offer_shift_request_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_offer_shift_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'offerShiftRequest-id': self._serialize.url("offer_shift_request_id", offer_shift_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_offer_shift_request.metadata = {'url': '/teams/{team-id}/schedule/offerShiftRequests/{offerShiftRequest-id}'}  # type: ignore

    def list_open_shift_change_request(
        self,
        team_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum255"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum256"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfOpenShiftChangeRequest"]
        """Get openShiftChangeRequests from teams.

        Get openShiftChangeRequests from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams.models.Enum255]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum256]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfOpenShiftChangeRequest or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~teams.models.CollectionOfOpenShiftChangeRequest]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfOpenShiftChangeRequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_open_shift_change_request.metadata['url']  # type: ignore
                path_format_arguments = {
                    'team-id': self._serialize.url("team_id", team_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfOpenShiftChangeRequest', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_open_shift_change_request.metadata = {'url': '/teams/{team-id}/schedule/openShiftChangeRequests'}  # type: ignore

    def create_open_shift_change_request(
        self,
        team_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        assigned_to=None,  # type: Optional[Union[str, "models.MicrosoftGraphScheduleChangeRequestActor"]]
        manager_action_date_time=None,  # type: Optional[datetime.datetime]
        manager_action_message=None,  # type: Optional[str]
        manager_user_id=None,  # type: Optional[str]
        sender_date_time=None,  # type: Optional[datetime.datetime]
        sender_message=None,  # type: Optional[str]
        sender_user_id=None,  # type: Optional[str]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphScheduleChangeState"]]
        open_shift_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphOpenShiftChangeRequest"
        """Create new navigation property to openShiftChangeRequests for teams.

        Create new navigation property to openShiftChangeRequests for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param assigned_to:
        :type assigned_to: str or ~teams.models.MicrosoftGraphScheduleChangeRequestActor
        :param manager_action_date_time:
        :type manager_action_date_time: ~datetime.datetime
        :param manager_action_message:
        :type manager_action_message: str
        :param manager_user_id:
        :type manager_user_id: str
        :param sender_date_time:
        :type sender_date_time: ~datetime.datetime
        :param sender_message:
        :type sender_message: str
        :param sender_user_id:
        :type sender_user_id: str
        :param state:
        :type state: str or ~teams.models.MicrosoftGraphScheduleChangeState
        :param open_shift_id: ID for the open shift.
        :type open_shift_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphOpenShiftChangeRequest, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphOpenShiftChangeRequest
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphOpenShiftChangeRequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphOpenShiftChangeRequest(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, assigned_to=assigned_to, manager_action_date_time=manager_action_date_time, manager_action_message=manager_action_message, manager_user_id=manager_user_id, sender_date_time=sender_date_time, sender_message=sender_message, sender_user_id=sender_user_id, state=state, open_shift_id=open_shift_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_open_shift_change_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphOpenShiftChangeRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphOpenShiftChangeRequest', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_open_shift_change_request.metadata = {'url': '/teams/{team-id}/schedule/openShiftChangeRequests'}  # type: ignore

    def get_open_shift_change_request(
        self,
        team_id,  # type: str
        open_shift_change_request_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum257"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphOpenShiftChangeRequest"
        """Get openShiftChangeRequests from teams.

        Get openShiftChangeRequests from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param open_shift_change_request_id: key: id of openShiftChangeRequest.
        :type open_shift_change_request_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum257]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphOpenShiftChangeRequest, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphOpenShiftChangeRequest
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphOpenShiftChangeRequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_open_shift_change_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'openShiftChangeRequest-id': self._serialize.url("open_shift_change_request_id", open_shift_change_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphOpenShiftChangeRequest', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_open_shift_change_request.metadata = {'url': '/teams/{team-id}/schedule/openShiftChangeRequests/{openShiftChangeRequest-id}'}  # type: ignore

    def update_open_shift_change_request(
        self,
        team_id,  # type: str
        open_shift_change_request_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        assigned_to=None,  # type: Optional[Union[str, "models.MicrosoftGraphScheduleChangeRequestActor"]]
        manager_action_date_time=None,  # type: Optional[datetime.datetime]
        manager_action_message=None,  # type: Optional[str]
        manager_user_id=None,  # type: Optional[str]
        sender_date_time=None,  # type: Optional[datetime.datetime]
        sender_message=None,  # type: Optional[str]
        sender_user_id=None,  # type: Optional[str]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphScheduleChangeState"]]
        open_shift_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property openShiftChangeRequests in teams.

        Update the navigation property openShiftChangeRequests in teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param open_shift_change_request_id: key: id of openShiftChangeRequest.
        :type open_shift_change_request_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param assigned_to:
        :type assigned_to: str or ~teams.models.MicrosoftGraphScheduleChangeRequestActor
        :param manager_action_date_time:
        :type manager_action_date_time: ~datetime.datetime
        :param manager_action_message:
        :type manager_action_message: str
        :param manager_user_id:
        :type manager_user_id: str
        :param sender_date_time:
        :type sender_date_time: ~datetime.datetime
        :param sender_message:
        :type sender_message: str
        :param sender_user_id:
        :type sender_user_id: str
        :param state:
        :type state: str or ~teams.models.MicrosoftGraphScheduleChangeState
        :param open_shift_id: ID for the open shift.
        :type open_shift_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphOpenShiftChangeRequest(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, assigned_to=assigned_to, manager_action_date_time=manager_action_date_time, manager_action_message=manager_action_message, manager_user_id=manager_user_id, sender_date_time=sender_date_time, sender_message=sender_message, sender_user_id=sender_user_id, state=state, open_shift_id=open_shift_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_open_shift_change_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'openShiftChangeRequest-id': self._serialize.url("open_shift_change_request_id", open_shift_change_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphOpenShiftChangeRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_open_shift_change_request.metadata = {'url': '/teams/{team-id}/schedule/openShiftChangeRequests/{openShiftChangeRequest-id}'}  # type: ignore

    def delete_open_shift_change_request(
        self,
        team_id,  # type: str
        open_shift_change_request_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property openShiftChangeRequests for teams.

        Delete navigation property openShiftChangeRequests for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param open_shift_change_request_id: key: id of openShiftChangeRequest.
        :type open_shift_change_request_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_open_shift_change_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'openShiftChangeRequest-id': self._serialize.url("open_shift_change_request_id", open_shift_change_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_open_shift_change_request.metadata = {'url': '/teams/{team-id}/schedule/openShiftChangeRequests/{openShiftChangeRequest-id}'}  # type: ignore

    def list_open_shift(
        self,
        team_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum258"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum259"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfOpenShift"]
        """Get openShifts from teams.

        Get openShifts from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams.models.Enum258]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum259]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfOpenShift or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~teams.models.CollectionOfOpenShift]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfOpenShift"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_open_shift.metadata['url']  # type: ignore
                path_format_arguments = {
                    'team-id': self._serialize.url("team_id", team_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfOpenShift', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_open_shift.metadata = {'url': '/teams/{team-id}/schedule/openShifts'}  # type: ignore

    def create_open_shift(
        self,
        team_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        draft_open_shift=None,  # type: Optional["models.MicrosoftGraphOpenShiftItem"]
        is_staged_for_deletion=None,  # type: Optional[bool]
        scheduling_group_id=None,  # type: Optional[str]
        shared_open_shift=None,  # type: Optional["models.MicrosoftGraphOpenShiftItem"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphOpenShift"
        """Create new navigation property to openShifts for teams.

        Create new navigation property to openShifts for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param draft_open_shift: openShiftItem.
        :type draft_open_shift: ~teams.models.MicrosoftGraphOpenShiftItem
        :param is_staged_for_deletion:
        :type is_staged_for_deletion: bool
        :param scheduling_group_id: ID for the scheduling group that the open shift belongs to.
        :type scheduling_group_id: str
        :param shared_open_shift: openShiftItem.
        :type shared_open_shift: ~teams.models.MicrosoftGraphOpenShiftItem
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphOpenShift, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphOpenShift
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphOpenShift"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphOpenShift(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, draft_open_shift=draft_open_shift, is_staged_for_deletion=is_staged_for_deletion, scheduling_group_id=scheduling_group_id, shared_open_shift=shared_open_shift)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_open_shift.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphOpenShift')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphOpenShift', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_open_shift.metadata = {'url': '/teams/{team-id}/schedule/openShifts'}  # type: ignore

    def get_open_shift(
        self,
        team_id,  # type: str
        open_shift_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum260"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphOpenShift"
        """Get openShifts from teams.

        Get openShifts from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param open_shift_id: key: id of openShift.
        :type open_shift_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum260]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphOpenShift, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphOpenShift
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphOpenShift"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_open_shift.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'openShift-id': self._serialize.url("open_shift_id", open_shift_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphOpenShift', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_open_shift.metadata = {'url': '/teams/{team-id}/schedule/openShifts/{openShift-id}'}  # type: ignore

    def update_open_shift(
        self,
        team_id,  # type: str
        open_shift_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        draft_open_shift=None,  # type: Optional["models.MicrosoftGraphOpenShiftItem"]
        is_staged_for_deletion=None,  # type: Optional[bool]
        scheduling_group_id=None,  # type: Optional[str]
        shared_open_shift=None,  # type: Optional["models.MicrosoftGraphOpenShiftItem"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property openShifts in teams.

        Update the navigation property openShifts in teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param open_shift_id: key: id of openShift.
        :type open_shift_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param draft_open_shift: openShiftItem.
        :type draft_open_shift: ~teams.models.MicrosoftGraphOpenShiftItem
        :param is_staged_for_deletion:
        :type is_staged_for_deletion: bool
        :param scheduling_group_id: ID for the scheduling group that the open shift belongs to.
        :type scheduling_group_id: str
        :param shared_open_shift: openShiftItem.
        :type shared_open_shift: ~teams.models.MicrosoftGraphOpenShiftItem
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphOpenShift(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, draft_open_shift=draft_open_shift, is_staged_for_deletion=is_staged_for_deletion, scheduling_group_id=scheduling_group_id, shared_open_shift=shared_open_shift)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_open_shift.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'openShift-id': self._serialize.url("open_shift_id", open_shift_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphOpenShift')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_open_shift.metadata = {'url': '/teams/{team-id}/schedule/openShifts/{openShift-id}'}  # type: ignore

    def delete_open_shift(
        self,
        team_id,  # type: str
        open_shift_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property openShifts for teams.

        Delete navigation property openShifts for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param open_shift_id: key: id of openShift.
        :type open_shift_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_open_shift.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'openShift-id': self._serialize.url("open_shift_id", open_shift_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_open_shift.metadata = {'url': '/teams/{team-id}/schedule/openShifts/{openShift-id}'}  # type: ignore

    def list_scheduling_group(
        self,
        team_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum261"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum262"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfSchedulingGroup"]
        """Get schedulingGroups from teams.

        Get schedulingGroups from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams.models.Enum261]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum262]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfSchedulingGroup or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~teams.models.CollectionOfSchedulingGroup]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfSchedulingGroup"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_scheduling_group.metadata['url']  # type: ignore
                path_format_arguments = {
                    'team-id': self._serialize.url("team_id", team_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfSchedulingGroup', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_scheduling_group.metadata = {'url': '/teams/{team-id}/schedule/schedulingGroups'}  # type: ignore

    def create_scheduling_group(
        self,
        team_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        display_name=None,  # type: Optional[str]
        is_active=None,  # type: Optional[bool]
        user_ids=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphSchedulingGroup"
        """Create new navigation property to schedulingGroups for teams.

        Create new navigation property to schedulingGroups for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param display_name: The display name for the schedulingGroup. Required.
        :type display_name: str
        :param is_active: Indicates whether the schedulingGroup can be used when creating new entities
         or updating existing ones. Required.
        :type is_active: bool
        :param user_ids: The list of user IDs that are a member of the schedulingGroup. Required.
        :type user_ids: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSchedulingGroup, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphSchedulingGroup
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSchedulingGroup"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphSchedulingGroup(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, display_name=display_name, is_active=is_active, user_ids=user_ids)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_scheduling_group.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphSchedulingGroup')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSchedulingGroup', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_scheduling_group.metadata = {'url': '/teams/{team-id}/schedule/schedulingGroups'}  # type: ignore

    def get_scheduling_group(
        self,
        team_id,  # type: str
        scheduling_group_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum263"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphSchedulingGroup"
        """Get schedulingGroups from teams.

        Get schedulingGroups from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param scheduling_group_id: key: id of schedulingGroup.
        :type scheduling_group_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum263]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSchedulingGroup, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphSchedulingGroup
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSchedulingGroup"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_scheduling_group.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'schedulingGroup-id': self._serialize.url("scheduling_group_id", scheduling_group_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSchedulingGroup', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_scheduling_group.metadata = {'url': '/teams/{team-id}/schedule/schedulingGroups/{schedulingGroup-id}'}  # type: ignore

    def update_scheduling_group(
        self,
        team_id,  # type: str
        scheduling_group_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        display_name=None,  # type: Optional[str]
        is_active=None,  # type: Optional[bool]
        user_ids=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property schedulingGroups in teams.

        Update the navigation property schedulingGroups in teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param scheduling_group_id: key: id of schedulingGroup.
        :type scheduling_group_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param display_name: The display name for the schedulingGroup. Required.
        :type display_name: str
        :param is_active: Indicates whether the schedulingGroup can be used when creating new entities
         or updating existing ones. Required.
        :type is_active: bool
        :param user_ids: The list of user IDs that are a member of the schedulingGroup. Required.
        :type user_ids: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphSchedulingGroup(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, display_name=display_name, is_active=is_active, user_ids=user_ids)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_scheduling_group.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'schedulingGroup-id': self._serialize.url("scheduling_group_id", scheduling_group_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphSchedulingGroup')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_scheduling_group.metadata = {'url': '/teams/{team-id}/schedule/schedulingGroups/{schedulingGroup-id}'}  # type: ignore

    def delete_scheduling_group(
        self,
        team_id,  # type: str
        scheduling_group_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property schedulingGroups for teams.

        Delete navigation property schedulingGroups for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param scheduling_group_id: key: id of schedulingGroup.
        :type scheduling_group_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_scheduling_group.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'schedulingGroup-id': self._serialize.url("scheduling_group_id", scheduling_group_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_scheduling_group.metadata = {'url': '/teams/{team-id}/schedule/schedulingGroups/{schedulingGroup-id}'}  # type: ignore

    def list_shift(
        self,
        team_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum264"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum265"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfShift"]
        """Get shifts from teams.

        Get shifts from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams.models.Enum264]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum265]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfShift or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~teams.models.CollectionOfShift]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfShift"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_shift.metadata['url']  # type: ignore
                path_format_arguments = {
                    'team-id': self._serialize.url("team_id", team_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfShift', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_shift.metadata = {'url': '/teams/{team-id}/schedule/shifts'}  # type: ignore

    def create_shift(
        self,
        team_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        is_staged_for_deletion=None,  # type: Optional[bool]
        scheduling_group_id=None,  # type: Optional[str]
        user_id=None,  # type: Optional[str]
        end_date_time=None,  # type: Optional[datetime.datetime]
        start_date_time=None,  # type: Optional[datetime.datetime]
        theme=None,  # type: Optional[Union[str, "models.MicrosoftGraphScheduleEntityTheme"]]
        activities=None,  # type: Optional[List["models.MicrosoftGraphShiftActivity"]]
        display_name=None,  # type: Optional[str]
        notes=None,  # type: Optional[str]
        microsoft_graph_schedule_entity_end_date_time_end_date_time=None,  # type: Optional[datetime.datetime]
        microsoft_graph_schedule_entity_start_date_time_start_date_time=None,  # type: Optional[datetime.datetime]
        microsoft_graph_schedule_entity_theme=None,  # type: Optional[Union[str, "models.MicrosoftGraphScheduleEntityTheme"]]
        microsoft_graph_shift_item_activities=None,  # type: Optional[List["models.MicrosoftGraphShiftActivity"]]
        microsoft_graph_shift_item_display_name=None,  # type: Optional[str]
        microsoft_graph_shift_item_notes=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphShift"
        """Create new navigation property to shifts for teams.

        Create new navigation property to shifts for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param is_staged_for_deletion:
        :type is_staged_for_deletion: bool
        :param scheduling_group_id: ID of the scheduling group the shift is part of. Required.
        :type scheduling_group_id: str
        :param user_id: ID of the user assigned to the shift. Required.
        :type user_id: str
        :param end_date_time:
        :type end_date_time: ~datetime.datetime
        :param start_date_time:
        :type start_date_time: ~datetime.datetime
        :param theme:
        :type theme: str or ~teams.models.MicrosoftGraphScheduleEntityTheme
        :param activities: An incremental part of a shift which can cover details of when and where an
         employee is during their shift. For example, an assignment or a scheduled break or lunch.
         Required.
        :type activities: list[~teams.models.MicrosoftGraphShiftActivity]
        :param display_name: The shift label of the shiftItem.
        :type display_name: str
        :param notes: The shift notes for the shiftItem.
        :type notes: str
        :param microsoft_graph_schedule_entity_end_date_time_end_date_time:
        :type microsoft_graph_schedule_entity_end_date_time_end_date_time: ~datetime.datetime
        :param microsoft_graph_schedule_entity_start_date_time_start_date_time:
        :type microsoft_graph_schedule_entity_start_date_time_start_date_time: ~datetime.datetime
        :param microsoft_graph_schedule_entity_theme:
        :type microsoft_graph_schedule_entity_theme: str or ~teams.models.MicrosoftGraphScheduleEntityTheme
        :param microsoft_graph_shift_item_activities: An incremental part of a shift which can cover
         details of when and where an employee is during their shift. For example, an assignment or a
         scheduled break or lunch. Required.
        :type microsoft_graph_shift_item_activities: list[~teams.models.MicrosoftGraphShiftActivity]
        :param microsoft_graph_shift_item_display_name: The shift label of the shiftItem.
        :type microsoft_graph_shift_item_display_name: str
        :param microsoft_graph_shift_item_notes: The shift notes for the shiftItem.
        :type microsoft_graph_shift_item_notes: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphShift, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphShift
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphShift"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphShift(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, is_staged_for_deletion=is_staged_for_deletion, scheduling_group_id=scheduling_group_id, user_id=user_id, end_date_time_shared_shift_end_date_time=end_date_time, start_date_time_shared_shift_start_date_time=start_date_time, theme_shared_shift_theme=theme, activities_shared_shift_activities=activities, display_name_shared_shift_display_name=display_name, notes_shared_shift_notes=notes, end_date_time_draft_shift_end_date_time=microsoft_graph_schedule_entity_end_date_time_end_date_time, start_date_time_draft_shift_start_date_time=microsoft_graph_schedule_entity_start_date_time_start_date_time, theme_draft_shift_theme=microsoft_graph_schedule_entity_theme, activities_draft_shift_activities=microsoft_graph_shift_item_activities, display_name_draft_shift_display_name=microsoft_graph_shift_item_display_name, notes_draft_shift_notes=microsoft_graph_shift_item_notes)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_shift.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphShift')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphShift', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_shift.metadata = {'url': '/teams/{team-id}/schedule/shifts'}  # type: ignore

    def get_shift(
        self,
        team_id,  # type: str
        shift_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum266"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphShift"
        """Get shifts from teams.

        Get shifts from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param shift_id: key: id of shift.
        :type shift_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum266]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphShift, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphShift
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphShift"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_shift.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'shift-id': self._serialize.url("shift_id", shift_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphShift', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_shift.metadata = {'url': '/teams/{team-id}/schedule/shifts/{shift-id}'}  # type: ignore

    def update_shift(
        self,
        team_id,  # type: str
        shift_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        is_staged_for_deletion=None,  # type: Optional[bool]
        scheduling_group_id=None,  # type: Optional[str]
        user_id=None,  # type: Optional[str]
        end_date_time=None,  # type: Optional[datetime.datetime]
        start_date_time=None,  # type: Optional[datetime.datetime]
        theme=None,  # type: Optional[Union[str, "models.MicrosoftGraphScheduleEntityTheme"]]
        activities=None,  # type: Optional[List["models.MicrosoftGraphShiftActivity"]]
        display_name=None,  # type: Optional[str]
        notes=None,  # type: Optional[str]
        microsoft_graph_schedule_entity_end_date_time_end_date_time=None,  # type: Optional[datetime.datetime]
        microsoft_graph_schedule_entity_start_date_time_start_date_time=None,  # type: Optional[datetime.datetime]
        microsoft_graph_schedule_entity_theme=None,  # type: Optional[Union[str, "models.MicrosoftGraphScheduleEntityTheme"]]
        microsoft_graph_shift_item_activities=None,  # type: Optional[List["models.MicrosoftGraphShiftActivity"]]
        microsoft_graph_shift_item_display_name=None,  # type: Optional[str]
        microsoft_graph_shift_item_notes=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property shifts in teams.

        Update the navigation property shifts in teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param shift_id: key: id of shift.
        :type shift_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param is_staged_for_deletion:
        :type is_staged_for_deletion: bool
        :param scheduling_group_id: ID of the scheduling group the shift is part of. Required.
        :type scheduling_group_id: str
        :param user_id: ID of the user assigned to the shift. Required.
        :type user_id: str
        :param end_date_time:
        :type end_date_time: ~datetime.datetime
        :param start_date_time:
        :type start_date_time: ~datetime.datetime
        :param theme:
        :type theme: str or ~teams.models.MicrosoftGraphScheduleEntityTheme
        :param activities: An incremental part of a shift which can cover details of when and where an
         employee is during their shift. For example, an assignment or a scheduled break or lunch.
         Required.
        :type activities: list[~teams.models.MicrosoftGraphShiftActivity]
        :param display_name: The shift label of the shiftItem.
        :type display_name: str
        :param notes: The shift notes for the shiftItem.
        :type notes: str
        :param microsoft_graph_schedule_entity_end_date_time_end_date_time:
        :type microsoft_graph_schedule_entity_end_date_time_end_date_time: ~datetime.datetime
        :param microsoft_graph_schedule_entity_start_date_time_start_date_time:
        :type microsoft_graph_schedule_entity_start_date_time_start_date_time: ~datetime.datetime
        :param microsoft_graph_schedule_entity_theme:
        :type microsoft_graph_schedule_entity_theme: str or ~teams.models.MicrosoftGraphScheduleEntityTheme
        :param microsoft_graph_shift_item_activities: An incremental part of a shift which can cover
         details of when and where an employee is during their shift. For example, an assignment or a
         scheduled break or lunch. Required.
        :type microsoft_graph_shift_item_activities: list[~teams.models.MicrosoftGraphShiftActivity]
        :param microsoft_graph_shift_item_display_name: The shift label of the shiftItem.
        :type microsoft_graph_shift_item_display_name: str
        :param microsoft_graph_shift_item_notes: The shift notes for the shiftItem.
        :type microsoft_graph_shift_item_notes: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphShift(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, is_staged_for_deletion=is_staged_for_deletion, scheduling_group_id=scheduling_group_id, user_id=user_id, end_date_time_shared_shift_end_date_time=end_date_time, start_date_time_shared_shift_start_date_time=start_date_time, theme_shared_shift_theme=theme, activities_shared_shift_activities=activities, display_name_shared_shift_display_name=display_name, notes_shared_shift_notes=notes, end_date_time_draft_shift_end_date_time=microsoft_graph_schedule_entity_end_date_time_end_date_time, start_date_time_draft_shift_start_date_time=microsoft_graph_schedule_entity_start_date_time_start_date_time, theme_draft_shift_theme=microsoft_graph_schedule_entity_theme, activities_draft_shift_activities=microsoft_graph_shift_item_activities, display_name_draft_shift_display_name=microsoft_graph_shift_item_display_name, notes_draft_shift_notes=microsoft_graph_shift_item_notes)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_shift.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'shift-id': self._serialize.url("shift_id", shift_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphShift')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_shift.metadata = {'url': '/teams/{team-id}/schedule/shifts/{shift-id}'}  # type: ignore

    def delete_shift(
        self,
        team_id,  # type: str
        shift_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property shifts for teams.

        Delete navigation property shifts for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param shift_id: key: id of shift.
        :type shift_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_shift.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'shift-id': self._serialize.url("shift_id", shift_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_shift.metadata = {'url': '/teams/{team-id}/schedule/shifts/{shift-id}'}  # type: ignore

    def list_swap_shift_change_request(
        self,
        team_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum267"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum268"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfSwapShiftsChangeRequest"]
        """Get swapShiftsChangeRequests from teams.

        Get swapShiftsChangeRequests from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams.models.Enum267]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum268]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfSwapShiftsChangeRequest or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~teams.models.CollectionOfSwapShiftsChangeRequest]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfSwapShiftsChangeRequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_swap_shift_change_request.metadata['url']  # type: ignore
                path_format_arguments = {
                    'team-id': self._serialize.url("team_id", team_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfSwapShiftsChangeRequest', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_swap_shift_change_request.metadata = {'url': '/teams/{team-id}/schedule/swapShiftsChangeRequests'}  # type: ignore

    def create_swap_shift_change_request(
        self,
        team_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        assigned_to=None,  # type: Optional[Union[str, "models.MicrosoftGraphScheduleChangeRequestActor"]]
        manager_action_date_time=None,  # type: Optional[datetime.datetime]
        manager_action_message=None,  # type: Optional[str]
        manager_user_id=None,  # type: Optional[str]
        sender_date_time=None,  # type: Optional[datetime.datetime]
        sender_message=None,  # type: Optional[str]
        sender_user_id=None,  # type: Optional[str]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphScheduleChangeState"]]
        recipient_action_date_time=None,  # type: Optional[datetime.datetime]
        recipient_action_message=None,  # type: Optional[str]
        recipient_user_id=None,  # type: Optional[str]
        sender_shift_id=None,  # type: Optional[str]
        recipient_shift_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphSwapShiftsChangeRequest"
        """Create new navigation property to swapShiftsChangeRequests for teams.

        Create new navigation property to swapShiftsChangeRequests for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param assigned_to:
        :type assigned_to: str or ~teams.models.MicrosoftGraphScheduleChangeRequestActor
        :param manager_action_date_time:
        :type manager_action_date_time: ~datetime.datetime
        :param manager_action_message:
        :type manager_action_message: str
        :param manager_user_id:
        :type manager_user_id: str
        :param sender_date_time:
        :type sender_date_time: ~datetime.datetime
        :param sender_message:
        :type sender_message: str
        :param sender_user_id:
        :type sender_user_id: str
        :param state:
        :type state: str or ~teams.models.MicrosoftGraphScheduleChangeState
        :param recipient_action_date_time: The Timestamp type represents date and time information
         using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would
         look like this: '2014-01-01T00:00:00Z'.
        :type recipient_action_date_time: ~datetime.datetime
        :param recipient_action_message: Custom message sent by recipient of the offer shift request.
        :type recipient_action_message: str
        :param recipient_user_id: User ID of the recipient of the offer shift request.
        :type recipient_user_id: str
        :param sender_shift_id: User ID of the sender of the offer shift request.
        :type sender_shift_id: str
        :param recipient_shift_id: ShiftId for the recipient user with whom the request is to swap.
        :type recipient_shift_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSwapShiftsChangeRequest, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphSwapShiftsChangeRequest
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSwapShiftsChangeRequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphSwapShiftsChangeRequest(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, assigned_to=assigned_to, manager_action_date_time=manager_action_date_time, manager_action_message=manager_action_message, manager_user_id=manager_user_id, sender_date_time=sender_date_time, sender_message=sender_message, sender_user_id=sender_user_id, state=state, recipient_action_date_time=recipient_action_date_time, recipient_action_message=recipient_action_message, recipient_user_id=recipient_user_id, sender_shift_id=sender_shift_id, recipient_shift_id=recipient_shift_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_swap_shift_change_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphSwapShiftsChangeRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSwapShiftsChangeRequest', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_swap_shift_change_request.metadata = {'url': '/teams/{team-id}/schedule/swapShiftsChangeRequests'}  # type: ignore

    def get_swap_shift_change_request(
        self,
        team_id,  # type: str
        swap_shifts_change_request_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum269"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphSwapShiftsChangeRequest"
        """Get swapShiftsChangeRequests from teams.

        Get swapShiftsChangeRequests from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param swap_shifts_change_request_id: key: id of swapShiftsChangeRequest.
        :type swap_shifts_change_request_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum269]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSwapShiftsChangeRequest, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphSwapShiftsChangeRequest
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSwapShiftsChangeRequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_swap_shift_change_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'swapShiftsChangeRequest-id': self._serialize.url("swap_shifts_change_request_id", swap_shifts_change_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSwapShiftsChangeRequest', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_swap_shift_change_request.metadata = {'url': '/teams/{team-id}/schedule/swapShiftsChangeRequests/{swapShiftsChangeRequest-id}'}  # type: ignore

    def update_swap_shift_change_request(
        self,
        team_id,  # type: str
        swap_shifts_change_request_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        assigned_to=None,  # type: Optional[Union[str, "models.MicrosoftGraphScheduleChangeRequestActor"]]
        manager_action_date_time=None,  # type: Optional[datetime.datetime]
        manager_action_message=None,  # type: Optional[str]
        manager_user_id=None,  # type: Optional[str]
        sender_date_time=None,  # type: Optional[datetime.datetime]
        sender_message=None,  # type: Optional[str]
        sender_user_id=None,  # type: Optional[str]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphScheduleChangeState"]]
        recipient_action_date_time=None,  # type: Optional[datetime.datetime]
        recipient_action_message=None,  # type: Optional[str]
        recipient_user_id=None,  # type: Optional[str]
        sender_shift_id=None,  # type: Optional[str]
        recipient_shift_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property swapShiftsChangeRequests in teams.

        Update the navigation property swapShiftsChangeRequests in teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param swap_shifts_change_request_id: key: id of swapShiftsChangeRequest.
        :type swap_shifts_change_request_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param assigned_to:
        :type assigned_to: str or ~teams.models.MicrosoftGraphScheduleChangeRequestActor
        :param manager_action_date_time:
        :type manager_action_date_time: ~datetime.datetime
        :param manager_action_message:
        :type manager_action_message: str
        :param manager_user_id:
        :type manager_user_id: str
        :param sender_date_time:
        :type sender_date_time: ~datetime.datetime
        :param sender_message:
        :type sender_message: str
        :param sender_user_id:
        :type sender_user_id: str
        :param state:
        :type state: str or ~teams.models.MicrosoftGraphScheduleChangeState
        :param recipient_action_date_time: The Timestamp type represents date and time information
         using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would
         look like this: '2014-01-01T00:00:00Z'.
        :type recipient_action_date_time: ~datetime.datetime
        :param recipient_action_message: Custom message sent by recipient of the offer shift request.
        :type recipient_action_message: str
        :param recipient_user_id: User ID of the recipient of the offer shift request.
        :type recipient_user_id: str
        :param sender_shift_id: User ID of the sender of the offer shift request.
        :type sender_shift_id: str
        :param recipient_shift_id: ShiftId for the recipient user with whom the request is to swap.
        :type recipient_shift_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphSwapShiftsChangeRequest(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, assigned_to=assigned_to, manager_action_date_time=manager_action_date_time, manager_action_message=manager_action_message, manager_user_id=manager_user_id, sender_date_time=sender_date_time, sender_message=sender_message, sender_user_id=sender_user_id, state=state, recipient_action_date_time=recipient_action_date_time, recipient_action_message=recipient_action_message, recipient_user_id=recipient_user_id, sender_shift_id=sender_shift_id, recipient_shift_id=recipient_shift_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_swap_shift_change_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'swapShiftsChangeRequest-id': self._serialize.url("swap_shifts_change_request_id", swap_shifts_change_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphSwapShiftsChangeRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_swap_shift_change_request.metadata = {'url': '/teams/{team-id}/schedule/swapShiftsChangeRequests/{swapShiftsChangeRequest-id}'}  # type: ignore

    def delete_swap_shift_change_request(
        self,
        team_id,  # type: str
        swap_shifts_change_request_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property swapShiftsChangeRequests for teams.

        Delete navigation property swapShiftsChangeRequests for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param swap_shifts_change_request_id: key: id of swapShiftsChangeRequest.
        :type swap_shifts_change_request_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_swap_shift_change_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'swapShiftsChangeRequest-id': self._serialize.url("swap_shifts_change_request_id", swap_shifts_change_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_swap_shift_change_request.metadata = {'url': '/teams/{team-id}/schedule/swapShiftsChangeRequests/{swapShiftsChangeRequest-id}'}  # type: ignore

    def list_time_card(
        self,
        team_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum270"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum271"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfTimeCard"]
        """Get timeCards from teams.

        Get timeCards from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams.models.Enum270]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum271]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfTimeCard or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~teams.models.CollectionOfTimeCard]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfTimeCard"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_time_card.metadata['url']  # type: ignore
                path_format_arguments = {
                    'team-id': self._serialize.url("team_id", team_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfTimeCard', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_time_card.metadata = {'url': '/teams/{team-id}/schedule/timeCards'}  # type: ignore

    def create_time_card(
        self,
        team_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        breaks=None,  # type: Optional[List["models.MicrosoftGraphTimeCardBreak"]]
        confirmed_by=None,  # type: Optional[Union[str, "models.MicrosoftGraphConfirmedBy"]]
        notes=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphTimeCardState"]]
        user_id=None,  # type: Optional[str]
        microsoft_graph_time_card_entry_breaks=None,  # type: Optional[List["models.MicrosoftGraphTimeCardBreak"]]
        clock_in_event=None,  # type: Optional["models.MicrosoftGraphTimeCardEvent"]
        clock_out_event=None,  # type: Optional["models.MicrosoftGraphTimeCardEvent"]
        at_approved_location=None,  # type: Optional[bool]
        date_time=None,  # type: Optional[datetime.datetime]
        microsoft_graph_item_body_notes=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        boolean_at_approved_location=None,  # type: Optional[bool]
        microsoft_graph_time_card_event_date_time=None,  # type: Optional[datetime.datetime]
        notes1=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphTimeCard"
        """Create new navigation property to timeCards for teams.

        Create new navigation property to timeCards for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param breaks:
        :type breaks: list[~teams.models.MicrosoftGraphTimeCardBreak]
        :param confirmed_by:
        :type confirmed_by: str or ~teams.models.MicrosoftGraphConfirmedBy
        :param notes: itemBody.
        :type notes: ~teams.models.MicrosoftGraphItemBody
        :param state:
        :type state: str or ~teams.models.MicrosoftGraphTimeCardState
        :param user_id:
        :type user_id: str
        :param microsoft_graph_time_card_entry_breaks:
        :type microsoft_graph_time_card_entry_breaks: list[~teams.models.MicrosoftGraphTimeCardBreak]
        :param clock_in_event: timeCardEvent.
        :type clock_in_event: ~teams.models.MicrosoftGraphTimeCardEvent
        :param clock_out_event: timeCardEvent.
        :type clock_out_event: ~teams.models.MicrosoftGraphTimeCardEvent
        :param at_approved_location:
        :type at_approved_location: bool
        :param date_time:
        :type date_time: ~datetime.datetime
        :param microsoft_graph_item_body_notes: itemBody.
        :type microsoft_graph_item_body_notes: ~teams.models.MicrosoftGraphItemBody
        :param boolean_at_approved_location:
        :type boolean_at_approved_location: bool
        :param microsoft_graph_time_card_event_date_time:
        :type microsoft_graph_time_card_event_date_time: ~datetime.datetime
        :param notes1: itemBody.
        :type notes1: ~teams.models.MicrosoftGraphItemBody
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphTimeCard, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphTimeCard
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphTimeCard"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphTimeCard(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, breaks=breaks, confirmed_by=confirmed_by, notes=notes, state=state, user_id=user_id, breaks_original_entry_breaks=microsoft_graph_time_card_entry_breaks, clock_in_event=clock_in_event, clock_out_event=clock_out_event, at_approved_location_clock_out_event_at_approved_location=at_approved_location, date_time_clock_out_event_date_time=date_time, notes_clock_out_event_notes=microsoft_graph_item_body_notes, at_approved_location_clock_in_event_at_approved_location=boolean_at_approved_location, date_time_clock_in_event_date_time=microsoft_graph_time_card_event_date_time, notes_clock_in_event_notes=notes1)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_time_card.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphTimeCard')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphTimeCard', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_time_card.metadata = {'url': '/teams/{team-id}/schedule/timeCards'}  # type: ignore

    def get_time_card(
        self,
        team_id,  # type: str
        time_card_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum272"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphTimeCard"
        """Get timeCards from teams.

        Get timeCards from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param time_card_id: key: id of timeCard.
        :type time_card_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum272]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphTimeCard, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphTimeCard
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphTimeCard"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_time_card.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'timeCard-id': self._serialize.url("time_card_id", time_card_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphTimeCard', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_time_card.metadata = {'url': '/teams/{team-id}/schedule/timeCards/{timeCard-id}'}  # type: ignore

    def update_time_card(
        self,
        team_id,  # type: str
        time_card_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        breaks=None,  # type: Optional[List["models.MicrosoftGraphTimeCardBreak"]]
        confirmed_by=None,  # type: Optional[Union[str, "models.MicrosoftGraphConfirmedBy"]]
        notes=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphTimeCardState"]]
        user_id=None,  # type: Optional[str]
        microsoft_graph_time_card_entry_breaks=None,  # type: Optional[List["models.MicrosoftGraphTimeCardBreak"]]
        clock_in_event=None,  # type: Optional["models.MicrosoftGraphTimeCardEvent"]
        clock_out_event=None,  # type: Optional["models.MicrosoftGraphTimeCardEvent"]
        at_approved_location=None,  # type: Optional[bool]
        date_time=None,  # type: Optional[datetime.datetime]
        microsoft_graph_item_body_notes=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        boolean_at_approved_location=None,  # type: Optional[bool]
        microsoft_graph_time_card_event_date_time=None,  # type: Optional[datetime.datetime]
        notes1=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property timeCards in teams.

        Update the navigation property timeCards in teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param time_card_id: key: id of timeCard.
        :type time_card_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param breaks:
        :type breaks: list[~teams.models.MicrosoftGraphTimeCardBreak]
        :param confirmed_by:
        :type confirmed_by: str or ~teams.models.MicrosoftGraphConfirmedBy
        :param notes: itemBody.
        :type notes: ~teams.models.MicrosoftGraphItemBody
        :param state:
        :type state: str or ~teams.models.MicrosoftGraphTimeCardState
        :param user_id:
        :type user_id: str
        :param microsoft_graph_time_card_entry_breaks:
        :type microsoft_graph_time_card_entry_breaks: list[~teams.models.MicrosoftGraphTimeCardBreak]
        :param clock_in_event: timeCardEvent.
        :type clock_in_event: ~teams.models.MicrosoftGraphTimeCardEvent
        :param clock_out_event: timeCardEvent.
        :type clock_out_event: ~teams.models.MicrosoftGraphTimeCardEvent
        :param at_approved_location:
        :type at_approved_location: bool
        :param date_time:
        :type date_time: ~datetime.datetime
        :param microsoft_graph_item_body_notes: itemBody.
        :type microsoft_graph_item_body_notes: ~teams.models.MicrosoftGraphItemBody
        :param boolean_at_approved_location:
        :type boolean_at_approved_location: bool
        :param microsoft_graph_time_card_event_date_time:
        :type microsoft_graph_time_card_event_date_time: ~datetime.datetime
        :param notes1: itemBody.
        :type notes1: ~teams.models.MicrosoftGraphItemBody
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphTimeCard(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, breaks=breaks, confirmed_by=confirmed_by, notes=notes, state=state, user_id=user_id, breaks_original_entry_breaks=microsoft_graph_time_card_entry_breaks, clock_in_event=clock_in_event, clock_out_event=clock_out_event, at_approved_location_clock_out_event_at_approved_location=at_approved_location, date_time_clock_out_event_date_time=date_time, notes_clock_out_event_notes=microsoft_graph_item_body_notes, at_approved_location_clock_in_event_at_approved_location=boolean_at_approved_location, date_time_clock_in_event_date_time=microsoft_graph_time_card_event_date_time, notes_clock_in_event_notes=notes1)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_time_card.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'timeCard-id': self._serialize.url("time_card_id", time_card_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphTimeCard')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_time_card.metadata = {'url': '/teams/{team-id}/schedule/timeCards/{timeCard-id}'}  # type: ignore

    def delete_time_card(
        self,
        team_id,  # type: str
        time_card_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property timeCards for teams.

        Delete navigation property timeCards for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param time_card_id: key: id of timeCard.
        :type time_card_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_time_card.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'timeCard-id': self._serialize.url("time_card_id", time_card_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_time_card.metadata = {'url': '/teams/{team-id}/schedule/timeCards/{timeCard-id}'}  # type: ignore

    def list_time_off_reason(
        self,
        team_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum273"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum274"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfTimeOffReason"]
        """Get timeOffReasons from teams.

        Get timeOffReasons from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams.models.Enum273]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum274]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfTimeOffReason or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~teams.models.CollectionOfTimeOffReason]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfTimeOffReason"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_time_off_reason.metadata['url']  # type: ignore
                path_format_arguments = {
                    'team-id': self._serialize.url("team_id", team_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfTimeOffReason', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_time_off_reason.metadata = {'url': '/teams/{team-id}/schedule/timeOffReasons'}  # type: ignore

    def create_time_off_reason(
        self,
        team_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        display_name=None,  # type: Optional[str]
        icon_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphTimeOffReasonIconType"]]
        is_active=None,  # type: Optional[bool]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphTimeOffReason"
        """Create new navigation property to timeOffReasons for teams.

        Create new navigation property to timeOffReasons for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param display_name: The name of the timeOffReason. Required.
        :type display_name: str
        :param icon_type:
        :type icon_type: str or ~teams.models.MicrosoftGraphTimeOffReasonIconType
        :param is_active: Indicates whether the timeOffReason can be used when creating new entities or
         updating existing ones. Required.
        :type is_active: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphTimeOffReason, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphTimeOffReason
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphTimeOffReason"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphTimeOffReason(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, display_name=display_name, icon_type=icon_type, is_active=is_active)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_time_off_reason.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphTimeOffReason')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphTimeOffReason', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_time_off_reason.metadata = {'url': '/teams/{team-id}/schedule/timeOffReasons'}  # type: ignore

    def get_time_off_reason(
        self,
        team_id,  # type: str
        time_off_reason_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum275"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphTimeOffReason"
        """Get timeOffReasons from teams.

        Get timeOffReasons from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param time_off_reason_id: key: id of timeOffReason.
        :type time_off_reason_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum275]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphTimeOffReason, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphTimeOffReason
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphTimeOffReason"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_time_off_reason.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'timeOffReason-id': self._serialize.url("time_off_reason_id", time_off_reason_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphTimeOffReason', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_time_off_reason.metadata = {'url': '/teams/{team-id}/schedule/timeOffReasons/{timeOffReason-id}'}  # type: ignore

    def update_time_off_reason(
        self,
        team_id,  # type: str
        time_off_reason_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        display_name=None,  # type: Optional[str]
        icon_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphTimeOffReasonIconType"]]
        is_active=None,  # type: Optional[bool]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property timeOffReasons in teams.

        Update the navigation property timeOffReasons in teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param time_off_reason_id: key: id of timeOffReason.
        :type time_off_reason_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param display_name: The name of the timeOffReason. Required.
        :type display_name: str
        :param icon_type:
        :type icon_type: str or ~teams.models.MicrosoftGraphTimeOffReasonIconType
        :param is_active: Indicates whether the timeOffReason can be used when creating new entities or
         updating existing ones. Required.
        :type is_active: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphTimeOffReason(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, display_name=display_name, icon_type=icon_type, is_active=is_active)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_time_off_reason.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'timeOffReason-id': self._serialize.url("time_off_reason_id", time_off_reason_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphTimeOffReason')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_time_off_reason.metadata = {'url': '/teams/{team-id}/schedule/timeOffReasons/{timeOffReason-id}'}  # type: ignore

    def delete_time_off_reason(
        self,
        team_id,  # type: str
        time_off_reason_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property timeOffReasons for teams.

        Delete navigation property timeOffReasons for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param time_off_reason_id: key: id of timeOffReason.
        :type time_off_reason_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_time_off_reason.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'timeOffReason-id': self._serialize.url("time_off_reason_id", time_off_reason_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_time_off_reason.metadata = {'url': '/teams/{team-id}/schedule/timeOffReasons/{timeOffReason-id}'}  # type: ignore

    def list_time_off_request(
        self,
        team_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum276"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum277"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfTimeOffRequest"]
        """Get timeOffRequests from teams.

        Get timeOffRequests from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams.models.Enum276]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum277]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfTimeOffRequest or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~teams.models.CollectionOfTimeOffRequest]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfTimeOffRequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_time_off_request.metadata['url']  # type: ignore
                path_format_arguments = {
                    'team-id': self._serialize.url("team_id", team_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfTimeOffRequest', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_time_off_request.metadata = {'url': '/teams/{team-id}/schedule/timeOffRequests'}  # type: ignore

    def create_time_off_request(
        self,
        team_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        assigned_to=None,  # type: Optional[Union[str, "models.MicrosoftGraphScheduleChangeRequestActor"]]
        manager_action_date_time=None,  # type: Optional[datetime.datetime]
        manager_action_message=None,  # type: Optional[str]
        manager_user_id=None,  # type: Optional[str]
        sender_date_time=None,  # type: Optional[datetime.datetime]
        sender_message=None,  # type: Optional[str]
        sender_user_id=None,  # type: Optional[str]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphScheduleChangeState"]]
        end_date_time=None,  # type: Optional[datetime.datetime]
        start_date_time=None,  # type: Optional[datetime.datetime]
        time_off_reason_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphTimeOffRequest"
        """Create new navigation property to timeOffRequests for teams.

        Create new navigation property to timeOffRequests for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param assigned_to:
        :type assigned_to: str or ~teams.models.MicrosoftGraphScheduleChangeRequestActor
        :param manager_action_date_time:
        :type manager_action_date_time: ~datetime.datetime
        :param manager_action_message:
        :type manager_action_message: str
        :param manager_user_id:
        :type manager_user_id: str
        :param sender_date_time:
        :type sender_date_time: ~datetime.datetime
        :param sender_message:
        :type sender_message: str
        :param sender_user_id:
        :type sender_user_id: str
        :param state:
        :type state: str or ~teams.models.MicrosoftGraphScheduleChangeState
        :param end_date_time: The Timestamp type represents date and time information using ISO 8601
         format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type end_date_time: ~datetime.datetime
        :param start_date_time: The Timestamp type represents date and time information using ISO 8601
         format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type start_date_time: ~datetime.datetime
        :param time_off_reason_id: The reason for the time off.
        :type time_off_reason_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphTimeOffRequest, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphTimeOffRequest
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphTimeOffRequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphTimeOffRequest(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, assigned_to=assigned_to, manager_action_date_time=manager_action_date_time, manager_action_message=manager_action_message, manager_user_id=manager_user_id, sender_date_time=sender_date_time, sender_message=sender_message, sender_user_id=sender_user_id, state=state, end_date_time=end_date_time, start_date_time=start_date_time, time_off_reason_id=time_off_reason_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_time_off_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphTimeOffRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphTimeOffRequest', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_time_off_request.metadata = {'url': '/teams/{team-id}/schedule/timeOffRequests'}  # type: ignore

    def get_time_off_request(
        self,
        team_id,  # type: str
        time_off_request_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum278"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphTimeOffRequest"
        """Get timeOffRequests from teams.

        Get timeOffRequests from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param time_off_request_id: key: id of timeOffRequest.
        :type time_off_request_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum278]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphTimeOffRequest, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphTimeOffRequest
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphTimeOffRequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_time_off_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'timeOffRequest-id': self._serialize.url("time_off_request_id", time_off_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphTimeOffRequest', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_time_off_request.metadata = {'url': '/teams/{team-id}/schedule/timeOffRequests/{timeOffRequest-id}'}  # type: ignore

    def update_time_off_request(
        self,
        team_id,  # type: str
        time_off_request_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        assigned_to=None,  # type: Optional[Union[str, "models.MicrosoftGraphScheduleChangeRequestActor"]]
        manager_action_date_time=None,  # type: Optional[datetime.datetime]
        manager_action_message=None,  # type: Optional[str]
        manager_user_id=None,  # type: Optional[str]
        sender_date_time=None,  # type: Optional[datetime.datetime]
        sender_message=None,  # type: Optional[str]
        sender_user_id=None,  # type: Optional[str]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphScheduleChangeState"]]
        end_date_time=None,  # type: Optional[datetime.datetime]
        start_date_time=None,  # type: Optional[datetime.datetime]
        time_off_reason_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property timeOffRequests in teams.

        Update the navigation property timeOffRequests in teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param time_off_request_id: key: id of timeOffRequest.
        :type time_off_request_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param assigned_to:
        :type assigned_to: str or ~teams.models.MicrosoftGraphScheduleChangeRequestActor
        :param manager_action_date_time:
        :type manager_action_date_time: ~datetime.datetime
        :param manager_action_message:
        :type manager_action_message: str
        :param manager_user_id:
        :type manager_user_id: str
        :param sender_date_time:
        :type sender_date_time: ~datetime.datetime
        :param sender_message:
        :type sender_message: str
        :param sender_user_id:
        :type sender_user_id: str
        :param state:
        :type state: str or ~teams.models.MicrosoftGraphScheduleChangeState
        :param end_date_time: The Timestamp type represents date and time information using ISO 8601
         format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type end_date_time: ~datetime.datetime
        :param start_date_time: The Timestamp type represents date and time information using ISO 8601
         format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type start_date_time: ~datetime.datetime
        :param time_off_reason_id: The reason for the time off.
        :type time_off_reason_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphTimeOffRequest(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, assigned_to=assigned_to, manager_action_date_time=manager_action_date_time, manager_action_message=manager_action_message, manager_user_id=manager_user_id, sender_date_time=sender_date_time, sender_message=sender_message, sender_user_id=sender_user_id, state=state, end_date_time=end_date_time, start_date_time=start_date_time, time_off_reason_id=time_off_reason_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_time_off_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'timeOffRequest-id': self._serialize.url("time_off_request_id", time_off_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphTimeOffRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_time_off_request.metadata = {'url': '/teams/{team-id}/schedule/timeOffRequests/{timeOffRequest-id}'}  # type: ignore

    def delete_time_off_request(
        self,
        team_id,  # type: str
        time_off_request_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property timeOffRequests for teams.

        Delete navigation property timeOffRequests for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param time_off_request_id: key: id of timeOffRequest.
        :type time_off_request_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_time_off_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'timeOffRequest-id': self._serialize.url("time_off_request_id", time_off_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_time_off_request.metadata = {'url': '/teams/{team-id}/schedule/timeOffRequests/{timeOffRequest-id}'}  # type: ignore

    def list_time_off(
        self,
        team_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum279"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum280"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfTimeOff"]
        """Get timesOff from teams.

        Get timesOff from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams.models.Enum279]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum280]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfTimeOff or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~teams.models.CollectionOfTimeOff]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfTimeOff"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_time_off.metadata['url']  # type: ignore
                path_format_arguments = {
                    'team-id': self._serialize.url("team_id", team_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfTimeOff', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_time_off.metadata = {'url': '/teams/{team-id}/schedule/timesOff'}  # type: ignore

    def create_time_off(
        self,
        team_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        draft_time_off=None,  # type: Optional["models.MicrosoftGraphTimeOffItem"]
        is_staged_for_deletion=None,  # type: Optional[bool]
        shared_time_off=None,  # type: Optional["models.MicrosoftGraphTimeOffItem"]
        user_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphTimeOff"
        """Create new navigation property to timesOff for teams.

        Create new navigation property to timesOff for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param draft_time_off: timeOffItem.
        :type draft_time_off: ~teams.models.MicrosoftGraphTimeOffItem
        :param is_staged_for_deletion:
        :type is_staged_for_deletion: bool
        :param shared_time_off: timeOffItem.
        :type shared_time_off: ~teams.models.MicrosoftGraphTimeOffItem
        :param user_id: ID of the user assigned to the timeOff. Required.
        :type user_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphTimeOff, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphTimeOff
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphTimeOff"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphTimeOff(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, draft_time_off=draft_time_off, is_staged_for_deletion=is_staged_for_deletion, shared_time_off=shared_time_off, user_id=user_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_time_off.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphTimeOff')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphTimeOff', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_time_off.metadata = {'url': '/teams/{team-id}/schedule/timesOff'}  # type: ignore

    def get_time_off(
        self,
        team_id,  # type: str
        time_off_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum281"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphTimeOff"
        """Get timesOff from teams.

        Get timesOff from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param time_off_id: key: id of timeOff.
        :type time_off_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum281]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphTimeOff, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphTimeOff
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphTimeOff"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_time_off.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'timeOff-id': self._serialize.url("time_off_id", time_off_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphTimeOff', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_time_off.metadata = {'url': '/teams/{team-id}/schedule/timesOff/{timeOff-id}'}  # type: ignore

    def update_time_off(
        self,
        team_id,  # type: str
        time_off_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        draft_time_off=None,  # type: Optional["models.MicrosoftGraphTimeOffItem"]
        is_staged_for_deletion=None,  # type: Optional[bool]
        shared_time_off=None,  # type: Optional["models.MicrosoftGraphTimeOffItem"]
        user_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property timesOff in teams.

        Update the navigation property timesOff in teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param time_off_id: key: id of timeOff.
        :type time_off_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param draft_time_off: timeOffItem.
        :type draft_time_off: ~teams.models.MicrosoftGraphTimeOffItem
        :param is_staged_for_deletion:
        :type is_staged_for_deletion: bool
        :param shared_time_off: timeOffItem.
        :type shared_time_off: ~teams.models.MicrosoftGraphTimeOffItem
        :param user_id: ID of the user assigned to the timeOff. Required.
        :type user_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphTimeOff(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, draft_time_off=draft_time_off, is_staged_for_deletion=is_staged_for_deletion, shared_time_off=shared_time_off, user_id=user_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_time_off.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'timeOff-id': self._serialize.url("time_off_id", time_off_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphTimeOff')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_time_off.metadata = {'url': '/teams/{team-id}/schedule/timesOff/{timeOff-id}'}  # type: ignore

    def delete_time_off(
        self,
        team_id,  # type: str
        time_off_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property timesOff for teams.

        Delete navigation property timesOff for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param time_off_id: key: id of timeOff.
        :type time_off_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_time_off.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'timeOff-id': self._serialize.url("time_off_id", time_off_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_time_off.metadata = {'url': '/teams/{team-id}/schedule/timesOff/{timeOff-id}'}  # type: ignore
