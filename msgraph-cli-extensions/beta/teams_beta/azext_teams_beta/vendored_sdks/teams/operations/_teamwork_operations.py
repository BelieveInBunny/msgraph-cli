# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class TeamworkOperations(object):
    """TeamworkOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~teams.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_workforce_integration(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum287"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum288"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfWorkforceIntegration"]
        """Get workforceIntegrations from teamwork.

        Get workforceIntegrations from teamwork.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams.models.Enum287]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum288]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfWorkforceIntegration or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~teams.models.CollectionOfWorkforceIntegration]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfWorkforceIntegration"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_workforce_integration.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfWorkforceIntegration', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_workforce_integration.metadata = {'url': '/teamwork/workforceIntegrations'}  # type: ignore

    def create_workforce_integration(
        self,
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        api_version=None,  # type: Optional[int]
        display_name=None,  # type: Optional[str]
        eligibility_filtering_enabled_entities=None,  # type: Optional[Union[str, "models.MicrosoftGraphEligibilityFilteringEnabledEntities"]]
        encryption=None,  # type: Optional["models.MicrosoftGraphWorkforceIntegrationEncryption"]
        is_active=None,  # type: Optional[bool]
        supported_entities=None,  # type: Optional[Union[str, "models.MicrosoftGraphWorkforceIntegrationSupportedEntities"]]
        supports=None,  # type: Optional[Union[str, "models.MicrosoftGraphWorkforceIntegrationSupportedEntities"]]
        url=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphWorkforceIntegration"
        """Create new navigation property to workforceIntegrations for teamwork.

        Create new navigation property to workforceIntegrations for teamwork.

        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param api_version: API version for the call back URL. Start with 1.
        :type api_version: int
        :param display_name: Name of the workforce integration.
        :type display_name: str
        :param eligibility_filtering_enabled_entities:
        :type eligibility_filtering_enabled_entities: str or ~teams.models.MicrosoftGraphEligibilityFilteringEnabledEntities
        :param encryption: workforceIntegrationEncryption.
        :type encryption: ~teams.models.MicrosoftGraphWorkforceIntegrationEncryption
        :param is_active: Indicates whether this workforce integration is currently active and
         available.
        :type is_active: bool
        :param supported_entities:
        :type supported_entities: str or ~teams.models.MicrosoftGraphWorkforceIntegrationSupportedEntities
        :param supports:
        :type supports: str or ~teams.models.MicrosoftGraphWorkforceIntegrationSupportedEntities
        :param url: Workforce Integration URL for callbacks from the Shifts service.
        :type url: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphWorkforceIntegration, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphWorkforceIntegration
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphWorkforceIntegration"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphWorkforceIntegration(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, api_version=api_version, display_name=display_name, eligibility_filtering_enabled_entities=eligibility_filtering_enabled_entities, encryption=encryption, is_active=is_active, supported_entities=supported_entities, supports=supports, url=url)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_workforce_integration.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphWorkforceIntegration')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphWorkforceIntegration', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_workforce_integration.metadata = {'url': '/teamwork/workforceIntegrations'}  # type: ignore

    def get_workforce_integration(
        self,
        workforce_integration_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum289"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphWorkforceIntegration"
        """Get workforceIntegrations from teamwork.

        Get workforceIntegrations from teamwork.

        :param workforce_integration_id: key: id of workforceIntegration.
        :type workforce_integration_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum289]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphWorkforceIntegration, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphWorkforceIntegration
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphWorkforceIntegration"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_workforce_integration.metadata['url']  # type: ignore
        path_format_arguments = {
            'workforceIntegration-id': self._serialize.url("workforce_integration_id", workforce_integration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphWorkforceIntegration', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_workforce_integration.metadata = {'url': '/teamwork/workforceIntegrations/{workforceIntegration-id}'}  # type: ignore

    def update_workforce_integration(
        self,
        workforce_integration_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        api_version=None,  # type: Optional[int]
        display_name=None,  # type: Optional[str]
        eligibility_filtering_enabled_entities=None,  # type: Optional[Union[str, "models.MicrosoftGraphEligibilityFilteringEnabledEntities"]]
        encryption=None,  # type: Optional["models.MicrosoftGraphWorkforceIntegrationEncryption"]
        is_active=None,  # type: Optional[bool]
        supported_entities=None,  # type: Optional[Union[str, "models.MicrosoftGraphWorkforceIntegrationSupportedEntities"]]
        supports=None,  # type: Optional[Union[str, "models.MicrosoftGraphWorkforceIntegrationSupportedEntities"]]
        url=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property workforceIntegrations in teamwork.

        Update the navigation property workforceIntegrations in teamwork.

        :param workforce_integration_id: key: id of workforceIntegration.
        :type workforce_integration_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~teams.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~teams.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~teams.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~teams.models.MicrosoftGraphIdentity
        :param api_version: API version for the call back URL. Start with 1.
        :type api_version: int
        :param display_name: Name of the workforce integration.
        :type display_name: str
        :param eligibility_filtering_enabled_entities:
        :type eligibility_filtering_enabled_entities: str or ~teams.models.MicrosoftGraphEligibilityFilteringEnabledEntities
        :param encryption: workforceIntegrationEncryption.
        :type encryption: ~teams.models.MicrosoftGraphWorkforceIntegrationEncryption
        :param is_active: Indicates whether this workforce integration is currently active and
         available.
        :type is_active: bool
        :param supported_entities:
        :type supported_entities: str or ~teams.models.MicrosoftGraphWorkforceIntegrationSupportedEntities
        :param supports:
        :type supports: str or ~teams.models.MicrosoftGraphWorkforceIntegrationSupportedEntities
        :param url: Workforce Integration URL for callbacks from the Shifts service.
        :type url: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphWorkforceIntegration(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, api_version=api_version, display_name=display_name, eligibility_filtering_enabled_entities=eligibility_filtering_enabled_entities, encryption=encryption, is_active=is_active, supported_entities=supported_entities, supports=supports, url=url)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_workforce_integration.metadata['url']  # type: ignore
        path_format_arguments = {
            'workforceIntegration-id': self._serialize.url("workforce_integration_id", workforce_integration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphWorkforceIntegration')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_workforce_integration.metadata = {'url': '/teamwork/workforceIntegrations/{workforceIntegration-id}'}  # type: ignore

    def delete_workforce_integration(
        self,
        workforce_integration_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property workforceIntegrations for teamwork.

        Delete navigation property workforceIntegrations for teamwork.

        :param workforce_integration_id: key: id of workforceIntegration.
        :type workforce_integration_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_workforce_integration.metadata['url']  # type: ignore
        path_format_arguments = {
            'workforceIntegration-id': self._serialize.url("workforce_integration_id", workforce_integration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_workforce_integration.metadata = {'url': '/teamwork/workforceIntegrations/{workforceIntegration-id}'}  # type: ignore
