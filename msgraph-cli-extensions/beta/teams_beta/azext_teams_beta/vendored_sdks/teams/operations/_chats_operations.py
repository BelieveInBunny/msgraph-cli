# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class ChatsOperations(object):
    """ChatsOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~teams.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_installed_apps(
        self,
        chat_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum21"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum22"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum23"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfTeamsAppInstallation"]
        """Get installedApps from chats.

        Get installedApps from chats.

        :param chat_id: key: id of chat.
        :type chat_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams.models.Enum21]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum22]
        :param expand: Expand related entities.
        :type expand: list[str or ~teams.models.Enum23]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfTeamsAppInstallation or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~teams.models.CollectionOfTeamsAppInstallation]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfTeamsAppInstallation"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_installed_apps.metadata['url']  # type: ignore
                path_format_arguments = {
                    'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfTeamsAppInstallation', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_installed_apps.metadata = {'url': '/chats/{chat-id}/installedApps'}  # type: ignore

    def create_installed_apps(
        self,
        chat_id,  # type: str
        body,  # type: "models.MicrosoftGraphTeamsAppInstallation"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphTeamsAppInstallation"
        """Create new navigation property to installedApps for chats.

        Create new navigation property to installedApps for chats.

        :param chat_id: key: id of chat.
        :type chat_id: str
        :param body: New navigation property.
        :type body: ~teams.models.MicrosoftGraphTeamsAppInstallation
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphTeamsAppInstallation, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphTeamsAppInstallation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphTeamsAppInstallation"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_installed_apps.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphTeamsAppInstallation')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphTeamsAppInstallation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_installed_apps.metadata = {'url': '/chats/{chat-id}/installedApps'}  # type: ignore

    def get_installed_apps(
        self,
        chat_id,  # type: str
        teams_app_installation_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum24"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum25"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphTeamsAppInstallation"
        """Get installedApps from chats.

        Get installedApps from chats.

        :param chat_id: key: id of chat.
        :type chat_id: str
        :param teams_app_installation_id: key: id of teamsAppInstallation.
        :type teams_app_installation_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum24]
        :param expand: Expand related entities.
        :type expand: list[str or ~teams.models.Enum25]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphTeamsAppInstallation, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphTeamsAppInstallation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphTeamsAppInstallation"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_installed_apps.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'teamsAppInstallation-id': self._serialize.url("teams_app_installation_id", teams_app_installation_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphTeamsAppInstallation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_installed_apps.metadata = {'url': '/chats/{chat-id}/installedApps/{teamsAppInstallation-id}'}  # type: ignore

    def update_installed_apps(
        self,
        chat_id,  # type: str
        teams_app_installation_id,  # type: str
        body,  # type: "models.MicrosoftGraphTeamsAppInstallation"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property installedApps in chats.

        Update the navigation property installedApps in chats.

        :param chat_id: key: id of chat.
        :type chat_id: str
        :param teams_app_installation_id: key: id of teamsAppInstallation.
        :type teams_app_installation_id: str
        :param body: New navigation property values.
        :type body: ~teams.models.MicrosoftGraphTeamsAppInstallation
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_installed_apps.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'teamsAppInstallation-id': self._serialize.url("teams_app_installation_id", teams_app_installation_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphTeamsAppInstallation')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_installed_apps.metadata = {'url': '/chats/{chat-id}/installedApps/{teamsAppInstallation-id}'}  # type: ignore

    def delete_installed_apps(
        self,
        chat_id,  # type: str
        teams_app_installation_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property installedApps for chats.

        Delete navigation property installedApps for chats.

        :param chat_id: key: id of chat.
        :type chat_id: str
        :param teams_app_installation_id: key: id of teamsAppInstallation.
        :type teams_app_installation_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_installed_apps.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'teamsAppInstallation-id': self._serialize.url("teams_app_installation_id", teams_app_installation_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_installed_apps.metadata = {'url': '/chats/{chat-id}/installedApps/{teamsAppInstallation-id}'}  # type: ignore

    def list_members(
        self,
        chat_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum29"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum30"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfConversationMember"]
        """Get members from chats.

        Get members from chats.

        :param chat_id: key: id of chat.
        :type chat_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams.models.Enum29]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum30]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfConversationMember or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~teams.models.CollectionOfConversationMember]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfConversationMember"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_members.metadata['url']  # type: ignore
                path_format_arguments = {
                    'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfConversationMember', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_members.metadata = {'url': '/chats/{chat-id}/members'}  # type: ignore

    def create_members(
        self,
        chat_id,  # type: str
        body,  # type: "models.MicrosoftGraphConversationMember"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphConversationMember"
        """Create new navigation property to members for chats.

        Create new navigation property to members for chats.

        :param chat_id: key: id of chat.
        :type chat_id: str
        :param body: New navigation property.
        :type body: ~teams.models.MicrosoftGraphConversationMember
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphConversationMember, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphConversationMember
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphConversationMember"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_members.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphConversationMember')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphConversationMember', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_members.metadata = {'url': '/chats/{chat-id}/members'}  # type: ignore

    def get_members(
        self,
        chat_id,  # type: str
        conversation_member_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum31"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphConversationMember"
        """Get members from chats.

        Get members from chats.

        :param chat_id: key: id of chat.
        :type chat_id: str
        :param conversation_member_id: key: id of conversationMember.
        :type conversation_member_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum31]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphConversationMember, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphConversationMember
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphConversationMember"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_members.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'conversationMember-id': self._serialize.url("conversation_member_id", conversation_member_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphConversationMember', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_members.metadata = {'url': '/chats/{chat-id}/members/{conversationMember-id}'}  # type: ignore

    def update_members(
        self,
        chat_id,  # type: str
        conversation_member_id,  # type: str
        body,  # type: "models.MicrosoftGraphConversationMember"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property members in chats.

        Update the navigation property members in chats.

        :param chat_id: key: id of chat.
        :type chat_id: str
        :param conversation_member_id: key: id of conversationMember.
        :type conversation_member_id: str
        :param body: New navigation property values.
        :type body: ~teams.models.MicrosoftGraphConversationMember
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_members.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'conversationMember-id': self._serialize.url("conversation_member_id", conversation_member_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphConversationMember')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_members.metadata = {'url': '/chats/{chat-id}/members/{conversationMember-id}'}  # type: ignore

    def delete_members(
        self,
        chat_id,  # type: str
        conversation_member_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property members for chats.

        Delete navigation property members for chats.

        :param chat_id: key: id of chat.
        :type chat_id: str
        :param conversation_member_id: key: id of conversationMember.
        :type conversation_member_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_members.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'conversationMember-id': self._serialize.url("conversation_member_id", conversation_member_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_members.metadata = {'url': '/chats/{chat-id}/members/{conversationMember-id}'}  # type: ignore

    def list_messages(
        self,
        chat_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum32"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum33"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum34"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfChatMessage"]
        """Get messages from chats.

        Get messages from chats.

        :param chat_id: key: id of chat.
        :type chat_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams.models.Enum32]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum33]
        :param expand: Expand related entities.
        :type expand: list[str or ~teams.models.Enum34]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfChatMessage or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~teams.models.CollectionOfChatMessage]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfChatMessage"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_messages.metadata['url']  # type: ignore
                path_format_arguments = {
                    'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfChatMessage', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_messages.metadata = {'url': '/chats/{chat-id}/messages'}  # type: ignore

    def create_messages(
        self,
        chat_id,  # type: str
        body,  # type: "models.MicrosoftGraphChatMessage"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphChatMessage"
        """Create new navigation property to messages for chats.

        Create new navigation property to messages for chats.

        :param chat_id: key: id of chat.
        :type chat_id: str
        :param body: New navigation property.
        :type body: ~teams.models.MicrosoftGraphChatMessage
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphChatMessage, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphChatMessage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphChatMessage"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_messages.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphChatMessage')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphChatMessage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_messages.metadata = {'url': '/chats/{chat-id}/messages'}  # type: ignore

    def get_messages(
        self,
        chat_id,  # type: str
        chat_message_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum35"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum36"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphChatMessage"
        """Get messages from chats.

        Get messages from chats.

        :param chat_id: key: id of chat.
        :type chat_id: str
        :param chat_message_id: key: id of chatMessage.
        :type chat_message_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum35]
        :param expand: Expand related entities.
        :type expand: list[str or ~teams.models.Enum36]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphChatMessage, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphChatMessage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphChatMessage"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_messages.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'chatMessage-id': self._serialize.url("chat_message_id", chat_message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphChatMessage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_messages.metadata = {'url': '/chats/{chat-id}/messages/{chatMessage-id}'}  # type: ignore

    def update_messages(
        self,
        chat_id,  # type: str
        chat_message_id,  # type: str
        body,  # type: "models.MicrosoftGraphChatMessage"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property messages in chats.

        Update the navigation property messages in chats.

        :param chat_id: key: id of chat.
        :type chat_id: str
        :param chat_message_id: key: id of chatMessage.
        :type chat_message_id: str
        :param body: New navigation property values.
        :type body: ~teams.models.MicrosoftGraphChatMessage
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_messages.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'chatMessage-id': self._serialize.url("chat_message_id", chat_message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphChatMessage')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_messages.metadata = {'url': '/chats/{chat-id}/messages/{chatMessage-id}'}  # type: ignore

    def delete_messages(
        self,
        chat_id,  # type: str
        chat_message_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property messages for chats.

        Delete navigation property messages for chats.

        :param chat_id: key: id of chat.
        :type chat_id: str
        :param chat_message_id: key: id of chatMessage.
        :type chat_message_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_messages.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'chatMessage-id': self._serialize.url("chat_message_id", chat_message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_messages.metadata = {'url': '/chats/{chat-id}/messages/{chatMessage-id}'}  # type: ignore

    def send_activity_notification(
        self,
        chat_id,  # type: str
        body,  # type: "models.Paths1BjzoobChatsChatIdMicrosoftGraphSendactivitynotificationPostRequestbodyContentApplicationJsonSchema"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action sendActivityNotification.

        Invoke action sendActivityNotification.

        :param chat_id: key: id of chat.
        :type chat_id: str
        :param body: Action parameters.
        :type body: ~teams.models.Paths1BjzoobChatsChatIdMicrosoftGraphSendactivitynotificationPostRequestbodyContentApplicationJsonSchema
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.send_activity_notification.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'Paths1BjzoobChatsChatIdMicrosoftGraphSendactivitynotificationPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    send_activity_notification.metadata = {'url': '/chats/{chat-id}/microsoft.graph.sendActivityNotification'}  # type: ignore

    def list_tabs(
        self,
        chat_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum46"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum47"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum48"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfTeamsTab"]
        """Get tabs from chats.

        Get tabs from chats.

        :param chat_id: key: id of chat.
        :type chat_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams.models.Enum46]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum47]
        :param expand: Expand related entities.
        :type expand: list[str or ~teams.models.Enum48]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfTeamsTab or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~teams.models.CollectionOfTeamsTab]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfTeamsTab"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_tabs.metadata['url']  # type: ignore
                path_format_arguments = {
                    'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfTeamsTab', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_tabs.metadata = {'url': '/chats/{chat-id}/tabs'}  # type: ignore

    def create_tabs(
        self,
        chat_id,  # type: str
        body,  # type: "models.MicrosoftGraphTeamsTab"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphTeamsTab"
        """Create new navigation property to tabs for chats.

        Create new navigation property to tabs for chats.

        :param chat_id: key: id of chat.
        :type chat_id: str
        :param body: New navigation property.
        :type body: ~teams.models.MicrosoftGraphTeamsTab
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphTeamsTab, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphTeamsTab
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphTeamsTab"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_tabs.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphTeamsTab')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphTeamsTab', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_tabs.metadata = {'url': '/chats/{chat-id}/tabs'}  # type: ignore

    def get_tabs(
        self,
        chat_id,  # type: str
        teams_tab_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum49"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum50"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphTeamsTab"
        """Get tabs from chats.

        Get tabs from chats.

        :param chat_id: key: id of chat.
        :type chat_id: str
        :param teams_tab_id: key: id of teamsTab.
        :type teams_tab_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum49]
        :param expand: Expand related entities.
        :type expand: list[str or ~teams.models.Enum50]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphTeamsTab, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphTeamsTab
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphTeamsTab"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_tabs.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'teamsTab-id': self._serialize.url("teams_tab_id", teams_tab_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphTeamsTab', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_tabs.metadata = {'url': '/chats/{chat-id}/tabs/{teamsTab-id}'}  # type: ignore

    def update_tabs(
        self,
        chat_id,  # type: str
        teams_tab_id,  # type: str
        body,  # type: "models.MicrosoftGraphTeamsTab"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property tabs in chats.

        Update the navigation property tabs in chats.

        :param chat_id: key: id of chat.
        :type chat_id: str
        :param teams_tab_id: key: id of teamsTab.
        :type teams_tab_id: str
        :param body: New navigation property values.
        :type body: ~teams.models.MicrosoftGraphTeamsTab
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_tabs.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'teamsTab-id': self._serialize.url("teams_tab_id", teams_tab_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphTeamsTab')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_tabs.metadata = {'url': '/chats/{chat-id}/tabs/{teamsTab-id}'}  # type: ignore

    def delete_tabs(
        self,
        chat_id,  # type: str
        teams_tab_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property tabs for chats.

        Delete navigation property tabs for chats.

        :param chat_id: key: id of chat.
        :type chat_id: str
        :param teams_tab_id: key: id of teamsTab.
        :type teams_tab_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_tabs.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'teamsTab-id': self._serialize.url("teams_tab_id", teams_tab_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_tabs.metadata = {'url': '/chats/{chat-id}/tabs/{teamsTab-id}'}  # type: ignore

    def all_messages(
        self,
        **kwargs  # type: Any
    ):
        # type: (...) -> List["models.MicrosoftGraphChatMessage"]
        """Invoke function allMessages.

        Invoke function allMessages.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MicrosoftGraphChatMessage, or the result of cls(response)
        :rtype: list[~teams.models.MicrosoftGraphChatMessage]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.MicrosoftGraphChatMessage"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.all_messages.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[MicrosoftGraphChatMessage]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    all_messages.metadata = {'url': '/chats/microsoft.graph.allMessages()'}  # type: ignore

    def get_all_messages(
        self,
        **kwargs  # type: Any
    ):
        # type: (...) -> List["models.MicrosoftGraphChatMessage"]
        """Invoke function getAllMessages.

        Invoke function getAllMessages.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MicrosoftGraphChatMessage, or the result of cls(response)
        :rtype: list[~teams.models.MicrosoftGraphChatMessage]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.MicrosoftGraphChatMessage"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_all_messages.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[MicrosoftGraphChatMessage]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_all_messages.metadata = {'url': '/chats/microsoft.graph.getAllMessages()'}  # type: ignore
