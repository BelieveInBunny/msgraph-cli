# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class Enum10(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime"
    LAST_UPDATED_DATE_TIME_DESC = "lastUpdatedDateTime desc"
    TOPIC = "topic"
    TOPIC_DESC = "topic desc"

class Enum11(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime"
    TOPIC = "topic"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class Enum12(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class Enum166(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CLASSIFICATION = "classification"
    CLASSIFICATION_DESC = "classification desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISCOVERY_SETTINGS = "discoverySettings"
    DISCOVERY_SETTINGS_DESC = "discoverySettings desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    FUN_SETTINGS = "funSettings"
    FUN_SETTINGS_DESC = "funSettings desc"
    GUEST_SETTINGS = "guestSettings"
    GUEST_SETTINGS_DESC = "guestSettings desc"
    INTERNAL_ID = "internalId"
    INTERNAL_ID_DESC = "internalId desc"
    IS_ARCHIVED = "isArchived"
    IS_ARCHIVED_DESC = "isArchived desc"
    IS_MEMBERSHIP_LIMITED_TO_OWNERS = "isMembershipLimitedToOwners"
    IS_MEMBERSHIP_LIMITED_TO_OWNERS_DESC = "isMembershipLimitedToOwners desc"
    MEMBER_SETTINGS = "memberSettings"
    MEMBER_SETTINGS_DESC = "memberSettings desc"
    MESSAGING_SETTINGS = "messagingSettings"
    MESSAGING_SETTINGS_DESC = "messagingSettings desc"
    SPECIALIZATION = "specialization"
    SPECIALIZATION_DESC = "specialization desc"
    VISIBILITY = "visibility"
    VISIBILITY_DESC = "visibility desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum167(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSIFICATION = "classification"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    DISCOVERY_SETTINGS = "discoverySettings"
    DISPLAY_NAME = "displayName"
    FUN_SETTINGS = "funSettings"
    GUEST_SETTINGS = "guestSettings"
    INTERNAL_ID = "internalId"
    IS_ARCHIVED = "isArchived"
    IS_MEMBERSHIP_LIMITED_TO_OWNERS = "isMembershipLimitedToOwners"
    MEMBER_SETTINGS = "memberSettings"
    MESSAGING_SETTINGS = "messagingSettings"
    SPECIALIZATION = "specialization"
    VISIBILITY = "visibility"
    WEB_URL = "webUrl"
    SCHEDULE = "schedule"
    CHANNELS = "channels"
    GROUP = "group"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    OPERATIONS = "operations"
    OWNERS = "owners"
    PHOTO = "photo"
    PRIMARY_CHANNEL = "primaryChannel"
    TEMPLATE = "template"

class Enum168(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SCHEDULE = "schedule"
    CHANNELS = "channels"
    GROUP = "group"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    OPERATIONS = "operations"
    OWNERS = "owners"
    PHOTO = "photo"
    PRIMARY_CHANNEL = "primaryChannel"
    TEMPLATE = "template"

class Enum169(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSIFICATION = "classification"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    DISCOVERY_SETTINGS = "discoverySettings"
    DISPLAY_NAME = "displayName"
    FUN_SETTINGS = "funSettings"
    GUEST_SETTINGS = "guestSettings"
    INTERNAL_ID = "internalId"
    IS_ARCHIVED = "isArchived"
    IS_MEMBERSHIP_LIMITED_TO_OWNERS = "isMembershipLimitedToOwners"
    MEMBER_SETTINGS = "memberSettings"
    MESSAGING_SETTINGS = "messagingSettings"
    SPECIALIZATION = "specialization"
    VISIBILITY = "visibility"
    WEB_URL = "webUrl"
    SCHEDULE = "schedule"
    CHANNELS = "channels"
    GROUP = "group"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    OPERATIONS = "operations"
    OWNERS = "owners"
    PHOTO = "photo"
    PRIMARY_CHANNEL = "primaryChannel"
    TEMPLATE = "template"

class Enum170(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SCHEDULE = "schedule"
    CHANNELS = "channels"
    GROUP = "group"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    OPERATIONS = "operations"
    OWNERS = "owners"
    PHOTO = "photo"
    PRIMARY_CHANNEL = "primaryChannel"
    TEMPLATE = "template"

class Enum171(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    EMAIL = "email"
    EMAIL_DESC = "email desc"
    IS_FAVORITE_BY_DEFAULT = "isFavoriteByDefault"
    IS_FAVORITE_BY_DEFAULT_DESC = "isFavoriteByDefault desc"
    MEMBERSHIP_TYPE = "membershipType"
    MEMBERSHIP_TYPE_DESC = "membershipType desc"
    MODERATION_SETTINGS = "moderationSettings"
    MODERATION_SETTINGS_DESC = "moderationSettings desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum172(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    EMAIL = "email"
    IS_FAVORITE_BY_DEFAULT = "isFavoriteByDefault"
    MEMBERSHIP_TYPE = "membershipType"
    MODERATION_SETTINGS = "moderationSettings"
    WEB_URL = "webUrl"
    FILES_FOLDER = "filesFolder"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class Enum173(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    FILES_FOLDER = "filesFolder"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class Enum174(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    EMAIL = "email"
    IS_FAVORITE_BY_DEFAULT = "isFavoriteByDefault"
    MEMBERSHIP_TYPE = "membershipType"
    MODERATION_SETTINGS = "moderationSettings"
    WEB_URL = "webUrl"
    FILES_FOLDER = "filesFolder"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class Enum175(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    FILES_FOLDER = "filesFolder"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class Enum176(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    E_TAG = "eTag"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    NAME = "name"
    PARENT_REFERENCE = "parentReference"
    WEB_URL = "webUrl"
    AUDIO = "audio"
    BUNDLE = "bundle"
    CONTENT = "content"
    C_TAG = "cTag"
    DELETED = "deleted"
    FILE = "file"
    FILE_SYSTEM_INFO = "fileSystemInfo"
    FOLDER = "folder"
    IMAGE = "image"
    LOCATION = "location"
    PACKAGE = "package"
    PENDING_OPERATIONS = "pendingOperations"
    PHOTO = "photo"
    PUBLICATION = "publication"
    REMOTE_ITEM = "remoteItem"
    ROOT = "root"
    SEARCH_RESULT = "searchResult"
    SHARED = "shared"
    SHAREPOINT_IDS = "sharepointIds"
    SIZE = "size"
    SPECIAL_FOLDER = "specialFolder"
    VIDEO = "video"
    WEB_DAV_URL = "webDavUrl"
    CREATED_BY_USER = "createdByUser"
    LAST_MODIFIED_BY_USER = "lastModifiedByUser"
    WORKBOOK = "workbook"
    ACTIVITIES = "activities"
    ANALYTICS = "analytics"
    CHILDREN = "children"
    LIST_ITEM = "listItem"
    PERMISSIONS = "permissions"
    SUBSCRIPTIONS = "subscriptions"
    THUMBNAILS = "thumbnails"
    VERSIONS = "versions"

class Enum177(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CREATED_BY_USER = "createdByUser"
    LAST_MODIFIED_BY_USER = "lastModifiedByUser"
    WORKBOOK = "workbook"
    ACTIVITIES = "activities"
    ANALYTICS = "analytics"
    CHILDREN = "children"
    LIST_ITEM = "listItem"
    PERMISSIONS = "permissions"
    SUBSCRIPTIONS = "subscriptions"
    THUMBNAILS = "thumbnails"
    VERSIONS = "versions"

class Enum178(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    ROLES = "roles"
    ROLES_DESC = "roles desc"

class Enum179(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    ROLES = "roles"

class Enum180(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    ROLES = "roles"

class Enum181(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    ATTACHMENTS = "attachments"
    ATTACHMENTS_DESC = "attachments desc"
    BODY = "body"
    BODY_DESC = "body desc"
    CHANNEL_IDENTITY = "channelIdentity"
    CHANNEL_IDENTITY_DESC = "channelIdentity desc"
    CHAT_ID = "chatId"
    CHAT_ID_DESC = "chatId desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    ETAG = "etag"
    ETAG_DESC = "etag desc"
    FROM_ENUM = "from"
    FROM_DESC = "from desc"
    IMPORTANCE = "importance"
    IMPORTANCE_DESC = "importance desc"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_EDITED_DATE_TIME_DESC = "lastEditedDateTime desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    LOCALE = "locale"
    LOCALE_DESC = "locale desc"
    MENTIONS = "mentions"
    MENTIONS_DESC = "mentions desc"
    MESSAGE_TYPE = "messageType"
    MESSAGE_TYPE_DESC = "messageType desc"
    POLICY_VIOLATION = "policyViolation"
    POLICY_VIOLATION_DESC = "policyViolation desc"
    REACTIONS = "reactions"
    REACTIONS_DESC = "reactions desc"
    REPLY_TO_ID = "replyToId"
    REPLY_TO_ID_DESC = "replyToId desc"
    SUBJECT = "subject"
    SUBJECT_DESC = "subject desc"
    SUMMARY = "summary"
    SUMMARY_DESC = "summary desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum182(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTACHMENTS = "attachments"
    BODY = "body"
    CHANNEL_IDENTITY = "channelIdentity"
    CHAT_ID = "chatId"
    CREATED_DATE_TIME = "createdDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    ETAG = "etag"
    FROM_ENUM = "from"
    IMPORTANCE = "importance"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LOCALE = "locale"
    MENTIONS = "mentions"
    MESSAGE_TYPE = "messageType"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    REPLY_TO_ID = "replyToId"
    SUBJECT = "subject"
    SUMMARY = "summary"
    WEB_URL = "webUrl"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum183(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum184(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTACHMENTS = "attachments"
    BODY = "body"
    CHANNEL_IDENTITY = "channelIdentity"
    CHAT_ID = "chatId"
    CREATED_DATE_TIME = "createdDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    ETAG = "etag"
    FROM_ENUM = "from"
    IMPORTANCE = "importance"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LOCALE = "locale"
    MENTIONS = "mentions"
    MESSAGE_TYPE = "messageType"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    REPLY_TO_ID = "replyToId"
    SUBJECT = "subject"
    SUMMARY = "summary"
    WEB_URL = "webUrl"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum185(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum186(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CONTENT_BYTES = "contentBytes"
    CONTENT_BYTES_DESC = "contentBytes desc"
    CONTENT_TYPE = "contentType"
    CONTENT_TYPE_DESC = "contentType desc"

class Enum187(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONTENT_BYTES = "contentBytes"
    CONTENT_TYPE = "contentType"

class Enum188(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONTENT_BYTES = "contentBytes"
    CONTENT_TYPE = "contentType"

class Enum189(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    ATTACHMENTS = "attachments"
    ATTACHMENTS_DESC = "attachments desc"
    BODY = "body"
    BODY_DESC = "body desc"
    CHANNEL_IDENTITY = "channelIdentity"
    CHANNEL_IDENTITY_DESC = "channelIdentity desc"
    CHAT_ID = "chatId"
    CHAT_ID_DESC = "chatId desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    ETAG = "etag"
    ETAG_DESC = "etag desc"
    FROM_ENUM = "from"
    FROM_DESC = "from desc"
    IMPORTANCE = "importance"
    IMPORTANCE_DESC = "importance desc"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_EDITED_DATE_TIME_DESC = "lastEditedDateTime desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    LOCALE = "locale"
    LOCALE_DESC = "locale desc"
    MENTIONS = "mentions"
    MENTIONS_DESC = "mentions desc"
    MESSAGE_TYPE = "messageType"
    MESSAGE_TYPE_DESC = "messageType desc"
    POLICY_VIOLATION = "policyViolation"
    POLICY_VIOLATION_DESC = "policyViolation desc"
    REACTIONS = "reactions"
    REACTIONS_DESC = "reactions desc"
    REPLY_TO_ID = "replyToId"
    REPLY_TO_ID_DESC = "replyToId desc"
    SUBJECT = "subject"
    SUBJECT_DESC = "subject desc"
    SUMMARY = "summary"
    SUMMARY_DESC = "summary desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum19(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime"
    TOPIC = "topic"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class Enum190(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTACHMENTS = "attachments"
    BODY = "body"
    CHANNEL_IDENTITY = "channelIdentity"
    CHAT_ID = "chatId"
    CREATED_DATE_TIME = "createdDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    ETAG = "etag"
    FROM_ENUM = "from"
    IMPORTANCE = "importance"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LOCALE = "locale"
    MENTIONS = "mentions"
    MESSAGE_TYPE = "messageType"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    REPLY_TO_ID = "replyToId"
    SUBJECT = "subject"
    SUMMARY = "summary"
    WEB_URL = "webUrl"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum191(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum192(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTACHMENTS = "attachments"
    BODY = "body"
    CHANNEL_IDENTITY = "channelIdentity"
    CHAT_ID = "chatId"
    CREATED_DATE_TIME = "createdDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    ETAG = "etag"
    FROM_ENUM = "from"
    IMPORTANCE = "importance"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LOCALE = "locale"
    MENTIONS = "mentions"
    MESSAGE_TYPE = "messageType"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    REPLY_TO_ID = "replyToId"
    SUBJECT = "subject"
    SUMMARY = "summary"
    WEB_URL = "webUrl"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum193(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum194(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CONFIGURATION = "configuration"
    CONFIGURATION_DESC = "configuration desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    MESSAGE_ID = "messageId"
    MESSAGE_ID_DESC = "messageId desc"
    SORT_ORDER_INDEX = "sortOrderIndex"
    SORT_ORDER_INDEX_DESC = "sortOrderIndex desc"
    TEAMS_APP_ID = "teamsAppId"
    TEAMS_APP_ID_DESC = "teamsAppId desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum195(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONFIGURATION = "configuration"
    DISPLAY_NAME = "displayName"
    MESSAGE_ID = "messageId"
    SORT_ORDER_INDEX = "sortOrderIndex"
    TEAMS_APP_ID = "teamsAppId"
    WEB_URL = "webUrl"
    TEAMS_APP = "teamsApp"

class Enum196(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TEAMS_APP = "teamsApp"

class Enum197(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONFIGURATION = "configuration"
    DISPLAY_NAME = "displayName"
    MESSAGE_ID = "messageId"
    SORT_ORDER_INDEX = "sortOrderIndex"
    TEAMS_APP_ID = "teamsAppId"
    WEB_URL = "webUrl"
    TEAMS_APP = "teamsApp"

class Enum198(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TEAMS_APP = "teamsApp"

class Enum199(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DISTRIBUTION_METHOD = "distributionMethod"
    EXTERNAL_ID = "externalId"
    APP_DEFINITIONS = "appDefinitions"

class Enum20(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class Enum200(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APP_DEFINITIONS = "appDefinitions"

class Enum201(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    ASSIGNED_LABELS = "assignedLabels"
    ASSIGNED_LICENSES = "assignedLicenses"
    CLASSIFICATION = "classification"
    CREATED_BY_APP_ID = "createdByAppId"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    EXPIRATION_DATE_TIME = "expirationDateTime"
    GROUP_TYPES = "groupTypes"
    HAS_MEMBERS_WITH_LICENSE_ERRORS = "hasMembersWithLicenseErrors"
    INFO_CATALOGS = "infoCatalogs"
    IS_ASSIGNABLE_TO_ROLE = "isAssignableToRole"
    LICENSE_PROCESSING_STATE = "licenseProcessingState"
    MAIL = "mail"
    MAIL_ENABLED = "mailEnabled"
    MAIL_NICKNAME = "mailNickname"
    MDM_APP_ID = "mdmAppId"
    MEMBERSHIP_RULE = "membershipRule"
    MEMBERSHIP_RULE_PROCESSING_STATE = "membershipRuleProcessingState"
    ON_PREMISES_DOMAIN_NAME = "onPremisesDomainName"
    ON_PREMISES_LAST_SYNC_DATE_TIME = "onPremisesLastSyncDateTime"
    ON_PREMISES_NET_BIOS_NAME = "onPremisesNetBiosName"
    ON_PREMISES_PROVISIONING_ERRORS = "onPremisesProvisioningErrors"
    ON_PREMISES_SAM_ACCOUNT_NAME = "onPremisesSamAccountName"
    ON_PREMISES_SECURITY_IDENTIFIER = "onPremisesSecurityIdentifier"
    ON_PREMISES_SYNC_ENABLED = "onPremisesSyncEnabled"
    PREFERRED_DATA_LOCATION = "preferredDataLocation"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PROXY_ADDRESSES = "proxyAddresses"
    RENEWED_DATE_TIME = "renewedDateTime"
    RESOURCE_BEHAVIOR_OPTIONS = "resourceBehaviorOptions"
    RESOURCE_PROVISIONING_OPTIONS = "resourceProvisioningOptions"
    SECURITY_ENABLED = "securityEnabled"
    SECURITY_IDENTIFIER = "securityIdentifier"
    THEME = "theme"
    VISIBILITY = "visibility"
    ACCESS_TYPE = "accessType"
    ALLOW_EXTERNAL_SENDERS = "allowExternalSenders"
    AUTO_SUBSCRIBE_NEW_MEMBERS = "autoSubscribeNewMembers"
    HIDE_FROM_ADDRESS_LISTS = "hideFromAddressLists"
    HIDE_FROM_OUTLOOK_CLIENTS = "hideFromOutlookClients"
    IS_FAVORITE = "isFavorite"
    IS_SUBSCRIBED_BY_MAIL = "isSubscribedByMail"
    UNSEEN_CONVERSATIONS_COUNT = "unseenConversationsCount"
    UNSEEN_COUNT = "unseenCount"
    UNSEEN_MESSAGES_COUNT = "unseenMessagesCount"
    IS_ARCHIVED = "isArchived"
    APP_ROLE_ASSIGNMENTS = "appRoleAssignments"
    CREATED_ON_BEHALF_OF = "createdOnBehalfOf"
    ENDPOINTS = "endpoints"
    MEMBER_OF = "memberOf"
    MEMBERS = "members"
    MEMBERS_WITH_LICENSE_ERRORS = "membersWithLicenseErrors"
    OWNERS = "owners"
    PERMISSION_GRANTS = "permissionGrants"
    SETTINGS = "settings"
    TRANSITIVE_MEMBER_OF = "transitiveMemberOf"
    TRANSITIVE_MEMBERS = "transitiveMembers"
    ACCEPTED_SENDERS = "acceptedSenders"
    CALENDAR = "calendar"
    CALENDAR_VIEW = "calendarView"
    CONVERSATIONS = "conversations"
    EVENTS = "events"
    PHOTO = "photo"
    PHOTOS = "photos"
    REJECTED_SENDERS = "rejectedSenders"
    THREADS = "threads"
    DRIVE = "drive"
    DRIVES = "drives"
    SITES = "sites"
    EXTENSIONS = "extensions"
    GROUP_LIFECYCLE_POLICIES = "groupLifecyclePolicies"
    PLANNER = "planner"
    ONENOTE = "onenote"
    TEAM = "team"

class Enum202(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APP_ROLE_ASSIGNMENTS = "appRoleAssignments"
    CREATED_ON_BEHALF_OF = "createdOnBehalfOf"
    ENDPOINTS = "endpoints"
    MEMBER_OF = "memberOf"
    MEMBERS = "members"
    MEMBERS_WITH_LICENSE_ERRORS = "membersWithLicenseErrors"
    OWNERS = "owners"
    PERMISSION_GRANTS = "permissionGrants"
    SETTINGS = "settings"
    TRANSITIVE_MEMBER_OF = "transitiveMemberOf"
    TRANSITIVE_MEMBERS = "transitiveMembers"
    ACCEPTED_SENDERS = "acceptedSenders"
    CALENDAR = "calendar"
    CALENDAR_VIEW = "calendarView"
    CONVERSATIONS = "conversations"
    EVENTS = "events"
    PHOTO = "photo"
    PHOTOS = "photos"
    REJECTED_SENDERS = "rejectedSenders"
    THREADS = "threads"
    DRIVE = "drive"
    DRIVES = "drives"
    SITES = "sites"
    EXTENSIONS = "extensions"
    GROUP_LIFECYCLE_POLICIES = "groupLifecyclePolicies"
    PLANNER = "planner"
    ONENOTE = "onenote"
    TEAM = "team"

class Enum203(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"

class Enum204(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    TEAMS_APP = "teamsApp"
    TEAMS_APP_DEFINITION = "teamsAppDefinition"

class Enum205(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TEAMS_APP = "teamsApp"
    TEAMS_APP_DEFINITION = "teamsAppDefinition"

class Enum206(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    TEAMS_APP = "teamsApp"
    TEAMS_APP_DEFINITION = "teamsAppDefinition"

class Enum207(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TEAMS_APP = "teamsApp"
    TEAMS_APP_DEFINITION = "teamsAppDefinition"

class Enum208(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DISTRIBUTION_METHOD = "distributionMethod"
    EXTERNAL_ID = "externalId"
    APP_DEFINITIONS = "appDefinitions"

class Enum209(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APP_DEFINITIONS = "appDefinitions"

class Enum21(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"

class Enum210(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    AZURE_AD_APP_ID = "azureADAppId"
    CREATED_BY = "createdBy"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    PUBLISHING_STATE = "publishingState"
    SHORTDESCRIPTION = "shortdescription"
    TEAMS_APP_ID = "teamsAppId"
    VERSION = "version"

class Enum211(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    ROLES = "roles"
    ROLES_DESC = "roles desc"

class Enum212(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    ROLES = "roles"

class Enum213(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    ROLES = "roles"

class Enum215(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    ATTEMPTS_COUNT = "attemptsCount"
    ATTEMPTS_COUNT_DESC = "attemptsCount desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    ERROR = "error"
    ERROR_DESC = "error desc"
    LAST_ACTION_DATE_TIME = "lastActionDateTime"
    LAST_ACTION_DATE_TIME_DESC = "lastActionDateTime desc"
    OPERATION_TYPE = "operationType"
    OPERATION_TYPE_DESC = "operationType desc"
    STATUS = "status"
    STATUS_DESC = "status desc"
    TARGET_RESOURCE_ID = "targetResourceId"
    TARGET_RESOURCE_ID_DESC = "targetResourceId desc"
    TARGET_RESOURCE_LOCATION = "targetResourceLocation"
    TARGET_RESOURCE_LOCATION_DESC = "targetResourceLocation desc"

class Enum216(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTEMPTS_COUNT = "attemptsCount"
    CREATED_DATE_TIME = "createdDateTime"
    ERROR = "error"
    LAST_ACTION_DATE_TIME = "lastActionDateTime"
    OPERATION_TYPE = "operationType"
    STATUS = "status"
    TARGET_RESOURCE_ID = "targetResourceId"
    TARGET_RESOURCE_LOCATION = "targetResourceLocation"

class Enum217(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTEMPTS_COUNT = "attemptsCount"
    CREATED_DATE_TIME = "createdDateTime"
    ERROR = "error"
    LAST_ACTION_DATE_TIME = "lastActionDateTime"
    OPERATION_TYPE = "operationType"
    STATUS = "status"
    TARGET_RESOURCE_ID = "targetResourceId"
    TARGET_RESOURCE_LOCATION = "targetResourceLocation"

class Enum218(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    SIGN_IN_ACTIVITY = "signInActivity"
    SIGN_IN_ACTIVITY_DESC = "signInActivity desc"
    ACCOUNT_ENABLED = "accountEnabled"
    ACCOUNT_ENABLED_DESC = "accountEnabled desc"
    AGE_GROUP = "ageGroup"
    AGE_GROUP_DESC = "ageGroup desc"
    ASSIGNED_LICENSES = "assignedLicenses"
    ASSIGNED_LICENSES_DESC = "assignedLicenses desc"
    ASSIGNED_PLANS = "assignedPlans"
    ASSIGNED_PLANS_DESC = "assignedPlans desc"
    BUSINESS_PHONES = "businessPhones"
    BUSINESS_PHONES_DESC = "businessPhones desc"
    CITY = "city"
    CITY_DESC = "city desc"
    COMPANY_NAME = "companyName"
    COMPANY_NAME_DESC = "companyName desc"
    CONSENT_PROVIDED_FOR_MINOR = "consentProvidedForMinor"
    CONSENT_PROVIDED_FOR_MINOR_DESC = "consentProvidedForMinor desc"
    COUNTRY = "country"
    COUNTRY_DESC = "country desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    CREATION_TYPE = "creationType"
    CREATION_TYPE_DESC = "creationType desc"
    DEPARTMENT = "department"
    DEPARTMENT_DESC = "department desc"
    DEVICE_KEYS = "deviceKeys"
    DEVICE_KEYS_DESC = "deviceKeys desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    EMPLOYEE_HIRE_DATE = "employeeHireDate"
    EMPLOYEE_HIRE_DATE_DESC = "employeeHireDate desc"
    EMPLOYEE_ID = "employeeId"
    EMPLOYEE_ID_DESC = "employeeId desc"
    EMPLOYEE_ORG_DATA = "employeeOrgData"
    EMPLOYEE_ORG_DATA_DESC = "employeeOrgData desc"
    EMPLOYEE_TYPE = "employeeType"
    EMPLOYEE_TYPE_DESC = "employeeType desc"
    EXTERNAL_USER_STATE = "externalUserState"
    EXTERNAL_USER_STATE_DESC = "externalUserState desc"
    EXTERNAL_USER_STATE_CHANGE_DATE_TIME = "externalUserStateChangeDateTime"
    EXTERNAL_USER_STATE_CHANGE_DATE_TIME_DESC = "externalUserStateChangeDateTime desc"
    FAX_NUMBER = "faxNumber"
    FAX_NUMBER_DESC = "faxNumber desc"
    GIVEN_NAME = "givenName"
    GIVEN_NAME_DESC = "givenName desc"
    IDENTITIES = "identities"
    IDENTITIES_DESC = "identities desc"
    IM_ADDRESSES = "imAddresses"
    IM_ADDRESSES_DESC = "imAddresses desc"
    INFO_CATALOGS = "infoCatalogs"
    INFO_CATALOGS_DESC = "infoCatalogs desc"
    IS_RESOURCE_ACCOUNT = "isResourceAccount"
    IS_RESOURCE_ACCOUNT_DESC = "isResourceAccount desc"
    JOB_TITLE = "jobTitle"
    JOB_TITLE_DESC = "jobTitle desc"
    LAST_PASSWORD_CHANGE_DATE_TIME = "lastPasswordChangeDateTime"
    LAST_PASSWORD_CHANGE_DATE_TIME_DESC = "lastPasswordChangeDateTime desc"
    LEGAL_AGE_GROUP_CLASSIFICATION = "legalAgeGroupClassification"
    LEGAL_AGE_GROUP_CLASSIFICATION_DESC = "legalAgeGroupClassification desc"
    LICENSE_ASSIGNMENT_STATES = "licenseAssignmentStates"
    LICENSE_ASSIGNMENT_STATES_DESC = "licenseAssignmentStates desc"
    MAIL = "mail"
    MAIL_DESC = "mail desc"
    MAIL_NICKNAME = "mailNickname"
    MAIL_NICKNAME_DESC = "mailNickname desc"
    MOBILE_PHONE = "mobilePhone"
    MOBILE_PHONE_DESC = "mobilePhone desc"
    OFFICE_LOCATION = "officeLocation"
    OFFICE_LOCATION_DESC = "officeLocation desc"
    ON_PREMISES_DISTINGUISHED_NAME = "onPremisesDistinguishedName"
    ON_PREMISES_DISTINGUISHED_NAME_DESC = "onPremisesDistinguishedName desc"
    ON_PREMISES_DOMAIN_NAME = "onPremisesDomainName"
    ON_PREMISES_DOMAIN_NAME_DESC = "onPremisesDomainName desc"
    ON_PREMISES_EXTENSION_ATTRIBUTES = "onPremisesExtensionAttributes"
    ON_PREMISES_EXTENSION_ATTRIBUTES_DESC = "onPremisesExtensionAttributes desc"
    ON_PREMISES_IMMUTABLE_ID = "onPremisesImmutableId"
    ON_PREMISES_IMMUTABLE_ID_DESC = "onPremisesImmutableId desc"
    ON_PREMISES_LAST_SYNC_DATE_TIME = "onPremisesLastSyncDateTime"
    ON_PREMISES_LAST_SYNC_DATE_TIME_DESC = "onPremisesLastSyncDateTime desc"
    ON_PREMISES_PROVISIONING_ERRORS = "onPremisesProvisioningErrors"
    ON_PREMISES_PROVISIONING_ERRORS_DESC = "onPremisesProvisioningErrors desc"
    ON_PREMISES_SAM_ACCOUNT_NAME = "onPremisesSamAccountName"
    ON_PREMISES_SAM_ACCOUNT_NAME_DESC = "onPremisesSamAccountName desc"
    ON_PREMISES_SECURITY_IDENTIFIER = "onPremisesSecurityIdentifier"
    ON_PREMISES_SECURITY_IDENTIFIER_DESC = "onPremisesSecurityIdentifier desc"
    ON_PREMISES_SYNC_ENABLED = "onPremisesSyncEnabled"
    ON_PREMISES_SYNC_ENABLED_DESC = "onPremisesSyncEnabled desc"
    ON_PREMISES_USER_PRINCIPAL_NAME = "onPremisesUserPrincipalName"
    ON_PREMISES_USER_PRINCIPAL_NAME_DESC = "onPremisesUserPrincipalName desc"
    OTHER_MAILS = "otherMails"
    OTHER_MAILS_DESC = "otherMails desc"
    PASSWORD_POLICIES = "passwordPolicies"
    PASSWORD_POLICIES_DESC = "passwordPolicies desc"
    PASSWORD_PROFILE = "passwordProfile"
    PASSWORD_PROFILE_DESC = "passwordProfile desc"
    POSTAL_CODE = "postalCode"
    POSTAL_CODE_DESC = "postalCode desc"
    PREFERRED_DATA_LOCATION = "preferredDataLocation"
    PREFERRED_DATA_LOCATION_DESC = "preferredDataLocation desc"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PREFERRED_LANGUAGE_DESC = "preferredLanguage desc"
    PROVISIONED_PLANS = "provisionedPlans"
    PROVISIONED_PLANS_DESC = "provisionedPlans desc"
    PROXY_ADDRESSES = "proxyAddresses"
    PROXY_ADDRESSES_DESC = "proxyAddresses desc"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME = "refreshTokensValidFromDateTime"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME_DESC = "refreshTokensValidFromDateTime desc"
    SHOW_IN_ADDRESS_LIST = "showInAddressList"
    SHOW_IN_ADDRESS_LIST_DESC = "showInAddressList desc"
    SIGN_IN_SESSIONS_VALID_FROM_DATE_TIME = "signInSessionsValidFromDateTime"
    SIGN_IN_SESSIONS_VALID_FROM_DATE_TIME_DESC = "signInSessionsValidFromDateTime desc"
    STATE = "state"
    STATE_DESC = "state desc"
    STREET_ADDRESS = "streetAddress"
    STREET_ADDRESS_DESC = "streetAddress desc"
    SURNAME = "surname"
    SURNAME_DESC = "surname desc"
    USAGE_LOCATION = "usageLocation"
    USAGE_LOCATION_DESC = "usageLocation desc"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_PRINCIPAL_NAME_DESC = "userPrincipalName desc"
    USER_TYPE = "userType"
    USER_TYPE_DESC = "userType desc"
    MAILBOX_SETTINGS = "mailboxSettings"
    MAILBOX_SETTINGS_DESC = "mailboxSettings desc"
    DEVICE_ENROLLMENT_LIMIT = "deviceEnrollmentLimit"
    DEVICE_ENROLLMENT_LIMIT_DESC = "deviceEnrollmentLimit desc"
    ABOUT_ME = "aboutMe"
    ABOUT_ME_DESC = "aboutMe desc"
    BIRTHDAY = "birthday"
    BIRTHDAY_DESC = "birthday desc"
    HIRE_DATE = "hireDate"
    HIRE_DATE_DESC = "hireDate desc"
    INTERESTS = "interests"
    INTERESTS_DESC = "interests desc"
    MY_SITE = "mySite"
    MY_SITE_DESC = "mySite desc"
    PAST_PROJECTS = "pastProjects"
    PAST_PROJECTS_DESC = "pastProjects desc"
    PREFERRED_NAME = "preferredName"
    PREFERRED_NAME_DESC = "preferredName desc"
    RESPONSIBILITIES = "responsibilities"
    RESPONSIBILITIES_DESC = "responsibilities desc"
    SCHOOLS = "schools"
    SCHOOLS_DESC = "schools desc"
    SKILLS = "skills"
    SKILLS_DESC = "skills desc"

class Enum219(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    SIGN_IN_ACTIVITY = "signInActivity"
    ACCOUNT_ENABLED = "accountEnabled"
    AGE_GROUP = "ageGroup"
    ASSIGNED_LICENSES = "assignedLicenses"
    ASSIGNED_PLANS = "assignedPlans"
    BUSINESS_PHONES = "businessPhones"
    CITY = "city"
    COMPANY_NAME = "companyName"
    CONSENT_PROVIDED_FOR_MINOR = "consentProvidedForMinor"
    COUNTRY = "country"
    CREATED_DATE_TIME = "createdDateTime"
    CREATION_TYPE = "creationType"
    DEPARTMENT = "department"
    DEVICE_KEYS = "deviceKeys"
    DISPLAY_NAME = "displayName"
    EMPLOYEE_HIRE_DATE = "employeeHireDate"
    EMPLOYEE_ID = "employeeId"
    EMPLOYEE_ORG_DATA = "employeeOrgData"
    EMPLOYEE_TYPE = "employeeType"
    EXTERNAL_USER_STATE = "externalUserState"
    EXTERNAL_USER_STATE_CHANGE_DATE_TIME = "externalUserStateChangeDateTime"
    FAX_NUMBER = "faxNumber"
    GIVEN_NAME = "givenName"
    IDENTITIES = "identities"
    IM_ADDRESSES = "imAddresses"
    INFO_CATALOGS = "infoCatalogs"
    IS_RESOURCE_ACCOUNT = "isResourceAccount"
    JOB_TITLE = "jobTitle"
    LAST_PASSWORD_CHANGE_DATE_TIME = "lastPasswordChangeDateTime"
    LEGAL_AGE_GROUP_CLASSIFICATION = "legalAgeGroupClassification"
    LICENSE_ASSIGNMENT_STATES = "licenseAssignmentStates"
    MAIL = "mail"
    MAIL_NICKNAME = "mailNickname"
    MOBILE_PHONE = "mobilePhone"
    OFFICE_LOCATION = "officeLocation"
    ON_PREMISES_DISTINGUISHED_NAME = "onPremisesDistinguishedName"
    ON_PREMISES_DOMAIN_NAME = "onPremisesDomainName"
    ON_PREMISES_EXTENSION_ATTRIBUTES = "onPremisesExtensionAttributes"
    ON_PREMISES_IMMUTABLE_ID = "onPremisesImmutableId"
    ON_PREMISES_LAST_SYNC_DATE_TIME = "onPremisesLastSyncDateTime"
    ON_PREMISES_PROVISIONING_ERRORS = "onPremisesProvisioningErrors"
    ON_PREMISES_SAM_ACCOUNT_NAME = "onPremisesSamAccountName"
    ON_PREMISES_SECURITY_IDENTIFIER = "onPremisesSecurityIdentifier"
    ON_PREMISES_SYNC_ENABLED = "onPremisesSyncEnabled"
    ON_PREMISES_USER_PRINCIPAL_NAME = "onPremisesUserPrincipalName"
    OTHER_MAILS = "otherMails"
    PASSWORD_POLICIES = "passwordPolicies"
    PASSWORD_PROFILE = "passwordProfile"
    POSTAL_CODE = "postalCode"
    PREFERRED_DATA_LOCATION = "preferredDataLocation"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PROVISIONED_PLANS = "provisionedPlans"
    PROXY_ADDRESSES = "proxyAddresses"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME = "refreshTokensValidFromDateTime"
    SHOW_IN_ADDRESS_LIST = "showInAddressList"
    SIGN_IN_SESSIONS_VALID_FROM_DATE_TIME = "signInSessionsValidFromDateTime"
    STATE = "state"
    STREET_ADDRESS = "streetAddress"
    SURNAME = "surname"
    USAGE_LOCATION = "usageLocation"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_TYPE = "userType"
    MAILBOX_SETTINGS = "mailboxSettings"
    DEVICE_ENROLLMENT_LIMIT = "deviceEnrollmentLimit"
    ABOUT_ME = "aboutMe"
    BIRTHDAY = "birthday"
    HIRE_DATE = "hireDate"
    INTERESTS = "interests"
    MY_SITE = "mySite"
    PAST_PROJECTS = "pastProjects"
    PREFERRED_NAME = "preferredName"
    RESPONSIBILITIES = "responsibilities"
    SCHOOLS = "schools"
    SKILLS = "skills"
    ANALYTICS = "analytics"
    INFORMATION_PROTECTION = "informationProtection"
    APP_ROLE_ASSIGNMENTS = "appRoleAssignments"
    CREATED_OBJECTS = "createdObjects"
    DIRECT_REPORTS = "directReports"
    LICENSE_DETAILS = "licenseDetails"
    MANAGER = "manager"
    MEMBER_OF = "memberOf"
    OWNED_DEVICES = "ownedDevices"
    OWNED_OBJECTS = "ownedObjects"
    REGISTERED_DEVICES = "registeredDevices"
    SCOPED_ROLE_MEMBER_OF = "scopedRoleMemberOf"
    TRANSITIVE_MEMBER_OF = "transitiveMemberOf"
    CALENDAR = "calendar"
    CALENDAR_GROUPS = "calendarGroups"
    CALENDARS = "calendars"
    CALENDAR_VIEW = "calendarView"
    CONTACT_FOLDERS = "contactFolders"
    CONTACTS = "contacts"
    EVENTS = "events"
    INFERENCE_CLASSIFICATION = "inferenceClassification"
    JOINED_GROUPS = "joinedGroups"
    MAIL_FOLDERS = "mailFolders"
    MESSAGES = "messages"
    OUTLOOK = "outlook"
    PEOPLE = "people"
    PHOTO = "photo"
    PHOTOS = "photos"
    DRIVE = "drive"
    DRIVES = "drives"
    FOLLOWED_SITES = "followedSites"
    EXTENSIONS = "extensions"
    APP_CONSENT_REQUESTS_FOR_APPROVAL = "appConsentRequestsForApproval"
    APPROVALS = "approvals"
    PENDING_ACCESS_REVIEW_INSTANCES = "pendingAccessReviewInstances"
    AGREEMENT_ACCEPTANCES = "agreementAcceptances"
    DEVICE_ENROLLMENT_CONFIGURATIONS = "deviceEnrollmentConfigurations"
    MANAGED_DEVICES = "managedDevices"
    MANAGED_APP_REGISTRATIONS = "managedAppRegistrations"
    WINDOWS_INFORMATION_PROTECTION_DEVICE_REGISTRATIONS = "windowsInformationProtectionDeviceRegistrations"
    DEVICE_MANAGEMENT_TROUBLESHOOTING_EVENTS = "deviceManagementTroubleshootingEvents"
    MOBILE_APP_INTENT_AND_STATES = "mobileAppIntentAndStates"
    MOBILE_APP_TROUBLESHOOTING_EVENTS = "mobileAppTroubleshootingEvents"
    NOTIFICATIONS = "notifications"
    PLANNER = "planner"
    INSIGHTS = "insights"
    SETTINGS = "settings"
    ONENOTE = "onenote"
    PROFILE = "profile"
    ACTIVITIES = "activities"
    DEVICES = "devices"
    ONLINE_MEETINGS = "onlineMeetings"
    PRESENCE = "presence"
    AUTHENTICATION = "authentication"
    CHATS = "chats"
    JOINED_TEAMS = "joinedTeams"
    TEAMWORK = "teamwork"
    TODO = "todo"

class Enum22(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    TEAMS_APP = "teamsApp"
    TEAMS_APP_DEFINITION = "teamsAppDefinition"

class Enum220(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ANALYTICS = "analytics"
    INFORMATION_PROTECTION = "informationProtection"
    APP_ROLE_ASSIGNMENTS = "appRoleAssignments"
    CREATED_OBJECTS = "createdObjects"
    DIRECT_REPORTS = "directReports"
    LICENSE_DETAILS = "licenseDetails"
    MANAGER = "manager"
    MEMBER_OF = "memberOf"
    OWNED_DEVICES = "ownedDevices"
    OWNED_OBJECTS = "ownedObjects"
    REGISTERED_DEVICES = "registeredDevices"
    SCOPED_ROLE_MEMBER_OF = "scopedRoleMemberOf"
    TRANSITIVE_MEMBER_OF = "transitiveMemberOf"
    CALENDAR = "calendar"
    CALENDAR_GROUPS = "calendarGroups"
    CALENDARS = "calendars"
    CALENDAR_VIEW = "calendarView"
    CONTACT_FOLDERS = "contactFolders"
    CONTACTS = "contacts"
    EVENTS = "events"
    INFERENCE_CLASSIFICATION = "inferenceClassification"
    JOINED_GROUPS = "joinedGroups"
    MAIL_FOLDERS = "mailFolders"
    MESSAGES = "messages"
    OUTLOOK = "outlook"
    PEOPLE = "people"
    PHOTO = "photo"
    PHOTOS = "photos"
    DRIVE = "drive"
    DRIVES = "drives"
    FOLLOWED_SITES = "followedSites"
    EXTENSIONS = "extensions"
    APP_CONSENT_REQUESTS_FOR_APPROVAL = "appConsentRequestsForApproval"
    APPROVALS = "approvals"
    PENDING_ACCESS_REVIEW_INSTANCES = "pendingAccessReviewInstances"
    AGREEMENT_ACCEPTANCES = "agreementAcceptances"
    DEVICE_ENROLLMENT_CONFIGURATIONS = "deviceEnrollmentConfigurations"
    MANAGED_DEVICES = "managedDevices"
    MANAGED_APP_REGISTRATIONS = "managedAppRegistrations"
    WINDOWS_INFORMATION_PROTECTION_DEVICE_REGISTRATIONS = "windowsInformationProtectionDeviceRegistrations"
    DEVICE_MANAGEMENT_TROUBLESHOOTING_EVENTS = "deviceManagementTroubleshootingEvents"
    MOBILE_APP_INTENT_AND_STATES = "mobileAppIntentAndStates"
    MOBILE_APP_TROUBLESHOOTING_EVENTS = "mobileAppTroubleshootingEvents"
    NOTIFICATIONS = "notifications"
    PLANNER = "planner"
    INSIGHTS = "insights"
    SETTINGS = "settings"
    ONENOTE = "onenote"
    PROFILE = "profile"
    ACTIVITIES = "activities"
    DEVICES = "devices"
    ONLINE_MEETINGS = "onlineMeetings"
    PRESENCE = "presence"
    AUTHENTICATION = "authentication"
    CHATS = "chats"
    JOINED_TEAMS = "joinedTeams"
    TEAMWORK = "teamwork"
    TODO = "todo"

class Enum221(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    SIGN_IN_ACTIVITY = "signInActivity"
    SIGN_IN_ACTIVITY_DESC = "signInActivity desc"
    ACCOUNT_ENABLED = "accountEnabled"
    ACCOUNT_ENABLED_DESC = "accountEnabled desc"
    AGE_GROUP = "ageGroup"
    AGE_GROUP_DESC = "ageGroup desc"
    ASSIGNED_LICENSES = "assignedLicenses"
    ASSIGNED_LICENSES_DESC = "assignedLicenses desc"
    ASSIGNED_PLANS = "assignedPlans"
    ASSIGNED_PLANS_DESC = "assignedPlans desc"
    BUSINESS_PHONES = "businessPhones"
    BUSINESS_PHONES_DESC = "businessPhones desc"
    CITY = "city"
    CITY_DESC = "city desc"
    COMPANY_NAME = "companyName"
    COMPANY_NAME_DESC = "companyName desc"
    CONSENT_PROVIDED_FOR_MINOR = "consentProvidedForMinor"
    CONSENT_PROVIDED_FOR_MINOR_DESC = "consentProvidedForMinor desc"
    COUNTRY = "country"
    COUNTRY_DESC = "country desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    CREATION_TYPE = "creationType"
    CREATION_TYPE_DESC = "creationType desc"
    DEPARTMENT = "department"
    DEPARTMENT_DESC = "department desc"
    DEVICE_KEYS = "deviceKeys"
    DEVICE_KEYS_DESC = "deviceKeys desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    EMPLOYEE_HIRE_DATE = "employeeHireDate"
    EMPLOYEE_HIRE_DATE_DESC = "employeeHireDate desc"
    EMPLOYEE_ID = "employeeId"
    EMPLOYEE_ID_DESC = "employeeId desc"
    EMPLOYEE_ORG_DATA = "employeeOrgData"
    EMPLOYEE_ORG_DATA_DESC = "employeeOrgData desc"
    EMPLOYEE_TYPE = "employeeType"
    EMPLOYEE_TYPE_DESC = "employeeType desc"
    EXTERNAL_USER_STATE = "externalUserState"
    EXTERNAL_USER_STATE_DESC = "externalUserState desc"
    EXTERNAL_USER_STATE_CHANGE_DATE_TIME = "externalUserStateChangeDateTime"
    EXTERNAL_USER_STATE_CHANGE_DATE_TIME_DESC = "externalUserStateChangeDateTime desc"
    FAX_NUMBER = "faxNumber"
    FAX_NUMBER_DESC = "faxNumber desc"
    GIVEN_NAME = "givenName"
    GIVEN_NAME_DESC = "givenName desc"
    IDENTITIES = "identities"
    IDENTITIES_DESC = "identities desc"
    IM_ADDRESSES = "imAddresses"
    IM_ADDRESSES_DESC = "imAddresses desc"
    INFO_CATALOGS = "infoCatalogs"
    INFO_CATALOGS_DESC = "infoCatalogs desc"
    IS_RESOURCE_ACCOUNT = "isResourceAccount"
    IS_RESOURCE_ACCOUNT_DESC = "isResourceAccount desc"
    JOB_TITLE = "jobTitle"
    JOB_TITLE_DESC = "jobTitle desc"
    LAST_PASSWORD_CHANGE_DATE_TIME = "lastPasswordChangeDateTime"
    LAST_PASSWORD_CHANGE_DATE_TIME_DESC = "lastPasswordChangeDateTime desc"
    LEGAL_AGE_GROUP_CLASSIFICATION = "legalAgeGroupClassification"
    LEGAL_AGE_GROUP_CLASSIFICATION_DESC = "legalAgeGroupClassification desc"
    LICENSE_ASSIGNMENT_STATES = "licenseAssignmentStates"
    LICENSE_ASSIGNMENT_STATES_DESC = "licenseAssignmentStates desc"
    MAIL = "mail"
    MAIL_DESC = "mail desc"
    MAIL_NICKNAME = "mailNickname"
    MAIL_NICKNAME_DESC = "mailNickname desc"
    MOBILE_PHONE = "mobilePhone"
    MOBILE_PHONE_DESC = "mobilePhone desc"
    OFFICE_LOCATION = "officeLocation"
    OFFICE_LOCATION_DESC = "officeLocation desc"
    ON_PREMISES_DISTINGUISHED_NAME = "onPremisesDistinguishedName"
    ON_PREMISES_DISTINGUISHED_NAME_DESC = "onPremisesDistinguishedName desc"
    ON_PREMISES_DOMAIN_NAME = "onPremisesDomainName"
    ON_PREMISES_DOMAIN_NAME_DESC = "onPremisesDomainName desc"
    ON_PREMISES_EXTENSION_ATTRIBUTES = "onPremisesExtensionAttributes"
    ON_PREMISES_EXTENSION_ATTRIBUTES_DESC = "onPremisesExtensionAttributes desc"
    ON_PREMISES_IMMUTABLE_ID = "onPremisesImmutableId"
    ON_PREMISES_IMMUTABLE_ID_DESC = "onPremisesImmutableId desc"
    ON_PREMISES_LAST_SYNC_DATE_TIME = "onPremisesLastSyncDateTime"
    ON_PREMISES_LAST_SYNC_DATE_TIME_DESC = "onPremisesLastSyncDateTime desc"
    ON_PREMISES_PROVISIONING_ERRORS = "onPremisesProvisioningErrors"
    ON_PREMISES_PROVISIONING_ERRORS_DESC = "onPremisesProvisioningErrors desc"
    ON_PREMISES_SAM_ACCOUNT_NAME = "onPremisesSamAccountName"
    ON_PREMISES_SAM_ACCOUNT_NAME_DESC = "onPremisesSamAccountName desc"
    ON_PREMISES_SECURITY_IDENTIFIER = "onPremisesSecurityIdentifier"
    ON_PREMISES_SECURITY_IDENTIFIER_DESC = "onPremisesSecurityIdentifier desc"
    ON_PREMISES_SYNC_ENABLED = "onPremisesSyncEnabled"
    ON_PREMISES_SYNC_ENABLED_DESC = "onPremisesSyncEnabled desc"
    ON_PREMISES_USER_PRINCIPAL_NAME = "onPremisesUserPrincipalName"
    ON_PREMISES_USER_PRINCIPAL_NAME_DESC = "onPremisesUserPrincipalName desc"
    OTHER_MAILS = "otherMails"
    OTHER_MAILS_DESC = "otherMails desc"
    PASSWORD_POLICIES = "passwordPolicies"
    PASSWORD_POLICIES_DESC = "passwordPolicies desc"
    PASSWORD_PROFILE = "passwordProfile"
    PASSWORD_PROFILE_DESC = "passwordProfile desc"
    POSTAL_CODE = "postalCode"
    POSTAL_CODE_DESC = "postalCode desc"
    PREFERRED_DATA_LOCATION = "preferredDataLocation"
    PREFERRED_DATA_LOCATION_DESC = "preferredDataLocation desc"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PREFERRED_LANGUAGE_DESC = "preferredLanguage desc"
    PROVISIONED_PLANS = "provisionedPlans"
    PROVISIONED_PLANS_DESC = "provisionedPlans desc"
    PROXY_ADDRESSES = "proxyAddresses"
    PROXY_ADDRESSES_DESC = "proxyAddresses desc"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME = "refreshTokensValidFromDateTime"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME_DESC = "refreshTokensValidFromDateTime desc"
    SHOW_IN_ADDRESS_LIST = "showInAddressList"
    SHOW_IN_ADDRESS_LIST_DESC = "showInAddressList desc"
    SIGN_IN_SESSIONS_VALID_FROM_DATE_TIME = "signInSessionsValidFromDateTime"
    SIGN_IN_SESSIONS_VALID_FROM_DATE_TIME_DESC = "signInSessionsValidFromDateTime desc"
    STATE = "state"
    STATE_DESC = "state desc"
    STREET_ADDRESS = "streetAddress"
    STREET_ADDRESS_DESC = "streetAddress desc"
    SURNAME = "surname"
    SURNAME_DESC = "surname desc"
    USAGE_LOCATION = "usageLocation"
    USAGE_LOCATION_DESC = "usageLocation desc"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_PRINCIPAL_NAME_DESC = "userPrincipalName desc"
    USER_TYPE = "userType"
    USER_TYPE_DESC = "userType desc"
    MAILBOX_SETTINGS = "mailboxSettings"
    MAILBOX_SETTINGS_DESC = "mailboxSettings desc"
    DEVICE_ENROLLMENT_LIMIT = "deviceEnrollmentLimit"
    DEVICE_ENROLLMENT_LIMIT_DESC = "deviceEnrollmentLimit desc"
    ABOUT_ME = "aboutMe"
    ABOUT_ME_DESC = "aboutMe desc"
    BIRTHDAY = "birthday"
    BIRTHDAY_DESC = "birthday desc"
    HIRE_DATE = "hireDate"
    HIRE_DATE_DESC = "hireDate desc"
    INTERESTS = "interests"
    INTERESTS_DESC = "interests desc"
    MY_SITE = "mySite"
    MY_SITE_DESC = "mySite desc"
    PAST_PROJECTS = "pastProjects"
    PAST_PROJECTS_DESC = "pastProjects desc"
    PREFERRED_NAME = "preferredName"
    PREFERRED_NAME_DESC = "preferredName desc"
    RESPONSIBILITIES = "responsibilities"
    RESPONSIBILITIES_DESC = "responsibilities desc"
    SCHOOLS = "schools"
    SCHOOLS_DESC = "schools desc"
    SKILLS = "skills"
    SKILLS_DESC = "skills desc"

class Enum222(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    HEIGHT = "height"
    WIDTH = "width"

class Enum223(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    EMAIL = "email"
    IS_FAVORITE_BY_DEFAULT = "isFavoriteByDefault"
    MEMBERSHIP_TYPE = "membershipType"
    MODERATION_SETTINGS = "moderationSettings"
    WEB_URL = "webUrl"
    FILES_FOLDER = "filesFolder"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class Enum224(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    FILES_FOLDER = "filesFolder"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class Enum225(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    E_TAG = "eTag"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    NAME = "name"
    PARENT_REFERENCE = "parentReference"
    WEB_URL = "webUrl"
    AUDIO = "audio"
    BUNDLE = "bundle"
    CONTENT = "content"
    C_TAG = "cTag"
    DELETED = "deleted"
    FILE = "file"
    FILE_SYSTEM_INFO = "fileSystemInfo"
    FOLDER = "folder"
    IMAGE = "image"
    LOCATION = "location"
    PACKAGE = "package"
    PENDING_OPERATIONS = "pendingOperations"
    PHOTO = "photo"
    PUBLICATION = "publication"
    REMOTE_ITEM = "remoteItem"
    ROOT = "root"
    SEARCH_RESULT = "searchResult"
    SHARED = "shared"
    SHAREPOINT_IDS = "sharepointIds"
    SIZE = "size"
    SPECIAL_FOLDER = "specialFolder"
    VIDEO = "video"
    WEB_DAV_URL = "webDavUrl"
    CREATED_BY_USER = "createdByUser"
    LAST_MODIFIED_BY_USER = "lastModifiedByUser"
    WORKBOOK = "workbook"
    ACTIVITIES = "activities"
    ANALYTICS = "analytics"
    CHILDREN = "children"
    LIST_ITEM = "listItem"
    PERMISSIONS = "permissions"
    SUBSCRIPTIONS = "subscriptions"
    THUMBNAILS = "thumbnails"
    VERSIONS = "versions"

class Enum226(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CREATED_BY_USER = "createdByUser"
    LAST_MODIFIED_BY_USER = "lastModifiedByUser"
    WORKBOOK = "workbook"
    ACTIVITIES = "activities"
    ANALYTICS = "analytics"
    CHILDREN = "children"
    LIST_ITEM = "listItem"
    PERMISSIONS = "permissions"
    SUBSCRIPTIONS = "subscriptions"
    THUMBNAILS = "thumbnails"
    VERSIONS = "versions"

class Enum227(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    ROLES = "roles"
    ROLES_DESC = "roles desc"

class Enum228(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    ROLES = "roles"

class Enum229(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    ROLES = "roles"

class Enum23(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TEAMS_APP = "teamsApp"
    TEAMS_APP_DEFINITION = "teamsAppDefinition"

class Enum230(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    ATTACHMENTS = "attachments"
    ATTACHMENTS_DESC = "attachments desc"
    BODY = "body"
    BODY_DESC = "body desc"
    CHANNEL_IDENTITY = "channelIdentity"
    CHANNEL_IDENTITY_DESC = "channelIdentity desc"
    CHAT_ID = "chatId"
    CHAT_ID_DESC = "chatId desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    ETAG = "etag"
    ETAG_DESC = "etag desc"
    FROM_ENUM = "from"
    FROM_DESC = "from desc"
    IMPORTANCE = "importance"
    IMPORTANCE_DESC = "importance desc"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_EDITED_DATE_TIME_DESC = "lastEditedDateTime desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    LOCALE = "locale"
    LOCALE_DESC = "locale desc"
    MENTIONS = "mentions"
    MENTIONS_DESC = "mentions desc"
    MESSAGE_TYPE = "messageType"
    MESSAGE_TYPE_DESC = "messageType desc"
    POLICY_VIOLATION = "policyViolation"
    POLICY_VIOLATION_DESC = "policyViolation desc"
    REACTIONS = "reactions"
    REACTIONS_DESC = "reactions desc"
    REPLY_TO_ID = "replyToId"
    REPLY_TO_ID_DESC = "replyToId desc"
    SUBJECT = "subject"
    SUBJECT_DESC = "subject desc"
    SUMMARY = "summary"
    SUMMARY_DESC = "summary desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum231(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTACHMENTS = "attachments"
    BODY = "body"
    CHANNEL_IDENTITY = "channelIdentity"
    CHAT_ID = "chatId"
    CREATED_DATE_TIME = "createdDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    ETAG = "etag"
    FROM_ENUM = "from"
    IMPORTANCE = "importance"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LOCALE = "locale"
    MENTIONS = "mentions"
    MESSAGE_TYPE = "messageType"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    REPLY_TO_ID = "replyToId"
    SUBJECT = "subject"
    SUMMARY = "summary"
    WEB_URL = "webUrl"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum232(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum233(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTACHMENTS = "attachments"
    BODY = "body"
    CHANNEL_IDENTITY = "channelIdentity"
    CHAT_ID = "chatId"
    CREATED_DATE_TIME = "createdDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    ETAG = "etag"
    FROM_ENUM = "from"
    IMPORTANCE = "importance"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LOCALE = "locale"
    MENTIONS = "mentions"
    MESSAGE_TYPE = "messageType"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    REPLY_TO_ID = "replyToId"
    SUBJECT = "subject"
    SUMMARY = "summary"
    WEB_URL = "webUrl"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum234(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum235(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CONTENT_BYTES = "contentBytes"
    CONTENT_BYTES_DESC = "contentBytes desc"
    CONTENT_TYPE = "contentType"
    CONTENT_TYPE_DESC = "contentType desc"

class Enum236(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONTENT_BYTES = "contentBytes"
    CONTENT_TYPE = "contentType"

class Enum237(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONTENT_BYTES = "contentBytes"
    CONTENT_TYPE = "contentType"

class Enum238(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    ATTACHMENTS = "attachments"
    ATTACHMENTS_DESC = "attachments desc"
    BODY = "body"
    BODY_DESC = "body desc"
    CHANNEL_IDENTITY = "channelIdentity"
    CHANNEL_IDENTITY_DESC = "channelIdentity desc"
    CHAT_ID = "chatId"
    CHAT_ID_DESC = "chatId desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    ETAG = "etag"
    ETAG_DESC = "etag desc"
    FROM_ENUM = "from"
    FROM_DESC = "from desc"
    IMPORTANCE = "importance"
    IMPORTANCE_DESC = "importance desc"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_EDITED_DATE_TIME_DESC = "lastEditedDateTime desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    LOCALE = "locale"
    LOCALE_DESC = "locale desc"
    MENTIONS = "mentions"
    MENTIONS_DESC = "mentions desc"
    MESSAGE_TYPE = "messageType"
    MESSAGE_TYPE_DESC = "messageType desc"
    POLICY_VIOLATION = "policyViolation"
    POLICY_VIOLATION_DESC = "policyViolation desc"
    REACTIONS = "reactions"
    REACTIONS_DESC = "reactions desc"
    REPLY_TO_ID = "replyToId"
    REPLY_TO_ID_DESC = "replyToId desc"
    SUBJECT = "subject"
    SUBJECT_DESC = "subject desc"
    SUMMARY = "summary"
    SUMMARY_DESC = "summary desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum239(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTACHMENTS = "attachments"
    BODY = "body"
    CHANNEL_IDENTITY = "channelIdentity"
    CHAT_ID = "chatId"
    CREATED_DATE_TIME = "createdDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    ETAG = "etag"
    FROM_ENUM = "from"
    IMPORTANCE = "importance"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LOCALE = "locale"
    MENTIONS = "mentions"
    MESSAGE_TYPE = "messageType"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    REPLY_TO_ID = "replyToId"
    SUBJECT = "subject"
    SUMMARY = "summary"
    WEB_URL = "webUrl"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum24(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    TEAMS_APP = "teamsApp"
    TEAMS_APP_DEFINITION = "teamsAppDefinition"

class Enum240(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum241(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTACHMENTS = "attachments"
    BODY = "body"
    CHANNEL_IDENTITY = "channelIdentity"
    CHAT_ID = "chatId"
    CREATED_DATE_TIME = "createdDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    ETAG = "etag"
    FROM_ENUM = "from"
    IMPORTANCE = "importance"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LOCALE = "locale"
    MENTIONS = "mentions"
    MESSAGE_TYPE = "messageType"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    REPLY_TO_ID = "replyToId"
    SUBJECT = "subject"
    SUMMARY = "summary"
    WEB_URL = "webUrl"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum242(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum243(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CONFIGURATION = "configuration"
    CONFIGURATION_DESC = "configuration desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    MESSAGE_ID = "messageId"
    MESSAGE_ID_DESC = "messageId desc"
    SORT_ORDER_INDEX = "sortOrderIndex"
    SORT_ORDER_INDEX_DESC = "sortOrderIndex desc"
    TEAMS_APP_ID = "teamsAppId"
    TEAMS_APP_ID_DESC = "teamsAppId desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum244(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONFIGURATION = "configuration"
    DISPLAY_NAME = "displayName"
    MESSAGE_ID = "messageId"
    SORT_ORDER_INDEX = "sortOrderIndex"
    TEAMS_APP_ID = "teamsAppId"
    WEB_URL = "webUrl"
    TEAMS_APP = "teamsApp"

class Enum245(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TEAMS_APP = "teamsApp"

class Enum246(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONFIGURATION = "configuration"
    DISPLAY_NAME = "displayName"
    MESSAGE_ID = "messageId"
    SORT_ORDER_INDEX = "sortOrderIndex"
    TEAMS_APP_ID = "teamsAppId"
    WEB_URL = "webUrl"
    TEAMS_APP = "teamsApp"

class Enum247(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TEAMS_APP = "teamsApp"

class Enum248(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DISTRIBUTION_METHOD = "distributionMethod"
    EXTERNAL_ID = "externalId"
    APP_DEFINITIONS = "appDefinitions"

class Enum249(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APP_DEFINITIONS = "appDefinitions"

class Enum25(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TEAMS_APP = "teamsApp"
    TEAMS_APP_DEFINITION = "teamsAppDefinition"

class Enum250(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ENABLED = "enabled"
    OFFER_SHIFT_REQUESTS_ENABLED = "offerShiftRequestsEnabled"
    OPEN_SHIFTS_ENABLED = "openShiftsEnabled"
    PROVISION_STATUS = "provisionStatus"
    PROVISION_STATUS_CODE = "provisionStatusCode"
    SWAP_SHIFTS_REQUESTS_ENABLED = "swapShiftsRequestsEnabled"
    TIME_CLOCK_ENABLED = "timeClockEnabled"
    TIME_CLOCK_SETTINGS = "timeClockSettings"
    TIME_OFF_REQUESTS_ENABLED = "timeOffRequestsEnabled"
    TIME_ZONE = "timeZone"
    WORKFORCE_INTEGRATION_IDS = "workforceIntegrationIds"
    OFFER_SHIFT_REQUESTS = "offerShiftRequests"
    OPEN_SHIFT_CHANGE_REQUESTS = "openShiftChangeRequests"
    OPEN_SHIFTS = "openShifts"
    SCHEDULING_GROUPS = "schedulingGroups"
    SHIFTS = "shifts"
    SWAP_SHIFTS_CHANGE_REQUESTS = "swapShiftsChangeRequests"
    TIME_CARDS = "timeCards"
    TIME_OFF_REASONS = "timeOffReasons"
    TIME_OFF_REQUESTS = "timeOffRequests"
    TIMES_OFF = "timesOff"

class Enum251(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    OFFER_SHIFT_REQUESTS = "offerShiftRequests"
    OPEN_SHIFT_CHANGE_REQUESTS = "openShiftChangeRequests"
    OPEN_SHIFTS = "openShifts"
    SCHEDULING_GROUPS = "schedulingGroups"
    SHIFTS = "shifts"
    SWAP_SHIFTS_CHANGE_REQUESTS = "swapShiftsChangeRequests"
    TIME_CARDS = "timeCards"
    TIME_OFF_REASONS = "timeOffReasons"
    TIME_OFF_REQUESTS = "timeOffRequests"
    TIMES_OFF = "timesOff"

class Enum252(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    ASSIGNED_TO = "assignedTo"
    ASSIGNED_TO_DESC = "assignedTo desc"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_DATE_TIME_DESC = "managerActionDateTime desc"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_ACTION_MESSAGE_DESC = "managerActionMessage desc"
    MANAGER_USER_ID = "managerUserId"
    MANAGER_USER_ID_DESC = "managerUserId desc"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_DATE_TIME_DESC = "senderDateTime desc"
    SENDER_MESSAGE = "senderMessage"
    SENDER_MESSAGE_DESC = "senderMessage desc"
    SENDER_USER_ID = "senderUserId"
    SENDER_USER_ID_DESC = "senderUserId desc"
    STATE = "state"
    STATE_DESC = "state desc"
    RECIPIENT_ACTION_DATE_TIME = "recipientActionDateTime"
    RECIPIENT_ACTION_DATE_TIME_DESC = "recipientActionDateTime desc"
    RECIPIENT_ACTION_MESSAGE = "recipientActionMessage"
    RECIPIENT_ACTION_MESSAGE_DESC = "recipientActionMessage desc"
    RECIPIENT_USER_ID = "recipientUserId"
    RECIPIENT_USER_ID_DESC = "recipientUserId desc"
    SENDER_SHIFT_ID = "senderShiftId"
    SENDER_SHIFT_ID_DESC = "senderShiftId desc"

class Enum253(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    ASSIGNED_TO = "assignedTo"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_USER_ID = "managerUserId"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_MESSAGE = "senderMessage"
    SENDER_USER_ID = "senderUserId"
    STATE = "state"
    RECIPIENT_ACTION_DATE_TIME = "recipientActionDateTime"
    RECIPIENT_ACTION_MESSAGE = "recipientActionMessage"
    RECIPIENT_USER_ID = "recipientUserId"
    SENDER_SHIFT_ID = "senderShiftId"

class Enum254(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    ASSIGNED_TO = "assignedTo"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_USER_ID = "managerUserId"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_MESSAGE = "senderMessage"
    SENDER_USER_ID = "senderUserId"
    STATE = "state"
    RECIPIENT_ACTION_DATE_TIME = "recipientActionDateTime"
    RECIPIENT_ACTION_MESSAGE = "recipientActionMessage"
    RECIPIENT_USER_ID = "recipientUserId"
    SENDER_SHIFT_ID = "senderShiftId"

class Enum255(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    ASSIGNED_TO = "assignedTo"
    ASSIGNED_TO_DESC = "assignedTo desc"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_DATE_TIME_DESC = "managerActionDateTime desc"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_ACTION_MESSAGE_DESC = "managerActionMessage desc"
    MANAGER_USER_ID = "managerUserId"
    MANAGER_USER_ID_DESC = "managerUserId desc"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_DATE_TIME_DESC = "senderDateTime desc"
    SENDER_MESSAGE = "senderMessage"
    SENDER_MESSAGE_DESC = "senderMessage desc"
    SENDER_USER_ID = "senderUserId"
    SENDER_USER_ID_DESC = "senderUserId desc"
    STATE = "state"
    STATE_DESC = "state desc"
    OPEN_SHIFT_ID = "openShiftId"
    OPEN_SHIFT_ID_DESC = "openShiftId desc"

class Enum256(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    ASSIGNED_TO = "assignedTo"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_USER_ID = "managerUserId"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_MESSAGE = "senderMessage"
    SENDER_USER_ID = "senderUserId"
    STATE = "state"
    OPEN_SHIFT_ID = "openShiftId"

class Enum257(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    ASSIGNED_TO = "assignedTo"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_USER_ID = "managerUserId"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_MESSAGE = "senderMessage"
    SENDER_USER_ID = "senderUserId"
    STATE = "state"
    OPEN_SHIFT_ID = "openShiftId"

class Enum258(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    DRAFT_OPEN_SHIFT = "draftOpenShift"
    DRAFT_OPEN_SHIFT_DESC = "draftOpenShift desc"
    IS_STAGED_FOR_DELETION = "isStagedForDeletion"
    IS_STAGED_FOR_DELETION_DESC = "isStagedForDeletion desc"
    SCHEDULING_GROUP_ID = "schedulingGroupId"
    SCHEDULING_GROUP_ID_DESC = "schedulingGroupId desc"
    SHARED_OPEN_SHIFT = "sharedOpenShift"
    SHARED_OPEN_SHIFT_DESC = "sharedOpenShift desc"

class Enum259(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DRAFT_OPEN_SHIFT = "draftOpenShift"
    IS_STAGED_FOR_DELETION = "isStagedForDeletion"
    SCHEDULING_GROUP_ID = "schedulingGroupId"
    SHARED_OPEN_SHIFT = "sharedOpenShift"

class Enum26(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DISTRIBUTION_METHOD = "distributionMethod"
    EXTERNAL_ID = "externalId"
    APP_DEFINITIONS = "appDefinitions"

class Enum260(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DRAFT_OPEN_SHIFT = "draftOpenShift"
    IS_STAGED_FOR_DELETION = "isStagedForDeletion"
    SCHEDULING_GROUP_ID = "schedulingGroupId"
    SHARED_OPEN_SHIFT = "sharedOpenShift"

class Enum261(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    IS_ACTIVE = "isActive"
    IS_ACTIVE_DESC = "isActive desc"
    USER_IDS = "userIds"
    USER_IDS_DESC = "userIds desc"

class Enum262(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DISPLAY_NAME = "displayName"
    IS_ACTIVE = "isActive"
    USER_IDS = "userIds"

class Enum263(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DISPLAY_NAME = "displayName"
    IS_ACTIVE = "isActive"
    USER_IDS = "userIds"

class Enum264(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    DRAFT_SHIFT = "draftShift"
    DRAFT_SHIFT_DESC = "draftShift desc"
    IS_STAGED_FOR_DELETION = "isStagedForDeletion"
    IS_STAGED_FOR_DELETION_DESC = "isStagedForDeletion desc"
    SCHEDULING_GROUP_ID = "schedulingGroupId"
    SCHEDULING_GROUP_ID_DESC = "schedulingGroupId desc"
    SHARED_SHIFT = "sharedShift"
    SHARED_SHIFT_DESC = "sharedShift desc"
    USER_ID = "userId"
    USER_ID_DESC = "userId desc"

class Enum265(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DRAFT_SHIFT = "draftShift"
    IS_STAGED_FOR_DELETION = "isStagedForDeletion"
    SCHEDULING_GROUP_ID = "schedulingGroupId"
    SHARED_SHIFT = "sharedShift"
    USER_ID = "userId"

class Enum266(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DRAFT_SHIFT = "draftShift"
    IS_STAGED_FOR_DELETION = "isStagedForDeletion"
    SCHEDULING_GROUP_ID = "schedulingGroupId"
    SHARED_SHIFT = "sharedShift"
    USER_ID = "userId"

class Enum267(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    ASSIGNED_TO = "assignedTo"
    ASSIGNED_TO_DESC = "assignedTo desc"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_DATE_TIME_DESC = "managerActionDateTime desc"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_ACTION_MESSAGE_DESC = "managerActionMessage desc"
    MANAGER_USER_ID = "managerUserId"
    MANAGER_USER_ID_DESC = "managerUserId desc"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_DATE_TIME_DESC = "senderDateTime desc"
    SENDER_MESSAGE = "senderMessage"
    SENDER_MESSAGE_DESC = "senderMessage desc"
    SENDER_USER_ID = "senderUserId"
    SENDER_USER_ID_DESC = "senderUserId desc"
    STATE = "state"
    STATE_DESC = "state desc"
    RECIPIENT_ACTION_DATE_TIME = "recipientActionDateTime"
    RECIPIENT_ACTION_DATE_TIME_DESC = "recipientActionDateTime desc"
    RECIPIENT_ACTION_MESSAGE = "recipientActionMessage"
    RECIPIENT_ACTION_MESSAGE_DESC = "recipientActionMessage desc"
    RECIPIENT_USER_ID = "recipientUserId"
    RECIPIENT_USER_ID_DESC = "recipientUserId desc"
    SENDER_SHIFT_ID = "senderShiftId"
    SENDER_SHIFT_ID_DESC = "senderShiftId desc"
    RECIPIENT_SHIFT_ID = "recipientShiftId"
    RECIPIENT_SHIFT_ID_DESC = "recipientShiftId desc"

class Enum268(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    ASSIGNED_TO = "assignedTo"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_USER_ID = "managerUserId"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_MESSAGE = "senderMessage"
    SENDER_USER_ID = "senderUserId"
    STATE = "state"
    RECIPIENT_ACTION_DATE_TIME = "recipientActionDateTime"
    RECIPIENT_ACTION_MESSAGE = "recipientActionMessage"
    RECIPIENT_USER_ID = "recipientUserId"
    SENDER_SHIFT_ID = "senderShiftId"
    RECIPIENT_SHIFT_ID = "recipientShiftId"

class Enum269(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    ASSIGNED_TO = "assignedTo"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_USER_ID = "managerUserId"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_MESSAGE = "senderMessage"
    SENDER_USER_ID = "senderUserId"
    STATE = "state"
    RECIPIENT_ACTION_DATE_TIME = "recipientActionDateTime"
    RECIPIENT_ACTION_MESSAGE = "recipientActionMessage"
    RECIPIENT_USER_ID = "recipientUserId"
    SENDER_SHIFT_ID = "senderShiftId"
    RECIPIENT_SHIFT_ID = "recipientShiftId"

class Enum27(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APP_DEFINITIONS = "appDefinitions"

class Enum270(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    BREAKS = "breaks"
    BREAKS_DESC = "breaks desc"
    CLOCK_IN_EVENT = "clockInEvent"
    CLOCK_IN_EVENT_DESC = "clockInEvent desc"
    CLOCK_OUT_EVENT = "clockOutEvent"
    CLOCK_OUT_EVENT_DESC = "clockOutEvent desc"
    CONFIRMED_BY = "confirmedBy"
    CONFIRMED_BY_DESC = "confirmedBy desc"
    NOTES = "notes"
    NOTES_DESC = "notes desc"
    ORIGINAL_ENTRY = "originalEntry"
    ORIGINAL_ENTRY_DESC = "originalEntry desc"
    STATE = "state"
    STATE_DESC = "state desc"
    USER_ID = "userId"
    USER_ID_DESC = "userId desc"

class Enum271(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    BREAKS = "breaks"
    CLOCK_IN_EVENT = "clockInEvent"
    CLOCK_OUT_EVENT = "clockOutEvent"
    CONFIRMED_BY = "confirmedBy"
    NOTES = "notes"
    ORIGINAL_ENTRY = "originalEntry"
    STATE = "state"
    USER_ID = "userId"

class Enum272(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    BREAKS = "breaks"
    CLOCK_IN_EVENT = "clockInEvent"
    CLOCK_OUT_EVENT = "clockOutEvent"
    CONFIRMED_BY = "confirmedBy"
    NOTES = "notes"
    ORIGINAL_ENTRY = "originalEntry"
    STATE = "state"
    USER_ID = "userId"

class Enum273(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    ICON_TYPE = "iconType"
    ICON_TYPE_DESC = "iconType desc"
    IS_ACTIVE = "isActive"
    IS_ACTIVE_DESC = "isActive desc"

class Enum274(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DISPLAY_NAME = "displayName"
    ICON_TYPE = "iconType"
    IS_ACTIVE = "isActive"

class Enum275(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DISPLAY_NAME = "displayName"
    ICON_TYPE = "iconType"
    IS_ACTIVE = "isActive"

class Enum276(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    ASSIGNED_TO = "assignedTo"
    ASSIGNED_TO_DESC = "assignedTo desc"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_DATE_TIME_DESC = "managerActionDateTime desc"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_ACTION_MESSAGE_DESC = "managerActionMessage desc"
    MANAGER_USER_ID = "managerUserId"
    MANAGER_USER_ID_DESC = "managerUserId desc"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_DATE_TIME_DESC = "senderDateTime desc"
    SENDER_MESSAGE = "senderMessage"
    SENDER_MESSAGE_DESC = "senderMessage desc"
    SENDER_USER_ID = "senderUserId"
    SENDER_USER_ID_DESC = "senderUserId desc"
    STATE = "state"
    STATE_DESC = "state desc"
    END_DATE_TIME = "endDateTime"
    END_DATE_TIME_DESC = "endDateTime desc"
    START_DATE_TIME = "startDateTime"
    START_DATE_TIME_DESC = "startDateTime desc"
    TIME_OFF_REASON_ID = "timeOffReasonId"
    TIME_OFF_REASON_ID_DESC = "timeOffReasonId desc"

class Enum277(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    ASSIGNED_TO = "assignedTo"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_USER_ID = "managerUserId"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_MESSAGE = "senderMessage"
    SENDER_USER_ID = "senderUserId"
    STATE = "state"
    END_DATE_TIME = "endDateTime"
    START_DATE_TIME = "startDateTime"
    TIME_OFF_REASON_ID = "timeOffReasonId"

class Enum278(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    ASSIGNED_TO = "assignedTo"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_USER_ID = "managerUserId"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_MESSAGE = "senderMessage"
    SENDER_USER_ID = "senderUserId"
    STATE = "state"
    END_DATE_TIME = "endDateTime"
    START_DATE_TIME = "startDateTime"
    TIME_OFF_REASON_ID = "timeOffReasonId"

class Enum279(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    DRAFT_TIME_OFF = "draftTimeOff"
    DRAFT_TIME_OFF_DESC = "draftTimeOff desc"
    IS_STAGED_FOR_DELETION = "isStagedForDeletion"
    IS_STAGED_FOR_DELETION_DESC = "isStagedForDeletion desc"
    SHARED_TIME_OFF = "sharedTimeOff"
    SHARED_TIME_OFF_DESC = "sharedTimeOff desc"
    USER_ID = "userId"
    USER_ID_DESC = "userId desc"

class Enum28(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    AZURE_AD_APP_ID = "azureADAppId"
    CREATED_BY = "createdBy"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    PUBLISHING_STATE = "publishingState"
    SHORTDESCRIPTION = "shortdescription"
    TEAMS_APP_ID = "teamsAppId"
    VERSION = "version"

class Enum280(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DRAFT_TIME_OFF = "draftTimeOff"
    IS_STAGED_FOR_DELETION = "isStagedForDeletion"
    SHARED_TIME_OFF = "sharedTimeOff"
    USER_ID = "userId"

class Enum281(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DRAFT_TIME_OFF = "draftTimeOff"
    IS_STAGED_FOR_DELETION = "isStagedForDeletion"
    SHARED_TIME_OFF = "sharedTimeOff"
    USER_ID = "userId"

class Enum283(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    WORKFORCE_INTEGRATIONS = "workforceIntegrations"

class Enum287(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    API_VERSION = "apiVersion"
    API_VERSION_DESC = "apiVersion desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    ELIGIBILITY_FILTERING_ENABLED_ENTITIES = "eligibilityFilteringEnabledEntities"
    ELIGIBILITY_FILTERING_ENABLED_ENTITIES_DESC = "eligibilityFilteringEnabledEntities desc"
    ENCRYPTION = "encryption"
    ENCRYPTION_DESC = "encryption desc"
    IS_ACTIVE = "isActive"
    IS_ACTIVE_DESC = "isActive desc"
    SUPPORTED_ENTITIES = "supportedEntities"
    SUPPORTED_ENTITIES_DESC = "supportedEntities desc"
    SUPPORTS = "supports"
    SUPPORTS_DESC = "supports desc"
    URL = "url"
    URL_DESC = "url desc"

class Enum288(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    API_VERSION = "apiVersion"
    DISPLAY_NAME = "displayName"
    ELIGIBILITY_FILTERING_ENABLED_ENTITIES = "eligibilityFilteringEnabledEntities"
    ENCRYPTION = "encryption"
    IS_ACTIVE = "isActive"
    SUPPORTED_ENTITIES = "supportedEntities"
    SUPPORTS = "supports"
    URL = "url"

class Enum289(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    API_VERSION = "apiVersion"
    DISPLAY_NAME = "displayName"
    ELIGIBILITY_FILTERING_ENABLED_ENTITIES = "eligibilityFilteringEnabledEntities"
    ENCRYPTION = "encryption"
    IS_ACTIVE = "isActive"
    SUPPORTED_ENTITIES = "supportedEntities"
    SUPPORTS = "supports"
    URL = "url"

class Enum29(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    ROLES = "roles"
    ROLES_DESC = "roles desc"

class Enum290(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime"
    LAST_UPDATED_DATE_TIME_DESC = "lastUpdatedDateTime desc"
    TOPIC = "topic"
    TOPIC_DESC = "topic desc"

class Enum291(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime"
    TOPIC = "topic"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class Enum292(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class Enum293(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime"
    TOPIC = "topic"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class Enum294(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class Enum295(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CLASSIFICATION = "classification"
    CLASSIFICATION_DESC = "classification desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISCOVERY_SETTINGS = "discoverySettings"
    DISCOVERY_SETTINGS_DESC = "discoverySettings desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    FUN_SETTINGS = "funSettings"
    FUN_SETTINGS_DESC = "funSettings desc"
    GUEST_SETTINGS = "guestSettings"
    GUEST_SETTINGS_DESC = "guestSettings desc"
    INTERNAL_ID = "internalId"
    INTERNAL_ID_DESC = "internalId desc"
    IS_ARCHIVED = "isArchived"
    IS_ARCHIVED_DESC = "isArchived desc"
    IS_MEMBERSHIP_LIMITED_TO_OWNERS = "isMembershipLimitedToOwners"
    IS_MEMBERSHIP_LIMITED_TO_OWNERS_DESC = "isMembershipLimitedToOwners desc"
    MEMBER_SETTINGS = "memberSettings"
    MEMBER_SETTINGS_DESC = "memberSettings desc"
    MESSAGING_SETTINGS = "messagingSettings"
    MESSAGING_SETTINGS_DESC = "messagingSettings desc"
    SPECIALIZATION = "specialization"
    SPECIALIZATION_DESC = "specialization desc"
    VISIBILITY = "visibility"
    VISIBILITY_DESC = "visibility desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum296(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSIFICATION = "classification"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    DISCOVERY_SETTINGS = "discoverySettings"
    DISPLAY_NAME = "displayName"
    FUN_SETTINGS = "funSettings"
    GUEST_SETTINGS = "guestSettings"
    INTERNAL_ID = "internalId"
    IS_ARCHIVED = "isArchived"
    IS_MEMBERSHIP_LIMITED_TO_OWNERS = "isMembershipLimitedToOwners"
    MEMBER_SETTINGS = "memberSettings"
    MESSAGING_SETTINGS = "messagingSettings"
    SPECIALIZATION = "specialization"
    VISIBILITY = "visibility"
    WEB_URL = "webUrl"
    SCHEDULE = "schedule"
    CHANNELS = "channels"
    GROUP = "group"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    OPERATIONS = "operations"
    OWNERS = "owners"
    PHOTO = "photo"
    PRIMARY_CHANNEL = "primaryChannel"
    TEMPLATE = "template"

class Enum297(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SCHEDULE = "schedule"
    CHANNELS = "channels"
    GROUP = "group"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    OPERATIONS = "operations"
    OWNERS = "owners"
    PHOTO = "photo"
    PRIMARY_CHANNEL = "primaryChannel"
    TEMPLATE = "template"

class Enum298(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSIFICATION = "classification"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    DISCOVERY_SETTINGS = "discoverySettings"
    DISPLAY_NAME = "displayName"
    FUN_SETTINGS = "funSettings"
    GUEST_SETTINGS = "guestSettings"
    INTERNAL_ID = "internalId"
    IS_ARCHIVED = "isArchived"
    IS_MEMBERSHIP_LIMITED_TO_OWNERS = "isMembershipLimitedToOwners"
    MEMBER_SETTINGS = "memberSettings"
    MESSAGING_SETTINGS = "messagingSettings"
    SPECIALIZATION = "specialization"
    VISIBILITY = "visibility"
    WEB_URL = "webUrl"
    SCHEDULE = "schedule"
    CHANNELS = "channels"
    GROUP = "group"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    OPERATIONS = "operations"
    OWNERS = "owners"
    PHOTO = "photo"
    PRIMARY_CHANNEL = "primaryChannel"
    TEMPLATE = "template"

class Enum299(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SCHEDULE = "schedule"
    CHANNELS = "channels"
    GROUP = "group"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    OPERATIONS = "operations"
    OWNERS = "owners"
    PHOTO = "photo"
    PRIMARY_CHANNEL = "primaryChannel"
    TEMPLATE = "template"

class Enum30(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    ROLES = "roles"

class Enum300(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    INSTALLED_APPS = "installedApps"

class Enum301(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    INSTALLED_APPS = "installedApps"

class Enum302(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"

class Enum303(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    TEAMS_APP = "teamsApp"
    TEAMS_APP_DEFINITION = "teamsAppDefinition"
    CHAT = "chat"

class Enum304(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TEAMS_APP = "teamsApp"
    TEAMS_APP_DEFINITION = "teamsAppDefinition"
    CHAT = "chat"

class Enum305(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    TEAMS_APP = "teamsApp"
    TEAMS_APP_DEFINITION = "teamsAppDefinition"
    CHAT = "chat"

class Enum306(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TEAMS_APP = "teamsApp"
    TEAMS_APP_DEFINITION = "teamsAppDefinition"
    CHAT = "chat"

class Enum307(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime"
    TOPIC = "topic"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class Enum308(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class Enum31(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    ROLES = "roles"

class Enum32(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    ATTACHMENTS = "attachments"
    ATTACHMENTS_DESC = "attachments desc"
    BODY = "body"
    BODY_DESC = "body desc"
    CHANNEL_IDENTITY = "channelIdentity"
    CHANNEL_IDENTITY_DESC = "channelIdentity desc"
    CHAT_ID = "chatId"
    CHAT_ID_DESC = "chatId desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    ETAG = "etag"
    ETAG_DESC = "etag desc"
    FROM_ENUM = "from"
    FROM_DESC = "from desc"
    IMPORTANCE = "importance"
    IMPORTANCE_DESC = "importance desc"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_EDITED_DATE_TIME_DESC = "lastEditedDateTime desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    LOCALE = "locale"
    LOCALE_DESC = "locale desc"
    MENTIONS = "mentions"
    MENTIONS_DESC = "mentions desc"
    MESSAGE_TYPE = "messageType"
    MESSAGE_TYPE_DESC = "messageType desc"
    POLICY_VIOLATION = "policyViolation"
    POLICY_VIOLATION_DESC = "policyViolation desc"
    REACTIONS = "reactions"
    REACTIONS_DESC = "reactions desc"
    REPLY_TO_ID = "replyToId"
    REPLY_TO_ID_DESC = "replyToId desc"
    SUBJECT = "subject"
    SUBJECT_DESC = "subject desc"
    SUMMARY = "summary"
    SUMMARY_DESC = "summary desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum33(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTACHMENTS = "attachments"
    BODY = "body"
    CHANNEL_IDENTITY = "channelIdentity"
    CHAT_ID = "chatId"
    CREATED_DATE_TIME = "createdDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    ETAG = "etag"
    FROM_ENUM = "from"
    IMPORTANCE = "importance"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LOCALE = "locale"
    MENTIONS = "mentions"
    MESSAGE_TYPE = "messageType"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    REPLY_TO_ID = "replyToId"
    SUBJECT = "subject"
    SUMMARY = "summary"
    WEB_URL = "webUrl"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum34(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum35(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTACHMENTS = "attachments"
    BODY = "body"
    CHANNEL_IDENTITY = "channelIdentity"
    CHAT_ID = "chatId"
    CREATED_DATE_TIME = "createdDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    ETAG = "etag"
    FROM_ENUM = "from"
    IMPORTANCE = "importance"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LOCALE = "locale"
    MENTIONS = "mentions"
    MESSAGE_TYPE = "messageType"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    REPLY_TO_ID = "replyToId"
    SUBJECT = "subject"
    SUMMARY = "summary"
    WEB_URL = "webUrl"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum36(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum37(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CONTENT_BYTES = "contentBytes"
    CONTENT_BYTES_DESC = "contentBytes desc"
    CONTENT_TYPE = "contentType"
    CONTENT_TYPE_DESC = "contentType desc"

class Enum38(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONTENT_BYTES = "contentBytes"
    CONTENT_TYPE = "contentType"

class Enum39(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONTENT_BYTES = "contentBytes"
    CONTENT_TYPE = "contentType"

class Enum40(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    ATTACHMENTS = "attachments"
    ATTACHMENTS_DESC = "attachments desc"
    BODY = "body"
    BODY_DESC = "body desc"
    CHANNEL_IDENTITY = "channelIdentity"
    CHANNEL_IDENTITY_DESC = "channelIdentity desc"
    CHAT_ID = "chatId"
    CHAT_ID_DESC = "chatId desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    ETAG = "etag"
    ETAG_DESC = "etag desc"
    FROM_ENUM = "from"
    FROM_DESC = "from desc"
    IMPORTANCE = "importance"
    IMPORTANCE_DESC = "importance desc"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_EDITED_DATE_TIME_DESC = "lastEditedDateTime desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    LOCALE = "locale"
    LOCALE_DESC = "locale desc"
    MENTIONS = "mentions"
    MENTIONS_DESC = "mentions desc"
    MESSAGE_TYPE = "messageType"
    MESSAGE_TYPE_DESC = "messageType desc"
    POLICY_VIOLATION = "policyViolation"
    POLICY_VIOLATION_DESC = "policyViolation desc"
    REACTIONS = "reactions"
    REACTIONS_DESC = "reactions desc"
    REPLY_TO_ID = "replyToId"
    REPLY_TO_ID_DESC = "replyToId desc"
    SUBJECT = "subject"
    SUBJECT_DESC = "subject desc"
    SUMMARY = "summary"
    SUMMARY_DESC = "summary desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum41(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTACHMENTS = "attachments"
    BODY = "body"
    CHANNEL_IDENTITY = "channelIdentity"
    CHAT_ID = "chatId"
    CREATED_DATE_TIME = "createdDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    ETAG = "etag"
    FROM_ENUM = "from"
    IMPORTANCE = "importance"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LOCALE = "locale"
    MENTIONS = "mentions"
    MESSAGE_TYPE = "messageType"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    REPLY_TO_ID = "replyToId"
    SUBJECT = "subject"
    SUMMARY = "summary"
    WEB_URL = "webUrl"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum42(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum43(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTACHMENTS = "attachments"
    BODY = "body"
    CHANNEL_IDENTITY = "channelIdentity"
    CHAT_ID = "chatId"
    CREATED_DATE_TIME = "createdDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    ETAG = "etag"
    FROM_ENUM = "from"
    IMPORTANCE = "importance"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LOCALE = "locale"
    MENTIONS = "mentions"
    MESSAGE_TYPE = "messageType"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    REPLY_TO_ID = "replyToId"
    SUBJECT = "subject"
    SUMMARY = "summary"
    WEB_URL = "webUrl"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum44(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum46(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CONFIGURATION = "configuration"
    CONFIGURATION_DESC = "configuration desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    MESSAGE_ID = "messageId"
    MESSAGE_ID_DESC = "messageId desc"
    SORT_ORDER_INDEX = "sortOrderIndex"
    SORT_ORDER_INDEX_DESC = "sortOrderIndex desc"
    TEAMS_APP_ID = "teamsAppId"
    TEAMS_APP_ID_DESC = "teamsAppId desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum47(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONFIGURATION = "configuration"
    DISPLAY_NAME = "displayName"
    MESSAGE_ID = "messageId"
    SORT_ORDER_INDEX = "sortOrderIndex"
    TEAMS_APP_ID = "teamsAppId"
    WEB_URL = "webUrl"
    TEAMS_APP = "teamsApp"

class Enum48(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TEAMS_APP = "teamsApp"

class Enum49(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONFIGURATION = "configuration"
    DISPLAY_NAME = "displayName"
    MESSAGE_ID = "messageId"
    SORT_ORDER_INDEX = "sortOrderIndex"
    TEAMS_APP_ID = "teamsAppId"
    WEB_URL = "webUrl"
    TEAMS_APP = "teamsApp"

class Enum50(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TEAMS_APP = "teamsApp"

class Enum51(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DISTRIBUTION_METHOD = "distributionMethod"
    EXTERNAL_ID = "externalId"
    APP_DEFINITIONS = "appDefinitions"

class Enum52(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APP_DEFINITIONS = "appDefinitions"

class Enum53(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSIFICATION = "classification"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    DISCOVERY_SETTINGS = "discoverySettings"
    DISPLAY_NAME = "displayName"
    FUN_SETTINGS = "funSettings"
    GUEST_SETTINGS = "guestSettings"
    INTERNAL_ID = "internalId"
    IS_ARCHIVED = "isArchived"
    IS_MEMBERSHIP_LIMITED_TO_OWNERS = "isMembershipLimitedToOwners"
    MEMBER_SETTINGS = "memberSettings"
    MESSAGING_SETTINGS = "messagingSettings"
    SPECIALIZATION = "specialization"
    VISIBILITY = "visibility"
    WEB_URL = "webUrl"
    SCHEDULE = "schedule"
    CHANNELS = "channels"
    GROUP = "group"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    OPERATIONS = "operations"
    OWNERS = "owners"
    PHOTO = "photo"
    PRIMARY_CHANNEL = "primaryChannel"
    TEMPLATE = "template"

class Enum54(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SCHEDULE = "schedule"
    CHANNELS = "channels"
    GROUP = "group"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    OPERATIONS = "operations"
    OWNERS = "owners"
    PHOTO = "photo"
    PRIMARY_CHANNEL = "primaryChannel"
    TEMPLATE = "template"

class Enum7(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    AZURE_AD_APP_ID = "azureADAppId"
    AZURE_AD_APP_ID_DESC = "azureADAppId desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    PUBLISHING_STATE = "publishingState"
    PUBLISHING_STATE_DESC = "publishingState desc"
    SHORTDESCRIPTION = "shortdescription"
    SHORTDESCRIPTION_DESC = "shortdescription desc"
    TEAMS_APP_ID = "teamsAppId"
    TEAMS_APP_ID_DESC = "teamsAppId desc"
    VERSION = "version"
    VERSION_DESC = "version desc"

class Enum8(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    AZURE_AD_APP_ID = "azureADAppId"
    CREATED_BY = "createdBy"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    PUBLISHING_STATE = "publishingState"
    SHORTDESCRIPTION = "shortdescription"
    TEAMS_APP_ID = "teamsAppId"
    VERSION = "version"

class Enum9(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    AZURE_AD_APP_ID = "azureADAppId"
    CREATED_BY = "createdBy"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    PUBLISHING_STATE = "publishingState"
    SHORTDESCRIPTION = "shortdescription"
    TEAMS_APP_ID = "teamsAppId"
    VERSION = "version"

class Get0ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    WORKFORCE_INTEGRATIONS = "workforceIntegrations"

class Get1ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DISTRIBUTION_METHOD = "distributionMethod"
    EXTERNAL_ID = "externalId"
    APP_DEFINITIONS = "appDefinitions"

class Get2ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APP_DEFINITIONS = "appDefinitions"

class Get5ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    DISTRIBUTION_METHOD = "distributionMethod"
    DISTRIBUTION_METHOD_DESC = "distributionMethod desc"
    EXTERNAL_ID = "externalId"
    EXTERNAL_ID_DESC = "externalId desc"

class Get6ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DISTRIBUTION_METHOD = "distributionMethod"
    EXTERNAL_ID = "externalId"
    APP_DEFINITIONS = "appDefinitions"

class Get7ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APP_DEFINITIONS = "appDefinitions"

class MicrosoftGraphAccessLevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EVERYONE = "everyone"
    INVITED = "invited"
    LOCKED = "locked"
    SAME_ENTERPRISE = "sameEnterprise"
    SAME_ENTERPRISE_AND_FEDERATED = "sameEnterpriseAndFederated"

class MicrosoftGraphActionState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    PENDING = "pending"
    CANCELED = "canceled"
    ACTIVE = "active"
    DONE = "done"
    FAILED = "failed"
    NOT_SUPPORTED = "notSupported"

class MicrosoftGraphAgreementAcceptanceState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ACCEPTED = "accepted"
    DECLINED = "declined"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphAllowedAudiences(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ME = "me"
    FAMILY = "family"
    CONTACTS = "contacts"
    GROUP_MEMBERS = "groupMembers"
    ORGANIZATION = "organization"
    FEDERATED_ORGANIZATIONS = "federatedOrganizations"
    EVERYONE = "everyone"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphAnalyticsActivityType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EMAIL = "Email"
    MEETING = "Meeting"
    FOCUS = "Focus"
    CHAT = "Chat"
    CALL = "Call"

class MicrosoftGraphAnniversaryType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    BIRTHDAY = "birthday"
    WEDDING = "wedding"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphApplicationMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MANUAL = "manual"
    AUTOMATIC = "automatic"
    RECOMMENDED = "recommended"

class MicrosoftGraphAppLogUploadState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "pending"
    COMPLETED = "completed"
    FAILED = "failed"

class MicrosoftGraphAttendeeType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    REQUIRED = "required"
    OPTIONAL = "optional"
    RESOURCE = "resource"

class MicrosoftGraphAuthenticationMethodSignInState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_SUPPORTED = "notSupported"
    NOT_ALLOWED_BY_POLICY = "notAllowedByPolicy"
    NOT_ENABLED = "notEnabled"
    PHONE_NUMBER_NOT_UNIQUE = "phoneNumberNotUnique"
    READY = "ready"
    NOT_CONFIGURED = "notConfigured"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphAuthenticationPhoneType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MOBILE = "mobile"
    ALTERNATE_MOBILE = "alternateMobile"
    OFFICE = "office"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphAutomaticRepliesStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DISABLED = "disabled"
    ALWAYS_ENABLED = "alwaysEnabled"
    SCHEDULED = "scheduled"

class MicrosoftGraphBodyType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    TEXT = "text"
    HTML = "html"

class MicrosoftGraphCalendarColor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LIGHT_BLUE = "lightBlue"
    LIGHT_GREEN = "lightGreen"
    AUTO = "auto"
    LIGHT_ORANGE = "lightOrange"
    LIGHT_GRAY = "lightGray"
    LIGHT_YELLOW = "lightYellow"
    LIGHT_TEAL = "lightTeal"
    LIGHT_PINK = "lightPink"
    LIGHT_BROWN = "lightBrown"
    LIGHT_RED = "lightRed"
    MAX_COLOR = "maxColor"

class MicrosoftGraphCalendarRoleType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    FREE_BUSY_READ = "freeBusyRead"
    LIMITED_READ = "limitedRead"
    READ = "read"
    WRITE = "write"
    DELEGATE_WITHOUT_PRIVATE_EVENT_ACCESS = "delegateWithoutPrivateEventAccess"
    DELEGATE_WITH_PRIVATE_EVENT_ACCESS = "delegateWithPrivateEventAccess"
    CUSTOM = "custom"

class MicrosoftGraphCategoryColor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PRESET0 = "preset0"
    PRESET1 = "preset1"
    NONE = "none"
    PRESET2 = "preset2"
    PRESET3 = "preset3"
    PRESET4 = "preset4"
    PRESET5 = "preset5"
    PRESET6 = "preset6"
    PRESET7 = "preset7"
    PRESET8 = "preset8"
    PRESET9 = "preset9"
    PRESET10 = "preset10"
    PRESET11 = "preset11"
    PRESET12 = "preset12"
    PRESET13 = "preset13"
    PRESET14 = "preset14"
    PRESET15 = "preset15"
    PRESET16 = "preset16"
    PRESET17 = "preset17"
    PRESET18 = "preset18"
    PRESET19 = "preset19"
    PRESET20 = "preset20"
    PRESET21 = "preset21"
    PRESET22 = "preset22"
    PRESET23 = "preset23"
    PRESET24 = "preset24"

class MicrosoftGraphChannelMembershipType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STANDARD = "standard"
    PRIVATE = "private"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphChassisType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    DESKTOP = "desktop"
    LAPTOP = "laptop"
    WORKS_WORKSTATION = "worksWorkstation"
    ENTERPRISE_SERVER = "enterpriseServer"
    PHONE = "phone"
    TABLET = "tablet"
    MOBILE_OTHER = "mobileOther"
    MOBILE_UNKNOWN = "mobileUnknown"

class MicrosoftGraphChatMessageImportance(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NORMAL = "normal"
    HIGH = "high"
    URGENT = "urgent"

class MicrosoftGraphChatMessagePolicyViolationDlpActionTypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    NOTIFY_SENDER = "notifySender"
    BLOCK_ACCESS = "blockAccess"
    BLOCK_ACCESS_EXTERNAL = "blockAccessExternal"

class MicrosoftGraphChatMessagePolicyViolationUserActionTypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    OVERRIDE = "override"
    REPORT_FALSE_POSITIVE = "reportFalsePositive"

class MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ALLOW_FALSE_POSITIVE_OVERRIDE = "allowFalsePositiveOverride"
    ALLOW_OVERRIDE_WITHOUT_JUSTIFICATION = "allowOverrideWithoutJustification"
    ALLOW_OVERRIDE_WITH_JUSTIFICATION = "allowOverrideWithJustification"

class MicrosoftGraphChatMessageType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MESSAGE = "message"
    CHAT_EVENT = "chatEvent"
    TYPING = "typing"

class MicrosoftGraphClonableTeamParts(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    APPS = "apps"
    TABS = "tabs"
    SETTINGS = "settings"
    CHANNELS = "channels"
    MEMBERS = "members"

class MicrosoftGraphComplianceState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPLIANT = "compliant"
    NONCOMPLIANT = "noncompliant"
    CONFLICT = "conflict"
    ERROR = "error"
    IN_GRACE_PERIOD = "inGracePeriod"
    CONFIG_MANAGER = "configManager"

class MicrosoftGraphComplianceStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    NOT_APPLICABLE = "notApplicable"
    COMPLIANT = "compliant"
    REMEDIATED = "remediated"
    NON_COMPLIANT = "nonCompliant"
    ERROR = "error"
    CONFLICT = "conflict"
    NOT_ASSIGNED = "notAssigned"

class MicrosoftGraphConfigurationManagerClientState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    INSTALLED = "installed"
    HEALTHY = "healthy"
    INSTALL_FAILED = "installFailed"
    UPDATE_FAILED = "updateFailed"
    COMMUNICATION_ERROR = "communicationError"

class MicrosoftGraphConfirmedBy(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    USER = "user"
    MANAGER = "manager"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphDayOfWeek(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SUNDAY = "sunday"
    MONDAY = "monday"
    TUESDAY = "tuesday"
    WEDNESDAY = "wednesday"
    THURSDAY = "thursday"
    FRIDAY = "friday"
    SATURDAY = "saturday"

class MicrosoftGraphDelegateMeetingMessageDeliveryOptions(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SEND_TO_DELEGATE_AND_INFORMATION_TO_PRINCIPAL = "sendToDelegateAndInformationToPrincipal"
    SEND_TO_DELEGATE_AND_PRINCIPAL = "sendToDelegateAndPrincipal"
    SEND_TO_DELEGATE_ONLY = "sendToDelegateOnly"

class MicrosoftGraphDeviceAndAppManagementAssignmentFilterType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    INCLUDE = "include"

class MicrosoftGraphDeviceAndAppManagementAssignmentSource(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DIRECT = "direct"
    POLICY_SETS = "policySets"

class MicrosoftGraphDeviceEnrollmentType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    USER_ENROLLMENT = "userEnrollment"
    DEVICE_ENROLLMENT_MANAGER = "deviceEnrollmentManager"
    APPLE_BULK_WITH_USER = "appleBulkWithUser"
    APPLE_BULK_WITHOUT_USER = "appleBulkWithoutUser"
    WINDOWS_AZURE_AD_JOIN = "windowsAzureADJoin"
    WINDOWS_BULK_USERLESS = "windowsBulkUserless"
    WINDOWS_AUTO_ENROLLMENT = "windowsAutoEnrollment"
    WINDOWS_BULK_AZURE_DOMAIN_JOIN = "windowsBulkAzureDomainJoin"
    WINDOWS_CO_MANAGEMENT = "windowsCoManagement"
    APPLE_USER_ENROLLMENT = "appleUserEnrollment"
    APPLE_USER_ENROLLMENT_WITH_SERVICE_ACCOUNT = "appleUserEnrollmentWithServiceAccount"
    AZURE_AD_JOIN_USING_AZURE_VM_EXTENSION = "azureAdJoinUsingAzureVmExtension"
    ANDROID_ENTERPRISE_DEDICATED_DEVICE = "androidEnterpriseDedicatedDevice"
    ANDROID_ENTERPRISE_FULLY_MANAGED = "androidEnterpriseFullyManaged"
    ANDROID_ENTERPRISE_CORPORATE_WORK_PROFILE = "androidEnterpriseCorporateWorkProfile"

class MicrosoftGraphDeviceGuardLocalSystemAuthorityCredentialGuardState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    RUNNING = "running"
    REBOOT_REQUIRED = "rebootRequired"
    NOT_LICENSED = "notLicensed"
    NOT_CONFIGURED = "notConfigured"
    VIRTUALIZATION_BASED_SECURITY_NOT_RUNNING = "virtualizationBasedSecurityNotRunning"

class MicrosoftGraphDeviceGuardVirtualizationBasedSecurityHardwareRequirementState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MEET_HARDWARE_REQUIREMENTS = "meetHardwareRequirements"
    SECURE_BOOT_REQUIRED = "secureBootRequired"
    DMA_PROTECTION_REQUIRED = "dmaProtectionRequired"
    HYPER_V_NOT_SUPPORTED_FOR_GUEST_VM = "hyperVNotSupportedForGuestVM"
    HYPER_V_NOT_AVAILABLE = "hyperVNotAvailable"

class MicrosoftGraphDeviceGuardVirtualizationBasedSecurityState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    RUNNING = "running"
    REBOOT_REQUIRED = "rebootRequired"
    REQUIRE64_BIT_ARCHITECTURE = "require64BitArchitecture"
    NOT_LICENSED = "notLicensed"
    NOT_CONFIGURED = "notConfigured"
    DOES_NOT_MEET_HARDWARE_REQUIREMENTS = "doesNotMeetHardwareRequirements"
    OTHER = "other"

class MicrosoftGraphDeviceManagementExchangeAccessState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    UNKNOWN = "unknown"
    ALLOWED = "allowed"
    BLOCKED = "blocked"
    QUARANTINED = "quarantined"

class MicrosoftGraphDeviceManagementExchangeAccessStateReason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    UNKNOWN = "unknown"
    EXCHANGE_GLOBAL_RULE = "exchangeGlobalRule"
    EXCHANGE_INDIVIDUAL_RULE = "exchangeIndividualRule"
    EXCHANGE_DEVICE_RULE = "exchangeDeviceRule"
    EXCHANGE_UPGRADE = "exchangeUpgrade"
    EXCHANGE_MAILBOX_POLICY = "exchangeMailboxPolicy"
    OTHER = "other"
    COMPLIANT = "compliant"
    NOT_COMPLIANT = "notCompliant"
    NOT_ENROLLED = "notEnrolled"
    UNKNOWN_LOCATION = "unknownLocation"
    MFA_REQUIRED = "mfaRequired"
    AZURE_AD_BLOCK_DUE_TO_ACCESS_POLICY = "azureADBlockDueToAccessPolicy"
    COMPROMISED_PASSWORD = "compromisedPassword"
    DEVICE_NOT_KNOWN_WITH_MANAGED_APP = "deviceNotKnownWithManagedApp"

class MicrosoftGraphDeviceRegistrationState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_REGISTERED = "notRegistered"
    REGISTERED = "registered"
    REVOKED = "revoked"
    KEY_CONFLICT = "keyConflict"
    APPROVAL_PENDING = "approvalPending"
    CERTIFICATE_RESET = "certificateReset"
    NOT_REGISTERED_PENDING_ENROLLMENT = "notRegisteredPendingEnrollment"
    UNKNOWN = "unknown"

class MicrosoftGraphDeviceType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DESKTOP = "desktop"
    WINDOWS_RT = "windowsRT"
    WIN_MO6 = "winMO6"
    NOKIA = "nokia"
    WINDOWS_PHONE = "windowsPhone"
    MAC = "mac"
    WIN_CE = "winCE"
    WIN_EMBEDDED = "winEmbedded"
    I_PHONE = "iPhone"
    I_PAD = "iPad"
    I_POD = "iPod"
    ANDROID = "android"
    I_SOC_CONSUMER = "iSocConsumer"
    UNIX = "unix"
    MAC_MDM = "macMDM"
    HOLO_LENS = "holoLens"
    SURFACE_HUB = "surfaceHub"
    ANDROID_FOR_WORK = "androidForWork"
    ANDROID_ENTERPRISE = "androidEnterprise"
    WINDOWS10_X = "windows10x"
    ANDROIDN_GMS = "androidnGMS"
    CLOUD_PC = "cloudPC"
    BLACKBERRY = "blackberry"
    PALM = "palm"
    UNKNOWN = "unknown"

class MicrosoftGraphEligibilityFilteringEnabledEntities(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    SWAP_REQUEST = "swapRequest"
    OFFER_SHIFT_REQUEST = "offerShiftRequest"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphEmailType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    WORK = "work"
    PERSONAL = "personal"
    MAIN = "main"
    OTHER = "other"

class MicrosoftGraphEventType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SINGLE_INSTANCE = "singleInstance"
    OCCURRENCE = "occurrence"
    EXCEPTION = "exception"
    SERIES_MASTER = "seriesMaster"

class MicrosoftGraphExternalAudienceScope(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    CONTACTS_ONLY = "contactsOnly"
    ALL = "all"

class MicrosoftGraphFollowupFlagStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_FLAGGED = "notFlagged"
    COMPLETE = "complete"
    FLAGGED = "flagged"

class MicrosoftGraphFreeBusyStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FREE = "free"
    TENTATIVE = "tentative"
    UNKNOWN = "unknown"
    BUSY = "busy"
    OOF = "oof"
    WORKING_ELSEWHERE = "workingElsewhere"

class MicrosoftGraphGiphyRatingType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STRICT = "strict"
    MODERATE = "moderate"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphGroupAccessType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    PRIVATE = "private"
    SECRET = "secret"
    PUBLIC = "public"

class MicrosoftGraphImportance(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LOW = "low"
    NORMAL = "normal"
    HIGH = "high"

class MicrosoftGraphInferenceClassificationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FOCUSED = "focused"
    OTHER = "other"

class MicrosoftGraphJoinType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    AZURE_AD_JOINED = "azureADJoined"
    AZURE_AD_REGISTERED = "azureADRegistered"
    HYBRID_AZURE_AD_JOINED = "hybridAzureADJoined"

class MicrosoftGraphLanguageProficiencyLevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ELEMENTARY = "elementary"
    CONVERSATIONAL = "conversational"
    LIMITED_WORKING = "limitedWorking"
    PROFESSIONAL_WORKING = "professionalWorking"
    FULL_PROFESSIONAL = "fullProfessional"
    NATIVE_OR_BILINGUAL = "nativeOrBilingual"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphLobbyBypassScope(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ORGANIZER = "organizer"
    ORGANIZATION = "organization"
    ORGANIZATION_AND_FEDERATED = "organizationAndFederated"
    EVERYONE = "everyone"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphLocationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DEFAULT = "default"
    CONFERENCE_ROOM = "conferenceRoom"
    HOME_ADDRESS = "homeAddress"
    BUSINESS_ADDRESS = "businessAddress"
    GEO_COORDINATES = "geoCoordinates"
    STREET_ADDRESS = "streetAddress"
    HOTEL = "hotel"
    RESTAURANT = "restaurant"
    LOCAL_BUSINESS = "localBusiness"
    POSTAL_ADDRESS = "postalAddress"

class MicrosoftGraphLocationUniqueIdType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    LOCATION_STORE = "locationStore"
    DIRECTORY = "directory"
    PRIVATE = "private"
    BING = "bing"

class MicrosoftGraphLongRunningOperationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTSTARTED = "notstarted"
    RUNNING = "running"
    SUCCEEDED = "succeeded"
    FAILED = "failed"

class MicrosoftGraphLostModeState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DISABLED = "disabled"
    ENABLED = "enabled"

class MicrosoftGraphMailboxRecipientType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    USER = "user"
    LINKED = "linked"
    SHARED = "shared"
    ROOM = "room"
    EQUIPMENT = "equipment"
    OTHERS = "others"

class MicrosoftGraphManagedAppFlaggedReason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ROOTED_DEVICE = "rootedDevice"
    ANDROID_BOOTLOADER_UNLOCKED = "androidBootloaderUnlocked"
    ANDROID_FACTORY_ROM_MODIFIED = "androidFactoryRomModified"

class MicrosoftGraphManagedDeviceArchitecture(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    X86 = "x86"
    X64 = "x64"
    ARM = "arm"
    AR_M64 = "arM64"

class MicrosoftGraphManagedDeviceManagementFeatures(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    MICROSOFT_MANAGED_DESKTOP = "microsoftManagedDesktop"

class MicrosoftGraphManagedDeviceOwnerType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPANY = "company"
    PERSONAL = "personal"

class MicrosoftGraphManagedDevicePartnerReportedHealthState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    ACTIVATED = "activated"
    DEACTIVATED = "deactivated"
    SECURED = "secured"
    LOW_SEVERITY = "lowSeverity"
    MEDIUM_SEVERITY = "mediumSeverity"
    HIGH_SEVERITY = "highSeverity"
    UNRESPONSIVE = "unresponsive"
    COMPROMISED = "compromised"
    MISCONFIGURED = "misconfigured"

class MicrosoftGraphManagementAgentType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EAS = "eas"
    MDM = "mdm"
    EAS_MDM = "easMdm"
    INTUNE_CLIENT = "intuneClient"
    EAS_INTUNE_CLIENT = "easIntuneClient"
    CONFIGURATION_MANAGER_CLIENT = "configurationManagerClient"
    CONFIGURATION_MANAGER_CLIENT_MDM = "configurationManagerClientMdm"
    CONFIGURATION_MANAGER_CLIENT_MDM_EAS = "configurationManagerClientMdmEas"
    UNKNOWN = "unknown"
    JAMF = "jamf"
    GOOGLE_CLOUD_DEVICE_POLICY_CONTROLLER = "googleCloudDevicePolicyController"
    MICROSOFT365_MANAGED_MDM = "microsoft365ManagedMdm"
    WINDOWS_MANAGEMENT_CLOUD_API = "windowsManagementCloudApi"

class MicrosoftGraphManagementState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MANAGED = "managed"
    RETIRE_PENDING = "retirePending"
    RETIRE_FAILED = "retireFailed"
    WIPE_PENDING = "wipePending"
    WIPE_FAILED = "wipeFailed"
    UNHEALTHY = "unhealthy"
    DELETE_PENDING = "deletePending"
    RETIRE_ISSUED = "retireIssued"
    WIPE_ISSUED = "wipeIssued"
    WIPE_CANCELED = "wipeCanceled"
    RETIRE_CANCELED = "retireCanceled"
    DISCOVERED = "discovered"

class MicrosoftGraphMeetingCapabilities(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    QUESTION_AND_ANSWER = "questionAndAnswer"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphMessageActionFlag(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ANY = "any"
    CALL = "call"
    DO_NOT_FORWARD = "doNotForward"
    FOLLOW_UP = "followUp"
    FYI = "fyi"
    FORWARD = "forward"
    NO_RESPONSE_NECESSARY = "noResponseNecessary"
    READ = "read"
    REPLY = "reply"
    REPLY_TO_ALL = "replyToAll"
    REVIEW = "review"

class MicrosoftGraphMobileAppIntent(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AVAILABLE = "available"
    NOT_AVAILABLE = "notAvailable"
    REQUIRED_INSTALL = "requiredInstall"
    REQUIRED_UNINSTALL = "requiredUninstall"
    REQUIRED_AND_AVAILABLE_INSTALL = "requiredAndAvailableInstall"
    AVAILABLE_INSTALL_WITHOUT_ENROLLMENT = "availableInstallWithoutEnrollment"
    EXCLUDE = "exclude"

class MicrosoftGraphOnenoteUserRole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    OWNER = "Owner"
    CONTRIBUTOR = "Contributor"
    NONE = "None"
    READER = "Reader"

class MicrosoftGraphOnlineMeetingPresenters(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EVERYONE = "everyone"
    ORGANIZATION = "organization"
    ROLE_IS_PRESENTER = "roleIsPresenter"
    ORGANIZER = "organizer"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphOnlineMeetingProviderType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    SKYPE_FOR_BUSINESS = "skypeForBusiness"
    SKYPE_FOR_CONSUMER = "skypeForConsumer"
    TEAMS_FOR_BUSINESS = "teamsForBusiness"

class MicrosoftGraphOnlineMeetingRole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ATTENDEE = "attendee"
    PRESENTER = "presenter"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphOperationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_STARTED = "NotStarted"
    RUNNING = "Running"
    COMPLETED = "Completed"
    FAILED = "Failed"

class MicrosoftGraphOwnerType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPANY = "company"
    PERSONAL = "personal"

class MicrosoftGraphPersonRelationship(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MANAGER = "manager"
    COLLEAGUE = "colleague"
    DIRECT_REPORT = "directReport"
    DOT_LINE_REPORT = "dotLineReport"
    ASSISTANT = "assistant"
    DOT_LINE_MANAGER = "dotLineManager"
    ALTERNATE_CONTACT = "alternateContact"
    FRIEND = "friend"
    SPOUSE = "spouse"
    SIBLING = "sibling"
    CHILD = "child"
    PARENT = "parent"
    SPONSOR = "sponsor"
    EMERGENCY_CONTACT = "emergencyContact"
    OTHER = "other"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphPhoneType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    HOME = "home"
    BUSINESS = "business"
    MOBILE = "mobile"
    OTHER = "other"
    ASSISTANT = "assistant"
    HOME_FAX = "homeFax"
    BUSINESS_FAX = "businessFax"
    OTHER_FAX = "otherFax"
    PAGER = "pager"
    RADIO = "radio"

class MicrosoftGraphPhysicalAddressType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    HOME = "home"
    BUSINESS = "business"
    OTHER = "other"

class MicrosoftGraphPlannerPreviewType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AUTOMATIC = "automatic"
    NO_PREVIEW = "noPreview"
    CHECKLIST = "checklist"
    DESCRIPTION = "description"
    REFERENCE = "reference"

class MicrosoftGraphPolicyPlatformType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ANDROID = "android"
    ANDROID_FOR_WORK = "androidForWork"
    I_OS = "iOS"
    MAC_OS = "macOS"
    WINDOWS_PHONE81 = "windowsPhone81"
    WINDOWS81_AND_LATER = "windows81AndLater"
    WINDOWS10_AND_LATER = "windows10AndLater"
    ANDROID_WORK_PROFILE = "androidWorkProfile"
    WINDOWS10_X_PROFILE = "windows10XProfile"
    ALL = "all"

class MicrosoftGraphPriority(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    HIGH = "High"
    LOW = "Low"

class MicrosoftGraphRecurrencePatternType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DAILY = "daily"
    WEEKLY = "weekly"
    ABSOLUTE_MONTHLY = "absoluteMonthly"
    RELATIVE_MONTHLY = "relativeMonthly"
    ABSOLUTE_YEARLY = "absoluteYearly"
    RELATIVE_YEARLY = "relativeYearly"

class MicrosoftGraphRecurrenceRangeType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    END_DATE = "endDate"
    NO_END = "noEnd"
    NUMBERED = "numbered"

class MicrosoftGraphReplyRestriction(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EVERYONE = "everyone"
    AUTHOR_AND_MODERATORS = "authorAndModerators"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphResponseType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ORGANIZER = "organizer"
    TENTATIVELY_ACCEPTED = "tentativelyAccepted"
    ACCEPTED = "accepted"
    DECLINED = "declined"
    NOT_RESPONDED = "notResponded"

class MicrosoftGraphResultantAppState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INSTALLED = "installed"
    NOT_APPLICABLE = "notApplicable"
    FAILED = "failed"
    NOT_INSTALLED = "notInstalled"
    UNINSTALL_FAILED = "uninstallFailed"
    PENDING_INSTALL = "pendingInstall"
    UNKNOWN = "unknown"

class MicrosoftGraphScheduleChangeRequestActor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SENDER = "sender"
    RECIPIENT = "recipient"
    MANAGER = "manager"
    SYSTEM = "system"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphScheduleChangeState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "pending"
    APPROVED = "approved"
    DECLINED = "declined"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphScheduleEntityTheme(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    WHITE = "white"
    BLUE = "blue"
    GREEN = "green"
    PURPLE = "purple"
    PINK = "pink"
    YELLOW = "yellow"
    GRAY = "gray"
    DARK_BLUE = "darkBlue"
    DARK_GREEN = "darkGreen"
    DARK_PURPLE = "darkPurple"
    DARK_PINK = "darkPink"
    DARK_YELLOW = "darkYellow"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphSecurityBaselineComplianceState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    SECURE = "secure"
    NOT_APPLICABLE = "notApplicable"
    NOT_SECURE = "notSecure"
    ERROR = "error"
    CONFLICT = "conflict"

class MicrosoftGraphSecurityBaselinePolicySourceType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DEVICE_CONFIGURATION = "deviceConfiguration"
    DEVICE_INTENT = "deviceIntent"

class MicrosoftGraphSensitivity(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NORMAL = "normal"
    PERSONAL = "personal"
    PRIVATE = "private"
    CONFIDENTIAL = "confidential"

class MicrosoftGraphSensitivityLabelTarget(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EMAIL = "email"
    SITE = "site"
    UNIFIED_GROUP = "unifiedGroup"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphSettingSourceType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DEVICE_CONFIGURATION = "deviceConfiguration"
    DEVICE_INTENT = "deviceIntent"

class MicrosoftGraphSkillProficiencyLevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ELEMENTARY = "elementary"
    LIMITED_WORKING = "limitedWorking"
    GENERAL_PROFESSIONAL = "generalProfessional"
    ADVANCED_PROFESSIONAL = "advancedProfessional"
    EXPERT = "expert"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ACTIVE = "active"
    UPDATED = "updated"
    DELETED = "deleted"
    IGNORED = "ignored"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTaskStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_STARTED = "notStarted"
    IN_PROGRESS = "inProgress"
    COMPLETED = "completed"
    WAITING_ON_OTHERS = "waitingOnOthers"
    DEFERRED = "deferred"

class MicrosoftGraphTeamsAppDistributionMethod(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STORE = "store"
    ORGANIZATION = "organization"
    SIDELOADED = "sideloaded"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamsAppPublishingState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SUBMITTED = "submitted"
    REJECTED = "rejected"
    PUBLISHED = "published"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamsAsyncOperationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "invalid"
    NOT_STARTED = "notStarted"
    IN_PROGRESS = "inProgress"
    SUCCEEDED = "succeeded"
    FAILED = "failed"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamsAsyncOperationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "invalid"
    CLONE_TEAM = "cloneTeam"
    ARCHIVE_TEAM = "archiveTeam"
    UNARCHIVE_TEAM = "unarchiveTeam"
    CREATE_TEAM = "createTeam"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamSpecialization(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    EDUCATION_STANDARD = "educationStandard"
    EDUCATION_CLASS = "educationClass"
    EDUCATION_PROFESSIONAL_LEARNING_COMMUNITY = "educationProfessionalLearningCommunity"
    EDUCATION_STAFF = "educationStaff"
    HEALTHCARE_STANDARD = "healthcareStandard"
    HEALTHCARE_CARE_COORDINATION = "healthcareCareCoordination"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamVisibilityType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PRIVATE = "private"
    PUBLIC = "public"
    HIDDEN_MEMBERSHIP = "hiddenMembership"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamworkActivityTopicSource(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ENTITY_URL = "entityUrl"
    TEXT = "text"

class MicrosoftGraphThreatAssessmentContentType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MAIL = "mail"
    URL = "url"
    FILE = "file"

class MicrosoftGraphThreatAssessmentRequestSource(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNDEFINED = "undefined"
    USER = "user"
    ADMINISTRATOR = "administrator"

class MicrosoftGraphThreatAssessmentResultType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CHECK_POLICY = "checkPolicy"
    RESCAN = "rescan"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphThreatAssessmentStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "pending"
    COMPLETED = "completed"

class MicrosoftGraphThreatCategory(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNDEFINED = "undefined"
    SPAM = "spam"
    PHISHING = "phishing"
    MALWARE = "malware"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphThreatExpectedAssessment(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    BLOCK = "block"
    UNBLOCK = "unblock"

class MicrosoftGraphTimeCardState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CLOCKED_IN = "clockedIn"
    ON_BREAK = "onBreak"
    CLOCKED_OUT = "clockedOut"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTimeOffReasonIconType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    CAR = "car"
    CALENDAR = "calendar"
    RUNNING = "running"
    PLANE = "plane"
    FIRST_AID = "firstAid"
    DOCTOR = "doctor"
    NOT_WORKING = "notWorking"
    CLOCK = "clock"
    JURY_DUTY = "juryDuty"
    GLOBE = "globe"
    CUP = "cup"
    PHONE = "phone"
    WEATHER = "weather"
    UMBRELLA = "umbrella"
    PIGGY_BANK = "piggyBank"
    DOG = "dog"
    CAKE = "cake"
    TRAFFIC_CONE = "trafficCone"
    PIN = "pin"
    SUNNY = "sunny"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphUserNewMessageRestriction(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EVERYONE = "everyone"
    EVERYONE_EXCEPT_GUESTS = "everyoneExceptGuests"
    MODERATORS = "moderators"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphWebsiteType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    OTHER = "other"
    HOME = "home"
    WORK = "work"
    BLOG = "blog"
    PROFILE = "profile"

class MicrosoftGraphWeekIndex(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FIRST = "first"
    SECOND = "second"
    THIRD = "third"
    FOURTH = "fourth"
    LAST = "last"

class MicrosoftGraphWellknownListName(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    DEFAULT_LIST = "defaultList"
    FLAGGED_EMAILS = "flaggedEmails"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphWindowsDeviceHealthState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CLEAN = "clean"
    FULL_SCAN_PENDING = "fullScanPending"
    REBOOT_PENDING = "rebootPending"
    MANUAL_STEPS_PENDING = "manualStepsPending"
    OFFLINE_SCAN_PENDING = "offlineScanPending"
    CRITICAL = "critical"

class MicrosoftGraphWindowsMalwareCategory(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "invalid"
    ADWARE = "adware"
    SPYWARE = "spyware"
    PASSWORD_STEALER = "passwordStealer"
    TROJAN_DOWNLOADER = "trojanDownloader"
    WORM = "worm"
    BACKDOOR = "backdoor"
    REMOTE_ACCESS_TROJAN = "remoteAccessTrojan"
    TROJAN = "trojan"
    EMAIL_FLOODER = "emailFlooder"
    KEYLOGGER = "keylogger"
    DIALER = "dialer"
    MONITORING_SOFTWARE = "monitoringSoftware"
    BROWSER_MODIFIER = "browserModifier"
    COOKIE = "cookie"
    BROWSER_PLUGIN = "browserPlugin"
    AOL_EXPLOIT = "aolExploit"
    NUKER = "nuker"
    SECURITY_DISABLER = "securityDisabler"
    JOKE_PROGRAM = "jokeProgram"
    HOSTILE_ACTIVE_X_CONTROL = "hostileActiveXControl"
    SOFTWARE_BUNDLER = "softwareBundler"
    STEALTH_NOTIFIER = "stealthNotifier"
    SETTINGS_MODIFIER = "settingsModifier"
    TOOL_BAR = "toolBar"
    REMOTE_CONTROL_SOFTWARE = "remoteControlSoftware"
    TROJAN_FTP = "trojanFtp"
    POTENTIAL_UNWANTED_SOFTWARE = "potentialUnwantedSoftware"
    ICQ_EXPLOIT = "icqExploit"
    TROJAN_TELNET = "trojanTelnet"
    EXPLOIT = "exploit"
    FILESHARING_PROGRAM = "filesharingProgram"
    MALWARE_CREATION_TOOL = "malwareCreationTool"
    TOOL = "tool"
    TROJAN_DENIAL_OF_SERVICE = "trojanDenialOfService"
    TROJAN_DROPPER = "trojanDropper"
    TROJAN_MASS_MAILER = "trojanMassMailer"
    TROJAN_MONITORING_SOFTWARE = "trojanMonitoringSoftware"
    TROJAN_PROXY_SERVER = "trojanProxyServer"
    VIRUS = "virus"
    KNOWN = "known"
    UNKNOWN = "unknown"
    SPP = "spp"
    BEHAVIOR = "behavior"
    VULNERABILITY = "vulnerability"
    POLICY = "policy"
    ENTERPRISE_UNWANTED_SOFTWARE = "enterpriseUnwantedSoftware"
    RANSOM = "ransom"
    HIPS_RULE = "hipsRule"

class MicrosoftGraphWindowsMalwareExecutionState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    BLOCKED = "blocked"
    ALLOWED = "allowed"
    RUNNING = "running"
    NOT_RUNNING = "notRunning"

class MicrosoftGraphWindowsMalwareSeverity(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    LOW = "low"
    MODERATE = "moderate"
    HIGH = "high"
    SEVERE = "severe"

class MicrosoftGraphWindowsMalwareState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    DETECTED = "detected"
    CLEANED = "cleaned"
    QUARANTINED = "quarantined"
    REMOVED = "removed"
    ALLOWED = "allowed"
    BLOCKED = "blocked"
    CLEAN_FAILED = "cleanFailed"
    QUARANTINE_FAILED = "quarantineFailed"
    REMOVE_FAILED = "removeFailed"
    ALLOW_FAILED = "allowFailed"
    ABANDONED = "abandoned"
    BLOCK_FAILED = "blockFailed"

class MicrosoftGraphWindowsMalwareThreatState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ACTIVE = "active"
    ACTION_FAILED = "actionFailed"
    MANUAL_STEPS_REQUIRED = "manualStepsRequired"
    FULL_SCAN_REQUIRED = "fullScanRequired"
    REBOOT_REQUIRED = "rebootRequired"
    REMEDIATED_WITH_NON_CRITICAL_FAILURES = "remediatedWithNonCriticalFailures"
    QUARANTINED = "quarantined"
    REMOVED = "removed"
    CLEANED = "cleaned"
    ALLOWED = "allowed"
    NO_STATUS_CLEARED = "noStatusCleared"

class MicrosoftGraphWorkbookOperationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_STARTED = "notStarted"
    RUNNING = "running"
    SUCCEEDED = "succeeded"
    FAILED = "failed"

class MicrosoftGraphWorkforceIntegrationEncryptionProtocol(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SHARED_SECRET = "sharedSecret"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphWorkforceIntegrationSupportedEntities(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    SHIFT = "shift"
    SWAP_REQUEST = "swapRequest"
    USER_SHIFT_PREFERENCES = "userShiftPreferences"
    OPEN_SHIFT = "openShift"
    OPEN_SHIFT_REQUEST = "openShiftRequest"
    OFFER_SHIFT_REQUEST = "offerShiftRequest"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"
