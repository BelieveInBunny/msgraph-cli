# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type
)
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_teams_beta.action import (
    AddAppDefinitions,
    AddChatsChatInstalledApps,
    AddUsersMembers,
    AddAttachments,
    AddBody,
    AddChannelIdentity,
    AddMentions,
    AddReactions,
    AddHostedContents,
    AddPolicyViolationPolicyTip,
    AddConfiguration,
    AddTopic,
    AddChatsTemplateParameters,
    AddChatsMembersValues,
    AddFunSettings,
    AddGuestSettings,
    AddMemberSettings,
    AddMessagingSettings,
    AddGroupsInstalledApps,
    AddGroupsMembers,
    AddPhoto,
    AddScheduleOfferShiftRequests,
    AddScheduleOpenShiftChangeRequests,
    AddScheduleSchedulingGroups,
    AddScheduleSwapShiftsChangeRequests,
    AddScheduleTimeOffReasons,
    AddScheduleTimeOffRequests,
    AddScheduleTimeClockSettingsApprovedLocation,
    AddModerationSettings,
    AddTeamsMembers,
    AddError,
    AddTeamsTemplateParameters,
    AddTeamsChannelsMembersValues,
    AddTeamsMembersValues,
    AddTeamsPrimarychannelMembersValues,
    AddDraftOpenShift,
    AddDraftTimeOff,
    AddEncryption
)


def load_arguments(self, _):

    with self.argument_context('teams delete') as c:
        c.argument('teams_app_id', type=str, help='key: id of teamsApp')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams create-team-app') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='The name of the catalog app provided by the app developer in the '
                   'Microsoft Teams zip app package.')
        c.argument('distribution_method', arg_type=get_enum_type(['store', 'organization', 'sideloaded', ''
                                                                  'unknownFutureValue']), help='')
        c.argument('external_id', type=str, help='The ID of the catalog provided by the app developer in the Microsoft '
                   'Teams zip app package.')
        c.argument('app_definitions', action=AddAppDefinitions, nargs='*', help='The details for each version of the '
                   'app.')

    with self.argument_context('teams get-team-app') as c:
        c.argument('teams_app_id', type=str, help='key: id of teamsApp')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-team-app') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams update-team-app') as c:
        c.argument('teams_app_id', type=str, help='key: id of teamsApp')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='The name of the catalog app provided by the app developer in the '
                   'Microsoft Teams zip app package.')
        c.argument('distribution_method', arg_type=get_enum_type(['store', 'organization', 'sideloaded', ''
                                                                  'unknownFutureValue']), help='')
        c.argument('external_id', type=str, help='The ID of the catalog provided by the app developer in the Microsoft '
                   'Teams zip app package.')
        c.argument('app_definitions', action=AddAppDefinitions, nargs='*', help='The details for each version of the '
                   'app.')

    with self.argument_context('teams delete') as c:
        c.argument('teams_app_id', type=str, help='key: id of teamsApp')
        c.argument('teams_app_definition_id', type=str, help='key: id of teamsAppDefinition')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams create-app-definition') as c:
        c.argument('teams_app_id', type=str, help='key: id of teamsApp')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('azure_ad_app_id', type=str, help='')
        c.argument('description', type=str, help='')
        c.argument('display_name', type=str, help='The name of the app provided by the app developer.')
        c.argument('last_modified_date_time', help='')
        c.argument('publishing_state', arg_type=get_enum_type(['submitted', 'rejected', 'published', ''
                                                               'unknownFutureValue']), help='')
        c.argument('shortdescription', type=str, help='')
        c.argument('microsoft_graph_teams_app_definition_teams_app_id_teams_app_id', type=str, help='The ID from the '
                   'Teams app manifest.')
        c.argument('version', type=str, help='The version number of the application.')
        c.argument('created_by_user_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_device_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_application_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('created_by_application_id', type=str, help='Unique identifier for the identity.')

    with self.argument_context('teams get-app-definition') as c:
        c.argument('teams_app_id', type=str, help='key: id of teamsApp')
        c.argument('teams_app_definition_id', type=str, help='key: id of teamsAppDefinition')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-app-definition') as c:
        c.argument('teams_app_id', type=str, help='key: id of teamsApp')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams update-app-definition') as c:
        c.argument('teams_app_id', type=str, help='key: id of teamsApp')
        c.argument('teams_app_definition_id', type=str, help='key: id of teamsAppDefinition')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('azure_ad_app_id', type=str, help='')
        c.argument('description', type=str, help='')
        c.argument('display_name', type=str, help='The name of the app provided by the app developer.')
        c.argument('last_modified_date_time', help='')
        c.argument('publishing_state', arg_type=get_enum_type(['submitted', 'rejected', 'published', ''
                                                               'unknownFutureValue']), help='')
        c.argument('shortdescription', type=str, help='')
        c.argument('microsoft_graph_teams_app_definition_teams_app_id_teams_app_id', type=str, help='The ID from the '
                   'Teams app manifest.')
        c.argument('version', type=str, help='The version number of the application.')
        c.argument('created_by_user_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_device_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_application_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('created_by_application_id', type=str, help='Unique identifier for the identity.')

    with self.argument_context('teams delete') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams create-chat') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='')
        c.argument('last_updated_date_time', help='')
        c.argument('topic', type=str, help='')
        c.argument('installed_apps', action=AddChatsChatInstalledApps, nargs='*', help='')
        c.argument('members', action=AddUsersMembers, nargs='*', help='')
        c.argument('messages', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('tabs', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('teams get-chat') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-chat') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams update-chat') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='')
        c.argument('last_updated_date_time', help='')
        c.argument('topic', type=str, help='')
        c.argument('installed_apps', action=AddChatsChatInstalledApps, nargs='*', help='')
        c.argument('members', action=AddUsersMembers, nargs='*', help='')
        c.argument('messages', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('tabs', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('teams delete') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('if_match', type=str, help='ETag')
        c.argument('conversation_member_id', type=str, help='key: id of conversationMember')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')

    with self.argument_context('teams create-installed-app') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('teams_app_definition_id', type=str, help='Read-only.')
        c.argument('teams_app_definition_azure_adapp_id', type=str, help='')
        c.argument('teams_app_definition_description', type=str, help='')
        c.argument('teams_app_definition_display_name', type=str, help='The name of the app provided by the app '
                   'developer.')
        c.argument('teams_app_definition_last_modified_date_time', help='')
        c.argument('teams_app_definition_publishing_state', arg_type=get_enum_type(['submitted', 'rejected', ''
                                                                                    'published',
                   'unknownFutureValue']), help='')
        c.argument('teams_app_definition_shortdescription', type=str, help='')
        c.argument('teams_app_definition_teams_app_id', type=str, help='The ID from the Teams app manifest.')
        c.argument('teams_app_definition_version', type=str, help='The version number of the application.')
        c.argument('teams_app_definition_created_by_user_display_name', type=str, help='The identity\'s display name. '
                   'Note that this may not always be available or up to date. For example, if a user changes their '
                   'display name, the API may show the new value in a future response, but the items associated with '
                   'the user won\'t show up as having changed when using delta.')
        c.argument('teams_app_definition_created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('teams_app_definition_created_by_device_display_name', type=str, help='The identity\'s display '
                   'name. Note that this may not always be available or up to date. For example, if a user changes '
                   'their display name, the API may show the new value in a future response, but the items associated '
                   'with the user won\'t show up as having changed when using delta.')
        c.argument('teams_app_definition_created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('teams_app_definition_created_by_application_display_name', type=str, help='The identity\'s display '
                   'name. Note that this may not always be available or up to date. For example, if a user changes '
                   'their display name, the API may show the new value in a future response, but the items associated '
                   'with the user won\'t show up as having changed when using delta.')
        c.argument('teams_app_definition_created_by_application_id', type=str, help='Unique identifier for the '
                   'identity.')
        c.argument('teams_app_id', type=str, help='Read-only.')
        c.argument('teams_app_display_name', type=str, help='The name of the catalog app provided by the app developer '
                   'in the Microsoft Teams zip app package.')
        c.argument('teams_app_distribution_method', arg_type=get_enum_type(['store', 'organization', 'sideloaded', ''
                                                                            'unknownFutureValue']), help='')
        c.argument('teams_app_external_id', type=str, help='The ID of the catalog provided by the app developer in the '
                   'Microsoft Teams zip app package.')
        c.argument('teams_app_app_definitions', action=AddAppDefinitions, nargs='*', help='The details for each '
                   'version of the app.')

    with self.argument_context('teams create-member') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='The display name of the user.')
        c.argument('roles', nargs='*', help='The roles for that user.')

    with self.argument_context('teams create-message') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='Attached files. Attachments are currently '
                   'read-only – sending attachments is not supported.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('channel_identity', action=AddChannelIdentity, nargs='*', help='channelIdentity')
        c.argument('microsoft_graph_chat_message_chat_id', type=str, help='')
        c.argument('created_date_time', help='Read only. Timestamp of when the chat message was created.')
        c.argument('deleted_date_time', help='Read only. Timestamp at which the chat message was deleted, or null if '
                   'not deleted.')
        c.argument('etag', type=str, help='Read-only. Version number of the chat message.')
        c.argument('importance', arg_type=get_enum_type(['normal', 'high', 'urgent']), help='')
        c.argument('last_edited_date_time', help='Read only. Timestamp when edits to the chat message were made. '
                   'Triggers an \'Edited\' flag in the Microsoft Teams UI. If no edits are made the value is null.')
        c.argument('last_modified_date_time', help='Read only. Timestamp when the chat message is created (initial '
                   'setting) or edited, including when a reaction is added or removed.')
        c.argument('locale', type=str, help='Locale of the chat message set by the client.')
        c.argument('mentions', action=AddMentions, nargs='*', help='List of entities mentioned in the chat message. '
                   'Currently supports user, bot, team, channel.')
        c.argument('message_type', arg_type=get_enum_type(['message', 'chatEvent', 'typing']), help='')
        c.argument('reactions', action=AddReactions, nargs='*', help='')
        c.argument('reply_to_id', type=str, help='Read-only. Id of the parent chat message or root chat message of the '
                   'thread. (Only applies to chat messages in channels not chats)')
        c.argument('subject', type=str, help='The subject of the chat message, in plaintext.')
        c.argument('summary', type=str, help='Summary text of the chat message that could be used for push '
                   'notifications and summary views or fall back views. Only applies to channel chat messages, not '
                   'chat messages in a chat.')
        c.argument('web_url', type=str, help='')
        c.argument('hosted_contents', action=AddHostedContents, nargs='*', help='')
        c.argument('replies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('policy_violation_dlp_action', arg_type=get_enum_type(['none', 'notifySender', 'blockAccess', ''
                                                                          'blockAccessExternal']), help='')
        c.argument('policy_violation_justification_text', type=str, help='Justification text provided by the sender of '
                   'the message when overriding a policy violation.')
        c.argument('policy_violation_policy_tip', action=AddPolicyViolationPolicyTip, nargs='*', help=''
                   'chatMessagePolicyViolationPolicyTip')
        c.argument('policy_violation_user_action', arg_type=get_enum_type(['none', 'override', 'reportFalsePositive']),
                   help='')
        c.argument('policy_violation_verdict_details', arg_type=get_enum_type(['none', 'allowFalsePositiveOverride', ''
                                                                               'allowOverrideWithoutJustification', ''
                                                                               'allowOverrideWithJustification']),
                   help='')
        c.argument('from_user_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_device_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_application_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('from_application_id', type=str, help='Unique identifier for the identity.')

    with self.argument_context('teams create-tab') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('configuration', action=AddConfiguration, nargs='*', help='teamsTabConfiguration')
        c.argument('display_name', type=str, help='Name of the tab.')
        c.argument('message_id', type=str, help='')
        c.argument('sort_order_index', type=str, help='')
        c.argument('teams_app_id', type=str, help='')
        c.argument('web_url', type=str, help='Deep link URL of the tab instance. Read only.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('teams_app_display_name', type=str, help='The name of the catalog app provided by the app developer '
                   'in the Microsoft Teams zip app package.')
        c.argument('teams_app_distribution_method', arg_type=get_enum_type(['store', 'organization', 'sideloaded', ''
                                                                            'unknownFutureValue']), help='')
        c.argument('teams_app_external_id', type=str, help='The ID of the catalog provided by the app developer in the '
                   'Microsoft Teams zip app package.')
        c.argument('teams_app_app_definitions', action=AddAppDefinitions, nargs='*', help='The details for each '
                   'version of the app.')

    with self.argument_context('teams get-installed-app') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-member') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('conversation_member_id', type=str, help='key: id of conversationMember')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-message') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-tab') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-installed-app') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-member') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-message') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-tab') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams send-activity-notification') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('topic', action=AddTopic, nargs='*', help='teamworkActivityTopic')
        c.argument('activity_type', type=str, help='')
        c.argument('chain_id', type=int, help='')
        c.argument('preview_text', action=AddBody, nargs='*', help='itemBody')
        c.argument('template_parameters', action=AddChatsTemplateParameters, nargs='*', help='')
        c.argument('recipient', type=validate_file_or_dict, help='teamworkNotificationRecipient Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams update-installed-app') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('teams_app_definition_id', type=str, help='Read-only.')
        c.argument('teams_app_definition_azure_adapp_id', type=str, help='')
        c.argument('teams_app_definition_description', type=str, help='')
        c.argument('teams_app_definition_display_name', type=str, help='The name of the app provided by the app '
                   'developer.')
        c.argument('teams_app_definition_last_modified_date_time', help='')
        c.argument('teams_app_definition_publishing_state', arg_type=get_enum_type(['submitted', 'rejected', ''
                                                                                    'published',
                   'unknownFutureValue']), help='')
        c.argument('teams_app_definition_shortdescription', type=str, help='')
        c.argument('teams_app_definition_teams_app_id', type=str, help='The ID from the Teams app manifest.')
        c.argument('teams_app_definition_version', type=str, help='The version number of the application.')
        c.argument('teams_app_definition_created_by_user_display_name', type=str, help='The identity\'s display name. '
                   'Note that this may not always be available or up to date. For example, if a user changes their '
                   'display name, the API may show the new value in a future response, but the items associated with '
                   'the user won\'t show up as having changed when using delta.')
        c.argument('teams_app_definition_created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('teams_app_definition_created_by_device_display_name', type=str, help='The identity\'s display '
                   'name. Note that this may not always be available or up to date. For example, if a user changes '
                   'their display name, the API may show the new value in a future response, but the items associated '
                   'with the user won\'t show up as having changed when using delta.')
        c.argument('teams_app_definition_created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('teams_app_definition_created_by_application_display_name', type=str, help='The identity\'s display '
                   'name. Note that this may not always be available or up to date. For example, if a user changes '
                   'their display name, the API may show the new value in a future response, but the items associated '
                   'with the user won\'t show up as having changed when using delta.')
        c.argument('teams_app_definition_created_by_application_id', type=str, help='Unique identifier for the '
                   'identity.')
        c.argument('teams_app_id', type=str, help='Read-only.')
        c.argument('teams_app_display_name', type=str, help='The name of the catalog app provided by the app developer '
                   'in the Microsoft Teams zip app package.')
        c.argument('teams_app_distribution_method', arg_type=get_enum_type(['store', 'organization', 'sideloaded', ''
                                                                            'unknownFutureValue']), help='')
        c.argument('teams_app_external_id', type=str, help='The ID of the catalog provided by the app developer in the '
                   'Microsoft Teams zip app package.')
        c.argument('teams_app_app_definitions', action=AddAppDefinitions, nargs='*', help='The details for each '
                   'version of the app.')

    with self.argument_context('teams update-member') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('conversation_member_id', type=str, help='key: id of conversationMember')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='The display name of the user.')
        c.argument('roles', nargs='*', help='The roles for that user.')

    with self.argument_context('teams update-message') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='Attached files. Attachments are currently '
                   'read-only – sending attachments is not supported.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('channel_identity', action=AddChannelIdentity, nargs='*', help='channelIdentity')
        c.argument('microsoft_graph_chat_message_chat_id', type=str, help='')
        c.argument('created_date_time', help='Read only. Timestamp of when the chat message was created.')
        c.argument('deleted_date_time', help='Read only. Timestamp at which the chat message was deleted, or null if '
                   'not deleted.')
        c.argument('etag', type=str, help='Read-only. Version number of the chat message.')
        c.argument('importance', arg_type=get_enum_type(['normal', 'high', 'urgent']), help='')
        c.argument('last_edited_date_time', help='Read only. Timestamp when edits to the chat message were made. '
                   'Triggers an \'Edited\' flag in the Microsoft Teams UI. If no edits are made the value is null.')
        c.argument('last_modified_date_time', help='Read only. Timestamp when the chat message is created (initial '
                   'setting) or edited, including when a reaction is added or removed.')
        c.argument('locale', type=str, help='Locale of the chat message set by the client.')
        c.argument('mentions', action=AddMentions, nargs='*', help='List of entities mentioned in the chat message. '
                   'Currently supports user, bot, team, channel.')
        c.argument('message_type', arg_type=get_enum_type(['message', 'chatEvent', 'typing']), help='')
        c.argument('reactions', action=AddReactions, nargs='*', help='')
        c.argument('reply_to_id', type=str, help='Read-only. Id of the parent chat message or root chat message of the '
                   'thread. (Only applies to chat messages in channels not chats)')
        c.argument('subject', type=str, help='The subject of the chat message, in plaintext.')
        c.argument('summary', type=str, help='Summary text of the chat message that could be used for push '
                   'notifications and summary views or fall back views. Only applies to channel chat messages, not '
                   'chat messages in a chat.')
        c.argument('web_url', type=str, help='')
        c.argument('hosted_contents', action=AddHostedContents, nargs='*', help='')
        c.argument('replies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('policy_violation_dlp_action', arg_type=get_enum_type(['none', 'notifySender', 'blockAccess', ''
                                                                          'blockAccessExternal']), help='')
        c.argument('policy_violation_justification_text', type=str, help='Justification text provided by the sender of '
                   'the message when overriding a policy violation.')
        c.argument('policy_violation_policy_tip', action=AddPolicyViolationPolicyTip, nargs='*', help=''
                   'chatMessagePolicyViolationPolicyTip')
        c.argument('policy_violation_user_action', arg_type=get_enum_type(['none', 'override', 'reportFalsePositive']),
                   help='')
        c.argument('policy_violation_verdict_details', arg_type=get_enum_type(['none', 'allowFalsePositiveOverride', ''
                                                                               'allowOverrideWithoutJustification', ''
                                                                               'allowOverrideWithJustification']),
                   help='')
        c.argument('from_user_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_device_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_application_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('from_application_id', type=str, help='Unique identifier for the identity.')

    with self.argument_context('teams update-tab') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('configuration', action=AddConfiguration, nargs='*', help='teamsTabConfiguration')
        c.argument('display_name', type=str, help='Name of the tab.')
        c.argument('message_id', type=str, help='')
        c.argument('sort_order_index', type=str, help='')
        c.argument('teams_app_id', type=str, help='')
        c.argument('web_url', type=str, help='Deep link URL of the tab instance. Read only.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('teams_app_display_name', type=str, help='The name of the catalog app provided by the app developer '
                   'in the Microsoft Teams zip app package.')
        c.argument('teams_app_distribution_method', arg_type=get_enum_type(['store', 'organization', 'sideloaded', ''
                                                                            'unknownFutureValue']), help='')
        c.argument('teams_app_external_id', type=str, help='The ID of the catalog provided by the app developer in the '
                   'Microsoft Teams zip app package.')
        c.argument('teams_app_app_definitions', action=AddAppDefinitions, nargs='*', help='The details for each '
                   'version of the app.')

    with self.argument_context('teams delete') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams get-ref-team-app') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')

    with self.argument_context('teams get-ref-team-app-definition') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')

    with self.argument_context('teams get-team-app') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-team-app-definition') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams set-ref-team-app') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams set-ref-team-app-definition') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams upgrade') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')

    with self.argument_context('teams add') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('values', action=AddChatsMembersValues, nargs='*', help='')

    with self.argument_context('teams delete') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_hosted_content_id', type=str, help='key: id of chatMessageHostedContent')
        c.argument('if_match', type=str, help='ETag')
        c.argument('chat_message_id1', type=str, help='key: id of chatMessage')

    with self.argument_context('teams create-hosted-content') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_bytes', help='')
        c.argument('content_type', type=str, help='')

    with self.argument_context('teams create-reply') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='Attached files. Attachments are currently '
                   'read-only – sending attachments is not supported.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('channel_identity', action=AddChannelIdentity, nargs='*', help='channelIdentity')
        c.argument('microsoft_graph_chat_message_chat_id', type=str, help='')
        c.argument('created_date_time', help='Read only. Timestamp of when the chat message was created.')
        c.argument('deleted_date_time', help='Read only. Timestamp at which the chat message was deleted, or null if '
                   'not deleted.')
        c.argument('etag', type=str, help='Read-only. Version number of the chat message.')
        c.argument('importance', arg_type=get_enum_type(['normal', 'high', 'urgent']), help='')
        c.argument('last_edited_date_time', help='Read only. Timestamp when edits to the chat message were made. '
                   'Triggers an \'Edited\' flag in the Microsoft Teams UI. If no edits are made the value is null.')
        c.argument('last_modified_date_time', help='Read only. Timestamp when the chat message is created (initial '
                   'setting) or edited, including when a reaction is added or removed.')
        c.argument('locale', type=str, help='Locale of the chat message set by the client.')
        c.argument('mentions', action=AddMentions, nargs='*', help='List of entities mentioned in the chat message. '
                   'Currently supports user, bot, team, channel.')
        c.argument('message_type', arg_type=get_enum_type(['message', 'chatEvent', 'typing']), help='')
        c.argument('reactions', action=AddReactions, nargs='*', help='')
        c.argument('reply_to_id', type=str, help='Read-only. Id of the parent chat message or root chat message of the '
                   'thread. (Only applies to chat messages in channels not chats)')
        c.argument('subject', type=str, help='The subject of the chat message, in plaintext.')
        c.argument('summary', type=str, help='Summary text of the chat message that could be used for push '
                   'notifications and summary views or fall back views. Only applies to channel chat messages, not '
                   'chat messages in a chat.')
        c.argument('web_url', type=str, help='')
        c.argument('hosted_contents', action=AddHostedContents, nargs='*', help='')
        c.argument('replies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('policy_violation_dlp_action', arg_type=get_enum_type(['none', 'notifySender', 'blockAccess', ''
                                                                          'blockAccessExternal']), help='')
        c.argument('policy_violation_justification_text', type=str, help='Justification text provided by the sender of '
                   'the message when overriding a policy violation.')
        c.argument('policy_violation_policy_tip', action=AddPolicyViolationPolicyTip, nargs='*', help=''
                   'chatMessagePolicyViolationPolicyTip')
        c.argument('policy_violation_user_action', arg_type=get_enum_type(['none', 'override', 'reportFalsePositive']),
                   help='')
        c.argument('policy_violation_verdict_details', arg_type=get_enum_type(['none', 'allowFalsePositiveOverride', ''
                                                                               'allowOverrideWithoutJustification', ''
                                                                               'allowOverrideWithJustification']),
                   help='')
        c.argument('from_user_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_device_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_application_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('from_application_id', type=str, help='Unique identifier for the identity.')

    with self.argument_context('teams delta') as c:
        c.argument('chat_id', type=str, help='key: id of chat')

    with self.argument_context('teams get-hosted-content') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_hosted_content_id', type=str, help='key: id of chatMessageHostedContent')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-hosted-content-content') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_hosted_content_id', type=str, help='key: id of chatMessageHostedContent')

    with self.argument_context('teams get-reply') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_id1', type=str, help='key: id of chatMessage')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-hosted-content') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-reply') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams set-hosted-content-content') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_hosted_content_id', type=str, help='key: id of chatMessageHostedContent')
        c.argument('data', help='New media content.')

    with self.argument_context('teams update-hosted-content') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_hosted_content_id', type=str, help='key: id of chatMessageHostedContent')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_bytes', help='')
        c.argument('content_type', type=str, help='')

    with self.argument_context('teams update-reply') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_id1', type=str, help='key: id of chatMessage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='Attached files. Attachments are currently '
                   'read-only – sending attachments is not supported.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('channel_identity', action=AddChannelIdentity, nargs='*', help='channelIdentity')
        c.argument('microsoft_graph_chat_message_chat_id', type=str, help='')
        c.argument('created_date_time', help='Read only. Timestamp of when the chat message was created.')
        c.argument('deleted_date_time', help='Read only. Timestamp at which the chat message was deleted, or null if '
                   'not deleted.')
        c.argument('etag', type=str, help='Read-only. Version number of the chat message.')
        c.argument('importance', arg_type=get_enum_type(['normal', 'high', 'urgent']), help='')
        c.argument('last_edited_date_time', help='Read only. Timestamp when edits to the chat message were made. '
                   'Triggers an \'Edited\' flag in the Microsoft Teams UI. If no edits are made the value is null.')
        c.argument('last_modified_date_time', help='Read only. Timestamp when the chat message is created (initial '
                   'setting) or edited, including when a reaction is added or removed.')
        c.argument('locale', type=str, help='Locale of the chat message set by the client.')
        c.argument('mentions', action=AddMentions, nargs='*', help='List of entities mentioned in the chat message. '
                   'Currently supports user, bot, team, channel.')
        c.argument('message_type', arg_type=get_enum_type(['message', 'chatEvent', 'typing']), help='')
        c.argument('reactions', action=AddReactions, nargs='*', help='')
        c.argument('reply_to_id', type=str, help='Read-only. Id of the parent chat message or root chat message of the '
                   'thread. (Only applies to chat messages in channels not chats)')
        c.argument('subject', type=str, help='The subject of the chat message, in plaintext.')
        c.argument('summary', type=str, help='Summary text of the chat message that could be used for push '
                   'notifications and summary views or fall back views. Only applies to channel chat messages, not '
                   'chat messages in a chat.')
        c.argument('web_url', type=str, help='')
        c.argument('hosted_contents', action=AddHostedContents, nargs='*', help='')
        c.argument('replies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('policy_violation_dlp_action', arg_type=get_enum_type(['none', 'notifySender', 'blockAccess', ''
                                                                          'blockAccessExternal']), help='')
        c.argument('policy_violation_justification_text', type=str, help='Justification text provided by the sender of '
                   'the message when overriding a policy violation.')
        c.argument('policy_violation_policy_tip', action=AddPolicyViolationPolicyTip, nargs='*', help=''
                   'chatMessagePolicyViolationPolicyTip')
        c.argument('policy_violation_user_action', arg_type=get_enum_type(['none', 'override', 'reportFalsePositive']),
                   help='')
        c.argument('policy_violation_verdict_details', arg_type=get_enum_type(['none', 'allowFalsePositiveOverride', ''
                                                                               'allowOverrideWithoutJustification', ''
                                                                               'allowOverrideWithJustification']),
                   help='')
        c.argument('from_user_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_device_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_application_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('from_application_id', type=str, help='Unique identifier for the identity.')

    with self.argument_context('teams delta') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')

    with self.argument_context('teams delete') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams get-ref-team-app') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')

    with self.argument_context('teams get-team-app') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams set-ref-team-app') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams delete') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams get-team') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams update-team') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('classification', type=str, help='An optional label. Typically describes the data or business '
                   'sensitivity of the team. Must match one of a pre-configured set in the tenant\'s directory.')
        c.argument('created_date_time', help='')
        c.argument('description', type=str, help='An optional description for the team.')
        c.argument('display_name', type=str, help='The name of the team.')
        c.argument('fun_settings', action=AddFunSettings, nargs='*', help='teamFunSettings')
        c.argument('guest_settings', action=AddGuestSettings, nargs='*', help='teamGuestSettings')
        c.argument('internal_id', type=str, help='A unique ID for the team that has been used in a few places such as '
                   'the audit log/Office 365 Management Activity API.')
        c.argument('is_archived', arg_type=get_three_state_flag(), help='Whether this team is in read-only mode.')
        c.argument('is_membership_limited_to_owners', arg_type=get_three_state_flag(), help='')
        c.argument('member_settings', action=AddMemberSettings, nargs='*', help='teamMemberSettings')
        c.argument('messaging_settings', action=AddMessagingSettings, nargs='*', help='teamMessagingSettings')
        c.argument('specialization', arg_type=get_enum_type(['none', 'educationStandard', 'educationClass', ''
                                                             'educationProfessionalLearningCommunity',
                                                             'educationStaff', 'healthcareStandard', ''
                                                             'healthcareCareCoordination', 'unknownFutureValue']),
                   help='')
        c.argument('visibility', arg_type=get_enum_type(['private', 'public', 'hiddenMembership',
                                                        'unknownFutureValue']), help='')
        c.argument('web_url', type=str, help='A hyperlink that will go to the team in the Microsoft Teams client. This '
                   'is the URL that you get when you right-click a team in the Microsoft Teams client and select Get '
                   'link to team. This URL should be treated as an opaque blob, and not parsed.')
        c.argument('channels', type=validate_file_or_dict, help='The collection of channels & messages associated with '
                   'the team. Expected value: json-string/@json-file.')
        c.argument('group', type=validate_file_or_dict, help='Represents an Azure Active Directory object. The '
                   'directoryObject type is the base type for many other directory entity types. Expected value: '
                   'json-string/@json-file.')
        c.argument('installed_apps', action=AddGroupsInstalledApps, nargs='*',
                   help='The apps installed in this team.')
        c.argument('members', action=AddGroupsMembers, nargs='*', help='Members and owners of the team.')
        c.argument('operations', type=validate_file_or_dict, help='The async operations that ran or are running on '
                   'this team. Expected value: json-string/@json-file.')
        c.argument('owners', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('photo', action=AddPhoto, nargs='*', help='profilePhoto')
        c.argument('primary_channel', type=validate_file_or_dict, help='channel Expected value: '
                   'json-string/@json-file.')
        c.argument('template_id', type=str, help='Read-only.')
        c.argument('schedule_id', type=str, help='Read-only.')
        c.argument('schedule_enabled', arg_type=get_three_state_flag(), help='Indicates whether the schedule is '
                   'enabled for the team. Required.')
        c.argument('schedule_offer_shift_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether '
                   'offer shift requests are enabled for the schedule.')
        c.argument('schedule_open_shifts_enabled', arg_type=get_three_state_flag(), help='Indicates whether open '
                   'shifts are enabled for the schedule.')
        c.argument('schedule_provision_status', arg_type=get_enum_type(['NotStarted', 'Running', 'Completed',
                                                                       'Failed']), help='')
        c.argument('schedule_provision_status_code', type=str, help='Additional information about why schedule '
                   'provisioning failed.')
        c.argument('schedule_swap_shifts_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether '
                   'swap shifts requests are enabled for the schedule.')
        c.argument('schedule_time_clock_enabled', arg_type=get_three_state_flag(), help='Indicates whether time clock '
                   'is enabled for the schedule.')
        c.argument('schedule_time_off_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether time '
                   'off requests are enabled for the schedule.')
        c.argument('schedule_time_zone', type=str, help='Indicates the time zone of the schedule team using tz '
                   'database format. Required.')
        c.argument('schedule_workforce_integration_ids', nargs='*', help='')
        c.argument('schedule_offer_shift_requests', action=AddScheduleOfferShiftRequests, nargs='*', help='')
        c.argument('schedule_open_shift_change_requests', action=AddScheduleOpenShiftChangeRequests, nargs='*',
                   help='')
        c.argument('schedule_open_shifts', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('schedule_scheduling_groups', action=AddScheduleSchedulingGroups, nargs='*', help='The logical '
                   'grouping of users in the schedule (usually by role).')
        c.argument('schedule_shifts', type=validate_file_or_dict, help='The shifts in the schedule. Expected value: '
                   'json-string/@json-file.')
        c.argument('schedule_swap_shifts_change_requests', action=AddScheduleSwapShiftsChangeRequests, nargs='*',
                   help='')
        c.argument('schedule_time_cards', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('schedule_time_off_reasons', action=AddScheduleTimeOffReasons, nargs='*', help='The set of reasons '
                   'for a time off in the schedule.')
        c.argument('schedule_time_off_requests', action=AddScheduleTimeOffRequests, nargs='*', help='')
        c.argument('schedule_times_off', type=validate_file_or_dict, help='The instances of times off in the schedule. '
                   'Expected value: json-string/@json-file.')
        c.argument('schedule_time_clock_settings_approved_location',
                   action=AddScheduleTimeClockSettingsApprovedLocation, nargs='*', help='geoCoordinates')
        c.argument('discovery_settings_show_in_teams_search_and_suggestions', arg_type=get_three_state_flag(),
                   help='')

    with self.argument_context('teams delete') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams create-team') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('classification', type=str, help='An optional label. Typically describes the data or business '
                   'sensitivity of the team. Must match one of a pre-configured set in the tenant\'s directory.')
        c.argument('created_date_time', help='')
        c.argument('description', type=str, help='An optional description for the team.')
        c.argument('display_name', type=str, help='The name of the team.')
        c.argument('fun_settings', action=AddFunSettings, nargs='*', help='teamFunSettings')
        c.argument('guest_settings', action=AddGuestSettings, nargs='*', help='teamGuestSettings')
        c.argument('internal_id', type=str, help='A unique ID for the team that has been used in a few places such as '
                   'the audit log/Office 365 Management Activity API.')
        c.argument('is_archived', arg_type=get_three_state_flag(), help='Whether this team is in read-only mode.')
        c.argument('is_membership_limited_to_owners', arg_type=get_three_state_flag(), help='')
        c.argument('member_settings', action=AddMemberSettings, nargs='*', help='teamMemberSettings')
        c.argument('messaging_settings', action=AddMessagingSettings, nargs='*', help='teamMessagingSettings')
        c.argument('specialization', arg_type=get_enum_type(['none', 'educationStandard', 'educationClass', ''
                                                             'educationProfessionalLearningCommunity',
                                                             'educationStaff', 'healthcareStandard', ''
                                                             'healthcareCareCoordination', 'unknownFutureValue']),
                   help='')
        c.argument('visibility', arg_type=get_enum_type(['private', 'public', 'hiddenMembership',
                                                        'unknownFutureValue']), help='')
        c.argument('web_url', type=str, help='A hyperlink that will go to the team in the Microsoft Teams client. This '
                   'is the URL that you get when you right-click a team in the Microsoft Teams client and select Get '
                   'link to team. This URL should be treated as an opaque blob, and not parsed.')
        c.argument('channels', type=validate_file_or_dict, help='The collection of channels & messages associated with '
                   'the team. Expected value: json-string/@json-file.')
        c.argument('group', type=validate_file_or_dict, help='Represents an Azure Active Directory object. The '
                   'directoryObject type is the base type for many other directory entity types. Expected value: '
                   'json-string/@json-file.')
        c.argument('installed_apps', action=AddGroupsInstalledApps, nargs='*',
                   help='The apps installed in this team.')
        c.argument('members', action=AddGroupsMembers, nargs='*', help='Members and owners of the team.')
        c.argument('operations', type=validate_file_or_dict, help='The async operations that ran or are running on '
                   'this team. Expected value: json-string/@json-file.')
        c.argument('owners', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('photo', action=AddPhoto, nargs='*', help='profilePhoto')
        c.argument('primary_channel', type=validate_file_or_dict, help='channel Expected value: '
                   'json-string/@json-file.')
        c.argument('template_id', type=str, help='Read-only.')
        c.argument('schedule_id', type=str, help='Read-only.')
        c.argument('schedule_enabled', arg_type=get_three_state_flag(), help='Indicates whether the schedule is '
                   'enabled for the team. Required.')
        c.argument('schedule_offer_shift_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether '
                   'offer shift requests are enabled for the schedule.')
        c.argument('schedule_open_shifts_enabled', arg_type=get_three_state_flag(), help='Indicates whether open '
                   'shifts are enabled for the schedule.')
        c.argument('schedule_provision_status', arg_type=get_enum_type(['NotStarted', 'Running', 'Completed',
                                                                       'Failed']), help='')
        c.argument('schedule_provision_status_code', type=str, help='Additional information about why schedule '
                   'provisioning failed.')
        c.argument('schedule_swap_shifts_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether '
                   'swap shifts requests are enabled for the schedule.')
        c.argument('schedule_time_clock_enabled', arg_type=get_three_state_flag(), help='Indicates whether time clock '
                   'is enabled for the schedule.')
        c.argument('schedule_time_off_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether time '
                   'off requests are enabled for the schedule.')
        c.argument('schedule_time_zone', type=str, help='Indicates the time zone of the schedule team using tz '
                   'database format. Required.')
        c.argument('schedule_workforce_integration_ids', nargs='*', help='')
        c.argument('schedule_offer_shift_requests', action=AddScheduleOfferShiftRequests, nargs='*', help='')
        c.argument('schedule_open_shift_change_requests', action=AddScheduleOpenShiftChangeRequests, nargs='*',
                   help='')
        c.argument('schedule_open_shifts', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('schedule_scheduling_groups', action=AddScheduleSchedulingGroups, nargs='*', help='The logical '
                   'grouping of users in the schedule (usually by role).')
        c.argument('schedule_shifts', type=validate_file_or_dict, help='The shifts in the schedule. Expected value: '
                   'json-string/@json-file.')
        c.argument('schedule_swap_shifts_change_requests', action=AddScheduleSwapShiftsChangeRequests, nargs='*',
                   help='')
        c.argument('schedule_time_cards', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('schedule_time_off_reasons', action=AddScheduleTimeOffReasons, nargs='*', help='The set of reasons '
                   'for a time off in the schedule.')
        c.argument('schedule_time_off_requests', action=AddScheduleTimeOffRequests, nargs='*', help='')
        c.argument('schedule_times_off', type=validate_file_or_dict, help='The instances of times off in the schedule. '
                   'Expected value: json-string/@json-file.')
        c.argument('schedule_time_clock_settings_approved_location',
                   action=AddScheduleTimeClockSettingsApprovedLocation, nargs='*', help='geoCoordinates')
        c.argument('discovery_settings_show_in_teams_search_and_suggestions', arg_type=get_three_state_flag(),
                   help='')

    with self.argument_context('teams get-team') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-team') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams update-team') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('classification', type=str, help='An optional label. Typically describes the data or business '
                   'sensitivity of the team. Must match one of a pre-configured set in the tenant\'s directory.')
        c.argument('created_date_time', help='')
        c.argument('description', type=str, help='An optional description for the team.')
        c.argument('display_name', type=str, help='The name of the team.')
        c.argument('fun_settings', action=AddFunSettings, nargs='*', help='teamFunSettings')
        c.argument('guest_settings', action=AddGuestSettings, nargs='*', help='teamGuestSettings')
        c.argument('internal_id', type=str, help='A unique ID for the team that has been used in a few places such as '
                   'the audit log/Office 365 Management Activity API.')
        c.argument('is_archived', arg_type=get_three_state_flag(), help='Whether this team is in read-only mode.')
        c.argument('is_membership_limited_to_owners', arg_type=get_three_state_flag(), help='')
        c.argument('member_settings', action=AddMemberSettings, nargs='*', help='teamMemberSettings')
        c.argument('messaging_settings', action=AddMessagingSettings, nargs='*', help='teamMessagingSettings')
        c.argument('specialization', arg_type=get_enum_type(['none', 'educationStandard', 'educationClass', ''
                                                             'educationProfessionalLearningCommunity',
                                                             'educationStaff', 'healthcareStandard', ''
                                                             'healthcareCareCoordination', 'unknownFutureValue']),
                   help='')
        c.argument('visibility', arg_type=get_enum_type(['private', 'public', 'hiddenMembership',
                                                        'unknownFutureValue']), help='')
        c.argument('web_url', type=str, help='A hyperlink that will go to the team in the Microsoft Teams client. This '
                   'is the URL that you get when you right-click a team in the Microsoft Teams client and select Get '
                   'link to team. This URL should be treated as an opaque blob, and not parsed.')
        c.argument('channels', type=validate_file_or_dict, help='The collection of channels & messages associated with '
                   'the team. Expected value: json-string/@json-file.')
        c.argument('group', type=validate_file_or_dict, help='Represents an Azure Active Directory object. The '
                   'directoryObject type is the base type for many other directory entity types. Expected value: '
                   'json-string/@json-file.')
        c.argument('installed_apps', action=AddGroupsInstalledApps, nargs='*',
                   help='The apps installed in this team.')
        c.argument('members', action=AddGroupsMembers, nargs='*', help='Members and owners of the team.')
        c.argument('operations', type=validate_file_or_dict, help='The async operations that ran or are running on '
                   'this team. Expected value: json-string/@json-file.')
        c.argument('owners', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('photo', action=AddPhoto, nargs='*', help='profilePhoto')
        c.argument('primary_channel', type=validate_file_or_dict, help='channel Expected value: '
                   'json-string/@json-file.')
        c.argument('template_id', type=str, help='Read-only.')
        c.argument('schedule_id', type=str, help='Read-only.')
        c.argument('schedule_enabled', arg_type=get_three_state_flag(), help='Indicates whether the schedule is '
                   'enabled for the team. Required.')
        c.argument('schedule_offer_shift_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether '
                   'offer shift requests are enabled for the schedule.')
        c.argument('schedule_open_shifts_enabled', arg_type=get_three_state_flag(), help='Indicates whether open '
                   'shifts are enabled for the schedule.')
        c.argument('schedule_provision_status', arg_type=get_enum_type(['NotStarted', 'Running', 'Completed',
                                                                       'Failed']), help='')
        c.argument('schedule_provision_status_code', type=str, help='Additional information about why schedule '
                   'provisioning failed.')
        c.argument('schedule_swap_shifts_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether '
                   'swap shifts requests are enabled for the schedule.')
        c.argument('schedule_time_clock_enabled', arg_type=get_three_state_flag(), help='Indicates whether time clock '
                   'is enabled for the schedule.')
        c.argument('schedule_time_off_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether time '
                   'off requests are enabled for the schedule.')
        c.argument('schedule_time_zone', type=str, help='Indicates the time zone of the schedule team using tz '
                   'database format. Required.')
        c.argument('schedule_workforce_integration_ids', nargs='*', help='')
        c.argument('schedule_offer_shift_requests', action=AddScheduleOfferShiftRequests, nargs='*', help='')
        c.argument('schedule_open_shift_change_requests', action=AddScheduleOpenShiftChangeRequests, nargs='*',
                   help='')
        c.argument('schedule_open_shifts', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('schedule_scheduling_groups', action=AddScheduleSchedulingGroups, nargs='*', help='The logical '
                   'grouping of users in the schedule (usually by role).')
        c.argument('schedule_shifts', type=validate_file_or_dict, help='The shifts in the schedule. Expected value: '
                   'json-string/@json-file.')
        c.argument('schedule_swap_shifts_change_requests', action=AddScheduleSwapShiftsChangeRequests, nargs='*',
                   help='')
        c.argument('schedule_time_cards', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('schedule_time_off_reasons', action=AddScheduleTimeOffReasons, nargs='*', help='The set of reasons '
                   'for a time off in the schedule.')
        c.argument('schedule_time_off_requests', action=AddScheduleTimeOffRequests, nargs='*', help='')
        c.argument('schedule_times_off', type=validate_file_or_dict, help='The instances of times off in the schedule. '
                   'Expected value: json-string/@json-file.')
        c.argument('schedule_time_clock_settings_approved_location',
                   action=AddScheduleTimeClockSettingsApprovedLocation, nargs='*', help='geoCoordinates')
        c.argument('discovery_settings_show_in_teams_search_and_suggestions', arg_type=get_three_state_flag(),
                   help='')

    with self.argument_context('teams delete') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('if_match', type=str, help='ETag')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('conversation_member_id', type=str, help='key: id of conversationMember')
        c.argument('teams_async_operation_id', type=str, help='key: id of teamsAsyncOperation')

    with self.argument_context('teams archive') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('should_set_spo_site_read_only_for_members', arg_type=get_three_state_flag(), help='')

    with self.argument_context('teams clone') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('display_name', type=str, help='')
        c.argument('description', type=str, help='')
        c.argument('mail_nickname', type=str, help='')
        c.argument('classification', type=str, help='')
        c.argument('visibility', arg_type=get_enum_type(['private', 'public', 'hiddenMembership',
                                                        'unknownFutureValue']), help='')
        c.argument('parts_to_clone', arg_type=get_enum_type(['apps', 'tabs', 'settings', 'channels', 'members']),
                   help='')

    with self.argument_context('teams complete-migration') as c:
        c.argument('team_id', type=str, help='key: id of team')

    with self.argument_context('teams create-channel') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Read only. Timestamp at which the channel was created.')
        c.argument('description', type=str, help='Optional textual description for the channel.')
        c.argument('display_name', type=str, help='Channel name as it will appear to the user in Microsoft Teams.')
        c.argument('email', type=str, help='The email address for sending messages to the channel. Read-only.')
        c.argument('is_favorite_by_default', arg_type=get_three_state_flag(), help='Indicates whether the channel '
                   'should automatically be marked \'favorite\' for all members of the team. Can only be set '
                   'programmatically with Create team. Default: false.')
        c.argument('membership_type', arg_type=get_enum_type(['standard', 'private', 'unknownFutureValue']), help='')
        c.argument('moderation_settings', action=AddModerationSettings, nargs='*', help='channelModerationSettings')
        c.argument('web_url', type=str, help='A hyperlink that will go to the channel in Microsoft Teams. This is the '
                   'URL that you get when you right-click a channel in Microsoft Teams and select Get link to channel. '
                   'This URL should be treated as an opaque blob, and not parsed. Read-only.')
        c.argument('files_folder', type=validate_file_or_dict,
                   help='driveItem Expected value: json-string/@json-file.')
        c.argument('members', action=AddTeamsMembers, nargs='*', help='')
        c.argument('messages', type=validate_file_or_dict, help='A collection of all the messages in the channel. A '
                   'navigation property. Nullable. Expected value: json-string/@json-file.')
        c.argument('tabs', type=validate_file_or_dict, help='A collection of all the tabs in the channel. A navigation '
                   'property. Expected value: json-string/@json-file.')

    with self.argument_context('teams create-installed-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('teams_app_definition_id', type=str, help='Read-only.')
        c.argument('teams_app_definition_azure_adapp_id', type=str, help='')
        c.argument('teams_app_definition_description', type=str, help='')
        c.argument('teams_app_definition_display_name', type=str, help='The name of the app provided by the app '
                   'developer.')
        c.argument('teams_app_definition_last_modified_date_time', help='')
        c.argument('teams_app_definition_publishing_state', arg_type=get_enum_type(['submitted', 'rejected', ''
                                                                                    'published',
                   'unknownFutureValue']), help='')
        c.argument('teams_app_definition_shortdescription', type=str, help='')
        c.argument('teams_app_definition_teams_app_id', type=str, help='The ID from the Teams app manifest.')
        c.argument('teams_app_definition_version', type=str, help='The version number of the application.')
        c.argument('teams_app_definition_created_by_user_display_name', type=str, help='The identity\'s display name. '
                   'Note that this may not always be available or up to date. For example, if a user changes their '
                   'display name, the API may show the new value in a future response, but the items associated with '
                   'the user won\'t show up as having changed when using delta.')
        c.argument('teams_app_definition_created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('teams_app_definition_created_by_device_display_name', type=str, help='The identity\'s display '
                   'name. Note that this may not always be available or up to date. For example, if a user changes '
                   'their display name, the API may show the new value in a future response, but the items associated '
                   'with the user won\'t show up as having changed when using delta.')
        c.argument('teams_app_definition_created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('teams_app_definition_created_by_application_display_name', type=str, help='The identity\'s display '
                   'name. Note that this may not always be available or up to date. For example, if a user changes '
                   'their display name, the API may show the new value in a future response, but the items associated '
                   'with the user won\'t show up as having changed when using delta.')
        c.argument('teams_app_definition_created_by_application_id', type=str, help='Unique identifier for the '
                   'identity.')
        c.argument('teams_app_id', type=str, help='Read-only.')
        c.argument('teams_app_display_name', type=str, help='The name of the catalog app provided by the app developer '
                   'in the Microsoft Teams zip app package.')
        c.argument('teams_app_distribution_method', arg_type=get_enum_type(['store', 'organization', 'sideloaded', ''
                                                                            'unknownFutureValue']), help='')
        c.argument('teams_app_external_id', type=str, help='The ID of the catalog provided by the app developer in the '
                   'Microsoft Teams zip app package.')
        c.argument('teams_app_app_definitions', action=AddAppDefinitions, nargs='*', help='The details for each '
                   'version of the app.')

    with self.argument_context('teams create-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='The display name of the user.')
        c.argument('roles', nargs='*', help='The roles for that user.')

    with self.argument_context('teams create-operation') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attempts_count', type=int, help='Number of times the operation was attempted before being marked '
                   'successful or failed.')
        c.argument('created_date_time', help='Time when the operation was created.')
        c.argument('error', action=AddError, nargs='*', help='operationError')
        c.argument('last_action_date_time', help='Time when the async operation was last updated.')
        c.argument('operation_type', arg_type=get_enum_type(['invalid', 'cloneTeam', 'archiveTeam', 'unarchiveTeam', ''
                                                             'createTeam', 'unknownFutureValue']), help='')
        c.argument('status', arg_type=get_enum_type(['invalid', 'notStarted', 'inProgress', 'succeeded', 'failed', ''
                                                     'unknownFutureValue']), help='')
        c.argument('target_resource_id', type=str, help='The ID of the object that\'s created or modified as result of '
                   'this async operation, typically a team.')
        c.argument('target_resource_location', type=str, help='The location of the object that\'s created or modified '
                   'as result of this async operation. This URL should be treated as an opaque value and not parsed '
                   'into its component paths.')

    with self.argument_context('teams create-ref-owner') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams get-channel') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-group') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-installed-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('conversation_member_id', type=str, help='key: id of conversationMember')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-operation') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_async_operation_id', type=str, help='key: id of teamsAsyncOperation')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-photo') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-photo-content') as c:
        c.argument('team_id', type=str, help='key: id of team')

    with self.argument_context('teams get-primary-channel') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-ref-group') as c:
        c.argument('team_id', type=str, help='key: id of team')

    with self.argument_context('teams get-ref-template') as c:
        c.argument('team_id', type=str, help='key: id of team')

    with self.argument_context('teams get-schedule') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-template') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-channel') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-installed-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-operation') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-owner') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-ref-owner') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('teams send-activity-notification') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('topic', action=AddTopic, nargs='*', help='teamworkActivityTopic')
        c.argument('activity_type', type=str, help='')
        c.argument('chain_id', type=int, help='')
        c.argument('preview_text', action=AddBody, nargs='*', help='itemBody')
        c.argument('template_parameters', action=AddTeamsTemplateParameters, nargs='*', help='')
        c.argument('recipient', type=validate_file_or_dict, help='teamworkNotificationRecipient Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams set-photo-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('data', help='New media content.')

    with self.argument_context('teams set-ref-group') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams set-ref-template') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams unarchive') as c:
        c.argument('team_id', type=str, help='key: id of team')

    with self.argument_context('teams update-channel') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Read only. Timestamp at which the channel was created.')
        c.argument('description', type=str, help='Optional textual description for the channel.')
        c.argument('display_name', type=str, help='Channel name as it will appear to the user in Microsoft Teams.')
        c.argument('email', type=str, help='The email address for sending messages to the channel. Read-only.')
        c.argument('is_favorite_by_default', arg_type=get_three_state_flag(), help='Indicates whether the channel '
                   'should automatically be marked \'favorite\' for all members of the team. Can only be set '
                   'programmatically with Create team. Default: false.')
        c.argument('membership_type', arg_type=get_enum_type(['standard', 'private', 'unknownFutureValue']), help='')
        c.argument('moderation_settings', action=AddModerationSettings, nargs='*', help='channelModerationSettings')
        c.argument('web_url', type=str, help='A hyperlink that will go to the channel in Microsoft Teams. This is the '
                   'URL that you get when you right-click a channel in Microsoft Teams and select Get link to channel. '
                   'This URL should be treated as an opaque blob, and not parsed. Read-only.')
        c.argument('files_folder', type=validate_file_or_dict,
                   help='driveItem Expected value: json-string/@json-file.')
        c.argument('members', action=AddTeamsMembers, nargs='*', help='')
        c.argument('messages', type=validate_file_or_dict, help='A collection of all the messages in the channel. A '
                   'navigation property. Nullable. Expected value: json-string/@json-file.')
        c.argument('tabs', type=validate_file_or_dict, help='A collection of all the tabs in the channel. A navigation '
                   'property. Expected value: json-string/@json-file.')

    with self.argument_context('teams update-installed-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('teams_app_definition_id', type=str, help='Read-only.')
        c.argument('teams_app_definition_azure_adapp_id', type=str, help='')
        c.argument('teams_app_definition_description', type=str, help='')
        c.argument('teams_app_definition_display_name', type=str, help='The name of the app provided by the app '
                   'developer.')
        c.argument('teams_app_definition_last_modified_date_time', help='')
        c.argument('teams_app_definition_publishing_state', arg_type=get_enum_type(['submitted', 'rejected', ''
                                                                                    'published',
                   'unknownFutureValue']), help='')
        c.argument('teams_app_definition_shortdescription', type=str, help='')
        c.argument('teams_app_definition_teams_app_id', type=str, help='The ID from the Teams app manifest.')
        c.argument('teams_app_definition_version', type=str, help='The version number of the application.')
        c.argument('teams_app_definition_created_by_user_display_name', type=str, help='The identity\'s display name. '
                   'Note that this may not always be available or up to date. For example, if a user changes their '
                   'display name, the API may show the new value in a future response, but the items associated with '
                   'the user won\'t show up as having changed when using delta.')
        c.argument('teams_app_definition_created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('teams_app_definition_created_by_device_display_name', type=str, help='The identity\'s display '
                   'name. Note that this may not always be available or up to date. For example, if a user changes '
                   'their display name, the API may show the new value in a future response, but the items associated '
                   'with the user won\'t show up as having changed when using delta.')
        c.argument('teams_app_definition_created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('teams_app_definition_created_by_application_display_name', type=str, help='The identity\'s display '
                   'name. Note that this may not always be available or up to date. For example, if a user changes '
                   'their display name, the API may show the new value in a future response, but the items associated '
                   'with the user won\'t show up as having changed when using delta.')
        c.argument('teams_app_definition_created_by_application_id', type=str, help='Unique identifier for the '
                   'identity.')
        c.argument('teams_app_id', type=str, help='Read-only.')
        c.argument('teams_app_display_name', type=str, help='The name of the catalog app provided by the app developer '
                   'in the Microsoft Teams zip app package.')
        c.argument('teams_app_distribution_method', arg_type=get_enum_type(['store', 'organization', 'sideloaded', ''
                                                                            'unknownFutureValue']), help='')
        c.argument('teams_app_external_id', type=str, help='The ID of the catalog provided by the app developer in the '
                   'Microsoft Teams zip app package.')
        c.argument('teams_app_app_definitions', action=AddAppDefinitions, nargs='*', help='The details for each '
                   'version of the app.')

    with self.argument_context('teams update-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('conversation_member_id', type=str, help='key: id of conversationMember')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='The display name of the user.')
        c.argument('roles', nargs='*', help='The roles for that user.')

    with self.argument_context('teams update-operation') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_async_operation_id', type=str, help='key: id of teamsAsyncOperation')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attempts_count', type=int, help='Number of times the operation was attempted before being marked '
                   'successful or failed.')
        c.argument('created_date_time', help='Time when the operation was created.')
        c.argument('error', action=AddError, nargs='*', help='operationError')
        c.argument('last_action_date_time', help='Time when the async operation was last updated.')
        c.argument('operation_type', arg_type=get_enum_type(['invalid', 'cloneTeam', 'archiveTeam', 'unarchiveTeam', ''
                                                             'createTeam', 'unknownFutureValue']), help='')
        c.argument('status', arg_type=get_enum_type(['invalid', 'notStarted', 'inProgress', 'succeeded', 'failed', ''
                                                     'unknownFutureValue']), help='')
        c.argument('target_resource_id', type=str, help='The ID of the object that\'s created or modified as result of '
                   'this async operation, typically a team.')
        c.argument('target_resource_location', type=str, help='The location of the object that\'s created or modified '
                   'as result of this async operation. This URL should be treated as an opaque value and not parsed '
                   'into its component paths.')

    with self.argument_context('teams update-photo') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('height', type=int, help='The height of the photo. Read-only.')
        c.argument('width', type=int, help='The width of the photo. Read-only.')

    with self.argument_context('teams update-primary-channel') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Read only. Timestamp at which the channel was created.')
        c.argument('description', type=str, help='Optional textual description for the channel.')
        c.argument('display_name', type=str, help='Channel name as it will appear to the user in Microsoft Teams.')
        c.argument('email', type=str, help='The email address for sending messages to the channel. Read-only.')
        c.argument('is_favorite_by_default', arg_type=get_three_state_flag(), help='Indicates whether the channel '
                   'should automatically be marked \'favorite\' for all members of the team. Can only be set '
                   'programmatically with Create team. Default: false.')
        c.argument('membership_type', arg_type=get_enum_type(['standard', 'private', 'unknownFutureValue']), help='')
        c.argument('moderation_settings', action=AddModerationSettings, nargs='*', help='channelModerationSettings')
        c.argument('web_url', type=str, help='A hyperlink that will go to the channel in Microsoft Teams. This is the '
                   'URL that you get when you right-click a channel in Microsoft Teams and select Get link to channel. '
                   'This URL should be treated as an opaque blob, and not parsed. Read-only.')
        c.argument('files_folder', type=validate_file_or_dict,
                   help='driveItem Expected value: json-string/@json-file.')
        c.argument('members', action=AddTeamsMembers, nargs='*', help='')
        c.argument('messages', type=validate_file_or_dict, help='A collection of all the messages in the channel. A '
                   'navigation property. Nullable. Expected value: json-string/@json-file.')
        c.argument('tabs', type=validate_file_or_dict, help='A collection of all the tabs in the channel. A navigation '
                   'property. Expected value: json-string/@json-file.')

    with self.argument_context('teams update-schedule') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('enabled', arg_type=get_three_state_flag(), help='Indicates whether the schedule is enabled for the '
                   'team. Required.')
        c.argument('offer_shift_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether offer '
                   'shift requests are enabled for the schedule.')
        c.argument('open_shifts_enabled', arg_type=get_three_state_flag(), help='Indicates whether open shifts are '
                   'enabled for the schedule.')
        c.argument('provision_status', arg_type=get_enum_type(['NotStarted', 'Running', 'Completed', 'Failed']), help=''
                   '')
        c.argument('provision_status_code', type=str, help='Additional information about why schedule provisioning '
                   'failed.')
        c.argument('swap_shifts_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether swap '
                   'shifts requests are enabled for the schedule.')
        c.argument('time_clock_enabled', arg_type=get_three_state_flag(), help='Indicates whether time clock is '
                   'enabled for the schedule.')
        c.argument('time_off_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether time off '
                   'requests are enabled for the schedule.')
        c.argument('time_zone', type=str, help='Indicates the time zone of the schedule team using tz database format. '
                   'Required.')
        c.argument('workforce_integration_ids', nargs='*', help='')
        c.argument('offer_shift_requests', action=AddScheduleOfferShiftRequests, nargs='*', help='')
        c.argument('open_shift_change_requests', action=AddScheduleOpenShiftChangeRequests, nargs='*', help='')
        c.argument('open_shifts', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('scheduling_groups', action=AddScheduleSchedulingGroups, nargs='*', help='The logical grouping of '
                   'users in the schedule (usually by role).')
        c.argument('shifts', type=validate_file_or_dict, help='The shifts in the schedule. Expected value: '
                   'json-string/@json-file.')
        c.argument('swap_shifts_change_requests', action=AddScheduleSwapShiftsChangeRequests, nargs='*', help='')
        c.argument('time_cards', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('time_off_reasons', action=AddScheduleTimeOffReasons, nargs='*', help='The set of reasons for a '
                   'time off in the schedule.')
        c.argument('time_off_requests', action=AddScheduleTimeOffRequests, nargs='*', help='')
        c.argument('times_off', type=validate_file_or_dict, help='The instances of times off in the schedule. Expected '
                   'value: json-string/@json-file.')
        c.argument('time_clock_settings_approved_location', action=AddScheduleTimeClockSettingsApprovedLocation,
                   nargs='*', help='geoCoordinates')

    with self.argument_context('teams delete') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('conversation_member_id', type=str, help='key: id of conversationMember')
        c.argument('if_match', type=str, help='ETag')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')

    with self.argument_context('teams all-message') as c:
        c.argument('team_id', type=str, help='key: id of team')

    with self.argument_context('teams complete-migration') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')

    with self.argument_context('teams create-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='The display name of the user.')
        c.argument('roles', nargs='*', help='The roles for that user.')

    with self.argument_context('teams create-message') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='Attached files. Attachments are currently '
                   'read-only – sending attachments is not supported.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('channel_identity', action=AddChannelIdentity, nargs='*', help='channelIdentity')
        c.argument('chat_id', type=str, help='')
        c.argument('created_date_time', help='Read only. Timestamp of when the chat message was created.')
        c.argument('deleted_date_time', help='Read only. Timestamp at which the chat message was deleted, or null if '
                   'not deleted.')
        c.argument('etag', type=str, help='Read-only. Version number of the chat message.')
        c.argument('importance', arg_type=get_enum_type(['normal', 'high', 'urgent']), help='')
        c.argument('last_edited_date_time', help='Read only. Timestamp when edits to the chat message were made. '
                   'Triggers an \'Edited\' flag in the Microsoft Teams UI. If no edits are made the value is null.')
        c.argument('last_modified_date_time', help='Read only. Timestamp when the chat message is created (initial '
                   'setting) or edited, including when a reaction is added or removed.')
        c.argument('locale', type=str, help='Locale of the chat message set by the client.')
        c.argument('mentions', action=AddMentions, nargs='*', help='List of entities mentioned in the chat message. '
                   'Currently supports user, bot, team, channel.')
        c.argument('message_type', arg_type=get_enum_type(['message', 'chatEvent', 'typing']), help='')
        c.argument('reactions', action=AddReactions, nargs='*', help='')
        c.argument('reply_to_id', type=str, help='Read-only. Id of the parent chat message or root chat message of the '
                   'thread. (Only applies to chat messages in channels not chats)')
        c.argument('subject', type=str, help='The subject of the chat message, in plaintext.')
        c.argument('summary', type=str, help='Summary text of the chat message that could be used for push '
                   'notifications and summary views or fall back views. Only applies to channel chat messages, not '
                   'chat messages in a chat.')
        c.argument('web_url', type=str, help='')
        c.argument('hosted_contents', action=AddHostedContents, nargs='*', help='')
        c.argument('replies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('policy_violation_dlp_action', arg_type=get_enum_type(['none', 'notifySender', 'blockAccess', ''
                                                                          'blockAccessExternal']), help='')
        c.argument('policy_violation_justification_text', type=str, help='Justification text provided by the sender of '
                   'the message when overriding a policy violation.')
        c.argument('policy_violation_policy_tip', action=AddPolicyViolationPolicyTip, nargs='*', help=''
                   'chatMessagePolicyViolationPolicyTip')
        c.argument('policy_violation_user_action', arg_type=get_enum_type(['none', 'override', 'reportFalsePositive']),
                   help='')
        c.argument('policy_violation_verdict_details', arg_type=get_enum_type(['none', 'allowFalsePositiveOverride', ''
                                                                               'allowOverrideWithoutJustification', ''
                                                                               'allowOverrideWithJustification']),
                   help='')
        c.argument('from_user_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_device_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_application_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('from_application_id', type=str, help='Unique identifier for the identity.')

    with self.argument_context('teams create-tab') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('configuration', action=AddConfiguration, nargs='*', help='teamsTabConfiguration')
        c.argument('display_name', type=str, help='Name of the tab.')
        c.argument('message_id', type=str, help='')
        c.argument('sort_order_index', type=str, help='')
        c.argument('teams_app_id', type=str, help='')
        c.argument('web_url', type=str, help='Deep link URL of the tab instance. Read only.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('teams_app_display_name', type=str, help='The name of the catalog app provided by the app developer '
                   'in the Microsoft Teams zip app package.')
        c.argument('teams_app_distribution_method', arg_type=get_enum_type(['store', 'organization', 'sideloaded', ''
                                                                            'unknownFutureValue']), help='')
        c.argument('teams_app_external_id', type=str, help='The ID of the catalog provided by the app developer in the '
                   'Microsoft Teams zip app package.')
        c.argument('teams_app_app_definitions', action=AddAppDefinitions, nargs='*', help='The details for each '
                   'version of the app.')

    with self.argument_context('teams get-file-folder') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-file-folder-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')

    with self.argument_context('teams get-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('conversation_member_id', type=str, help='key: id of conversationMember')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-message') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-tab') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-message') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-tab') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams set-file-folder-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('data', help='New media content.')

    with self.argument_context('teams update-file-folder') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams update-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('conversation_member_id', type=str, help='key: id of conversationMember')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='The display name of the user.')
        c.argument('roles', nargs='*', help='The roles for that user.')

    with self.argument_context('teams update-message') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='Attached files. Attachments are currently '
                   'read-only – sending attachments is not supported.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('channel_identity', action=AddChannelIdentity, nargs='*', help='channelIdentity')
        c.argument('chat_id', type=str, help='')
        c.argument('created_date_time', help='Read only. Timestamp of when the chat message was created.')
        c.argument('deleted_date_time', help='Read only. Timestamp at which the chat message was deleted, or null if '
                   'not deleted.')
        c.argument('etag', type=str, help='Read-only. Version number of the chat message.')
        c.argument('importance', arg_type=get_enum_type(['normal', 'high', 'urgent']), help='')
        c.argument('last_edited_date_time', help='Read only. Timestamp when edits to the chat message were made. '
                   'Triggers an \'Edited\' flag in the Microsoft Teams UI. If no edits are made the value is null.')
        c.argument('last_modified_date_time', help='Read only. Timestamp when the chat message is created (initial '
                   'setting) or edited, including when a reaction is added or removed.')
        c.argument('locale', type=str, help='Locale of the chat message set by the client.')
        c.argument('mentions', action=AddMentions, nargs='*', help='List of entities mentioned in the chat message. '
                   'Currently supports user, bot, team, channel.')
        c.argument('message_type', arg_type=get_enum_type(['message', 'chatEvent', 'typing']), help='')
        c.argument('reactions', action=AddReactions, nargs='*', help='')
        c.argument('reply_to_id', type=str, help='Read-only. Id of the parent chat message or root chat message of the '
                   'thread. (Only applies to chat messages in channels not chats)')
        c.argument('subject', type=str, help='The subject of the chat message, in plaintext.')
        c.argument('summary', type=str, help='Summary text of the chat message that could be used for push '
                   'notifications and summary views or fall back views. Only applies to channel chat messages, not '
                   'chat messages in a chat.')
        c.argument('web_url', type=str, help='')
        c.argument('hosted_contents', action=AddHostedContents, nargs='*', help='')
        c.argument('replies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('policy_violation_dlp_action', arg_type=get_enum_type(['none', 'notifySender', 'blockAccess', ''
                                                                          'blockAccessExternal']), help='')
        c.argument('policy_violation_justification_text', type=str, help='Justification text provided by the sender of '
                   'the message when overriding a policy violation.')
        c.argument('policy_violation_policy_tip', action=AddPolicyViolationPolicyTip, nargs='*', help=''
                   'chatMessagePolicyViolationPolicyTip')
        c.argument('policy_violation_user_action', arg_type=get_enum_type(['none', 'override', 'reportFalsePositive']),
                   help='')
        c.argument('policy_violation_verdict_details', arg_type=get_enum_type(['none', 'allowFalsePositiveOverride', ''
                                                                               'allowOverrideWithoutJustification', ''
                                                                               'allowOverrideWithJustification']),
                   help='')
        c.argument('from_user_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_device_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_application_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('from_application_id', type=str, help='Unique identifier for the identity.')

    with self.argument_context('teams update-tab') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('configuration', action=AddConfiguration, nargs='*', help='teamsTabConfiguration')
        c.argument('display_name', type=str, help='Name of the tab.')
        c.argument('message_id', type=str, help='')
        c.argument('sort_order_index', type=str, help='')
        c.argument('teams_app_id', type=str, help='')
        c.argument('web_url', type=str, help='Deep link URL of the tab instance. Read only.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('teams_app_display_name', type=str, help='The name of the catalog app provided by the app developer '
                   'in the Microsoft Teams zip app package.')
        c.argument('teams_app_distribution_method', arg_type=get_enum_type(['store', 'organization', 'sideloaded', ''
                                                                            'unknownFutureValue']), help='')
        c.argument('teams_app_external_id', type=str, help='The ID of the catalog provided by the app developer in the '
                   'Microsoft Teams zip app package.')
        c.argument('teams_app_app_definitions', action=AddAppDefinitions, nargs='*', help='The details for each '
                   'version of the app.')

    with self.argument_context('teams add') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('values', action=AddTeamsChannelsMembersValues, nargs='*', help='')

    with self.argument_context('teams delete') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_hosted_content_id', type=str, help='key: id of chatMessageHostedContent')
        c.argument('if_match', type=str, help='ETag')
        c.argument('chat_message_id1', type=str, help='key: id of chatMessage')

    with self.argument_context('teams create-hosted-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_bytes', help='')
        c.argument('content_type', type=str, help='')

    with self.argument_context('teams create-reply') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='Attached files. Attachments are currently '
                   'read-only – sending attachments is not supported.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('channel_identity', action=AddChannelIdentity, nargs='*', help='channelIdentity')
        c.argument('chat_id', type=str, help='')
        c.argument('created_date_time', help='Read only. Timestamp of when the chat message was created.')
        c.argument('deleted_date_time', help='Read only. Timestamp at which the chat message was deleted, or null if '
                   'not deleted.')
        c.argument('etag', type=str, help='Read-only. Version number of the chat message.')
        c.argument('importance', arg_type=get_enum_type(['normal', 'high', 'urgent']), help='')
        c.argument('last_edited_date_time', help='Read only. Timestamp when edits to the chat message were made. '
                   'Triggers an \'Edited\' flag in the Microsoft Teams UI. If no edits are made the value is null.')
        c.argument('last_modified_date_time', help='Read only. Timestamp when the chat message is created (initial '
                   'setting) or edited, including when a reaction is added or removed.')
        c.argument('locale', type=str, help='Locale of the chat message set by the client.')
        c.argument('mentions', action=AddMentions, nargs='*', help='List of entities mentioned in the chat message. '
                   'Currently supports user, bot, team, channel.')
        c.argument('message_type', arg_type=get_enum_type(['message', 'chatEvent', 'typing']), help='')
        c.argument('reactions', action=AddReactions, nargs='*', help='')
        c.argument('reply_to_id', type=str, help='Read-only. Id of the parent chat message or root chat message of the '
                   'thread. (Only applies to chat messages in channels not chats)')
        c.argument('subject', type=str, help='The subject of the chat message, in plaintext.')
        c.argument('summary', type=str, help='Summary text of the chat message that could be used for push '
                   'notifications and summary views or fall back views. Only applies to channel chat messages, not '
                   'chat messages in a chat.')
        c.argument('web_url', type=str, help='')
        c.argument('hosted_contents', action=AddHostedContents, nargs='*', help='')
        c.argument('replies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('policy_violation_dlp_action', arg_type=get_enum_type(['none', 'notifySender', 'blockAccess', ''
                                                                          'blockAccessExternal']), help='')
        c.argument('policy_violation_justification_text', type=str, help='Justification text provided by the sender of '
                   'the message when overriding a policy violation.')
        c.argument('policy_violation_policy_tip', action=AddPolicyViolationPolicyTip, nargs='*', help=''
                   'chatMessagePolicyViolationPolicyTip')
        c.argument('policy_violation_user_action', arg_type=get_enum_type(['none', 'override', 'reportFalsePositive']),
                   help='')
        c.argument('policy_violation_verdict_details', arg_type=get_enum_type(['none', 'allowFalsePositiveOverride', ''
                                                                               'allowOverrideWithoutJustification', ''
                                                                               'allowOverrideWithJustification']),
                   help='')
        c.argument('from_user_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_device_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_application_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('from_application_id', type=str, help='Unique identifier for the identity.')

    with self.argument_context('teams delta') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')

    with self.argument_context('teams get-hosted-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_hosted_content_id', type=str, help='key: id of chatMessageHostedContent')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-hosted-content-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_hosted_content_id', type=str, help='key: id of chatMessageHostedContent')

    with self.argument_context('teams get-reply') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_id1', type=str, help='key: id of chatMessage')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-hosted-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-reply') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams set-hosted-content-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_hosted_content_id', type=str, help='key: id of chatMessageHostedContent')
        c.argument('data', help='New media content.')

    with self.argument_context('teams update-hosted-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_hosted_content_id', type=str, help='key: id of chatMessageHostedContent')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_bytes', help='')
        c.argument('content_type', type=str, help='')

    with self.argument_context('teams update-reply') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_id1', type=str, help='key: id of chatMessage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='Attached files. Attachments are currently '
                   'read-only – sending attachments is not supported.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('channel_identity', action=AddChannelIdentity, nargs='*', help='channelIdentity')
        c.argument('chat_id', type=str, help='')
        c.argument('created_date_time', help='Read only. Timestamp of when the chat message was created.')
        c.argument('deleted_date_time', help='Read only. Timestamp at which the chat message was deleted, or null if '
                   'not deleted.')
        c.argument('etag', type=str, help='Read-only. Version number of the chat message.')
        c.argument('importance', arg_type=get_enum_type(['normal', 'high', 'urgent']), help='')
        c.argument('last_edited_date_time', help='Read only. Timestamp when edits to the chat message were made. '
                   'Triggers an \'Edited\' flag in the Microsoft Teams UI. If no edits are made the value is null.')
        c.argument('last_modified_date_time', help='Read only. Timestamp when the chat message is created (initial '
                   'setting) or edited, including when a reaction is added or removed.')
        c.argument('locale', type=str, help='Locale of the chat message set by the client.')
        c.argument('mentions', action=AddMentions, nargs='*', help='List of entities mentioned in the chat message. '
                   'Currently supports user, bot, team, channel.')
        c.argument('message_type', arg_type=get_enum_type(['message', 'chatEvent', 'typing']), help='')
        c.argument('reactions', action=AddReactions, nargs='*', help='')
        c.argument('reply_to_id', type=str, help='Read-only. Id of the parent chat message or root chat message of the '
                   'thread. (Only applies to chat messages in channels not chats)')
        c.argument('subject', type=str, help='The subject of the chat message, in plaintext.')
        c.argument('summary', type=str, help='Summary text of the chat message that could be used for push '
                   'notifications and summary views or fall back views. Only applies to channel chat messages, not '
                   'chat messages in a chat.')
        c.argument('web_url', type=str, help='')
        c.argument('hosted_contents', action=AddHostedContents, nargs='*', help='')
        c.argument('replies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('policy_violation_dlp_action', arg_type=get_enum_type(['none', 'notifySender', 'blockAccess', ''
                                                                          'blockAccessExternal']), help='')
        c.argument('policy_violation_justification_text', type=str, help='Justification text provided by the sender of '
                   'the message when overriding a policy violation.')
        c.argument('policy_violation_policy_tip', action=AddPolicyViolationPolicyTip, nargs='*', help=''
                   'chatMessagePolicyViolationPolicyTip')
        c.argument('policy_violation_user_action', arg_type=get_enum_type(['none', 'override', 'reportFalsePositive']),
                   help='')
        c.argument('policy_violation_verdict_details', arg_type=get_enum_type(['none', 'allowFalsePositiveOverride', ''
                                                                               'allowOverrideWithoutJustification', ''
                                                                               'allowOverrideWithJustification']),
                   help='')
        c.argument('from_user_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_device_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_application_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('from_application_id', type=str, help='Unique identifier for the identity.')

    with self.argument_context('teams delta') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')

    with self.argument_context('teams delete') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams get-ref-team-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')

    with self.argument_context('teams get-team-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams set-ref-team-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams delete') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams get-ref-team-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')

    with self.argument_context('teams get-ref-team-app-definition') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')

    with self.argument_context('teams get-team-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-team-app-definition') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams set-ref-team-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams set-ref-team-app-definition') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams upgrade') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')

    with self.argument_context('teams add') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('values', action=AddTeamsMembersValues, nargs='*', help='')

    with self.argument_context('teams delete') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('conversation_member_id', type=str, help='key: id of conversationMember')
        c.argument('if_match', type=str, help='ETag')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')

    with self.argument_context('teams complete-migration') as c:
        c.argument('team_id', type=str, help='key: id of team')

    with self.argument_context('teams create-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='The display name of the user.')
        c.argument('roles', nargs='*', help='The roles for that user.')

    with self.argument_context('teams create-message') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='Attached files. Attachments are currently '
                   'read-only – sending attachments is not supported.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('channel_identity', action=AddChannelIdentity, nargs='*', help='channelIdentity')
        c.argument('chat_id', type=str, help='')
        c.argument('created_date_time', help='Read only. Timestamp of when the chat message was created.')
        c.argument('deleted_date_time', help='Read only. Timestamp at which the chat message was deleted, or null if '
                   'not deleted.')
        c.argument('etag', type=str, help='Read-only. Version number of the chat message.')
        c.argument('importance', arg_type=get_enum_type(['normal', 'high', 'urgent']), help='')
        c.argument('last_edited_date_time', help='Read only. Timestamp when edits to the chat message were made. '
                   'Triggers an \'Edited\' flag in the Microsoft Teams UI. If no edits are made the value is null.')
        c.argument('last_modified_date_time', help='Read only. Timestamp when the chat message is created (initial '
                   'setting) or edited, including when a reaction is added or removed.')
        c.argument('locale', type=str, help='Locale of the chat message set by the client.')
        c.argument('mentions', action=AddMentions, nargs='*', help='List of entities mentioned in the chat message. '
                   'Currently supports user, bot, team, channel.')
        c.argument('message_type', arg_type=get_enum_type(['message', 'chatEvent', 'typing']), help='')
        c.argument('reactions', action=AddReactions, nargs='*', help='')
        c.argument('reply_to_id', type=str, help='Read-only. Id of the parent chat message or root chat message of the '
                   'thread. (Only applies to chat messages in channels not chats)')
        c.argument('subject', type=str, help='The subject of the chat message, in plaintext.')
        c.argument('summary', type=str, help='Summary text of the chat message that could be used for push '
                   'notifications and summary views or fall back views. Only applies to channel chat messages, not '
                   'chat messages in a chat.')
        c.argument('web_url', type=str, help='')
        c.argument('hosted_contents', action=AddHostedContents, nargs='*', help='')
        c.argument('replies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('policy_violation_dlp_action', arg_type=get_enum_type(['none', 'notifySender', 'blockAccess', ''
                                                                          'blockAccessExternal']), help='')
        c.argument('policy_violation_justification_text', type=str, help='Justification text provided by the sender of '
                   'the message when overriding a policy violation.')
        c.argument('policy_violation_policy_tip', action=AddPolicyViolationPolicyTip, nargs='*', help=''
                   'chatMessagePolicyViolationPolicyTip')
        c.argument('policy_violation_user_action', arg_type=get_enum_type(['none', 'override', 'reportFalsePositive']),
                   help='')
        c.argument('policy_violation_verdict_details', arg_type=get_enum_type(['none', 'allowFalsePositiveOverride', ''
                                                                               'allowOverrideWithoutJustification', ''
                                                                               'allowOverrideWithJustification']),
                   help='')
        c.argument('from_user_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_device_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_application_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('from_application_id', type=str, help='Unique identifier for the identity.')

    with self.argument_context('teams create-tab') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('configuration', action=AddConfiguration, nargs='*', help='teamsTabConfiguration')
        c.argument('display_name', type=str, help='Name of the tab.')
        c.argument('message_id', type=str, help='')
        c.argument('sort_order_index', type=str, help='')
        c.argument('teams_app_id', type=str, help='')
        c.argument('web_url', type=str, help='Deep link URL of the tab instance. Read only.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('teams_app_display_name', type=str, help='The name of the catalog app provided by the app developer '
                   'in the Microsoft Teams zip app package.')
        c.argument('teams_app_distribution_method', arg_type=get_enum_type(['store', 'organization', 'sideloaded', ''
                                                                            'unknownFutureValue']), help='')
        c.argument('teams_app_external_id', type=str, help='The ID of the catalog provided by the app developer in the '
                   'Microsoft Teams zip app package.')
        c.argument('teams_app_app_definitions', action=AddAppDefinitions, nargs='*', help='The details for each '
                   'version of the app.')

    with self.argument_context('teams get-file-folder') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-file-folder-content') as c:
        c.argument('team_id', type=str, help='key: id of team')

    with self.argument_context('teams get-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('conversation_member_id', type=str, help='key: id of conversationMember')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-message') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-tab') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-message') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-tab') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams set-file-folder-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('data', help='New media content.')

    with self.argument_context('teams update-file-folder') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams update-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('conversation_member_id', type=str, help='key: id of conversationMember')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='The display name of the user.')
        c.argument('roles', nargs='*', help='The roles for that user.')

    with self.argument_context('teams update-message') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='Attached files. Attachments are currently '
                   'read-only – sending attachments is not supported.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('channel_identity', action=AddChannelIdentity, nargs='*', help='channelIdentity')
        c.argument('chat_id', type=str, help='')
        c.argument('created_date_time', help='Read only. Timestamp of when the chat message was created.')
        c.argument('deleted_date_time', help='Read only. Timestamp at which the chat message was deleted, or null if '
                   'not deleted.')
        c.argument('etag', type=str, help='Read-only. Version number of the chat message.')
        c.argument('importance', arg_type=get_enum_type(['normal', 'high', 'urgent']), help='')
        c.argument('last_edited_date_time', help='Read only. Timestamp when edits to the chat message were made. '
                   'Triggers an \'Edited\' flag in the Microsoft Teams UI. If no edits are made the value is null.')
        c.argument('last_modified_date_time', help='Read only. Timestamp when the chat message is created (initial '
                   'setting) or edited, including when a reaction is added or removed.')
        c.argument('locale', type=str, help='Locale of the chat message set by the client.')
        c.argument('mentions', action=AddMentions, nargs='*', help='List of entities mentioned in the chat message. '
                   'Currently supports user, bot, team, channel.')
        c.argument('message_type', arg_type=get_enum_type(['message', 'chatEvent', 'typing']), help='')
        c.argument('reactions', action=AddReactions, nargs='*', help='')
        c.argument('reply_to_id', type=str, help='Read-only. Id of the parent chat message or root chat message of the '
                   'thread. (Only applies to chat messages in channels not chats)')
        c.argument('subject', type=str, help='The subject of the chat message, in plaintext.')
        c.argument('summary', type=str, help='Summary text of the chat message that could be used for push '
                   'notifications and summary views or fall back views. Only applies to channel chat messages, not '
                   'chat messages in a chat.')
        c.argument('web_url', type=str, help='')
        c.argument('hosted_contents', action=AddHostedContents, nargs='*', help='')
        c.argument('replies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('policy_violation_dlp_action', arg_type=get_enum_type(['none', 'notifySender', 'blockAccess', ''
                                                                          'blockAccessExternal']), help='')
        c.argument('policy_violation_justification_text', type=str, help='Justification text provided by the sender of '
                   'the message when overriding a policy violation.')
        c.argument('policy_violation_policy_tip', action=AddPolicyViolationPolicyTip, nargs='*', help=''
                   'chatMessagePolicyViolationPolicyTip')
        c.argument('policy_violation_user_action', arg_type=get_enum_type(['none', 'override', 'reportFalsePositive']),
                   help='')
        c.argument('policy_violation_verdict_details', arg_type=get_enum_type(['none', 'allowFalsePositiveOverride', ''
                                                                               'allowOverrideWithoutJustification', ''
                                                                               'allowOverrideWithJustification']),
                   help='')
        c.argument('from_user_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_device_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_application_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('from_application_id', type=str, help='Unique identifier for the identity.')

    with self.argument_context('teams update-tab') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('configuration', action=AddConfiguration, nargs='*', help='teamsTabConfiguration')
        c.argument('display_name', type=str, help='Name of the tab.')
        c.argument('message_id', type=str, help='')
        c.argument('sort_order_index', type=str, help='')
        c.argument('teams_app_id', type=str, help='')
        c.argument('web_url', type=str, help='Deep link URL of the tab instance. Read only.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.')
        c.argument('teams_app_display_name', type=str, help='The name of the catalog app provided by the app developer '
                   'in the Microsoft Teams zip app package.')
        c.argument('teams_app_distribution_method', arg_type=get_enum_type(['store', 'organization', 'sideloaded', ''
                                                                            'unknownFutureValue']), help='')
        c.argument('teams_app_external_id', type=str, help='The ID of the catalog provided by the app developer in the '
                   'Microsoft Teams zip app package.')
        c.argument('teams_app_app_definitions', action=AddAppDefinitions, nargs='*', help='The details for each '
                   'version of the app.')

    with self.argument_context('teams add') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('values', action=AddTeamsPrimarychannelMembersValues, nargs='*', help='')

    with self.argument_context('teams delete') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_hosted_content_id', type=str, help='key: id of chatMessageHostedContent')
        c.argument('if_match', type=str, help='ETag')
        c.argument('chat_message_id1', type=str, help='key: id of chatMessage')

    with self.argument_context('teams create-hosted-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_bytes', help='')
        c.argument('content_type', type=str, help='')

    with self.argument_context('teams create-reply') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='Attached files. Attachments are currently '
                   'read-only – sending attachments is not supported.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('channel_identity', action=AddChannelIdentity, nargs='*', help='channelIdentity')
        c.argument('chat_id', type=str, help='')
        c.argument('created_date_time', help='Read only. Timestamp of when the chat message was created.')
        c.argument('deleted_date_time', help='Read only. Timestamp at which the chat message was deleted, or null if '
                   'not deleted.')
        c.argument('etag', type=str, help='Read-only. Version number of the chat message.')
        c.argument('importance', arg_type=get_enum_type(['normal', 'high', 'urgent']), help='')
        c.argument('last_edited_date_time', help='Read only. Timestamp when edits to the chat message were made. '
                   'Triggers an \'Edited\' flag in the Microsoft Teams UI. If no edits are made the value is null.')
        c.argument('last_modified_date_time', help='Read only. Timestamp when the chat message is created (initial '
                   'setting) or edited, including when a reaction is added or removed.')
        c.argument('locale', type=str, help='Locale of the chat message set by the client.')
        c.argument('mentions', action=AddMentions, nargs='*', help='List of entities mentioned in the chat message. '
                   'Currently supports user, bot, team, channel.')
        c.argument('message_type', arg_type=get_enum_type(['message', 'chatEvent', 'typing']), help='')
        c.argument('reactions', action=AddReactions, nargs='*', help='')
        c.argument('reply_to_id', type=str, help='Read-only. Id of the parent chat message or root chat message of the '
                   'thread. (Only applies to chat messages in channels not chats)')
        c.argument('subject', type=str, help='The subject of the chat message, in plaintext.')
        c.argument('summary', type=str, help='Summary text of the chat message that could be used for push '
                   'notifications and summary views or fall back views. Only applies to channel chat messages, not '
                   'chat messages in a chat.')
        c.argument('web_url', type=str, help='')
        c.argument('hosted_contents', action=AddHostedContents, nargs='*', help='')
        c.argument('replies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('policy_violation_dlp_action', arg_type=get_enum_type(['none', 'notifySender', 'blockAccess', ''
                                                                          'blockAccessExternal']), help='')
        c.argument('policy_violation_justification_text', type=str, help='Justification text provided by the sender of '
                   'the message when overriding a policy violation.')
        c.argument('policy_violation_policy_tip', action=AddPolicyViolationPolicyTip, nargs='*', help=''
                   'chatMessagePolicyViolationPolicyTip')
        c.argument('policy_violation_user_action', arg_type=get_enum_type(['none', 'override', 'reportFalsePositive']),
                   help='')
        c.argument('policy_violation_verdict_details', arg_type=get_enum_type(['none', 'allowFalsePositiveOverride', ''
                                                                               'allowOverrideWithoutJustification', ''
                                                                               'allowOverrideWithJustification']),
                   help='')
        c.argument('from_user_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_device_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_application_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('from_application_id', type=str, help='Unique identifier for the identity.')

    with self.argument_context('teams delta') as c:
        c.argument('team_id', type=str, help='key: id of team')

    with self.argument_context('teams get-hosted-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_hosted_content_id', type=str, help='key: id of chatMessageHostedContent')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-hosted-content-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_hosted_content_id', type=str, help='key: id of chatMessageHostedContent')

    with self.argument_context('teams get-reply') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_id1', type=str, help='key: id of chatMessage')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-hosted-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-reply') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams set-hosted-content-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_hosted_content_id', type=str, help='key: id of chatMessageHostedContent')
        c.argument('data', help='New media content.')

    with self.argument_context('teams update-hosted-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_hosted_content_id', type=str, help='key: id of chatMessageHostedContent')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_bytes', help='')
        c.argument('content_type', type=str, help='')

    with self.argument_context('teams update-reply') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_id1', type=str, help='key: id of chatMessage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='Attached files. Attachments are currently '
                   'read-only – sending attachments is not supported.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('channel_identity', action=AddChannelIdentity, nargs='*', help='channelIdentity')
        c.argument('chat_id', type=str, help='')
        c.argument('created_date_time', help='Read only. Timestamp of when the chat message was created.')
        c.argument('deleted_date_time', help='Read only. Timestamp at which the chat message was deleted, or null if '
                   'not deleted.')
        c.argument('etag', type=str, help='Read-only. Version number of the chat message.')
        c.argument('importance', arg_type=get_enum_type(['normal', 'high', 'urgent']), help='')
        c.argument('last_edited_date_time', help='Read only. Timestamp when edits to the chat message were made. '
                   'Triggers an \'Edited\' flag in the Microsoft Teams UI. If no edits are made the value is null.')
        c.argument('last_modified_date_time', help='Read only. Timestamp when the chat message is created (initial '
                   'setting) or edited, including when a reaction is added or removed.')
        c.argument('locale', type=str, help='Locale of the chat message set by the client.')
        c.argument('mentions', action=AddMentions, nargs='*', help='List of entities mentioned in the chat message. '
                   'Currently supports user, bot, team, channel.')
        c.argument('message_type', arg_type=get_enum_type(['message', 'chatEvent', 'typing']), help='')
        c.argument('reactions', action=AddReactions, nargs='*', help='')
        c.argument('reply_to_id', type=str, help='Read-only. Id of the parent chat message or root chat message of the '
                   'thread. (Only applies to chat messages in channels not chats)')
        c.argument('subject', type=str, help='The subject of the chat message, in plaintext.')
        c.argument('summary', type=str, help='Summary text of the chat message that could be used for push '
                   'notifications and summary views or fall back views. Only applies to channel chat messages, not '
                   'chat messages in a chat.')
        c.argument('web_url', type=str, help='')
        c.argument('hosted_contents', action=AddHostedContents, nargs='*', help='')
        c.argument('replies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('policy_violation_dlp_action', arg_type=get_enum_type(['none', 'notifySender', 'blockAccess', ''
                                                                          'blockAccessExternal']), help='')
        c.argument('policy_violation_justification_text', type=str, help='Justification text provided by the sender of '
                   'the message when overriding a policy violation.')
        c.argument('policy_violation_policy_tip', action=AddPolicyViolationPolicyTip, nargs='*', help=''
                   'chatMessagePolicyViolationPolicyTip')
        c.argument('policy_violation_user_action', arg_type=get_enum_type(['none', 'override', 'reportFalsePositive']),
                   help='')
        c.argument('policy_violation_verdict_details', arg_type=get_enum_type(['none', 'allowFalsePositiveOverride', ''
                                                                               'allowOverrideWithoutJustification', ''
                                                                               'allowOverrideWithJustification']),
                   help='')
        c.argument('from_user_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_device_display_name', type=str, help='The identity\'s display name. Note that this may not '
                   'always be available or up to date. For example, if a user changes their display name, the API may '
                   'show the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')
        c.argument('from_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('from_application_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('from_application_id', type=str, help='Unique identifier for the identity.')

    with self.argument_context('teams delta') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')

    with self.argument_context('teams delete') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams get-ref-team-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')

    with self.argument_context('teams get-team-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams set-ref-team-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams delete') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('offer_shift_request_id', type=str, help='key: id of offerShiftRequest')
        c.argument('if_match', type=str, help='ETag')
        c.argument('open_shift_change_request_id', type=str, help='key: id of openShiftChangeRequest')
        c.argument('open_shift_id', type=str, help='key: id of openShift')
        c.argument('scheduling_group_id', type=str, help='key: id of schedulingGroup')
        c.argument('shift_id', type=str, help='key: id of shift')
        c.argument('swap_shifts_change_request_id', type=str, help='key: id of swapShiftsChangeRequest')
        c.argument('time_card_id', type=str, help='key: id of timeCard')
        c.argument('time_off_reason_id', type=str, help='key: id of timeOffReason')
        c.argument('time_off_request_id', type=str, help='key: id of timeOffRequest')
        c.argument('time_off_id', type=str, help='key: id of timeOff')

    with self.argument_context('teams create-offer-shift-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_by_user_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_device_display_name', type=str, help='The identity\'s display name. Note that '
                   'this may not always be available or up to date. For example, if a user changes their display name, '
                   'the API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_application_display_name', type=str, help='The identity\'s display name. Note '
                   'that this may not always be available or up to date. For example, if a user changes their display '
                   'name, the API may show the new value in a future response, but the items associated with the user '
                   'won\'t show up as having changed when using delta.')
        c.argument('last_modified_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_user_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_device_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_application_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('created_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('assigned_to', arg_type=get_enum_type(['sender', 'recipient', 'manager', 'system', ''
                                                          'unknownFutureValue']), help='')
        c.argument('manager_action_date_time', help='')
        c.argument('manager_action_message', type=str, help='')
        c.argument('manager_user_id', type=str, help='')
        c.argument('sender_date_time', help='')
        c.argument('sender_message', type=str, help='')
        c.argument('sender_user_id', type=str, help='')
        c.argument('state', arg_type=get_enum_type(['pending', 'approved', 'declined', 'unknownFutureValue']),
                   help='')
        c.argument('recipient_action_date_time', help='The Timestamp type represents date and time information using '
                   'ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look '
                   'like this: \'2014-01-01T00:00:00Z\'')
        c.argument('recipient_action_message', type=str, help='Custom message sent by recipient of the offer shift '
                   'request.')
        c.argument('recipient_user_id', type=str, help='User ID of the recipient of the offer shift request.')
        c.argument('sender_shift_id', type=str, help='User ID of the sender of the offer shift request.')

    with self.argument_context('teams create-open-shift') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_by_user_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_device_display_name', type=str, help='The identity\'s display name. Note that '
                   'this may not always be available or up to date. For example, if a user changes their display name, '
                   'the API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_application_display_name', type=str, help='The identity\'s display name. Note '
                   'that this may not always be available or up to date. For example, if a user changes their display '
                   'name, the API may show the new value in a future response, but the items associated with the user '
                   'won\'t show up as having changed when using delta.')
        c.argument('last_modified_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_user_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_device_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_application_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('created_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('draft_open_shift', action=AddDraftOpenShift, nargs='*', help='openShiftItem')
        c.argument('is_staged_for_deletion', arg_type=get_three_state_flag(), help='')
        c.argument('scheduling_group_id', type=str,
                   help='ID for the scheduling group that the open shift belongs to.')
        c.argument('shared_open_shift', action=AddDraftOpenShift, nargs='*', help='openShiftItem')

    with self.argument_context('teams create-open-shift-change-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_by_user_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_device_display_name', type=str, help='The identity\'s display name. Note that '
                   'this may not always be available or up to date. For example, if a user changes their display name, '
                   'the API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_application_display_name', type=str, help='The identity\'s display name. Note '
                   'that this may not always be available or up to date. For example, if a user changes their display '
                   'name, the API may show the new value in a future response, but the items associated with the user '
                   'won\'t show up as having changed when using delta.')
        c.argument('last_modified_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_user_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_device_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_application_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('created_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('assigned_to', arg_type=get_enum_type(['sender', 'recipient', 'manager', 'system', ''
                                                          'unknownFutureValue']), help='')
        c.argument('manager_action_date_time', help='')
        c.argument('manager_action_message', type=str, help='')
        c.argument('manager_user_id', type=str, help='')
        c.argument('sender_date_time', help='')
        c.argument('sender_message', type=str, help='')
        c.argument('sender_user_id', type=str, help='')
        c.argument('state', arg_type=get_enum_type(['pending', 'approved', 'declined', 'unknownFutureValue']),
                   help='')
        c.argument('open_shift_id', type=str, help='ID for the open shift.')

    with self.argument_context('teams create-scheduling-group') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_by_user_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_device_display_name', type=str, help='The identity\'s display name. Note that '
                   'this may not always be available or up to date. For example, if a user changes their display name, '
                   'the API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_application_display_name', type=str, help='The identity\'s display name. Note '
                   'that this may not always be available or up to date. For example, if a user changes their display '
                   'name, the API may show the new value in a future response, but the items associated with the user '
                   'won\'t show up as having changed when using delta.')
        c.argument('last_modified_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_user_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_device_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_application_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('created_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('microsoft_graph_scheduling_group_display_name', type=str, help='The display name for the '
                   'schedulingGroup. Required.')
        c.argument('is_active', arg_type=get_three_state_flag(), help='Indicates whether the schedulingGroup can be '
                   'used when creating new entities or updating existing ones. Required.')
        c.argument('user_ids', nargs='*', help='The list of user IDs that are a member of the schedulingGroup. '
                   'Required.')

    with self.argument_context('teams create-shift') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams create-swap-shift-change-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_by_user_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_device_display_name', type=str, help='The identity\'s display name. Note that '
                   'this may not always be available or up to date. For example, if a user changes their display name, '
                   'the API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_application_display_name', type=str, help='The identity\'s display name. Note '
                   'that this may not always be available or up to date. For example, if a user changes their display '
                   'name, the API may show the new value in a future response, but the items associated with the user '
                   'won\'t show up as having changed when using delta.')
        c.argument('last_modified_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_user_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_device_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_application_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('created_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('assigned_to', arg_type=get_enum_type(['sender', 'recipient', 'manager', 'system', ''
                                                          'unknownFutureValue']), help='')
        c.argument('manager_action_date_time', help='')
        c.argument('manager_action_message', type=str, help='')
        c.argument('manager_user_id', type=str, help='')
        c.argument('sender_date_time', help='')
        c.argument('sender_message', type=str, help='')
        c.argument('sender_user_id', type=str, help='')
        c.argument('state', arg_type=get_enum_type(['pending', 'approved', 'declined', 'unknownFutureValue']),
                   help='')
        c.argument('recipient_action_date_time', help='The Timestamp type represents date and time information using '
                   'ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look '
                   'like this: \'2014-01-01T00:00:00Z\'')
        c.argument('recipient_action_message', type=str, help='Custom message sent by recipient of the offer shift '
                   'request.')
        c.argument('recipient_user_id', type=str, help='User ID of the recipient of the offer shift request.')
        c.argument('sender_shift_id', type=str, help='User ID of the sender of the offer shift request.')
        c.argument('recipient_shift_id', type=str, help='ShiftId for the recipient user with whom the request is to '
                   'swap.')

    with self.argument_context('teams create-time-card') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams create-time-off') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_by_user_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_device_display_name', type=str, help='The identity\'s display name. Note that '
                   'this may not always be available or up to date. For example, if a user changes their display name, '
                   'the API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_application_display_name', type=str, help='The identity\'s display name. Note '
                   'that this may not always be available or up to date. For example, if a user changes their display '
                   'name, the API may show the new value in a future response, but the items associated with the user '
                   'won\'t show up as having changed when using delta.')
        c.argument('last_modified_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_user_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_device_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_application_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('created_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('draft_time_off', action=AddDraftTimeOff, nargs='*', help='timeOffItem')
        c.argument('is_staged_for_deletion', arg_type=get_three_state_flag(), help='')
        c.argument('shared_time_off', action=AddDraftTimeOff, nargs='*', help='timeOffItem')
        c.argument('user_id', type=str, help='ID of the user assigned to the timeOff. Required.')

    with self.argument_context('teams create-time-off-reason') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_by_user_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_device_display_name', type=str, help='The identity\'s display name. Note that '
                   'this may not always be available or up to date. For example, if a user changes their display name, '
                   'the API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_application_display_name', type=str, help='The identity\'s display name. Note '
                   'that this may not always be available or up to date. For example, if a user changes their display '
                   'name, the API may show the new value in a future response, but the items associated with the user '
                   'won\'t show up as having changed when using delta.')
        c.argument('last_modified_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_user_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_device_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_application_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('created_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('microsoft_graph_time_off_reason_display_name', type=str, help='The name of the timeOffReason. '
                   'Required.')
        c.argument('icon_type', arg_type=get_enum_type(['none', 'car', 'calendar', 'running', 'plane', 'firstAid', ''
                                                        'doctor', 'notWorking', 'clock', 'juryDuty', 'globe', 'cup', ''
                                                        'phone', 'weather', 'umbrella', 'piggyBank', 'dog', 'cake', ''
                                                        'trafficCone', 'pin', 'sunny', 'unknownFutureValue']),
                                                        help='')
        c.argument('is_active', arg_type=get_three_state_flag(), help='Indicates whether the timeOffReason can be used '
                   'when creating new entities or updating existing ones. Required.')

    with self.argument_context('teams create-time-off-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_by_user_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_device_display_name', type=str, help='The identity\'s display name. Note that '
                   'this may not always be available or up to date. For example, if a user changes their display name, '
                   'the API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_application_display_name', type=str, help='The identity\'s display name. Note '
                   'that this may not always be available or up to date. For example, if a user changes their display '
                   'name, the API may show the new value in a future response, but the items associated with the user '
                   'won\'t show up as having changed when using delta.')
        c.argument('last_modified_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_user_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_device_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_application_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('created_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('assigned_to', arg_type=get_enum_type(['sender', 'recipient', 'manager', 'system', ''
                                                          'unknownFutureValue']), help='')
        c.argument('manager_action_date_time', help='')
        c.argument('manager_action_message', type=str, help='')
        c.argument('manager_user_id', type=str, help='')
        c.argument('sender_date_time', help='')
        c.argument('sender_message', type=str, help='')
        c.argument('sender_user_id', type=str, help='')
        c.argument('state', arg_type=get_enum_type(['pending', 'approved', 'declined', 'unknownFutureValue']),
                   help='')
        c.argument('end_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('start_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('time_off_reason_id', type=str, help='The reason for the time off.')

    with self.argument_context('teams get-offer-shift-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('offer_shift_request_id', type=str, help='key: id of offerShiftRequest')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-open-shift') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('open_shift_id', type=str, help='key: id of openShift')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-open-shift-change-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('open_shift_change_request_id', type=str, help='key: id of openShiftChangeRequest')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-scheduling-group') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('scheduling_group_id', type=str, help='key: id of schedulingGroup')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-shift') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('shift_id', type=str, help='key: id of shift')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-swap-shift-change-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('swap_shifts_change_request_id', type=str, help='key: id of swapShiftsChangeRequest')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-time-card') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('time_card_id', type=str, help='key: id of timeCard')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-time-off') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('time_off_id', type=str, help='key: id of timeOff')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-time-off-reason') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('time_off_reason_id', type=str, help='key: id of timeOffReason')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-time-off-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('time_off_request_id', type=str, help='key: id of timeOffRequest')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-offer-shift-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-open-shift') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-open-shift-change-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-scheduling-group') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-shift') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-swap-shift-change-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-time-card') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-time-off') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-time-off-reason') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-time-off-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams share') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('notify_team', arg_type=get_three_state_flag(), help='')
        c.argument('start_date_time', help='')
        c.argument('end_date_time', help='')

    with self.argument_context('teams update-offer-shift-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('offer_shift_request_id', type=str, help='key: id of offerShiftRequest')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_by_user_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_device_display_name', type=str, help='The identity\'s display name. Note that '
                   'this may not always be available or up to date. For example, if a user changes their display name, '
                   'the API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_application_display_name', type=str, help='The identity\'s display name. Note '
                   'that this may not always be available or up to date. For example, if a user changes their display '
                   'name, the API may show the new value in a future response, but the items associated with the user '
                   'won\'t show up as having changed when using delta.')
        c.argument('last_modified_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_user_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_device_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_application_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('created_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('assigned_to', arg_type=get_enum_type(['sender', 'recipient', 'manager', 'system', ''
                                                          'unknownFutureValue']), help='')
        c.argument('manager_action_date_time', help='')
        c.argument('manager_action_message', type=str, help='')
        c.argument('manager_user_id', type=str, help='')
        c.argument('sender_date_time', help='')
        c.argument('sender_message', type=str, help='')
        c.argument('sender_user_id', type=str, help='')
        c.argument('state', arg_type=get_enum_type(['pending', 'approved', 'declined', 'unknownFutureValue']),
                   help='')
        c.argument('recipient_action_date_time', help='The Timestamp type represents date and time information using '
                   'ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look '
                   'like this: \'2014-01-01T00:00:00Z\'')
        c.argument('recipient_action_message', type=str, help='Custom message sent by recipient of the offer shift '
                   'request.')
        c.argument('recipient_user_id', type=str, help='User ID of the recipient of the offer shift request.')
        c.argument('sender_shift_id', type=str, help='User ID of the sender of the offer shift request.')

    with self.argument_context('teams update-open-shift') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('open_shift_id', type=str, help='key: id of openShift')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_by_user_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_device_display_name', type=str, help='The identity\'s display name. Note that '
                   'this may not always be available or up to date. For example, if a user changes their display name, '
                   'the API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_application_display_name', type=str, help='The identity\'s display name. Note '
                   'that this may not always be available or up to date. For example, if a user changes their display '
                   'name, the API may show the new value in a future response, but the items associated with the user '
                   'won\'t show up as having changed when using delta.')
        c.argument('last_modified_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_user_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_device_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_application_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('created_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('draft_open_shift', action=AddDraftOpenShift, nargs='*', help='openShiftItem')
        c.argument('is_staged_for_deletion', arg_type=get_three_state_flag(), help='')
        c.argument('scheduling_group_id', type=str,
                   help='ID for the scheduling group that the open shift belongs to.')
        c.argument('shared_open_shift', action=AddDraftOpenShift, nargs='*', help='openShiftItem')

    with self.argument_context('teams update-open-shift-change-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('open_shift_change_request_id', type=str, help='key: id of openShiftChangeRequest')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_by_user_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_device_display_name', type=str, help='The identity\'s display name. Note that '
                   'this may not always be available or up to date. For example, if a user changes their display name, '
                   'the API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_application_display_name', type=str, help='The identity\'s display name. Note '
                   'that this may not always be available or up to date. For example, if a user changes their display '
                   'name, the API may show the new value in a future response, but the items associated with the user '
                   'won\'t show up as having changed when using delta.')
        c.argument('last_modified_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_user_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_device_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_application_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('created_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('assigned_to', arg_type=get_enum_type(['sender', 'recipient', 'manager', 'system', ''
                                                          'unknownFutureValue']), help='')
        c.argument('manager_action_date_time', help='')
        c.argument('manager_action_message', type=str, help='')
        c.argument('manager_user_id', type=str, help='')
        c.argument('sender_date_time', help='')
        c.argument('sender_message', type=str, help='')
        c.argument('sender_user_id', type=str, help='')
        c.argument('state', arg_type=get_enum_type(['pending', 'approved', 'declined', 'unknownFutureValue']),
                   help='')
        c.argument('open_shift_id', type=str, help='ID for the open shift.')

    with self.argument_context('teams update-scheduling-group') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('scheduling_group_id', type=str, help='key: id of schedulingGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_by_user_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_device_display_name', type=str, help='The identity\'s display name. Note that '
                   'this may not always be available or up to date. For example, if a user changes their display name, '
                   'the API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_application_display_name', type=str, help='The identity\'s display name. Note '
                   'that this may not always be available or up to date. For example, if a user changes their display '
                   'name, the API may show the new value in a future response, but the items associated with the user '
                   'won\'t show up as having changed when using delta.')
        c.argument('last_modified_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_user_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_device_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_application_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('created_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('microsoft_graph_scheduling_group_display_name', type=str, help='The display name for the '
                   'schedulingGroup. Required.')
        c.argument('is_active', arg_type=get_three_state_flag(), help='Indicates whether the schedulingGroup can be '
                   'used when creating new entities or updating existing ones. Required.')
        c.argument('user_ids', nargs='*', help='The list of user IDs that are a member of the schedulingGroup. '
                   'Required.')

    with self.argument_context('teams update-shift') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('shift_id', type=str, help='key: id of shift')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams update-swap-shift-change-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('swap_shifts_change_request_id', type=str, help='key: id of swapShiftsChangeRequest')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_by_user_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_device_display_name', type=str, help='The identity\'s display name. Note that '
                   'this may not always be available or up to date. For example, if a user changes their display name, '
                   'the API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_application_display_name', type=str, help='The identity\'s display name. Note '
                   'that this may not always be available or up to date. For example, if a user changes their display '
                   'name, the API may show the new value in a future response, but the items associated with the user '
                   'won\'t show up as having changed when using delta.')
        c.argument('last_modified_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_user_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_device_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_application_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('created_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('assigned_to', arg_type=get_enum_type(['sender', 'recipient', 'manager', 'system', ''
                                                          'unknownFutureValue']), help='')
        c.argument('manager_action_date_time', help='')
        c.argument('manager_action_message', type=str, help='')
        c.argument('manager_user_id', type=str, help='')
        c.argument('sender_date_time', help='')
        c.argument('sender_message', type=str, help='')
        c.argument('sender_user_id', type=str, help='')
        c.argument('state', arg_type=get_enum_type(['pending', 'approved', 'declined', 'unknownFutureValue']),
                   help='')
        c.argument('recipient_action_date_time', help='The Timestamp type represents date and time information using '
                   'ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look '
                   'like this: \'2014-01-01T00:00:00Z\'')
        c.argument('recipient_action_message', type=str, help='Custom message sent by recipient of the offer shift '
                   'request.')
        c.argument('recipient_user_id', type=str, help='User ID of the recipient of the offer shift request.')
        c.argument('sender_shift_id', type=str, help='User ID of the sender of the offer shift request.')
        c.argument('recipient_shift_id', type=str, help='ShiftId for the recipient user with whom the request is to '
                   'swap.')

    with self.argument_context('teams update-time-card') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('time_card_id', type=str, help='key: id of timeCard')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams update-time-off') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('time_off_id', type=str, help='key: id of timeOff')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_by_user_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_device_display_name', type=str, help='The identity\'s display name. Note that '
                   'this may not always be available or up to date. For example, if a user changes their display name, '
                   'the API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_application_display_name', type=str, help='The identity\'s display name. Note '
                   'that this may not always be available or up to date. For example, if a user changes their display '
                   'name, the API may show the new value in a future response, but the items associated with the user '
                   'won\'t show up as having changed when using delta.')
        c.argument('last_modified_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_user_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_device_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_application_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('created_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('draft_time_off', action=AddDraftTimeOff, nargs='*', help='timeOffItem')
        c.argument('is_staged_for_deletion', arg_type=get_three_state_flag(), help='')
        c.argument('shared_time_off', action=AddDraftTimeOff, nargs='*', help='timeOffItem')
        c.argument('user_id', type=str, help='ID of the user assigned to the timeOff. Required.')

    with self.argument_context('teams update-time-off-reason') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('time_off_reason_id', type=str, help='key: id of timeOffReason')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_by_user_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_device_display_name', type=str, help='The identity\'s display name. Note that '
                   'this may not always be available or up to date. For example, if a user changes their display name, '
                   'the API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_application_display_name', type=str, help='The identity\'s display name. Note '
                   'that this may not always be available or up to date. For example, if a user changes their display '
                   'name, the API may show the new value in a future response, but the items associated with the user '
                   'won\'t show up as having changed when using delta.')
        c.argument('last_modified_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_user_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_device_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_application_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('created_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('microsoft_graph_time_off_reason_display_name', type=str, help='The name of the timeOffReason. '
                   'Required.')
        c.argument('icon_type', arg_type=get_enum_type(['none', 'car', 'calendar', 'running', 'plane', 'firstAid', ''
                                                        'doctor', 'notWorking', 'clock', 'juryDuty', 'globe', 'cup', ''
                                                        'phone', 'weather', 'umbrella', 'piggyBank', 'dog', 'cake', ''
                                                        'trafficCone', 'pin', 'sunny', 'unknownFutureValue']),
                                                        help='')
        c.argument('is_active', arg_type=get_three_state_flag(), help='Indicates whether the timeOffReason can be used '
                   'when creating new entities or updating existing ones. Required.')

    with self.argument_context('teams update-time-off-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('time_off_request_id', type=str, help='key: id of timeOffRequest')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_by_user_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_device_display_name', type=str, help='The identity\'s display name. Note that '
                   'this may not always be available or up to date. For example, if a user changes their display name, '
                   'the API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_application_display_name', type=str, help='The identity\'s display name. Note '
                   'that this may not always be available or up to date. For example, if a user changes their display '
                   'name, the API may show the new value in a future response, but the items associated with the user '
                   'won\'t show up as having changed when using delta.')
        c.argument('last_modified_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_user_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_device_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_application_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('created_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('assigned_to', arg_type=get_enum_type(['sender', 'recipient', 'manager', 'system', ''
                                                          'unknownFutureValue']), help='')
        c.argument('manager_action_date_time', help='')
        c.argument('manager_action_message', type=str, help='')
        c.argument('manager_user_id', type=str, help='')
        c.argument('sender_date_time', help='')
        c.argument('sender_message', type=str, help='')
        c.argument('sender_user_id', type=str, help='')
        c.argument('state', arg_type=get_enum_type(['pending', 'approved', 'declined', 'unknownFutureValue']),
                   help='')
        c.argument('end_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('start_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('time_off_reason_id', type=str, help='The reason for the time off.')

    with self.argument_context('teams clock-in') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('at_approved_location', arg_type=get_three_state_flag(), help='')
        c.argument('on_behalf_of_user_id', type=str, help='')
        c.argument('notes', action=AddBody, nargs='*', help='itemBody')

    with self.argument_context('teams clock-out') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('time_card_id', type=str, help='key: id of timeCard')
        c.argument('at_approved_location', arg_type=get_three_state_flag(), help='')
        c.argument('notes', action=AddBody, nargs='*', help='itemBody')

    with self.argument_context('teams confirm') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('time_card_id', type=str, help='key: id of timeCard')

    with self.argument_context('teams end-break') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('time_card_id', type=str, help='key: id of timeCard')
        c.argument('at_approved_location', arg_type=get_three_state_flag(), help='')
        c.argument('notes', action=AddBody, nargs='*', help='itemBody')

    with self.argument_context('teams start-break') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('time_card_id', type=str, help='key: id of timeCard')
        c.argument('at_approved_location', arg_type=get_three_state_flag(), help='')
        c.argument('notes', action=AddBody, nargs='*', help='itemBody')

    with self.argument_context('teams get-teamwork') as c:
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams update-teamwork') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('workforce_integrations', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams delete') as c:
        c.argument('workforce_integration_id', type=str, help='key: id of workforceIntegration')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams create-workforce-integration') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_by_user_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_device_display_name', type=str, help='The identity\'s display name. Note that '
                   'this may not always be available or up to date. For example, if a user changes their display name, '
                   'the API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_application_display_name', type=str, help='The identity\'s display name. Note '
                   'that this may not always be available or up to date. For example, if a user changes their display '
                   'name, the API may show the new value in a future response, but the items associated with the user '
                   'won\'t show up as having changed when using delta.')
        c.argument('last_modified_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_user_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_device_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_application_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('created_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('api_version', type=int, help='API version for the call back URL. Start with 1.')
        c.argument('microsoft_graph_workforce_integration_display_name', type=str, help='Name of the workforce '
                   'integration.')
        c.argument('eligibility_filtering_enabled_entities', arg_type=get_enum_type(['none', 'swapRequest', ''
                                                                                     'offerShiftRequest', ''
                                                                                     'unknownFutureValue']), help='')
        c.argument('encryption', action=AddEncryption, nargs='*', help='workforceIntegrationEncryption')
        c.argument('is_active', arg_type=get_three_state_flag(), help='Indicates whether this workforce integration is '
                   'currently active and available.')
        c.argument('supported_entities', arg_type=get_enum_type(['none', 'shift', 'swapRequest',
                                                                 'userShiftPreferences', 'openShift', ''
                                                                 'openShiftRequest', 'offerShiftRequest', ''
                                                                 'unknownFutureValue']), help='')
        c.argument('supports', arg_type=get_enum_type(['none', 'shift', 'swapRequest', 'userShiftPreferences', ''
                                                       'openShift', 'openShiftRequest', 'offerShiftRequest', ''
                                                       'unknownFutureValue']), help='')
        c.argument('url', type=str, help='Workforce Integration URL for callbacks from the Shifts service.')

    with self.argument_context('teams get-workforce-integration') as c:
        c.argument('workforce_integration_id', type=str, help='key: id of workforceIntegration')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-workforce-integration') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams update-workforce-integration') as c:
        c.argument('workforce_integration_id', type=str, help='key: id of workforceIntegration')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_by_user_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_device_display_name', type=str, help='The identity\'s display name. Note that '
                   'this may not always be available or up to date. For example, if a user changes their display name, '
                   'the API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('last_modified_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('last_modified_by_application_display_name', type=str, help='The identity\'s display name. Note '
                   'that this may not always be available or up to date. For example, if a user changes their display '
                   'name, the API may show the new value in a future response, but the items associated with the user '
                   'won\'t show up as having changed when using delta.')
        c.argument('last_modified_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_user_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_device_display_name', type=str, help='The identity\'s display name. Note that this may '
                   'not always be available or up to date. For example, if a user changes their display name, the API '
                   'may show the new value in a future response, but the items associated with the user won\'t show up '
                   'as having changed when using delta.')
        c.argument('created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('created_by_application_display_name', type=str, help='The identity\'s display name. Note that this '
                   'may not always be available or up to date. For example, if a user changes their display name, the '
                   'API may show the new value in a future response, but the items associated with the user won\'t '
                   'show up as having changed when using delta.')
        c.argument('created_by_application_id', type=str, help='Unique identifier for the identity.')
        c.argument('api_version', type=int, help='API version for the call back URL. Start with 1.')
        c.argument('microsoft_graph_workforce_integration_display_name', type=str, help='Name of the workforce '
                   'integration.')
        c.argument('eligibility_filtering_enabled_entities', arg_type=get_enum_type(['none', 'swapRequest', ''
                                                                                     'offerShiftRequest', ''
                                                                                     'unknownFutureValue']), help='')
        c.argument('encryption', action=AddEncryption, nargs='*', help='workforceIntegrationEncryption')
        c.argument('is_active', arg_type=get_three_state_flag(), help='Indicates whether this workforce integration is '
                   'currently active and available.')
        c.argument('supported_entities', arg_type=get_enum_type(['none', 'shift', 'swapRequest',
                                                                 'userShiftPreferences', 'openShift', ''
                                                                 'openShiftRequest', 'offerShiftRequest', ''
                                                                 'unknownFutureValue']), help='')
        c.argument('supports', arg_type=get_enum_type(['none', 'shift', 'swapRequest', 'userShiftPreferences', ''
                                                       'openShift', 'openShiftRequest', 'offerShiftRequest', ''
                                                       'unknownFutureValue']), help='')
        c.argument('url', type=str, help='Workforce Integration URL for callbacks from the Shifts service.')

    with self.argument_context('teams delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('if_match', type=str, help='ETag')
        c.argument('team_id', type=str, help='key: id of team')

    with self.argument_context('teams create-chat') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='')
        c.argument('last_updated_date_time', help='')
        c.argument('topic', type=str, help='')
        c.argument('installed_apps', action=AddChatsChatInstalledApps, nargs='*', help='')
        c.argument('members', action=AddUsersMembers, nargs='*', help='')
        c.argument('messages', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('tabs', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('teams create-joined-team') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('classification', type=str, help='An optional label. Typically describes the data or business '
                   'sensitivity of the team. Must match one of a pre-configured set in the tenant\'s directory.')
        c.argument('created_date_time', help='')
        c.argument('description', type=str, help='An optional description for the team.')
        c.argument('display_name', type=str, help='The name of the team.')
        c.argument('fun_settings', action=AddFunSettings, nargs='*', help='teamFunSettings')
        c.argument('guest_settings', action=AddGuestSettings, nargs='*', help='teamGuestSettings')
        c.argument('internal_id', type=str, help='A unique ID for the team that has been used in a few places such as '
                   'the audit log/Office 365 Management Activity API.')
        c.argument('is_archived', arg_type=get_three_state_flag(), help='Whether this team is in read-only mode.')
        c.argument('is_membership_limited_to_owners', arg_type=get_three_state_flag(), help='')
        c.argument('member_settings', action=AddMemberSettings, nargs='*', help='teamMemberSettings')
        c.argument('messaging_settings', action=AddMessagingSettings, nargs='*', help='teamMessagingSettings')
        c.argument('specialization', arg_type=get_enum_type(['none', 'educationStandard', 'educationClass', ''
                                                             'educationProfessionalLearningCommunity',
                                                             'educationStaff', 'healthcareStandard', ''
                                                             'healthcareCareCoordination', 'unknownFutureValue']),
                   help='')
        c.argument('visibility', arg_type=get_enum_type(['private', 'public', 'hiddenMembership',
                                                        'unknownFutureValue']), help='')
        c.argument('web_url', type=str, help='A hyperlink that will go to the team in the Microsoft Teams client. This '
                   'is the URL that you get when you right-click a team in the Microsoft Teams client and select Get '
                   'link to team. This URL should be treated as an opaque blob, and not parsed.')
        c.argument('channels', type=validate_file_or_dict, help='The collection of channels & messages associated with '
                   'the team. Expected value: json-string/@json-file.')
        c.argument('group', type=validate_file_or_dict, help='Represents an Azure Active Directory object. The '
                   'directoryObject type is the base type for many other directory entity types. Expected value: '
                   'json-string/@json-file.')
        c.argument('installed_apps', action=AddGroupsInstalledApps, nargs='*',
                   help='The apps installed in this team.')
        c.argument('members', action=AddGroupsMembers, nargs='*', help='Members and owners of the team.')
        c.argument('operations', type=validate_file_or_dict, help='The async operations that ran or are running on '
                   'this team. Expected value: json-string/@json-file.')
        c.argument('owners', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('photo', action=AddPhoto, nargs='*', help='profilePhoto')
        c.argument('primary_channel', type=validate_file_or_dict, help='channel Expected value: '
                   'json-string/@json-file.')
        c.argument('template_id', type=str, help='Read-only.')
        c.argument('schedule_id', type=str, help='Read-only.')
        c.argument('schedule_enabled', arg_type=get_three_state_flag(), help='Indicates whether the schedule is '
                   'enabled for the team. Required.')
        c.argument('schedule_offer_shift_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether '
                   'offer shift requests are enabled for the schedule.')
        c.argument('schedule_open_shifts_enabled', arg_type=get_three_state_flag(), help='Indicates whether open '
                   'shifts are enabled for the schedule.')
        c.argument('schedule_provision_status', arg_type=get_enum_type(['NotStarted', 'Running', 'Completed',
                                                                       'Failed']), help='')
        c.argument('schedule_provision_status_code', type=str, help='Additional information about why schedule '
                   'provisioning failed.')
        c.argument('schedule_swap_shifts_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether '
                   'swap shifts requests are enabled for the schedule.')
        c.argument('schedule_time_clock_enabled', arg_type=get_three_state_flag(), help='Indicates whether time clock '
                   'is enabled for the schedule.')
        c.argument('schedule_time_off_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether time '
                   'off requests are enabled for the schedule.')
        c.argument('schedule_time_zone', type=str, help='Indicates the time zone of the schedule team using tz '
                   'database format. Required.')
        c.argument('schedule_workforce_integration_ids', nargs='*', help='')
        c.argument('schedule_offer_shift_requests', action=AddScheduleOfferShiftRequests, nargs='*', help='')
        c.argument('schedule_open_shift_change_requests', action=AddScheduleOpenShiftChangeRequests, nargs='*',
                   help='')
        c.argument('schedule_open_shifts', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('schedule_scheduling_groups', action=AddScheduleSchedulingGroups, nargs='*', help='The logical '
                   'grouping of users in the schedule (usually by role).')
        c.argument('schedule_shifts', type=validate_file_or_dict, help='The shifts in the schedule. Expected value: '
                   'json-string/@json-file.')
        c.argument('schedule_swap_shifts_change_requests', action=AddScheduleSwapShiftsChangeRequests, nargs='*',
                   help='')
        c.argument('schedule_time_cards', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('schedule_time_off_reasons', action=AddScheduleTimeOffReasons, nargs='*', help='The set of reasons '
                   'for a time off in the schedule.')
        c.argument('schedule_time_off_requests', action=AddScheduleTimeOffRequests, nargs='*', help='')
        c.argument('schedule_times_off', type=validate_file_or_dict, help='The instances of times off in the schedule. '
                   'Expected value: json-string/@json-file.')
        c.argument('schedule_time_clock_settings_approved_location',
                   action=AddScheduleTimeClockSettingsApprovedLocation, nargs='*', help='geoCoordinates')
        c.argument('discovery_settings_show_in_teams_search_and_suggestions', arg_type=get_three_state_flag(),
                   help='')

    with self.argument_context('teams get-chat') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-joined-team') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-teamwork') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-chat') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-joined-team') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams update-chat') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='')
        c.argument('last_updated_date_time', help='')
        c.argument('topic', type=str, help='')
        c.argument('installed_apps', action=AddChatsChatInstalledApps, nargs='*', help='')
        c.argument('members', action=AddUsersMembers, nargs='*', help='')
        c.argument('messages', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('tabs', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('teams update-joined-team') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('classification', type=str, help='An optional label. Typically describes the data or business '
                   'sensitivity of the team. Must match one of a pre-configured set in the tenant\'s directory.')
        c.argument('created_date_time', help='')
        c.argument('description', type=str, help='An optional description for the team.')
        c.argument('display_name', type=str, help='The name of the team.')
        c.argument('fun_settings', action=AddFunSettings, nargs='*', help='teamFunSettings')
        c.argument('guest_settings', action=AddGuestSettings, nargs='*', help='teamGuestSettings')
        c.argument('internal_id', type=str, help='A unique ID for the team that has been used in a few places such as '
                   'the audit log/Office 365 Management Activity API.')
        c.argument('is_archived', arg_type=get_three_state_flag(), help='Whether this team is in read-only mode.')
        c.argument('is_membership_limited_to_owners', arg_type=get_three_state_flag(), help='')
        c.argument('member_settings', action=AddMemberSettings, nargs='*', help='teamMemberSettings')
        c.argument('messaging_settings', action=AddMessagingSettings, nargs='*', help='teamMessagingSettings')
        c.argument('specialization', arg_type=get_enum_type(['none', 'educationStandard', 'educationClass', ''
                                                             'educationProfessionalLearningCommunity',
                                                             'educationStaff', 'healthcareStandard', ''
                                                             'healthcareCareCoordination', 'unknownFutureValue']),
                   help='')
        c.argument('visibility', arg_type=get_enum_type(['private', 'public', 'hiddenMembership',
                                                        'unknownFutureValue']), help='')
        c.argument('web_url', type=str, help='A hyperlink that will go to the team in the Microsoft Teams client. This '
                   'is the URL that you get when you right-click a team in the Microsoft Teams client and select Get '
                   'link to team. This URL should be treated as an opaque blob, and not parsed.')
        c.argument('channels', type=validate_file_or_dict, help='The collection of channels & messages associated with '
                   'the team. Expected value: json-string/@json-file.')
        c.argument('group', type=validate_file_or_dict, help='Represents an Azure Active Directory object. The '
                   'directoryObject type is the base type for many other directory entity types. Expected value: '
                   'json-string/@json-file.')
        c.argument('installed_apps', action=AddGroupsInstalledApps, nargs='*',
                   help='The apps installed in this team.')
        c.argument('members', action=AddGroupsMembers, nargs='*', help='Members and owners of the team.')
        c.argument('operations', type=validate_file_or_dict, help='The async operations that ran or are running on '
                   'this team. Expected value: json-string/@json-file.')
        c.argument('owners', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('photo', action=AddPhoto, nargs='*', help='profilePhoto')
        c.argument('primary_channel', type=validate_file_or_dict, help='channel Expected value: '
                   'json-string/@json-file.')
        c.argument('template_id', type=str, help='Read-only.')
        c.argument('schedule_id', type=str, help='Read-only.')
        c.argument('schedule_enabled', arg_type=get_three_state_flag(), help='Indicates whether the schedule is '
                   'enabled for the team. Required.')
        c.argument('schedule_offer_shift_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether '
                   'offer shift requests are enabled for the schedule.')
        c.argument('schedule_open_shifts_enabled', arg_type=get_three_state_flag(), help='Indicates whether open '
                   'shifts are enabled for the schedule.')
        c.argument('schedule_provision_status', arg_type=get_enum_type(['NotStarted', 'Running', 'Completed',
                                                                       'Failed']), help='')
        c.argument('schedule_provision_status_code', type=str, help='Additional information about why schedule '
                   'provisioning failed.')
        c.argument('schedule_swap_shifts_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether '
                   'swap shifts requests are enabled for the schedule.')
        c.argument('schedule_time_clock_enabled', arg_type=get_three_state_flag(), help='Indicates whether time clock '
                   'is enabled for the schedule.')
        c.argument('schedule_time_off_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether time '
                   'off requests are enabled for the schedule.')
        c.argument('schedule_time_zone', type=str, help='Indicates the time zone of the schedule team using tz '
                   'database format. Required.')
        c.argument('schedule_workforce_integration_ids', nargs='*', help='')
        c.argument('schedule_offer_shift_requests', action=AddScheduleOfferShiftRequests, nargs='*', help='')
        c.argument('schedule_open_shift_change_requests', action=AddScheduleOpenShiftChangeRequests, nargs='*',
                   help='')
        c.argument('schedule_open_shifts', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('schedule_scheduling_groups', action=AddScheduleSchedulingGroups, nargs='*', help='The logical '
                   'grouping of users in the schedule (usually by role).')
        c.argument('schedule_shifts', type=validate_file_or_dict, help='The shifts in the schedule. Expected value: '
                   'json-string/@json-file.')
        c.argument('schedule_swap_shifts_change_requests', action=AddScheduleSwapShiftsChangeRequests, nargs='*',
                   help='')
        c.argument('schedule_time_cards', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('schedule_time_off_reasons', action=AddScheduleTimeOffReasons, nargs='*', help='The set of reasons '
                   'for a time off in the schedule.')
        c.argument('schedule_time_off_requests', action=AddScheduleTimeOffRequests, nargs='*', help='')
        c.argument('schedule_times_off', type=validate_file_or_dict, help='The instances of times off in the schedule. '
                   'Expected value: json-string/@json-file.')
        c.argument('schedule_time_clock_settings_approved_location',
                   action=AddScheduleTimeClockSettingsApprovedLocation, nargs='*', help='geoCoordinates')
        c.argument('discovery_settings_show_in_teams_search_and_suggestions', arg_type=get_three_state_flag(),
                   help='')

    with self.argument_context('teams update-teamwork') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('installed_apps', type=validate_file_or_dict, help='The apps installed in the personal scope of '
                   'this user. Expected value: json-string/@json-file.')

    with self.argument_context('teams delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('user_scope_teams_app_installation_id', type=str, help='key: id of userScopeTeamsAppInstallation')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams create-installed-app') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('teams_app_definition_id', type=str, help='Read-only.')
        c.argument('teams_app_definition_azure_adapp_id', type=str, help='')
        c.argument('teams_app_definition_description', type=str, help='')
        c.argument('teams_app_definition_display_name', type=str, help='The name of the app provided by the app '
                   'developer.')
        c.argument('teams_app_definition_last_modified_date_time', help='')
        c.argument('teams_app_definition_publishing_state', arg_type=get_enum_type(['submitted', 'rejected', ''
                                                                                    'published',
                   'unknownFutureValue']), help='')
        c.argument('teams_app_definition_shortdescription', type=str, help='')
        c.argument('teams_app_definition_teams_app_id', type=str, help='The ID from the Teams app manifest.')
        c.argument('teams_app_definition_version', type=str, help='The version number of the application.')
        c.argument('teams_app_definition_created_by_user_display_name', type=str, help='The identity\'s display name. '
                   'Note that this may not always be available or up to date. For example, if a user changes their '
                   'display name, the API may show the new value in a future response, but the items associated with '
                   'the user won\'t show up as having changed when using delta.')
        c.argument('teams_app_definition_created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('teams_app_definition_created_by_device_display_name', type=str, help='The identity\'s display '
                   'name. Note that this may not always be available or up to date. For example, if a user changes '
                   'their display name, the API may show the new value in a future response, but the items associated '
                   'with the user won\'t show up as having changed when using delta.')
        c.argument('teams_app_definition_created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('teams_app_definition_created_by_application_display_name', type=str, help='The identity\'s display '
                   'name. Note that this may not always be available or up to date. For example, if a user changes '
                   'their display name, the API may show the new value in a future response, but the items associated '
                   'with the user won\'t show up as having changed when using delta.')
        c.argument('teams_app_definition_created_by_application_id', type=str, help='Unique identifier for the '
                   'identity.')
        c.argument('teams_app_id', type=str, help='Read-only.')
        c.argument('teams_app_display_name', type=str, help='The name of the catalog app provided by the app developer '
                   'in the Microsoft Teams zip app package.')
        c.argument('teams_app_distribution_method', arg_type=get_enum_type(['store', 'organization', 'sideloaded', ''
                                                                            'unknownFutureValue']), help='')
        c.argument('teams_app_external_id', type=str, help='The ID of the catalog provided by the app developer in the '
                   'Microsoft Teams zip app package.')
        c.argument('teams_app_app_definitions', action=AddAppDefinitions, nargs='*', help='The details for each '
                   'version of the app.')
        c.argument('chat_id', type=str, help='Read-only.')
        c.argument('chat_created_date_time', help='')
        c.argument('chat_last_updated_date_time', help='')
        c.argument('chat_topic', type=str, help='')
        c.argument('chat_installed_apps', action=AddChatsChatInstalledApps, nargs='*', help='')
        c.argument('chat_members', action=AddUsersMembers, nargs='*', help='')
        c.argument('chat_messages', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('chat_tabs', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('teams get-installed-app') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('user_scope_teams_app_installation_id', type=str, help='key: id of userScopeTeamsAppInstallation')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams list-installed-app') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams update-installed-app') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('user_scope_teams_app_installation_id', type=str, help='key: id of userScopeTeamsAppInstallation')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('teams_app_definition_id', type=str, help='Read-only.')
        c.argument('teams_app_definition_azure_adapp_id', type=str, help='')
        c.argument('teams_app_definition_description', type=str, help='')
        c.argument('teams_app_definition_display_name', type=str, help='The name of the app provided by the app '
                   'developer.')
        c.argument('teams_app_definition_last_modified_date_time', help='')
        c.argument('teams_app_definition_publishing_state', arg_type=get_enum_type(['submitted', 'rejected', ''
                                                                                    'published',
                   'unknownFutureValue']), help='')
        c.argument('teams_app_definition_shortdescription', type=str, help='')
        c.argument('teams_app_definition_teams_app_id', type=str, help='The ID from the Teams app manifest.')
        c.argument('teams_app_definition_version', type=str, help='The version number of the application.')
        c.argument('teams_app_definition_created_by_user_display_name', type=str, help='The identity\'s display name. '
                   'Note that this may not always be available or up to date. For example, if a user changes their '
                   'display name, the API may show the new value in a future response, but the items associated with '
                   'the user won\'t show up as having changed when using delta.')
        c.argument('teams_app_definition_created_by_user_id', type=str, help='Unique identifier for the identity.')
        c.argument('teams_app_definition_created_by_device_display_name', type=str, help='The identity\'s display '
                   'name. Note that this may not always be available or up to date. For example, if a user changes '
                   'their display name, the API may show the new value in a future response, but the items associated '
                   'with the user won\'t show up as having changed when using delta.')
        c.argument('teams_app_definition_created_by_device_id', type=str, help='Unique identifier for the identity.')
        c.argument('teams_app_definition_created_by_application_display_name', type=str, help='The identity\'s display '
                   'name. Note that this may not always be available or up to date. For example, if a user changes '
                   'their display name, the API may show the new value in a future response, but the items associated '
                   'with the user won\'t show up as having changed when using delta.')
        c.argument('teams_app_definition_created_by_application_id', type=str, help='Unique identifier for the '
                   'identity.')
        c.argument('teams_app_id', type=str, help='Read-only.')
        c.argument('teams_app_display_name', type=str, help='The name of the catalog app provided by the app developer '
                   'in the Microsoft Teams zip app package.')
        c.argument('teams_app_distribution_method', arg_type=get_enum_type(['store', 'organization', 'sideloaded', ''
                                                                            'unknownFutureValue']), help='')
        c.argument('teams_app_external_id', type=str, help='The ID of the catalog provided by the app developer in the '
                   'Microsoft Teams zip app package.')
        c.argument('teams_app_app_definitions', action=AddAppDefinitions, nargs='*', help='The details for each '
                   'version of the app.')
        c.argument('chat_id', type=str, help='Read-only.')
        c.argument('chat_created_date_time', help='')
        c.argument('chat_last_updated_date_time', help='')
        c.argument('chat_topic', type=str, help='')
        c.argument('chat_installed_apps', action=AddChatsChatInstalledApps, nargs='*', help='')
        c.argument('chat_members', action=AddUsersMembers, nargs='*', help='')
        c.argument('chat_messages', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('chat_tabs', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('teams delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('user_scope_teams_app_installation_id', type=str, help='key: id of userScopeTeamsAppInstallation')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams get-chat') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('user_scope_teams_app_installation_id', type=str, help='key: id of userScopeTeamsAppInstallation')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('teams get-ref-chat') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('user_scope_teams_app_installation_id', type=str, help='key: id of userScopeTeamsAppInstallation')

    with self.argument_context('teams set-ref-chat') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('user_scope_teams_app_installation_id', type=str, help='key: id of userScopeTeamsAppInstallation')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')
