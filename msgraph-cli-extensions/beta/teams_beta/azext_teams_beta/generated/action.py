# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=protected-access

import argparse
from collections import defaultdict
from knack.util import CLIError


class AddAppDefinitions(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddAppDefinitions, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'azure-ad-app-id':
                d['azure_ad_app_id'] = v[0]
            elif kl == 'description':
                d['description'] = v[0]
            elif kl == 'display-name':
                d['display_name'] = v[0]
            elif kl == 'last-modified-date-time':
                d['last_modified_date_time'] = v[0]
            elif kl == 'publishing-state':
                d['publishing_state'] = v[0]
            elif kl == 'shortdescription':
                d['shortdescription'] = v[0]
            elif kl == 'teams-app-id':
                d['teams_app_id'] = v[0]
            elif kl == 'version':
                d['version'] = v[0]
            elif kl == 'display-name-created-by-user-display-name':
                d['display_name_created_by_user_display_name'] = v[0]
            elif kl == 'id-created-by-user-id':
                d['id_created_by_user_id'] = v[0]
            elif kl == 'display-name-created-by-device-display-name':
                d['display_name_created_by_device_display_name'] = v[0]
            elif kl == 'id-created-by-device-id':
                d['id_created_by_device_id'] = v[0]
            elif kl == 'display-name-created-by-application-display-name':
                d['display_name_created_by_application_display_name'] = v[0]
            elif kl == 'id-created-by-application-id':
                d['id_created_by_application_id'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddChatsChatInstalledApps(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddChatsChatInstalledApps, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'id-teams-app-definition-id':
                d['id_teams_app_definition_id'] = v[0]
            elif kl == 'azure-ad-app-id':
                d['azure_ad_app_id'] = v[0]
            elif kl == 'description':
                d['description'] = v[0]
            elif kl == 'display-name-teams-app-definition-display-name':
                d['display_name_teams_app_definition_display_name'] = v[0]
            elif kl == 'last-modified-date-time':
                d['last_modified_date_time'] = v[0]
            elif kl == 'publishing-state':
                d['publishing_state'] = v[0]
            elif kl == 'shortdescription':
                d['shortdescription'] = v[0]
            elif kl == 'teams-app-id':
                d['teams_app_id'] = v[0]
            elif kl == 'version':
                d['version'] = v[0]
            elif kl == 'display-name-teams-app-definition-created-by-user-display-name':
                d['display_name_teams_app_definition_created_by_user_display_name'] = v[0]
            elif kl == 'id-teams-app-definition-created-by-user-id':
                d['id_teams_app_definition_created_by_user_id'] = v[0]
            elif kl == 'display-name-teams-app-definition-created-by-device-display-name':
                d['display_name_teams_app_definition_created_by_device_display_name'] = v[0]
            elif kl == 'id-teams-app-definition-created-by-device-id':
                d['id_teams_app_definition_created_by_device_id'] = v[0]
            elif kl == 'display-name-teams-app-definition-created-by-application-display-name':
                d['display_name_teams_app_definition_created_by_application_display_name'] = v[0]
            elif kl == 'id-teams-app-definition-created-by-application-id':
                d['id_teams_app_definition_created_by_application_id'] = v[0]
            elif kl == 'id-teams-app-id':
                d['id_teams_app_id'] = v[0]
            elif kl == 'display-name-teams-app-display-name':
                d['display_name_teams_app_display_name'] = v[0]
            elif kl == 'distribution-method':
                d['distribution_method'] = v[0]
            elif kl == 'external-id':
                d['external_id'] = v[0]
            elif kl == 'app-definitions':
                d['app_definitions'] = v
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddUsersMembers(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddUsersMembers, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'display-name':
                d['display_name'] = v[0]
            elif kl == 'roles':
                d['roles'] = v
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddAttachments(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddAttachments, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'content':
                d['content'] = v[0]
            elif kl == 'content-type':
                d['content_type'] = v[0]
            elif kl == 'content-url':
                d['content_url'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
            elif kl == 'name':
                d['name'] = v[0]
            elif kl == 'thumbnail-url':
                d['thumbnail_url'] = v[0]
        return d


class AddBody(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.body = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'content':
                d['content'] = v[0]
            elif kl == 'content-type':
                d['content_type'] = v[0]
        return d


class AddChannelIdentity(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.channel_identity = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'channel-id':
                d['channel_id'] = v[0]
            elif kl == 'team-id':
                d['team_id'] = v[0]
        return d


class AddMentions(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddMentions, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'id':
                d['id'] = v[0]
            elif kl == 'mention-text':
                d['mention_text'] = v[0]
            elif kl == 'display-name-mentioned-user-display-name':
                d['display_name_mentioned_user_display_name'] = v[0]
            elif kl == 'id-mentioned-user-id':
                d['id_mentioned_user_id'] = v[0]
            elif kl == 'display-name-mentioned-device-display-name':
                d['display_name_mentioned_device_display_name'] = v[0]
            elif kl == 'id-mentioned-device-id':
                d['id_mentioned_device_id'] = v[0]
            elif kl == 'display-name-mentioned-application-display-name':
                d['display_name_mentioned_application_display_name'] = v[0]
            elif kl == 'id-mentioned-application-id':
                d['id_mentioned_application_id'] = v[0]
        return d


class AddReactions(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddReactions, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'created-date-time':
                d['created_date_time'] = v[0]
            elif kl == 'reaction-type':
                d['reaction_type'] = v[0]
            elif kl == 'display-name-user-display-name':
                d['display_name_user_display_name'] = v[0]
            elif kl == 'id-user-id':
                d['id_user_id'] = v[0]
            elif kl == 'display-name-user-device-display-name':
                d['display_name_user_device_display_name'] = v[0]
            elif kl == 'id-user-device-id':
                d['id_user_device_id'] = v[0]
            elif kl == 'display-name-user-application-display-name':
                d['display_name_user_application_display_name'] = v[0]
            elif kl == 'id-user-application-id':
                d['id_user_application_id'] = v[0]
        return d


class AddHostedContents(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddHostedContents, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'content-bytes':
                d['content_bytes'] = v[0]
            elif kl == 'content-type':
                d['content_type'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddPolicyViolationPolicyTip(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.policy_violation_policy_tip = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'compliance-url':
                d['compliance_url'] = v[0]
            elif kl == 'general-text':
                d['general_text'] = v[0]
            elif kl == 'matched-condition-descriptions':
                d['matched_condition_descriptions'] = v
        return d


class AddConfiguration(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.configuration = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'content-url':
                d['content_url'] = v[0]
            elif kl == 'entity-id':
                d['entity_id'] = v[0]
            elif kl == 'remove-url':
                d['remove_url'] = v[0]
            elif kl == 'website-url':
                d['website_url'] = v[0]
        return d


class AddTopic(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.topic = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'source':
                d['source'] = v[0]
            elif kl == 'value':
                d['value'] = v[0]
            elif kl == 'web-url':
                d['web_url'] = v[0]
        return d


class AddChatsTemplateParameters(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddChatsTemplateParameters, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'name':
                d['name'] = v[0]
            elif kl == 'value':
                d['value'] = v[0]
        return d


class AddChatsMembersValues(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddChatsMembersValues, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'display-name':
                d['display_name'] = v[0]
            elif kl == 'roles':
                d['roles'] = v
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddFunSettings(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.fun_settings = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'allow-custom-memes':
                d['allow_custom_memes'] = v[0]
            elif kl == 'allow-giphy':
                d['allow_giphy'] = v[0]
            elif kl == 'allow-stickers-and-memes':
                d['allow_stickers_and_memes'] = v[0]
            elif kl == 'giphy-content-rating':
                d['giphy_content_rating'] = v[0]
        return d


class AddGuestSettings(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.guest_settings = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'allow-create-update-channels':
                d['allow_create_update_channels'] = v[0]
            elif kl == 'allow-delete-channels':
                d['allow_delete_channels'] = v[0]
        return d


class AddMemberSettings(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.member_settings = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'allow-add-remove-apps':
                d['allow_add_remove_apps'] = v[0]
            elif kl == 'allow-create-private-channels':
                d['allow_create_private_channels'] = v[0]
            elif kl == 'allow-create-update-channels':
                d['allow_create_update_channels'] = v[0]
            elif kl == 'allow-create-update-remove-connectors':
                d['allow_create_update_remove_connectors'] = v[0]
            elif kl == 'allow-create-update-remove-tabs':
                d['allow_create_update_remove_tabs'] = v[0]
            elif kl == 'allow-delete-channels':
                d['allow_delete_channels'] = v[0]
        return d


class AddMessagingSettings(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.messaging_settings = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'allow-channel-mentions':
                d['allow_channel_mentions'] = v[0]
            elif kl == 'allow-owner-delete-messages':
                d['allow_owner_delete_messages'] = v[0]
            elif kl == 'allow-team-mentions':
                d['allow_team_mentions'] = v[0]
            elif kl == 'allow-user-delete-messages':
                d['allow_user_delete_messages'] = v[0]
            elif kl == 'allow-user-edit-messages':
                d['allow_user_edit_messages'] = v[0]
        return d


class AddGroupsInstalledApps(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddGroupsInstalledApps, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'id-teams-app-definition-id':
                d['id_teams_app_definition_id'] = v[0]
            elif kl == 'azure-ad-app-id':
                d['azure_ad_app_id'] = v[0]
            elif kl == 'description':
                d['description'] = v[0]
            elif kl == 'display-name-teams-app-definition-display-name':
                d['display_name_teams_app_definition_display_name'] = v[0]
            elif kl == 'last-modified-date-time':
                d['last_modified_date_time'] = v[0]
            elif kl == 'publishing-state':
                d['publishing_state'] = v[0]
            elif kl == 'shortdescription':
                d['shortdescription'] = v[0]
            elif kl == 'teams-app-id':
                d['teams_app_id'] = v[0]
            elif kl == 'version':
                d['version'] = v[0]
            elif kl == 'display-name-teams-app-definition-created-by-user-display-name':
                d['display_name_teams_app_definition_created_by_user_display_name'] = v[0]
            elif kl == 'id-teams-app-definition-created-by-user-id':
                d['id_teams_app_definition_created_by_user_id'] = v[0]
            elif kl == 'display-name-teams-app-definition-created-by-device-display-name':
                d['display_name_teams_app_definition_created_by_device_display_name'] = v[0]
            elif kl == 'id-teams-app-definition-created-by-device-id':
                d['id_teams_app_definition_created_by_device_id'] = v[0]
            elif kl == 'display-name-teams-app-definition-created-by-application-display-name':
                d['display_name_teams_app_definition_created_by_application_display_name'] = v[0]
            elif kl == 'id-teams-app-definition-created-by-application-id':
                d['id_teams_app_definition_created_by_application_id'] = v[0]
            elif kl == 'id-teams-app-id':
                d['id_teams_app_id'] = v[0]
            elif kl == 'display-name-teams-app-display-name':
                d['display_name_teams_app_display_name'] = v[0]
            elif kl == 'distribution-method':
                d['distribution_method'] = v[0]
            elif kl == 'external-id':
                d['external_id'] = v[0]
            elif kl == 'app-definitions':
                d['app_definitions'] = v
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddGroupsMembers(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddGroupsMembers, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'display-name':
                d['display_name'] = v[0]
            elif kl == 'roles':
                d['roles'] = v
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddPhoto(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.photo = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'height':
                d['height'] = v[0]
            elif kl == 'width':
                d['width'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddScheduleOfferShiftRequests(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddScheduleOfferShiftRequests, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'recipient-action-date-time':
                d['recipient_action_date_time'] = v[0]
            elif kl == 'recipient-action-message':
                d['recipient_action_message'] = v[0]
            elif kl == 'recipient-user-id':
                d['recipient_user_id'] = v[0]
            elif kl == 'sender-shift-id':
                d['sender_shift_id'] = v[0]
            elif kl == 'assigned-to':
                d['assigned_to'] = v[0]
            elif kl == 'manager-action-date-time':
                d['manager_action_date_time'] = v[0]
            elif kl == 'manager-action-message':
                d['manager_action_message'] = v[0]
            elif kl == 'manager-user-id':
                d['manager_user_id'] = v[0]
            elif kl == 'sender-date-time':
                d['sender_date_time'] = v[0]
            elif kl == 'sender-message':
                d['sender_message'] = v[0]
            elif kl == 'sender-user-id':
                d['sender_user_id'] = v[0]
            elif kl == 'state':
                d['state'] = v[0]
            elif kl == 'created-date-time':
                d['created_date_time'] = v[0]
            elif kl == 'last-modified-date-time':
                d['last_modified_date_time'] = v[0]
            elif kl == 'display-name-last-modified-by-user-display-name':
                d['display_name_last_modified_by_user_display_name'] = v[0]
            elif kl == 'id-last-modified-by-user-id':
                d['id_last_modified_by_user_id'] = v[0]
            elif kl == 'display-name-last-modified-by-device-display-name':
                d['display_name_last_modified_by_device_display_name'] = v[0]
            elif kl == 'id-last-modified-by-device-id':
                d['id_last_modified_by_device_id'] = v[0]
            elif kl == 'display-name-last-modified-by-application-display-name':
                d['display_name_last_modified_by_application_display_name'] = v[0]
            elif kl == 'id-last-modified-by-application-id':
                d['id_last_modified_by_application_id'] = v[0]
            elif kl == 'display-name-created-by-user-display-name':
                d['display_name_created_by_user_display_name'] = v[0]
            elif kl == 'id-created-by-user-id':
                d['id_created_by_user_id'] = v[0]
            elif kl == 'display-name-created-by-device-display-name':
                d['display_name_created_by_device_display_name'] = v[0]
            elif kl == 'id-created-by-device-id':
                d['id_created_by_device_id'] = v[0]
            elif kl == 'display-name-created-by-application-display-name':
                d['display_name_created_by_application_display_name'] = v[0]
            elif kl == 'id-created-by-application-id':
                d['id_created_by_application_id'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddScheduleOpenShiftChangeRequests(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddScheduleOpenShiftChangeRequests, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'open-shift-id':
                d['open_shift_id'] = v[0]
            elif kl == 'assigned-to':
                d['assigned_to'] = v[0]
            elif kl == 'manager-action-date-time':
                d['manager_action_date_time'] = v[0]
            elif kl == 'manager-action-message':
                d['manager_action_message'] = v[0]
            elif kl == 'manager-user-id':
                d['manager_user_id'] = v[0]
            elif kl == 'sender-date-time':
                d['sender_date_time'] = v[0]
            elif kl == 'sender-message':
                d['sender_message'] = v[0]
            elif kl == 'sender-user-id':
                d['sender_user_id'] = v[0]
            elif kl == 'state':
                d['state'] = v[0]
            elif kl == 'created-date-time':
                d['created_date_time'] = v[0]
            elif kl == 'last-modified-date-time':
                d['last_modified_date_time'] = v[0]
            elif kl == 'display-name-last-modified-by-user-display-name':
                d['display_name_last_modified_by_user_display_name'] = v[0]
            elif kl == 'id-last-modified-by-user-id':
                d['id_last_modified_by_user_id'] = v[0]
            elif kl == 'display-name-last-modified-by-device-display-name':
                d['display_name_last_modified_by_device_display_name'] = v[0]
            elif kl == 'id-last-modified-by-device-id':
                d['id_last_modified_by_device_id'] = v[0]
            elif kl == 'display-name-last-modified-by-application-display-name':
                d['display_name_last_modified_by_application_display_name'] = v[0]
            elif kl == 'id-last-modified-by-application-id':
                d['id_last_modified_by_application_id'] = v[0]
            elif kl == 'display-name-created-by-user-display-name':
                d['display_name_created_by_user_display_name'] = v[0]
            elif kl == 'id-created-by-user-id':
                d['id_created_by_user_id'] = v[0]
            elif kl == 'display-name-created-by-device-display-name':
                d['display_name_created_by_device_display_name'] = v[0]
            elif kl == 'id-created-by-device-id':
                d['id_created_by_device_id'] = v[0]
            elif kl == 'display-name-created-by-application-display-name':
                d['display_name_created_by_application_display_name'] = v[0]
            elif kl == 'id-created-by-application-id':
                d['id_created_by_application_id'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddScheduleSchedulingGroups(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddScheduleSchedulingGroups, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'display-name':
                d['display_name'] = v[0]
            elif kl == 'is-active':
                d['is_active'] = v[0]
            elif kl == 'user-ids':
                d['user_ids'] = v
            elif kl == 'created-date-time':
                d['created_date_time'] = v[0]
            elif kl == 'last-modified-date-time':
                d['last_modified_date_time'] = v[0]
            elif kl == 'display-name-last-modified-by-user-display-name':
                d['display_name_last_modified_by_user_display_name'] = v[0]
            elif kl == 'id-last-modified-by-user-id':
                d['id_last_modified_by_user_id'] = v[0]
            elif kl == 'display-name-last-modified-by-device-display-name':
                d['display_name_last_modified_by_device_display_name'] = v[0]
            elif kl == 'id-last-modified-by-device-id':
                d['id_last_modified_by_device_id'] = v[0]
            elif kl == 'display-name-last-modified-by-application-display-name':
                d['display_name_last_modified_by_application_display_name'] = v[0]
            elif kl == 'id-last-modified-by-application-id':
                d['id_last_modified_by_application_id'] = v[0]
            elif kl == 'display-name-created-by-user-display-name':
                d['display_name_created_by_user_display_name'] = v[0]
            elif kl == 'id-created-by-user-id':
                d['id_created_by_user_id'] = v[0]
            elif kl == 'display-name-created-by-device-display-name':
                d['display_name_created_by_device_display_name'] = v[0]
            elif kl == 'id-created-by-device-id':
                d['id_created_by_device_id'] = v[0]
            elif kl == 'display-name-created-by-application-display-name':
                d['display_name_created_by_application_display_name'] = v[0]
            elif kl == 'id-created-by-application-id':
                d['id_created_by_application_id'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddScheduleSwapShiftsChangeRequests(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddScheduleSwapShiftsChangeRequests, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'recipient-shift-id':
                d['recipient_shift_id'] = v[0]
            elif kl == 'recipient-action-date-time':
                d['recipient_action_date_time'] = v[0]
            elif kl == 'recipient-action-message':
                d['recipient_action_message'] = v[0]
            elif kl == 'recipient-user-id':
                d['recipient_user_id'] = v[0]
            elif kl == 'sender-shift-id':
                d['sender_shift_id'] = v[0]
            elif kl == 'assigned-to':
                d['assigned_to'] = v[0]
            elif kl == 'manager-action-date-time':
                d['manager_action_date_time'] = v[0]
            elif kl == 'manager-action-message':
                d['manager_action_message'] = v[0]
            elif kl == 'manager-user-id':
                d['manager_user_id'] = v[0]
            elif kl == 'sender-date-time':
                d['sender_date_time'] = v[0]
            elif kl == 'sender-message':
                d['sender_message'] = v[0]
            elif kl == 'sender-user-id':
                d['sender_user_id'] = v[0]
            elif kl == 'state':
                d['state'] = v[0]
            elif kl == 'created-date-time':
                d['created_date_time'] = v[0]
            elif kl == 'last-modified-date-time':
                d['last_modified_date_time'] = v[0]
            elif kl == 'display-name-last-modified-by-user-display-name':
                d['display_name_last_modified_by_user_display_name'] = v[0]
            elif kl == 'id-last-modified-by-user-id':
                d['id_last_modified_by_user_id'] = v[0]
            elif kl == 'display-name-last-modified-by-device-display-name':
                d['display_name_last_modified_by_device_display_name'] = v[0]
            elif kl == 'id-last-modified-by-device-id':
                d['id_last_modified_by_device_id'] = v[0]
            elif kl == 'display-name-last-modified-by-application-display-name':
                d['display_name_last_modified_by_application_display_name'] = v[0]
            elif kl == 'id-last-modified-by-application-id':
                d['id_last_modified_by_application_id'] = v[0]
            elif kl == 'display-name-created-by-user-display-name':
                d['display_name_created_by_user_display_name'] = v[0]
            elif kl == 'id-created-by-user-id':
                d['id_created_by_user_id'] = v[0]
            elif kl == 'display-name-created-by-device-display-name':
                d['display_name_created_by_device_display_name'] = v[0]
            elif kl == 'id-created-by-device-id':
                d['id_created_by_device_id'] = v[0]
            elif kl == 'display-name-created-by-application-display-name':
                d['display_name_created_by_application_display_name'] = v[0]
            elif kl == 'id-created-by-application-id':
                d['id_created_by_application_id'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddScheduleTimeOffReasons(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddScheduleTimeOffReasons, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'display-name':
                d['display_name'] = v[0]
            elif kl == 'icon-type':
                d['icon_type'] = v[0]
            elif kl == 'is-active':
                d['is_active'] = v[0]
            elif kl == 'created-date-time':
                d['created_date_time'] = v[0]
            elif kl == 'last-modified-date-time':
                d['last_modified_date_time'] = v[0]
            elif kl == 'display-name-last-modified-by-user-display-name':
                d['display_name_last_modified_by_user_display_name'] = v[0]
            elif kl == 'id-last-modified-by-user-id':
                d['id_last_modified_by_user_id'] = v[0]
            elif kl == 'display-name-last-modified-by-device-display-name':
                d['display_name_last_modified_by_device_display_name'] = v[0]
            elif kl == 'id-last-modified-by-device-id':
                d['id_last_modified_by_device_id'] = v[0]
            elif kl == 'display-name-last-modified-by-application-display-name':
                d['display_name_last_modified_by_application_display_name'] = v[0]
            elif kl == 'id-last-modified-by-application-id':
                d['id_last_modified_by_application_id'] = v[0]
            elif kl == 'display-name-created-by-user-display-name':
                d['display_name_created_by_user_display_name'] = v[0]
            elif kl == 'id-created-by-user-id':
                d['id_created_by_user_id'] = v[0]
            elif kl == 'display-name-created-by-device-display-name':
                d['display_name_created_by_device_display_name'] = v[0]
            elif kl == 'id-created-by-device-id':
                d['id_created_by_device_id'] = v[0]
            elif kl == 'display-name-created-by-application-display-name':
                d['display_name_created_by_application_display_name'] = v[0]
            elif kl == 'id-created-by-application-id':
                d['id_created_by_application_id'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddScheduleTimeOffRequests(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddScheduleTimeOffRequests, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'end-date-time':
                d['end_date_time'] = v[0]
            elif kl == 'start-date-time':
                d['start_date_time'] = v[0]
            elif kl == 'time-off-reason-id':
                d['time_off_reason_id'] = v[0]
            elif kl == 'assigned-to':
                d['assigned_to'] = v[0]
            elif kl == 'manager-action-date-time':
                d['manager_action_date_time'] = v[0]
            elif kl == 'manager-action-message':
                d['manager_action_message'] = v[0]
            elif kl == 'manager-user-id':
                d['manager_user_id'] = v[0]
            elif kl == 'sender-date-time':
                d['sender_date_time'] = v[0]
            elif kl == 'sender-message':
                d['sender_message'] = v[0]
            elif kl == 'sender-user-id':
                d['sender_user_id'] = v[0]
            elif kl == 'state':
                d['state'] = v[0]
            elif kl == 'created-date-time':
                d['created_date_time'] = v[0]
            elif kl == 'last-modified-date-time':
                d['last_modified_date_time'] = v[0]
            elif kl == 'display-name-last-modified-by-user-display-name':
                d['display_name_last_modified_by_user_display_name'] = v[0]
            elif kl == 'id-last-modified-by-user-id':
                d['id_last_modified_by_user_id'] = v[0]
            elif kl == 'display-name-last-modified-by-device-display-name':
                d['display_name_last_modified_by_device_display_name'] = v[0]
            elif kl == 'id-last-modified-by-device-id':
                d['id_last_modified_by_device_id'] = v[0]
            elif kl == 'display-name-last-modified-by-application-display-name':
                d['display_name_last_modified_by_application_display_name'] = v[0]
            elif kl == 'id-last-modified-by-application-id':
                d['id_last_modified_by_application_id'] = v[0]
            elif kl == 'display-name-created-by-user-display-name':
                d['display_name_created_by_user_display_name'] = v[0]
            elif kl == 'id-created-by-user-id':
                d['id_created_by_user_id'] = v[0]
            elif kl == 'display-name-created-by-device-display-name':
                d['display_name_created_by_device_display_name'] = v[0]
            elif kl == 'id-created-by-device-id':
                d['id_created_by_device_id'] = v[0]
            elif kl == 'display-name-created-by-application-display-name':
                d['display_name_created_by_application_display_name'] = v[0]
            elif kl == 'id-created-by-application-id':
                d['id_created_by_application_id'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddScheduleTimeClockSettingsApprovedLocation(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.schedule_time_clock_settings_approved_location = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'altitude':
                d['altitude'] = v[0]
            elif kl == 'latitude':
                d['latitude'] = v[0]
            elif kl == 'longitude':
                d['longitude'] = v[0]
        return d


class AddModerationSettings(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.moderation_settings = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'allow-new-message-from-bots':
                d['allow_new_message_from_bots'] = v[0]
            elif kl == 'allow-new-message-from-connectors':
                d['allow_new_message_from_connectors'] = v[0]
            elif kl == 'reply-restriction':
                d['reply_restriction'] = v[0]
            elif kl == 'user-new-message-restriction':
                d['user_new_message_restriction'] = v[0]
        return d


class AddTeamsMembers(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddTeamsMembers, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'display-name':
                d['display_name'] = v[0]
            elif kl == 'roles':
                d['roles'] = v
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddError(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.error = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'code':
                d['code'] = v[0]
            elif kl == 'message':
                d['message'] = v[0]
        return d


class AddTeamsTemplateParameters(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddTeamsTemplateParameters, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'name':
                d['name'] = v[0]
            elif kl == 'value':
                d['value'] = v[0]
        return d


class AddTeamsChannelsMembersValues(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddTeamsChannelsMembersValues, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'display-name':
                d['display_name'] = v[0]
            elif kl == 'roles':
                d['roles'] = v
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddTeamsMembersValues(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddTeamsMembersValues, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'display-name':
                d['display_name'] = v[0]
            elif kl == 'roles':
                d['roles'] = v
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddTeamsPrimarychannelMembersValues(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddTeamsPrimarychannelMembersValues, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'display-name':
                d['display_name'] = v[0]
            elif kl == 'roles':
                d['roles'] = v
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddDraftOpenShift(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.draft_open_shift = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'open-slot-count':
                d['open_slot_count'] = v[0]
            elif kl == 'activities':
                d['activities'] = v
            elif kl == 'display-name':
                d['display_name'] = v[0]
            elif kl == 'notes':
                d['notes'] = v[0]
            elif kl == 'end-date-time':
                d['end_date_time'] = v[0]
            elif kl == 'start-date-time':
                d['start_date_time'] = v[0]
            elif kl == 'theme':
                d['theme'] = v[0]
        return d


class AddDraftTimeOff(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.draft_time_off = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'time-off-reason-id':
                d['time_off_reason_id'] = v[0]
            elif kl == 'end-date-time':
                d['end_date_time'] = v[0]
            elif kl == 'start-date-time':
                d['start_date_time'] = v[0]
            elif kl == 'theme':
                d['theme'] = v[0]
        return d


class AddEncryption(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.encryption = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'protocol':
                d['protocol'] = v[0]
            elif kl == 'secret':
                d['secret'] = v[0]
        return d
