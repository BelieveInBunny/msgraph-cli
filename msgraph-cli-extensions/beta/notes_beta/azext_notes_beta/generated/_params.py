# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type
)
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_notes_beta.action import (
    AddResources,
    AddApplication,
    AddOneNoteClientUrl,
    AddError
)


def load_arguments(self, _):

    with self.argument_context('notes group delete-onenote') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes group show-onenote') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes group update-onenote') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('notebooks', type=validate_file_or_dict, help='The collection of OneNote notebooks that are owned '
                   'by the user or group. Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('operations', type=validate_file_or_dict, help='The status of OneNote operations. Getting an '
                   'operations collection is not supported, but you can get the status of long-running operations if '
                   'the Operation-Location header is returned in the response. Read-only. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('pages', type=validate_file_or_dict, help='The pages in all OneNote notebooks that are owned by the '
                   'user or group.  Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('resources', action=AddResources, nargs='+', help='The image and other file resources in OneNote '
                   'pages. Getting a resources collection is not supported, but you can get the binary content of a '
                   'specific resource. Read-only. Nullable.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in all OneNote notebooks '
                   'that are owned by the user or group.  Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in all OneNote notebooks that are owned '
                   'by the user or group.  Read-only. Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenote create-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenote create-operation') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The start time of the operation.')
        c.argument('last_action_date_time', help='The time of the last action of the operation.')
        c.argument('status', arg_type=get_enum_type(['NotStarted', 'Running', 'Completed', 'Failed']), help='')
        c.argument('error', action=AddError, nargs='+', help='onenoteOperationError')
        c.argument('percent_complete', type=str, help='The operation percent complete if the operation is still in '
                   'running status')
        c.argument('resource_id', type=str, help='The resource id.')
        c.argument('resource_location', type=str, help='The resource URI for the object. For example, the resource URI '
                   'for a copied page or section.')

    with self.argument_context('notes groupsonenote create-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenote create-resource') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('content', help='The content stream')
        c.argument('content_url', type=str, help='The URL for downloading the content')

    with self.argument_context('notes groupsonenote create-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenote create-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenote delete-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenote delete-operation') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_operation_id', type=str, help='key: id of onenoteOperation')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenote delete-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenote delete-resource') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_resource_id', type=str, help='key: id of onenoteResource')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenote delete-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenote delete-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenote list-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenote list-operation') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenote list-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenote list-resource') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenote list-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenote list-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenote set-page-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes groupsonenote set-resource-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_resource_id', type=str, help='key: id of onenoteResource')
        c.argument('data', help='New media content.')

    with self.argument_context('notes groupsonenote show-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenote show-operation') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_operation_id', type=str, help='key: id of onenoteOperation')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenote show-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenote show-page-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('notes groupsonenote show-resource') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_resource_id', type=str, help='key: id of onenoteResource')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenote show-resource-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_resource_id', type=str, help='key: id of onenoteResource')

    with self.argument_context('notes groupsonenote show-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenote show-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenote update-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenote update-operation') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_operation_id', type=str, help='key: id of onenoteOperation')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The start time of the operation.')
        c.argument('last_action_date_time', help='The time of the last action of the operation.')
        c.argument('status', arg_type=get_enum_type(['NotStarted', 'Running', 'Completed', 'Failed']), help='')
        c.argument('error', action=AddError, nargs='+', help='onenoteOperationError')
        c.argument('percent_complete', type=str, help='The operation percent complete if the operation is still in '
                   'running status')
        c.argument('resource_id', type=str, help='The resource id.')
        c.argument('resource_location', type=str, help='The resource URI for the object. For example, the resource URI '
                   'for a copied page or section.')

    with self.argument_context('notes groupsonenote update-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenote update-resource') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_resource_id', type=str, help='key: id of onenoteResource')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('content', help='The content stream')
        c.argument('content_url', type=str, help='The URL for downloading the content')

    with self.argument_context('notes groupsonenote update-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenote update-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebook create-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebook create-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebook delete-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotenotebook delete-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotenotebook list-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebook list-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebook show-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebook show-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebook update-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebook update-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebookssectiongroup create-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebookssectiongroup create-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebookssectiongroup delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotenotebookssectiongroup delete-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotenotebookssectiongroup delete-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotenotebookssectiongroup delete-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotenotebookssectiongroup list-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssectiongroup list-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssectiongroup show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssectiongroup show-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssectiongroup show-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssectiongroup show-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssectiongroup update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotenotebookssectiongroup update-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebookssectiongroup update-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebookssectiongroup update-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebookssectiongroupssection create-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebookssectiongroupssection delete-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotenotebookssectiongroupssection delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotenotebookssectiongroupssection delete-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotenotebookssectiongroupssection list-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssectiongroupssection set-page-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes groupsonenotenotebookssectiongroupssection show-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssectiongroupssection show-page-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('notes groupsonenotenotebookssectiongroupssection show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssectiongroupssection show-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssectiongroupssection update-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebookssectiongroupssection update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotenotebookssectiongroupssection update-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebookssectiongroupssectionspage delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotenotebookssectiongroupssectionspage delete-parent-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotenotebookssectiongroupssectionspage show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssectiongroupssectionspage show-parent-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssectiongroupssectionspage update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotenotebookssectiongroupssectionspage update-parent-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebookssection create-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebookssection delete-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotenotebookssection delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotenotebookssection delete-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotenotebookssection list-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssection set-page-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes groupsonenotenotebookssection show-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssection show-page-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('notes groupsonenotenotebookssection show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssection show-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssection update-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebookssection update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotenotebookssection update-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebookssectionspage delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotenotebookssectionspage delete-parent-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotenotebookssectionspage show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssectionspage show-parent-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssectionspage update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotenotebookssectionspage update-parent-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebookssectionsparentsectiongroup create-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebookssectionsparentsectiongroup create-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebookssectionsparentsectiongroup delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotenotebookssectionsparentsectiongroup delete-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotenotebookssectionsparentsectiongroup delete-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotenotebookssectionsparentsectiongroup delete-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotenotebookssectionsparentsectiongroup list-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssectionsparentsectiongroup list-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssectionsparentsectiongroup show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssectionsparentsectiongroup show-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssectionsparentsectiongroup show-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssectionsparentsectiongroup show-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotenotebookssectionsparentsectiongroup update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotenotebookssectionsparentsectiongroup update-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebookssectionsparentsectiongroup update-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotenotebookssectionsparentsectiongroup update-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotepage delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepage delete-parent-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepage show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepage show-parent-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepage update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotepage update-parent-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentnotebook create-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentnotebook create-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentnotebook delete-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentnotebook delete-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentnotebook list-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebook list-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebook show-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebook show-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebook update-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentnotebook update-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroup create-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroup create-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroup delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroup delete-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroup delete-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroup delete-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroup list-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroup list-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroup show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroup show-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroup show-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroup show-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroup update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroup update-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroup update-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroup update-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroupssection create-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroupssection delete-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroupssection delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroupssection delete-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroupssection list-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroupssection show-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroupssection show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroupssection show-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroupssection update-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroupssection update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectiongroupssection update-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenoteparentnotebooksectiongroupssectionspage set-page-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes groupsonenoteparentnotebooksectiongroupssectionspage show-page-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')

    with self.argument_context('notes groupsonenotepagesparentnotebooksection create-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentnotebooksection delete-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentnotebooksection delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentnotebooksection delete-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentnotebooksection list-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebooksection show-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebooksection show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebooksection show-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebooksection update-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentnotebooksection update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotepagesparentnotebooksection update-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenoteparentnotebooksectionspage set-page-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes groupsonenoteparentnotebooksectionspage show-page-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectionsparentsectiongroup create-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectionsparentsectiongroup create-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectionsparentsectiongroup delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectionsparentsectiongroup delete-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectionsparentsectiongroup delete-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectionsparentsectiongroup delete-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectionsparentsectiongroup list-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectionsparentsectiongroup list-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectionsparentsectiongroup show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectionsparentsectiongroup show-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectionsparentsectiongroup show-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectionsparentsectiongroup show-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectionsparentsectiongroup update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectionsparentsectiongroup update-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectionsparentsectiongroup update-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentnotebooksectionsparentsectiongroup update-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentsection create-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentsection delete-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentsection delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentsection delete-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentsection list-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsection show-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsection show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsection show-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsection update-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentsection update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotepagesparentsection update-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenoteparentsectionpage set-page-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes groupsonenoteparentsectionpage show-page-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebook create-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebook create-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebook delete-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebook delete-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebook list-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebook list-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebook show-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebook show-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebook update-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebook update-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebooksectiongroup create-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebooksectiongroup create-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebooksectiongroup delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebooksectiongroup delete-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebooksectiongroup delete-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebooksectiongroup delete-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebooksectiongroup list-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebooksectiongroup list-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebooksectiongroup show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebooksectiongroup show-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebooksectiongroup show-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebooksectiongroup show-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebooksectiongroup update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebooksectiongroup update-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebooksectiongroup update-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentsectionparentnotebooksectiongroup update-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentsectiongroup create-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentsectiongroup create-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentsectiongroup delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentsectiongroup delete-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentsectiongroup delete-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentsectiongroup delete-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentsectiongroup list-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsectiongroup list-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsectiongroup show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsectiongroup show-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsectiongroup show-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsectiongroup show-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsectiongroup update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotepagesparentsectiongroup update-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentsectiongroup update-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentsectiongroup update-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentsectiongroupparentnotebook create-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentsectiongroupparentnotebook create-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentsectiongroupparentnotebook delete-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentsectiongroupparentnotebook delete-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotepagesparentsectiongroupparentnotebook list-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsectiongroupparentnotebook list-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsectiongroupparentnotebook show-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsectiongroupparentnotebook show-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotepagesparentsectiongroupparentnotebook update-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotepagesparentsectiongroupparentnotebook update-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroup create-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroup create-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroup delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectiongroup delete-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectiongroup delete-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectiongroup delete-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectiongroup list-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroup list-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroup show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroup show-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroup show-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroup show-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroup update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotesectiongroup update-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroup update-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroup update-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebook create-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebook create-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebook delete-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebook delete-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebook list-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebook list-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebook show-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebook show-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebook update-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebook update-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebooksection create-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebooksection delete-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebooksection delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebooksection delete-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebooksection list-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebooksection set-page-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebooksection show-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebooksection show-page-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebooksection show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebooksection show-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebooksection update-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebooksection update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebooksection update-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebooksectionspage delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebooksectionspage delete-parent-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebooksectionspage show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebooksectionspage show-parent-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebooksectionspage update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotesectiongroupsparentnotebooksectionspage update-parent-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroupssection create-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroupssection delete-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectiongroupssection delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectiongroupssection delete-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectiongroupssection list-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupssection set-page-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes groupsonenotesectiongroupssection show-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupssection show-page-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('notes groupsonenotesectiongroupssection show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupssection show-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupssection update-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroupssection update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotesectiongroupssection update-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroupssectionspage delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectiongroupssectionspage delete-parent-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectiongroupssectionspage show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupssectionspage show-parent-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupssectionspage update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotesectiongroupssectionspage update-parent-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroupssectionspagesparentnotebook create-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroupssectionspagesparentnotebook create-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroupssectionspagesparentnotebook delete-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectiongroupssectionspagesparentnotebook delete-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectiongroupssectionspagesparentnotebook list-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupssectionspagesparentnotebook list-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupssectionspagesparentnotebook show-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupssectionspagesparentnotebook show-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupssectionspagesparentnotebook update-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroupssectionspagesparentnotebook update-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroupssectionsparentnotebook create-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroupssectionsparentnotebook create-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroupssectionsparentnotebook delete-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectiongroupssectionsparentnotebook delete-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectiongroupssectionsparentnotebook list-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupssectionsparentnotebook list-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupssectionsparentnotebook show-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupssectionsparentnotebook show-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectiongroupssectionsparentnotebook update-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectiongroupssectionsparentnotebook update-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesection create-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesection delete-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesection delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesection delete-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesection list-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesection set-page-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes groupsonenotesection show-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesection show-page-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('notes groupsonenotesection show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesection show-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesection update-page') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesection update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotesection update-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionspage delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectionspage delete-parent-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectionspage show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionspage show-parent-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionspage update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotesectionspage update-parent-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebook create-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebook create-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebook delete-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebook delete-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebook list-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebook list-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebook show-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebook show-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebook update-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebook update-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebooksectiongroup create-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebooksectiongroup create-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebooksectiongroup delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebooksectiongroup delete-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebooksectiongroup delete-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebooksectiongroup delete-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebooksectiongroup list-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebooksectiongroup list-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebooksectiongroup show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebooksectiongroup show-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebooksectiongroup show-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebooksectiongroup show-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebooksectiongroup update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebooksectiongroup update-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebooksectiongroup update-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionspagesparentnotebooksectiongroup update-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionsparentnotebook create-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionsparentnotebook create-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionsparentnotebook delete-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectionsparentnotebook delete-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectionsparentnotebook list-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionsparentnotebook list-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionsparentnotebook show-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionsparentnotebook show-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionsparentnotebook update-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionsparentnotebook update-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionsparentnotebooksectiongroup create-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionsparentnotebooksectiongroup create-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionsparentnotebooksectiongroup delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectionsparentnotebooksectiongroup delete-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectionsparentnotebooksectiongroup delete-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectionsparentnotebooksectiongroup delete-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectionsparentnotebooksectiongroup list-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionsparentnotebooksectiongroup list-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionsparentnotebooksectiongroup show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionsparentnotebooksectiongroup show-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionsparentnotebooksectiongroup show-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionsparentnotebooksectiongroup show-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionsparentnotebooksectiongroup update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotesectionsparentnotebooksectiongroup update-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionsparentnotebooksectiongroup update-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionsparentnotebooksectiongroup update-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroup create-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroup create-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroup delete-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroup delete-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroup delete-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroup delete-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroup list-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroup list-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroup show-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroup show-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroup show-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroup show-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroup update-parent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroup update-parent-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroup update-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroup update-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroupparentnotebook create-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroupparentnotebook create-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroupparentnotebook delete-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroupparentnotebook delete-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroupparentnotebook list-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroupparentnotebook list-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroupparentnotebook show-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroupparentnotebook show-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroupparentnotebook update-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes groupsonenotesectionsparentsectiongroupparentnotebook update-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes site delete-onenote') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes site show-onenote') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes site update-onenote') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('notebooks', type=validate_file_or_dict, help='The collection of OneNote notebooks that are owned '
                   'by the user or group. Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('operations', type=validate_file_or_dict, help='The status of OneNote operations. Getting an '
                   'operations collection is not supported, but you can get the status of long-running operations if '
                   'the Operation-Location header is returned in the response. Read-only. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('pages', type=validate_file_or_dict, help='The pages in all OneNote notebooks that are owned by the '
                   'user or group.  Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('resources', action=AddResources, nargs='+', help='The image and other file resources in OneNote '
                   'pages. Getting a resources collection is not supported, but you can get the binary content of a '
                   'specific resource. Read-only. Nullable.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in all OneNote notebooks '
                   'that are owned by the user or group.  Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in all OneNote notebooks that are owned '
                   'by the user or group.  Read-only. Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenote create-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenote create-operation') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The start time of the operation.')
        c.argument('last_action_date_time', help='The time of the last action of the operation.')
        c.argument('status', arg_type=get_enum_type(['NotStarted', 'Running', 'Completed', 'Failed']), help='')
        c.argument('error', action=AddError, nargs='+', help='onenoteOperationError')
        c.argument('percent_complete', type=str, help='The operation percent complete if the operation is still in '
                   'running status')
        c.argument('resource_id', type=str, help='The resource id.')
        c.argument('resource_location', type=str, help='The resource URI for the object. For example, the resource URI '
                   'for a copied page or section.')

    with self.argument_context('notes sitesonenote create-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenote create-resource') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('content', help='The content stream')
        c.argument('content_url', type=str, help='The URL for downloading the content')

    with self.argument_context('notes sitesonenote create-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenote create-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenote delete-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenote delete-operation') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_operation_id', type=str, help='key: id of onenoteOperation')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenote delete-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenote delete-resource') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_resource_id', type=str, help='key: id of onenoteResource')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenote delete-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenote delete-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenote list-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenote list-operation') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenote list-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenote list-resource') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenote list-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenote list-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenote set-page-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes sitesonenote set-resource-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_resource_id', type=str, help='key: id of onenoteResource')
        c.argument('data', help='New media content.')

    with self.argument_context('notes sitesonenote show-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenote show-operation') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_operation_id', type=str, help='key: id of onenoteOperation')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenote show-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenote show-page-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('notes sitesonenote show-resource') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_resource_id', type=str, help='key: id of onenoteResource')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenote show-resource-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_resource_id', type=str, help='key: id of onenoteResource')

    with self.argument_context('notes sitesonenote show-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenote show-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenote update-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenote update-operation') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_operation_id', type=str, help='key: id of onenoteOperation')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The start time of the operation.')
        c.argument('last_action_date_time', help='The time of the last action of the operation.')
        c.argument('status', arg_type=get_enum_type(['NotStarted', 'Running', 'Completed', 'Failed']), help='')
        c.argument('error', action=AddError, nargs='+', help='onenoteOperationError')
        c.argument('percent_complete', type=str, help='The operation percent complete if the operation is still in '
                   'running status')
        c.argument('resource_id', type=str, help='The resource id.')
        c.argument('resource_location', type=str, help='The resource URI for the object. For example, the resource URI '
                   'for a copied page or section.')

    with self.argument_context('notes sitesonenote update-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenote update-resource') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_resource_id', type=str, help='key: id of onenoteResource')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('content', help='The content stream')
        c.argument('content_url', type=str, help='The URL for downloading the content')

    with self.argument_context('notes sitesonenote update-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenote update-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebook create-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebook create-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebook delete-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotenotebook delete-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotenotebook list-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebook list-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebook show-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebook show-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebook update-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebook update-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebookssectiongroup create-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebookssectiongroup create-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebookssectiongroup delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotenotebookssectiongroup delete-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotenotebookssectiongroup delete-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotenotebookssectiongroup delete-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotenotebookssectiongroup list-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssectiongroup list-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssectiongroup show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssectiongroup show-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssectiongroup show-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssectiongroup show-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssectiongroup update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotenotebookssectiongroup update-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebookssectiongroup update-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebookssectiongroup update-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebookssectiongroupssection create-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebookssectiongroupssection delete-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotenotebookssectiongroupssection delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotenotebookssectiongroupssection delete-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotenotebookssectiongroupssection list-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssectiongroupssection set-page-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes sitesonenotenotebookssectiongroupssection show-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssectiongroupssection show-page-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('notes sitesonenotenotebookssectiongroupssection show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssectiongroupssection show-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssectiongroupssection update-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebookssectiongroupssection update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotenotebookssectiongroupssection update-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebookssectiongroupssectionspage delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotenotebookssectiongroupssectionspage delete-parent-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotenotebookssectiongroupssectionspage show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssectiongroupssectionspage show-parent-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssectiongroupssectionspage update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotenotebookssectiongroupssectionspage update-parent-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebookssection create-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebookssection delete-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotenotebookssection delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotenotebookssection delete-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotenotebookssection list-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssection set-page-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes sitesonenotenotebookssection show-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssection show-page-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('notes sitesonenotenotebookssection show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssection show-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssection update-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebookssection update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotenotebookssection update-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebookssectionspage delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotenotebookssectionspage delete-parent-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotenotebookssectionspage show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssectionspage show-parent-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssectionspage update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotenotebookssectionspage update-parent-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebookssectionsparentsectiongroup create-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebookssectionsparentsectiongroup create-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebookssectionsparentsectiongroup delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotenotebookssectionsparentsectiongroup delete-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotenotebookssectionsparentsectiongroup delete-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotenotebookssectionsparentsectiongroup delete-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotenotebookssectionsparentsectiongroup list-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssectionsparentsectiongroup list-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssectionsparentsectiongroup show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssectionsparentsectiongroup show-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssectionsparentsectiongroup show-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssectionsparentsectiongroup show-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotenotebookssectionsparentsectiongroup update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotenotebookssectionsparentsectiongroup update-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebookssectionsparentsectiongroup update-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotenotebookssectionsparentsectiongroup update-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotepage delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepage delete-parent-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepage show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepage show-parent-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepage update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotepage update-parent-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentnotebook create-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentnotebook create-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentnotebook delete-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentnotebook delete-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentnotebook list-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebook list-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebook show-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebook show-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebook update-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentnotebook update-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroup create-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroup create-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroup delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroup delete-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroup delete-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroup delete-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroup list-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroup list-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroup show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroup show-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroup show-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroup show-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroup update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroup update-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroup update-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroup update-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroupssection create-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroupssection delete-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroupssection delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroupssection delete-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroupssection list-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroupssection show-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroupssection show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroupssection show-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroupssection update-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroupssection update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectiongroupssection update-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenoteparentnotebooksectiongroupssectionspage set-page-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes sitesonenoteparentnotebooksectiongroupssectionspage show-page-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')

    with self.argument_context('notes sitesonenotepagesparentnotebooksection create-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentnotebooksection delete-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentnotebooksection delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentnotebooksection delete-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentnotebooksection list-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebooksection show-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebooksection show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebooksection show-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebooksection update-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentnotebooksection update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotepagesparentnotebooksection update-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenoteparentnotebooksectionspage set-page-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes sitesonenoteparentnotebooksectionspage show-page-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectionsparentsectiongroup create-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectionsparentsectiongroup create-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectionsparentsectiongroup delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectionsparentsectiongroup delete-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectionsparentsectiongroup delete-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectionsparentsectiongroup delete-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectionsparentsectiongroup list-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectionsparentsectiongroup list-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectionsparentsectiongroup show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectionsparentsectiongroup show-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectionsparentsectiongroup show-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectionsparentsectiongroup show-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectionsparentsectiongroup update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectionsparentsectiongroup update-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectionsparentsectiongroup update-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentnotebooksectionsparentsectiongroup update-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentsection create-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentsection delete-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentsection delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentsection delete-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentsection list-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsection show-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsection show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsection show-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsection update-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentsection update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotepagesparentsection update-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenoteparentsectionpage set-page-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes sitesonenoteparentsectionpage show-page-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebook create-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebook create-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebook delete-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebook delete-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebook list-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebook list-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebook show-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebook show-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebook update-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebook update-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebooksectiongroup create-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebooksectiongroup create-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebooksectiongroup delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebooksectiongroup delete-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebooksectiongroup delete-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebooksectiongroup delete-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebooksectiongroup list-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebooksectiongroup list-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebooksectiongroup show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebooksectiongroup show-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebooksectiongroup show-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebooksectiongroup show-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebooksectiongroup update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebooksectiongroup update-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebooksectiongroup update-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentsectionparentnotebooksectiongroup update-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentsectiongroup create-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentsectiongroup create-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentsectiongroup delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentsectiongroup delete-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentsectiongroup delete-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentsectiongroup delete-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentsectiongroup list-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsectiongroup list-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsectiongroup show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsectiongroup show-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsectiongroup show-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsectiongroup show-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsectiongroup update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotepagesparentsectiongroup update-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentsectiongroup update-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentsectiongroup update-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentsectiongroupparentnotebook create-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentsectiongroupparentnotebook create-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentsectiongroupparentnotebook delete-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentsectiongroupparentnotebook delete-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotepagesparentsectiongroupparentnotebook list-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsectiongroupparentnotebook list-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsectiongroupparentnotebook show-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsectiongroupparentnotebook show-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotepagesparentsectiongroupparentnotebook update-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotepagesparentsectiongroupparentnotebook update-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroup create-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroup create-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroup delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectiongroup delete-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectiongroup delete-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectiongroup delete-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectiongroup list-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroup list-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroup show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroup show-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroup show-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroup show-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroup update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotesectiongroup update-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroup update-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroup update-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebook create-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebook create-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebook delete-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebook delete-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebook list-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebook list-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebook show-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebook show-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebook update-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebook update-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebooksection create-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebooksection delete-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebooksection delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebooksection delete-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebooksection list-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebooksection set-page-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebooksection show-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebooksection show-page-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebooksection show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebooksection show-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebooksection update-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebooksection update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebooksection update-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebooksectionspage delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebooksectionspage delete-parent-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebooksectionspage show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebooksectionspage show-parent-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebooksectionspage update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotesectiongroupsparentnotebooksectionspage update-parent-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroupssection create-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroupssection delete-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectiongroupssection delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectiongroupssection delete-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectiongroupssection list-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupssection set-page-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes sitesonenotesectiongroupssection show-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupssection show-page-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('notes sitesonenotesectiongroupssection show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupssection show-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupssection update-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroupssection update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotesectiongroupssection update-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroupssectionspage delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectiongroupssectionspage delete-parent-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectiongroupssectionspage show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupssectionspage show-parent-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupssectionspage update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotesectiongroupssectionspage update-parent-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroupssectionspagesparentnotebook create-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroupssectionspagesparentnotebook create-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroupssectionspagesparentnotebook delete-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectiongroupssectionspagesparentnotebook delete-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectiongroupssectionspagesparentnotebook list-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupssectionspagesparentnotebook list-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupssectionspagesparentnotebook show-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupssectionspagesparentnotebook show-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupssectionspagesparentnotebook update-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroupssectionspagesparentnotebook update-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroupssectionsparentnotebook create-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroupssectionsparentnotebook create-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroupssectionsparentnotebook delete-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectiongroupssectionsparentnotebook delete-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectiongroupssectionsparentnotebook list-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupssectionsparentnotebook list-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupssectionsparentnotebook show-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupssectionsparentnotebook show-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectiongroupssectionsparentnotebook update-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectiongroupssectionsparentnotebook update-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesection create-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesection delete-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesection delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesection delete-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesection list-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesection set-page-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes sitesonenotesection show-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesection show-page-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('notes sitesonenotesection show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesection show-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesection update-page') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesection update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotesection update-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionspage delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectionspage delete-parent-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectionspage show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionspage show-parent-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionspage update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotesectionspage update-parent-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebook create-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebook create-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebook delete-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebook delete-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebook list-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebook list-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebook show-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebook show-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebook update-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebook update-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebooksectiongroup create-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebooksectiongroup create-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebooksectiongroup delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebooksectiongroup delete-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebooksectiongroup delete-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebooksectiongroup delete-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebooksectiongroup list-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebooksectiongroup list-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebooksectiongroup show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebooksectiongroup show-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebooksectiongroup show-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebooksectiongroup show-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebooksectiongroup update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebooksectiongroup update-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebooksectiongroup update-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionspagesparentnotebooksectiongroup update-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionsparentnotebook create-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionsparentnotebook create-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionsparentnotebook delete-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectionsparentnotebook delete-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectionsparentnotebook list-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionsparentnotebook list-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionsparentnotebook show-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionsparentnotebook show-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionsparentnotebook update-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionsparentnotebook update-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionsparentnotebooksectiongroup create-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionsparentnotebooksectiongroup create-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionsparentnotebooksectiongroup delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectionsparentnotebooksectiongroup delete-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectionsparentnotebooksectiongroup delete-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectionsparentnotebooksectiongroup delete-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectionsparentnotebooksectiongroup list-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionsparentnotebooksectiongroup list-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionsparentnotebooksectiongroup show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionsparentnotebooksectiongroup show-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionsparentnotebooksectiongroup show-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionsparentnotebooksectiongroup show-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionsparentnotebooksectiongroup update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotesectionsparentnotebooksectiongroup update-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionsparentnotebooksectiongroup update-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionsparentnotebooksectiongroup update-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroup create-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroup create-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroup delete-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroup delete-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroup delete-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroup delete-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroup list-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroup list-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroup show-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroup show-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroup show-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroup show-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroup update-parent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroup update-parent-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroup update-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroup update-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroupparentnotebook create-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroupparentnotebook create-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroupparentnotebook delete-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroupparentnotebook delete-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroupparentnotebook list-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroupparentnotebook list-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroupparentnotebook show-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroupparentnotebook show-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroupparentnotebook update-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes sitesonenotesectionsparentsectiongroupparentnotebook update-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes user delete-onenote') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes user show-onenote') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes user update-onenote') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('notebooks', type=validate_file_or_dict, help='The collection of OneNote notebooks that are owned '
                   'by the user or group. Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('operations', type=validate_file_or_dict, help='The status of OneNote operations. Getting an '
                   'operations collection is not supported, but you can get the status of long-running operations if '
                   'the Operation-Location header is returned in the response. Read-only. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('pages', type=validate_file_or_dict, help='The pages in all OneNote notebooks that are owned by the '
                   'user or group.  Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('resources', action=AddResources, nargs='+', help='The image and other file resources in OneNote '
                   'pages. Getting a resources collection is not supported, but you can get the binary content of a '
                   'specific resource. Read-only. Nullable.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in all OneNote notebooks '
                   'that are owned by the user or group.  Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in all OneNote notebooks that are owned '
                   'by the user or group.  Read-only. Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenote create-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenote create-operation') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The start time of the operation.')
        c.argument('last_action_date_time', help='The time of the last action of the operation.')
        c.argument('status', arg_type=get_enum_type(['NotStarted', 'Running', 'Completed', 'Failed']), help='')
        c.argument('error', action=AddError, nargs='+', help='onenoteOperationError')
        c.argument('percent_complete', type=str, help='The operation percent complete if the operation is still in '
                   'running status')
        c.argument('resource_id', type=str, help='The resource id.')
        c.argument('resource_location', type=str, help='The resource URI for the object. For example, the resource URI '
                   'for a copied page or section.')

    with self.argument_context('notes usersonenote create-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenote create-resource') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('content', help='The content stream')
        c.argument('content_url', type=str, help='The URL for downloading the content')

    with self.argument_context('notes usersonenote create-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenote create-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenote delete-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenote delete-operation') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_operation_id', type=str, help='key: id of onenoteOperation')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenote delete-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenote delete-resource') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_resource_id', type=str, help='key: id of onenoteResource')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenote delete-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenote delete-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenote list-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenote list-operation') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenote list-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenote list-resource') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenote list-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenote list-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenote set-page-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes usersonenote set-resource-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_resource_id', type=str, help='key: id of onenoteResource')
        c.argument('data', help='New media content.')

    with self.argument_context('notes usersonenote show-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenote show-operation') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_operation_id', type=str, help='key: id of onenoteOperation')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenote show-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenote show-page-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('notes usersonenote show-resource') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_resource_id', type=str, help='key: id of onenoteResource')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenote show-resource-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_resource_id', type=str, help='key: id of onenoteResource')

    with self.argument_context('notes usersonenote show-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenote show-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenote update-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenote update-operation') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_operation_id', type=str, help='key: id of onenoteOperation')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The start time of the operation.')
        c.argument('last_action_date_time', help='The time of the last action of the operation.')
        c.argument('status', arg_type=get_enum_type(['NotStarted', 'Running', 'Completed', 'Failed']), help='')
        c.argument('error', action=AddError, nargs='+', help='onenoteOperationError')
        c.argument('percent_complete', type=str, help='The operation percent complete if the operation is still in '
                   'running status')
        c.argument('resource_id', type=str, help='The resource id.')
        c.argument('resource_location', type=str, help='The resource URI for the object. For example, the resource URI '
                   'for a copied page or section.')

    with self.argument_context('notes usersonenote update-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenote update-resource') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_resource_id', type=str, help='key: id of onenoteResource')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('content', help='The content stream')
        c.argument('content_url', type=str, help='The URL for downloading the content')

    with self.argument_context('notes usersonenote update-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenote update-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebook create-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebook create-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebook delete-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotenotebook delete-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotenotebook list-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebook list-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebook show-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebook show-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebook update-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebook update-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebookssectiongroup create-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebookssectiongroup create-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebookssectiongroup delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotenotebookssectiongroup delete-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotenotebookssectiongroup delete-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotenotebookssectiongroup delete-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotenotebookssectiongroup list-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssectiongroup list-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssectiongroup show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssectiongroup show-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssectiongroup show-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssectiongroup show-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssectiongroup update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotenotebookssectiongroup update-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebookssectiongroup update-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebookssectiongroup update-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebookssectiongroupssection create-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebookssectiongroupssection delete-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotenotebookssectiongroupssection delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotenotebookssectiongroupssection delete-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotenotebookssectiongroupssection list-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssectiongroupssection set-page-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes usersonenotenotebookssectiongroupssection show-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssectiongroupssection show-page-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('notes usersonenotenotebookssectiongroupssection show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssectiongroupssection show-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssectiongroupssection update-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebookssectiongroupssection update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotenotebookssectiongroupssection update-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebookssectiongroupssectionspage delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotenotebookssectiongroupssectionspage delete-parent-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotenotebookssectiongroupssectionspage show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssectiongroupssectionspage show-parent-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssectiongroupssectionspage update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotenotebookssectiongroupssectionspage update-parent-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebookssection create-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebookssection delete-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotenotebookssection delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotenotebookssection delete-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotenotebookssection list-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssection set-page-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes usersonenotenotebookssection show-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssection show-page-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('notes usersonenotenotebookssection show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssection show-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssection update-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebookssection update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotenotebookssection update-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebookssectionspage delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotenotebookssectionspage delete-parent-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotenotebookssectionspage show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssectionspage show-parent-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssectionspage update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotenotebookssectionspage update-parent-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebookssectionsparentsectiongroup create-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebookssectionsparentsectiongroup create-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebookssectionsparentsectiongroup delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotenotebookssectionsparentsectiongroup delete-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotenotebookssectionsparentsectiongroup delete-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotenotebookssectionsparentsectiongroup delete-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotenotebookssectionsparentsectiongroup list-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssectionsparentsectiongroup list-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssectionsparentsectiongroup show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssectionsparentsectiongroup show-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssectionsparentsectiongroup show-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssectionsparentsectiongroup show-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotenotebookssectionsparentsectiongroup update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotenotebookssectionsparentsectiongroup update-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebookssectionsparentsectiongroup update-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotenotebookssectionsparentsectiongroup update-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotepage delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepage delete-parent-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepage show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepage show-parent-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepage update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotepage update-parent-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentnotebook create-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentnotebook create-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentnotebook delete-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentnotebook delete-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentnotebook list-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebook list-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebook show-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebook show-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebook update-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentnotebook update-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroup create-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroup create-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroup delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroup delete-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroup delete-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroup delete-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroup list-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroup list-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroup show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroup show-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroup show-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroup show-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroup update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroup update-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroup update-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroup update-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroupssection create-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroupssection delete-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroupssection delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroupssection delete-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroupssection list-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroupssection show-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroupssection show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroupssection show-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroupssection update-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroupssection update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotepagesparentnotebooksectiongroupssection update-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenoteparentnotebooksectiongroupssectionspage set-page-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes usersonenoteparentnotebooksectiongroupssectionspage show-page-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')

    with self.argument_context('notes usersonenotepagesparentnotebooksection create-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentnotebooksection delete-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentnotebooksection delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentnotebooksection delete-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentnotebooksection list-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebooksection show-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebooksection show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebooksection show-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebooksection update-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentnotebooksection update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotepagesparentnotebooksection update-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenoteparentnotebooksectionspage set-page-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes usersonenoteparentnotebooksectionspage show-page-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')

    with self.argument_context('notes usersonenotepagesparentnotebooksectionsparentsectiongroup create-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentnotebooksectionsparentsectiongroup create-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentnotebooksectionsparentsectiongroup delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentnotebooksectionsparentsectiongroup delete-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentnotebooksectionsparentsectiongroup delete-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentnotebooksectionsparentsectiongroup delete-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentnotebooksectionsparentsectiongroup list-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebooksectionsparentsectiongroup list-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebooksectionsparentsectiongroup show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebooksectionsparentsectiongroup show-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebooksectionsparentsectiongroup show-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebooksectionsparentsectiongroup show-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentnotebooksectionsparentsectiongroup update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotepagesparentnotebooksectionsparentsectiongroup update-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentnotebooksectionsparentsectiongroup update-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentnotebooksectionsparentsectiongroup update-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentsection create-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentsection delete-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentsection delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentsection delete-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentsection list-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsection show-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsection show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsection show-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsection update-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentsection update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotepagesparentsection update-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenoteparentsectionpage set-page-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes usersonenoteparentsectionpage show-page-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebook create-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebook create-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebook delete-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebook delete-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebook list-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebook list-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebook show-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebook show-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebook update-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebook update-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebooksectiongroup create-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebooksectiongroup create-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebooksectiongroup delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebooksectiongroup delete-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebooksectiongroup delete-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebooksectiongroup delete-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebooksectiongroup list-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebooksectiongroup list-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebooksectiongroup show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebooksectiongroup show-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebooksectiongroup show-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebooksectiongroup show-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebooksectiongroup update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebooksectiongroup update-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebooksectiongroup update-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentsectionparentnotebooksectiongroup update-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentsectiongroup create-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentsectiongroup create-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentsectiongroup delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentsectiongroup delete-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentsectiongroup delete-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentsectiongroup delete-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentsectiongroup list-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsectiongroup list-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsectiongroup show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsectiongroup show-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsectiongroup show-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsectiongroup show-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsectiongroup update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotepagesparentsectiongroup update-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentsectiongroup update-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentsectiongroup update-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentsectiongroupparentnotebook create-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentsectiongroupparentnotebook create-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentsectiongroupparentnotebook delete-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentsectiongroupparentnotebook delete-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotepagesparentsectiongroupparentnotebook list-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsectiongroupparentnotebook list-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsectiongroupparentnotebook show-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsectiongroupparentnotebook show-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotepagesparentsectiongroupparentnotebook update-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotepagesparentsectiongroupparentnotebook update-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroup create-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroup create-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroup delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectiongroup delete-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectiongroup delete-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectiongroup delete-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectiongroup list-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroup list-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroup show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroup show-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroup show-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroup show-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroup update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotesectiongroup update-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroup update-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroup update-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebook create-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebook create-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebook delete-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebook delete-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebook list-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebook list-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebook show-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebook show-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebook update-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebook update-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebooksection create-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebooksection delete-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebooksection delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebooksection delete-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebooksection list-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebooksection set-page-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebooksection show-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebooksection show-page-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebooksection show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebooksection show-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebooksection update-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebooksection update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebooksection update-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebooksectionspage delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebooksectionspage delete-parent-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebooksectionspage show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebooksectionspage show-parent-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebooksectionspage update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotesectiongroupsparentnotebooksectionspage update-parent-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroupssection create-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroupssection delete-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectiongroupssection delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectiongroupssection delete-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectiongroupssection list-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupssection set-page-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes usersonenotesectiongroupssection show-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupssection show-page-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('notes usersonenotesectiongroupssection show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupssection show-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupssection update-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroupssection update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotesectiongroupssection update-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroupssectionspage delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectiongroupssectionspage delete-parent-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectiongroupssectionspage show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupssectionspage show-parent-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupssectionspage update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotesectiongroupssectionspage update-parent-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroupssectionspagesparentnotebook create-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroupssectionspagesparentnotebook create-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroupssectionspagesparentnotebook delete-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectiongroupssectionspagesparentnotebook delete-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectiongroupssectionspagesparentnotebook list-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupssectionspagesparentnotebook list-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupssectionspagesparentnotebook show-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupssectionspagesparentnotebook show-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupssectionspagesparentnotebook update-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroupssectionspagesparentnotebook update-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroupssectionsparentnotebook create-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroupssectionsparentnotebook create-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroupssectionsparentnotebook delete-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectiongroupssectionsparentnotebook delete-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectiongroupssectionsparentnotebook list-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupssectionsparentnotebook list-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupssectionsparentnotebook show-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupssectionsparentnotebook show-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectiongroupssectionsparentnotebook update-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectiongroupssectionsparentnotebook update-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesection create-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesection delete-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesection delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesection delete-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesection list-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesection set-page-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('data', help='New media content.')

    with self.argument_context('notes usersonenotesection show-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesection show-page-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('notes usersonenotesection show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesection show-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesection update-page') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesection update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotesection update-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionspage delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectionspage delete-parent-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectionspage show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionspage show-parent-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionspage update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotesectionspage update-parent-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionspagesparentnotebook create-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionspagesparentnotebook create-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionspagesparentnotebook delete-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectionspagesparentnotebook delete-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectionspagesparentnotebook list-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionspagesparentnotebook list-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionspagesparentnotebook show-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionspagesparentnotebook show-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionspagesparentnotebook update-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionspagesparentnotebook update-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionspagesparentnotebooksectiongroup create-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionspagesparentnotebooksectiongroup create-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionspagesparentnotebooksectiongroup delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectionspagesparentnotebooksectiongroup delete-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectionspagesparentnotebooksectiongroup delete-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectionspagesparentnotebooksectiongroup delete-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectionspagesparentnotebooksectiongroup list-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionspagesparentnotebooksectiongroup list-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionspagesparentnotebooksectiongroup show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionspagesparentnotebooksectiongroup show-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionspagesparentnotebooksectiongroup show-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionspagesparentnotebooksectiongroup show-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionspagesparentnotebooksectiongroup update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotesectionspagesparentnotebooksectiongroup update-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionspagesparentnotebooksectiongroup update-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionspagesparentnotebooksectiongroup update-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionsparentnotebook create-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionsparentnotebook create-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionsparentnotebook delete-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectionsparentnotebook delete-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectionsparentnotebook list-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionsparentnotebook list-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionsparentnotebook show-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionsparentnotebook show-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionsparentnotebook update-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionsparentnotebook update-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionsparentnotebooksectiongroup create-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionsparentnotebooksectiongroup create-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionsparentnotebooksectiongroup delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectionsparentnotebooksectiongroup delete-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectionsparentnotebooksectiongroup delete-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectionsparentnotebooksectiongroup delete-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectionsparentnotebooksectiongroup list-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionsparentnotebooksectiongroup list-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionsparentnotebooksectiongroup show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionsparentnotebooksectiongroup show-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionsparentnotebooksectiongroup show-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionsparentnotebooksectiongroup show-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionsparentnotebooksectiongroup update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotesectionsparentnotebooksectiongroup update-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionsparentnotebooksectiongroup update-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionsparentnotebooksectiongroup update-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('section_group_id1', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionsparentsectiongroup create-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionsparentsectiongroup create-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionsparentsectiongroup delete-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectionsparentsectiongroup delete-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectionsparentsectiongroup delete-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectionsparentsectiongroup delete-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectionsparentsectiongroup list-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionsparentsectiongroup list-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionsparentsectiongroup show-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionsparentsectiongroup show-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionsparentsectiongroup show-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionsparentsectiongroup show-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionsparentsectiongroup update-parent-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Indicates whether this is the user\'s default '
                   'notebook. Read-only.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='Indicates whether the notebook is shared. If '
                   'true, the contents of the notebook can be seen by people other than the owner. Read-only.')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the notebook. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the notebook. Read-only.')
        c.argument('user_role', arg_type=get_enum_type(['Owner', 'Contributor', 'None', 'Reader']), help='')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the notebook. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the notebook. Read-only. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('one_note_client_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink',
                   arg_group='Links')
        c.argument('one_note_web_url', action=AddOneNoteClientUrl, nargs='+', help='externalLink', arg_group='Links')

    with self.argument_context('notes usersonenotesectionsparentsectiongroup update-parent-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionsparentsectiongroup update-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionsparentsectiongroup update-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionsparentsectiongroupparentnotebook create-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionsparentsectiongroupparentnotebook create-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionsparentsectiongroupparentnotebook delete-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectionsparentsectiongroupparentnotebook delete-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('notes usersonenotesectionsparentsectiongroupparentnotebook list-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionsparentsectiongroupparentnotebook list-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionsparentsectiongroupparentnotebook show-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionsparentsectiongroupparentnotebook show-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('notes usersonenotesectionsparentsectiongroupparentnotebook update-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('notes usersonenotesectionsparentsectiongroupparentnotebook update-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('gen_self', type=str, help='The endpoint where you can get details about the page. Read-only.')
        c.argument('created_date_time', help='The date and time when the page was created. The timestamp represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='The name of the notebook.')
        c.argument('last_modified_date_time', help='The date and time when the notebook was last modified. The '
                   'timestamp represents date and time information using ISO 8601 format and is always in UTC time. '
                   'For example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. '
                   'Read-only.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('section_groups_url', type=str, help='The URL for the sectionGroups navigation property, which '
                   'returns all the section groups in the section group. Read-only.')
        c.argument('sections_url', type=str, help='The URL for the sections navigation property, which returns all the '
                   'sections in the section group. Read-only.')
        c.argument('parent_notebook', type=validate_file_or_dict, help='notebook Expected value: '
                   'json-string/@json-file.')
        c.argument('parent_section_group', type=validate_file_or_dict, help='sectionGroup Expected value: '
                   'json-string/@json-file.')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in the section. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('sections', type=validate_file_or_dict, help='The sections in the section group. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
