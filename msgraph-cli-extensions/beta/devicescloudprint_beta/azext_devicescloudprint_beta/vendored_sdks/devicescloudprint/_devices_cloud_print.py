# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import TYPE_CHECKING

from azure.mgmt.core import ARMPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Optional

    from azure.core.credentials import TokenCredential

from ._configuration import DevicesCloudPrintConfiguration
from .operations import PrintPrintOperations
from .operations import PrintOperations
from .operations import PrintPrinterOperations
from .operations import PrintPrinterTaskTriggerOperations
from .operations import PrintPrinterShareOperations
from .operations import PrintPrinterSharePrinterOperations
from .operations import PrintReportOperations
from .operations import PrintServiceOperations
from .operations import PrintShareOperations
from .operations import PrintSharePrinterOperations
from .operations import PrintTaskDefinitionOperations
from .operations import PrintTaskDefinitionTaskOperations
from . import models


class DevicesCloudPrint(object):
    """DevicesCloudPrint.

    :ivar print_print: PrintPrintOperations operations
    :vartype print_print: devices_cloud_print.operations.PrintPrintOperations
    :ivar print: PrintOperations operations
    :vartype print: devices_cloud_print.operations.PrintOperations
    :ivar print_printer: PrintPrinterOperations operations
    :vartype print_printer: devices_cloud_print.operations.PrintPrinterOperations
    :ivar print_printer_task_trigger: PrintPrinterTaskTriggerOperations operations
    :vartype print_printer_task_trigger: devices_cloud_print.operations.PrintPrinterTaskTriggerOperations
    :ivar print_printer_share: PrintPrinterShareOperations operations
    :vartype print_printer_share: devices_cloud_print.operations.PrintPrinterShareOperations
    :ivar print_printer_share_printer: PrintPrinterSharePrinterOperations operations
    :vartype print_printer_share_printer: devices_cloud_print.operations.PrintPrinterSharePrinterOperations
    :ivar print_report: PrintReportOperations operations
    :vartype print_report: devices_cloud_print.operations.PrintReportOperations
    :ivar print_service: PrintServiceOperations operations
    :vartype print_service: devices_cloud_print.operations.PrintServiceOperations
    :ivar print_share: PrintShareOperations operations
    :vartype print_share: devices_cloud_print.operations.PrintShareOperations
    :ivar print_share_printer: PrintSharePrinterOperations operations
    :vartype print_share_printer: devices_cloud_print.operations.PrintSharePrinterOperations
    :ivar print_task_definition: PrintTaskDefinitionOperations operations
    :vartype print_task_definition: devices_cloud_print.operations.PrintTaskDefinitionOperations
    :ivar print_task_definition_task: PrintTaskDefinitionTaskOperations operations
    :vartype print_task_definition_task: devices_cloud_print.operations.PrintTaskDefinitionTaskOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials.TokenCredential
    :param top: Show only the first n items.
    :type top: int
    :param skip: Skip the first n items.
    :type skip: int
    :param search: Search items by search phrases.
    :type search: str
    :param filter: Filter items by property values.
    :type filter: str
    :param count: Include count of items.
    :type count: bool
    :param str base_url: Service URL
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
    """

    def __init__(
        self,
        credential,  # type: "TokenCredential"
        top=None,  # type: Optional[int]
        skip=None,  # type: Optional[int]
        search=None,  # type: Optional[str]
        filter=None,  # type: Optional[str]
        count=None,  # type: Optional[bool]
        base_url=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        if not base_url:
            base_url = 'https://graph.microsoft.com/beta'
        self._config = DevicesCloudPrintConfiguration(credential, top, skip, search, filter, count, **kwargs)
        self._client = ARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.print_print = PrintPrintOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print = PrintOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print_printer = PrintPrinterOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print_printer_task_trigger = PrintPrinterTaskTriggerOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print_printer_share = PrintPrinterShareOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print_printer_share_printer = PrintPrinterSharePrinterOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print_report = PrintReportOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print_service = PrintServiceOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print_share = PrintShareOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print_share_printer = PrintSharePrinterOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print_task_definition = PrintTaskDefinitionOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print_task_definition_task = PrintTaskDefinitionTaskOperations(
            self._client, self._config, self._serialize, self._deserialize)

    def close(self):
        # type: () -> None
        self._client.close()

    def __enter__(self):
        # type: () -> DevicesCloudPrint
        self._client.__enter__()
        return self

    def __exit__(self, *exc_details):
        # type: (Any) -> None
        self._client.__exit__(*exc_details)
