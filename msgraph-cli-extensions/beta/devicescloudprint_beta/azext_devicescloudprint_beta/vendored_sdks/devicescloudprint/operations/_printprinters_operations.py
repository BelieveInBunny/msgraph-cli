# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class printprintersOperations(object):
    """printprintersOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~devices_cloud_print.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_allowed_groups(
        self,
        printer_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum37"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum38"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofprintidentity"]
        """Get allowedGroups from print.

        Get allowedGroups from print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_cloud_print.models.Enum37]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum38]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofprintidentity or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~devices_cloud_print.models.collectionofprintidentity]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofprintidentity"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_allowed_groups.metadata['url']  # type: ignore
                path_format_arguments = {
                    'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofprintidentity', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_allowed_groups.metadata = {'url': '/print/printers/{printer-id}/allowedGroups'}  # type: ignore

    def create_allowed_groups(
        self,
        printer_id,  # type: str
        body,  # type: "models.microsoftgraphprintidentity"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphprintidentity"
        """Create new navigation property to allowedGroups for print.

        Create new navigation property to allowedGroups for print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param body: New navigation property.
        :type body: ~devices_cloud_print.models.microsoftgraphprintidentity
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphprintidentity, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.microsoftgraphprintidentity
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphprintidentity"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_allowed_groups.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphprintidentity')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphprintidentity', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_allowed_groups.metadata = {'url': '/print/printers/{printer-id}/allowedGroups'}  # type: ignore

    def get_allowed_groups(
        self,
        printer_id,  # type: str
        print_identity_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum39"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphprintidentity"
        """Get allowedGroups from print.

        Get allowedGroups from print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param print_identity_id: key: id of printIdentity.
        :type print_identity_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum39]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphprintidentity, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.microsoftgraphprintidentity
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphprintidentity"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_allowed_groups.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
            'printIdentity-id': self._serialize.url("print_identity_id", print_identity_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphprintidentity', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_allowed_groups.metadata = {'url': '/print/printers/{printer-id}/allowedGroups/{printIdentity-id}'}  # type: ignore

    def update_allowed_groups(
        self,
        printer_id,  # type: str
        print_identity_id,  # type: str
        body,  # type: "models.microsoftgraphprintidentity"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property allowedGroups in print.

        Update the navigation property allowedGroups in print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param print_identity_id: key: id of printIdentity.
        :type print_identity_id: str
        :param body: New navigation property values.
        :type body: ~devices_cloud_print.models.microsoftgraphprintidentity
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_allowed_groups.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
            'printIdentity-id': self._serialize.url("print_identity_id", print_identity_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphprintidentity')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_allowed_groups.metadata = {'url': '/print/printers/{printer-id}/allowedGroups/{printIdentity-id}'}  # type: ignore

    def delete_allowed_groups(
        self,
        printer_id,  # type: str
        print_identity_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property allowedGroups for print.

        Delete navigation property allowedGroups for print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param print_identity_id: key: id of printIdentity.
        :type print_identity_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_allowed_groups.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
            'printIdentity-id': self._serialize.url("print_identity_id", print_identity_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_allowed_groups.metadata = {'url': '/print/printers/{printer-id}/allowedGroups/{printIdentity-id}'}  # type: ignore

    def list_allowed_users(
        self,
        printer_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum40"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum41"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofprintuseridentity"]
        """Get allowedUsers from print.

        Get allowedUsers from print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_cloud_print.models.Enum40]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum41]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofprintuseridentity or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~devices_cloud_print.models.collectionofprintuseridentity]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofprintuseridentity"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_allowed_users.metadata['url']  # type: ignore
                path_format_arguments = {
                    'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofprintuseridentity', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_allowed_users.metadata = {'url': '/print/printers/{printer-id}/allowedUsers'}  # type: ignore

    def create_allowed_users(
        self,
        printer_id,  # type: str
        body,  # type: "models.microsoftgraphprintuseridentity"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphprintuseridentity"
        """Create new navigation property to allowedUsers for print.

        Create new navigation property to allowedUsers for print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param body: New navigation property.
        :type body: ~devices_cloud_print.models.microsoftgraphprintuseridentity
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphprintuseridentity, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.microsoftgraphprintuseridentity
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphprintuseridentity"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_allowed_users.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphprintuseridentity')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphprintuseridentity', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_allowed_users.metadata = {'url': '/print/printers/{printer-id}/allowedUsers'}  # type: ignore

    def get_allowed_users(
        self,
        printer_id,  # type: str
        print_user_identity_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum42"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphprintuseridentity"
        """Get allowedUsers from print.

        Get allowedUsers from print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param print_user_identity_id: key: id of printUserIdentity.
        :type print_user_identity_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum42]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphprintuseridentity, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.microsoftgraphprintuseridentity
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphprintuseridentity"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_allowed_users.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
            'printUserIdentity-id': self._serialize.url("print_user_identity_id", print_user_identity_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphprintuseridentity', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_allowed_users.metadata = {'url': '/print/printers/{printer-id}/allowedUsers/{printUserIdentity-id}'}  # type: ignore

    def update_allowed_users(
        self,
        printer_id,  # type: str
        print_user_identity_id,  # type: str
        body,  # type: "models.microsoftgraphprintuseridentity"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property allowedUsers in print.

        Update the navigation property allowedUsers in print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param print_user_identity_id: key: id of printUserIdentity.
        :type print_user_identity_id: str
        :param body: New navigation property values.
        :type body: ~devices_cloud_print.models.microsoftgraphprintuseridentity
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_allowed_users.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
            'printUserIdentity-id': self._serialize.url("print_user_identity_id", print_user_identity_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphprintuseridentity')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_allowed_users.metadata = {'url': '/print/printers/{printer-id}/allowedUsers/{printUserIdentity-id}'}  # type: ignore

    def delete_allowed_users(
        self,
        printer_id,  # type: str
        print_user_identity_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property allowedUsers for print.

        Delete navigation property allowedUsers for print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param print_user_identity_id: key: id of printUserIdentity.
        :type print_user_identity_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_allowed_users.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
            'printUserIdentity-id': self._serialize.url("print_user_identity_id", print_user_identity_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_allowed_users.metadata = {'url': '/print/printers/{printer-id}/allowedUsers/{printUserIdentity-id}'}  # type: ignore

    def list_connectors(
        self,
        printer_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum43"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum44"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofprintconnector0"]
        """Get connectors from print.

        Get connectors from print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_cloud_print.models.Enum43]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum44]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofprintconnector0 or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~devices_cloud_print.models.collectionofprintconnector0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofprintconnector0"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_connectors.metadata['url']  # type: ignore
                path_format_arguments = {
                    'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofprintconnector0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_connectors.metadata = {'url': '/print/printers/{printer-id}/connectors'}  # type: ignore

    def list_ref_connectors(
        self,
        printer_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum45"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionoflinksofprintconnector"]
        """Get ref of connectors from print.

        Get ref of connectors from print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_cloud_print.models.Enum45]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionoflinksofprintconnector or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~devices_cloud_print.models.collectionoflinksofprintconnector]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionoflinksofprintconnector"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_ref_connectors.metadata['url']  # type: ignore
                path_format_arguments = {
                    'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionoflinksofprintconnector', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_ref_connectors.metadata = {'url': '/print/printers/{printer-id}/connectors/$ref'}  # type: ignore

    def create_ref_connectors(
        self,
        printer_id,  # type: str
        body,  # type: Dict[str, object]
        **kwargs  # type: Any
    ):
        # type: (...) -> Dict[str, object]
        """Create new navigation property ref to connectors for print.

        Create new navigation property ref to connectors for print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param body: New navigation property ref value.
        :type body: dict[str, object]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to object, or the result of cls(response)
        :rtype: dict[str, object]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Dict[str, object]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_ref_connectors.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, '{object}')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('{object}', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_ref_connectors.metadata = {'url': '/print/printers/{printer-id}/connectors/$ref'}  # type: ignore

    def get_capabilities(
        self,
        printer_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphprintercapabilities"
        """Invoke function getCapabilities.

        Invoke function getCapabilities.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphprintercapabilities, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.microsoftgraphprintercapabilities
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphprintercapabilities"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_capabilities.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphprintercapabilities', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_capabilities.metadata = {'url': '/print/printers/{printer-id}/microsoft.graph.getCapabilities()'}  # type: ignore

    def reset_defaults(
        self,
        printer_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action resetDefaults.

        Invoke action resetDefaults.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.reset_defaults.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    reset_defaults.metadata = {'url': '/print/printers/{printer-id}/microsoft.graph.resetDefaults'}  # type: ignore

    def restore_factory_defaults(
        self,
        printer_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action restoreFactoryDefaults.

        Invoke action restoreFactoryDefaults.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.restore_factory_defaults.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    restore_factory_defaults.metadata = {'url': '/print/printers/{printer-id}/microsoft.graph.restoreFactoryDefaults'}  # type: ignore

    def get_share(
        self,
        printer_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum46"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum47"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphprintershare"
        """Get share from print.

        Get share from print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum46]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_cloud_print.models.Enum47]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphprintershare, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.microsoftgraphprintershare
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphprintershare"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_share.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphprintershare', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_share.metadata = {'url': '/print/printers/{printer-id}/share'}  # type: ignore

    def get_ref_share(
        self,
        printer_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> str
        """Get ref of share from print.

        Get ref of share from print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str, or the result of cls(response)
        :rtype: str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[str]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_ref_share.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_ref_share.metadata = {'url': '/print/printers/{printer-id}/share/$ref'}  # type: ignore

    def set_ref_share(
        self,
        printer_id,  # type: str
        body,  # type: Dict[str, object]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the ref of navigation property share in print.

        Update the ref of navigation property share in print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param body: New navigation property ref values.
        :type body: dict[str, object]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.set_ref_share.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, '{object}')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    set_ref_share.metadata = {'url': '/print/printers/{printer-id}/share/$ref'}  # type: ignore

    def delete_ref_share(
        self,
        printer_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete ref of navigation property share for print.

        Delete ref of navigation property share for print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_ref_share.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_ref_share.metadata = {'url': '/print/printers/{printer-id}/share/$ref'}  # type: ignore

    def list_shares(
        self,
        printer_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum48"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum49"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum50"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofprintershare"]
        """Get shares from print.

        Get shares from print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_cloud_print.models.Enum48]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum49]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_cloud_print.models.Enum50]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofprintershare or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~devices_cloud_print.models.collectionofprintershare]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofprintershare"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_shares.metadata['url']  # type: ignore
                path_format_arguments = {
                    'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofprintershare', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_shares.metadata = {'url': '/print/printers/{printer-id}/shares'}  # type: ignore

    def list_ref_shares(
        self,
        printer_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum51"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionoflinksofprintershare"]
        """Get ref of shares from print.

        Get ref of shares from print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_cloud_print.models.Enum51]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionoflinksofprintershare or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~devices_cloud_print.models.collectionoflinksofprintershare]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionoflinksofprintershare"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_ref_shares.metadata['url']  # type: ignore
                path_format_arguments = {
                    'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionoflinksofprintershare', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_ref_shares.metadata = {'url': '/print/printers/{printer-id}/shares/$ref'}  # type: ignore

    def create_ref_shares(
        self,
        printer_id,  # type: str
        body,  # type: Dict[str, object]
        **kwargs  # type: Any
    ):
        # type: (...) -> Dict[str, object]
        """Create new navigation property ref to shares for print.

        Create new navigation property ref to shares for print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param body: New navigation property ref value.
        :type body: dict[str, object]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to object, or the result of cls(response)
        :rtype: dict[str, object]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Dict[str, object]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_ref_shares.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, '{object}')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('{object}', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_ref_shares.metadata = {'url': '/print/printers/{printer-id}/shares/$ref'}  # type: ignore

    def list_task_triggers(
        self,
        printer_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum52"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum53"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum54"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofprinttasktrigger"]
        """Get taskTriggers from print.

        Get taskTriggers from print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_cloud_print.models.Enum52]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum53]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_cloud_print.models.Enum54]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofprinttasktrigger or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~devices_cloud_print.models.collectionofprinttasktrigger]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofprinttasktrigger"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_task_triggers.metadata['url']  # type: ignore
                path_format_arguments = {
                    'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofprinttasktrigger', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_task_triggers.metadata = {'url': '/print/printers/{printer-id}/taskTriggers'}  # type: ignore

    def create_task_triggers(
        self,
        printer_id,  # type: str
        body,  # type: "models.microsoftgraphprinttasktrigger"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphprinttasktrigger"
        """Create new navigation property to taskTriggers for print.

        Create new navigation property to taskTriggers for print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param body: New navigation property.
        :type body: ~devices_cloud_print.models.microsoftgraphprinttasktrigger
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphprinttasktrigger, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.microsoftgraphprinttasktrigger
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphprinttasktrigger"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_task_triggers.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphprinttasktrigger')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphprinttasktrigger', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_task_triggers.metadata = {'url': '/print/printers/{printer-id}/taskTriggers'}  # type: ignore

    def get_task_triggers(
        self,
        printer_id,  # type: str
        print_task_trigger_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum55"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum56"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphprinttasktrigger"
        """Get taskTriggers from print.

        Get taskTriggers from print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param print_task_trigger_id: key: id of printTaskTrigger.
        :type print_task_trigger_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum55]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_cloud_print.models.Enum56]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphprinttasktrigger, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.microsoftgraphprinttasktrigger
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphprinttasktrigger"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_task_triggers.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
            'printTaskTrigger-id': self._serialize.url("print_task_trigger_id", print_task_trigger_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphprinttasktrigger', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_task_triggers.metadata = {'url': '/print/printers/{printer-id}/taskTriggers/{printTaskTrigger-id}'}  # type: ignore

    def update_task_triggers(
        self,
        printer_id,  # type: str
        print_task_trigger_id,  # type: str
        body,  # type: "models.microsoftgraphprinttasktrigger"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property taskTriggers in print.

        Update the navigation property taskTriggers in print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param print_task_trigger_id: key: id of printTaskTrigger.
        :type print_task_trigger_id: str
        :param body: New navigation property values.
        :type body: ~devices_cloud_print.models.microsoftgraphprinttasktrigger
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_task_triggers.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
            'printTaskTrigger-id': self._serialize.url("print_task_trigger_id", print_task_trigger_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphprinttasktrigger')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_task_triggers.metadata = {'url': '/print/printers/{printer-id}/taskTriggers/{printTaskTrigger-id}'}  # type: ignore

    def delete_task_triggers(
        self,
        printer_id,  # type: str
        print_task_trigger_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property taskTriggers for print.

        Delete navigation property taskTriggers for print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param print_task_trigger_id: key: id of printTaskTrigger.
        :type print_task_trigger_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_task_triggers.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
            'printTaskTrigger-id': self._serialize.url("print_task_trigger_id", print_task_trigger_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_task_triggers.metadata = {'url': '/print/printers/{printer-id}/taskTriggers/{printTaskTrigger-id}'}  # type: ignore

    def create(
        self,
        body,  # type: "models.paths18vwyqhprintprintersmicrosoftgraphcreatepostrequestbodycontentapplicationjsonschema"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action create.

        Invoke action create.

        :param body: Action parameters.
        :type body: ~devices_cloud_print.models.paths18vwyqhprintprintersmicrosoftgraphcreatepostrequestbodycontentapplicationjsonschema
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'paths18vwyqhprintprintersmicrosoftgraphcreatepostrequestbodycontentapplicationjsonschema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    create.metadata = {'url': '/print/printers/microsoft.graph.create'}  # type: ignore
