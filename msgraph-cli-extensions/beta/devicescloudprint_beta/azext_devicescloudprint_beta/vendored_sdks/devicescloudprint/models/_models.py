# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class collectionoflinksofprintconnector(msrest.serialization.Model):
    """Collection of links of printConnector.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofprintconnector, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksofprintershare(msrest.serialization.Model):
    """Collection of links of printerShare.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofprintershare, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofprintconnector(msrest.serialization.Model):
    """Collection of printConnector.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.microsoftgraphprintconnector]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphprintconnector]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofprintconnector, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofprintconnector0(msrest.serialization.Model):
    """Collection of printConnector.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.microsoftgraphprintconnector]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphprintconnector]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofprintconnector0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofprinter(msrest.serialization.Model):
    """Collection of printer.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.microsoftgraphprinter]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphprinter]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofprinter, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofprintershare(msrest.serialization.Model):
    """Collection of printerShare.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.microsoftgraphprintershare]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphprintershare]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofprintershare, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofprintershare0(msrest.serialization.Model):
    """Collection of printerShare.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.microsoftgraphprintershare]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphprintershare]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofprintershare0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofprintershare1(msrest.serialization.Model):
    """Collection of printerShare.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.microsoftgraphprintershare]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphprintershare]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofprintershare1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofprintidentity(msrest.serialization.Model):
    """Collection of printIdentity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.microsoftgraphprintidentity]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphprintidentity]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofprintidentity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofprintidentity0(msrest.serialization.Model):
    """Collection of printIdentity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.microsoftgraphprintidentity]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphprintidentity]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofprintidentity0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofprintidentity1(msrest.serialization.Model):
    """Collection of printIdentity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.microsoftgraphprintidentity]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphprintidentity]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofprintidentity1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofprintoperation(msrest.serialization.Model):
    """Collection of printOperation.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.microsoftgraphprintoperation]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphprintoperation]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofprintoperation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofprintservice(msrest.serialization.Model):
    """Collection of printService.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.microsoftgraphprintservice]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphprintservice]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofprintservice, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofprintserviceendpoint(msrest.serialization.Model):
    """Collection of printServiceEndpoint.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.microsoftgraphprintserviceendpoint]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphprintserviceendpoint]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofprintserviceendpoint, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofprinttask(msrest.serialization.Model):
    """Collection of printTask.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.microsoftgraphprinttask]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphprinttask]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofprinttask, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofprinttaskdefinition(msrest.serialization.Model):
    """Collection of printTaskDefinition.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.microsoftgraphprinttaskdefinition]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphprinttaskdefinition]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofprinttaskdefinition, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofprinttasktrigger(msrest.serialization.Model):
    """Collection of printTaskTrigger.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.microsoftgraphprinttasktrigger]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphprinttasktrigger]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofprinttasktrigger, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofprintuseridentity(msrest.serialization.Model):
    """Collection of printUserIdentity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.microsoftgraphprintuseridentity]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphprintuseridentity]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofprintuseridentity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofprintuseridentity0(msrest.serialization.Model):
    """Collection of printUserIdentity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.microsoftgraphprintuseridentity]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphprintuseridentity]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofprintuseridentity0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofprintuseridentity1(msrest.serialization.Model):
    """Collection of printUserIdentity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.microsoftgraphprintuseridentity]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphprintuseridentity]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofprintuseridentity1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofreportroot(msrest.serialization.Model):
    """Collection of reportRoot.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.microsoftgraphreportroot]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphreportroot]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofreportroot, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class microsoftgraphappidentity(msrest.serialization.Model):
    """appIdentity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param app_id: Refers to the Unique GUID representing Application Id in the Azure Active
     Directory.
    :type app_id: str
    :param display_name: Refers to the Application Name displayed in the Azure Portal.
    :type display_name: str
    :param service_principal_id: Refers to the Unique GUID indicating Service Principal Id in Azure
     Active Directory for the corresponding App.
    :type service_principal_id: str
    :param service_principal_name: Refers to the Service Principal Name is the Application name in
     the tenant.
    :type service_principal_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'service_principal_id': {'key': 'servicePrincipalId', 'type': 'str'},
        'service_principal_name': {'key': 'servicePrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphappidentity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.app_id = kwargs.get('app_id', None)
        self.display_name = kwargs.get('display_name', None)
        self.service_principal_id = kwargs.get('service_principal_id', None)
        self.service_principal_name = kwargs.get('service_principal_name', None)


class microsoftgraphentity(msrest.serialization.Model):
    """entity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphentity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.id = kwargs.get('id', None)


class microsoftgraphapplicationsignindetailedsummary(microsoftgraphentity):
    """applicationSignInDetailedSummary.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param aggregated_event_date_time:
    :type aggregated_event_date_time: ~datetime.datetime
    :param app_display_name:
    :type app_display_name: str
    :param app_id:
    :type app_id: str
    :param sign_in_count:
    :type sign_in_count: long
    :param status: signInStatus.
    :type status: ~devices_cloud_print.models.microsoftgraphsigninstatus
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'aggregated_event_date_time': {'key': 'aggregatedEventDateTime', 'type': 'iso-8601'},
        'app_display_name': {'key': 'appDisplayName', 'type': 'str'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'sign_in_count': {'key': 'signInCount', 'type': 'long'},
        'status': {'key': 'status', 'type': 'microsoftgraphsigninstatus'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphapplicationsignindetailedsummary, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.aggregated_event_date_time = kwargs.get('aggregated_event_date_time', None)
        self.app_display_name = kwargs.get('app_display_name', None)
        self.app_id = kwargs.get('app_id', None)
        self.sign_in_count = kwargs.get('sign_in_count', None)
        self.status = kwargs.get('status', None)


class microsoftgrapharchivedprintjob(msrest.serialization.Model):
    """archivedPrintJob.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param acquired_by_printer:
    :type acquired_by_printer: bool
    :param acquired_date_time:
    :type acquired_date_time: ~datetime.datetime
    :param black_and_white_page_count:
    :type black_and_white_page_count: int
    :param color_page_count:
    :type color_page_count: int
    :param completion_date_time:
    :type completion_date_time: ~datetime.datetime
    :param copies_printed:
    :type copies_printed: int
    :param created_by: userIdentity.
    :type created_by: ~devices_cloud_print.models.microsoftgraphuseridentity
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param duplex_page_count:
    :type duplex_page_count: int
    :param id:
    :type id: str
    :param page_count:
    :type page_count: int
    :param printer_id:
    :type printer_id: str
    :param processing_state:  Possible values include: "unknown", "pending", "processing",
     "paused", "stopped", "completed", "canceled", "aborted".
    :type processing_state: str or
     ~devices_cloud_print.models.Microsoftgraphprintjobprocessingstate
    :param simplex_page_count:
    :type simplex_page_count: int
    """

    _validation = {
        'black_and_white_page_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'color_page_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'copies_printed': {'maximum': 2147483647, 'minimum': -2147483648},
        'duplex_page_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'page_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'simplex_page_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'acquired_by_printer': {'key': 'acquiredByPrinter', 'type': 'bool'},
        'acquired_date_time': {'key': 'acquiredDateTime', 'type': 'iso-8601'},
        'black_and_white_page_count': {'key': 'blackAndWhitePageCount', 'type': 'int'},
        'color_page_count': {'key': 'colorPageCount', 'type': 'int'},
        'completion_date_time': {'key': 'completionDateTime', 'type': 'iso-8601'},
        'copies_printed': {'key': 'copiesPrinted', 'type': 'int'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphuseridentity'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'duplex_page_count': {'key': 'duplexPageCount', 'type': 'int'},
        'id': {'key': 'id', 'type': 'str'},
        'page_count': {'key': 'pageCount', 'type': 'int'},
        'printer_id': {'key': 'printerId', 'type': 'str'},
        'processing_state': {'key': 'processingState', 'type': 'str'},
        'simplex_page_count': {'key': 'simplexPageCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgrapharchivedprintjob, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.acquired_by_printer = kwargs.get('acquired_by_printer', None)
        self.acquired_date_time = kwargs.get('acquired_date_time', None)
        self.black_and_white_page_count = kwargs.get('black_and_white_page_count', None)
        self.color_page_count = kwargs.get('color_page_count', None)
        self.completion_date_time = kwargs.get('completion_date_time', None)
        self.copies_printed = kwargs.get('copies_printed', None)
        self.created_by = kwargs.get('created_by', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.duplex_page_count = kwargs.get('duplex_page_count', None)
        self.id = kwargs.get('id', None)
        self.page_count = kwargs.get('page_count', None)
        self.printer_id = kwargs.get('printer_id', None)
        self.processing_state = kwargs.get('processing_state', None)
        self.simplex_page_count = kwargs.get('simplex_page_count', None)


class microsoftgraphcredentialuserregistrationdetails(microsoftgraphentity):
    """credentialUserRegistrationDetails.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param auth_methods:
    :type auth_methods: list[str or
     ~devices_cloud_print.models.Microsoftgraphregistrationauthmethod]
    :param is_capable:
    :type is_capable: bool
    :param is_enabled:
    :type is_enabled: bool
    :param is_mfa_registered:
    :type is_mfa_registered: bool
    :param is_registered:
    :type is_registered: bool
    :param user_display_name:
    :type user_display_name: str
    :param user_principal_name:
    :type user_principal_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'auth_methods': {'key': 'authMethods', 'type': '[str]'},
        'is_capable': {'key': 'isCapable', 'type': 'bool'},
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
        'is_mfa_registered': {'key': 'isMfaRegistered', 'type': 'bool'},
        'is_registered': {'key': 'isRegistered', 'type': 'bool'},
        'user_display_name': {'key': 'userDisplayName', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphcredentialuserregistrationdetails, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.auth_methods = kwargs.get('auth_methods', None)
        self.is_capable = kwargs.get('is_capable', None)
        self.is_enabled = kwargs.get('is_enabled', None)
        self.is_mfa_registered = kwargs.get('is_mfa_registered', None)
        self.is_registered = kwargs.get('is_registered', None)
        self.user_display_name = kwargs.get('user_display_name', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class microsoftgraphdevicehealth(msrest.serialization.Model):
    """deviceHealth.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param last_connection_time:
    :type last_connection_time: ~datetime.datetime
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'last_connection_time': {'key': 'lastConnectionTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphdevicehealth, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.last_connection_time = kwargs.get('last_connection_time', None)


class microsoftgraphdirectoryobject(microsoftgraphentity):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphdirectoryobject, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.deleted_date_time = kwargs.get('deleted_date_time', None)


class microsoftgraphgroupprintusagesummary(msrest.serialization.Model):
    """groupPrintUsageSummary.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param completed_job_count:
    :type completed_job_count: int
    :param group: identity.
    :type group: ~devices_cloud_print.models.microsoftgraphidentity
    :param group_display_name:
    :type group_display_name: str
    :param group_mail:
    :type group_mail: str
    :param incomplete_job_count:
    :type incomplete_job_count: int
    """

    _validation = {
        'completed_job_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'incomplete_job_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'completed_job_count': {'key': 'completedJobCount', 'type': 'int'},
        'group': {'key': 'group', 'type': 'microsoftgraphidentity'},
        'group_display_name': {'key': 'groupDisplayName', 'type': 'str'},
        'group_mail': {'key': 'groupMail', 'type': 'str'},
        'incomplete_job_count': {'key': 'incompleteJobCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphgroupprintusagesummary, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.completed_job_count = kwargs.get('completed_job_count', None)
        self.group = kwargs.get('group', None)
        self.group_display_name = kwargs.get('group_display_name', None)
        self.group_mail = kwargs.get('group_mail', None)
        self.incomplete_job_count = kwargs.get('incomplete_job_count', None)


class microsoftgraphidentity(msrest.serialization.Model):
    """identity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The identity's display name. Note that this may not always be available or
     up to date. For example, if a user changes their display name, the API may show the new value
     in a future response, but the items associated with the user won't show up as having changed
     when using delta.
    :type display_name: str
    :param id: Unique identifier for the identity.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphidentity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.id = kwargs.get('id', None)


class microsoftgraphintegerrange(msrest.serialization.Model):
    """integerRange.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param end:
    :type end: long
    :param maximum:
    :type maximum: long
    :param minimum:
    :type minimum: long
    :param start:
    :type start: long
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'end': {'key': 'end', 'type': 'long'},
        'maximum': {'key': 'maximum', 'type': 'long'},
        'minimum': {'key': 'minimum', 'type': 'long'},
        'start': {'key': 'start', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphintegerrange, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.end = kwargs.get('end', None)
        self.maximum = kwargs.get('maximum', None)
        self.minimum = kwargs.get('minimum', None)
        self.start = kwargs.get('start', None)


class microsoftgraphoverallprintusagesummary(msrest.serialization.Model):
    """overallPrintUsageSummary.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param active_printers_count:
    :type active_printers_count: int
    :param active_users_count:
    :type active_users_count: int
    :param days_in_period:
    :type days_in_period: int
    :param top_printers:
    :type top_printers: list[~devices_cloud_print.models.microsoftgraphprinterusagesummary]
    :param top_users:
    :type top_users: list[~devices_cloud_print.models.microsoftgraphuserprintusagesummary]
    :param total_incomplete_jobs:
    :type total_incomplete_jobs: int
    :param total_jobs_processed:
    :type total_jobs_processed: int
    """

    _validation = {
        'active_printers_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'active_users_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'days_in_period': {'maximum': 2147483647, 'minimum': -2147483648},
        'total_incomplete_jobs': {'maximum': 2147483647, 'minimum': -2147483648},
        'total_jobs_processed': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'active_printers_count': {'key': 'activePrintersCount', 'type': 'int'},
        'active_users_count': {'key': 'activeUsersCount', 'type': 'int'},
        'days_in_period': {'key': 'daysInPeriod', 'type': 'int'},
        'top_printers': {'key': 'topPrinters', 'type': '[microsoftgraphprinterusagesummary]'},
        'top_users': {'key': 'topUsers', 'type': '[microsoftgraphuserprintusagesummary]'},
        'total_incomplete_jobs': {'key': 'totalIncompleteJobs', 'type': 'int'},
        'total_jobs_processed': {'key': 'totalJobsProcessed', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphoverallprintusagesummary, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.active_printers_count = kwargs.get('active_printers_count', None)
        self.active_users_count = kwargs.get('active_users_count', None)
        self.days_in_period = kwargs.get('days_in_period', None)
        self.top_printers = kwargs.get('top_printers', None)
        self.top_users = kwargs.get('top_users', None)
        self.total_incomplete_jobs = kwargs.get('total_incomplete_jobs', None)
        self.total_jobs_processed = kwargs.get('total_jobs_processed', None)


class microsoftgraphprint(msrest.serialization.Model):
    """print.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param settings: printSettings.
    :type settings: ~devices_cloud_print.models.microsoftgraphprintsettings
    :param connectors:
    :type connectors: list[~devices_cloud_print.models.microsoftgraphprintconnector]
    :param operations:
    :type operations: list[~devices_cloud_print.models.microsoftgraphprintoperation]
    :param printers:
    :type printers: list[~devices_cloud_print.models.microsoftgraphprinter]
    :param printer_shares:
    :type printer_shares: list[~devices_cloud_print.models.microsoftgraphprintershare]
    :param reports:
    :type reports: list[~devices_cloud_print.models.microsoftgraphreportroot]
    :param services:
    :type services: list[~devices_cloud_print.models.microsoftgraphprintservice]
    :param shares:
    :type shares: list[~devices_cloud_print.models.microsoftgraphprintershare]
    :param task_definitions:
    :type task_definitions: list[~devices_cloud_print.models.microsoftgraphprinttaskdefinition]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'settings': {'key': 'settings', 'type': 'microsoftgraphprintsettings'},
        'connectors': {'key': 'connectors', 'type': '[microsoftgraphprintconnector]'},
        'operations': {'key': 'operations', 'type': '[microsoftgraphprintoperation]'},
        'printers': {'key': 'printers', 'type': '[microsoftgraphprinter]'},
        'printer_shares': {'key': 'printerShares', 'type': '[microsoftgraphprintershare]'},
        'reports': {'key': 'reports', 'type': '[microsoftgraphreportroot]'},
        'services': {'key': 'services', 'type': '[microsoftgraphprintservice]'},
        'shares': {'key': 'shares', 'type': '[microsoftgraphprintershare]'},
        'task_definitions': {'key': 'taskDefinitions', 'type': '[microsoftgraphprinttaskdefinition]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprint, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.settings = kwargs.get('settings', None)
        self.connectors = kwargs.get('connectors', None)
        self.operations = kwargs.get('operations', None)
        self.printers = kwargs.get('printers', None)
        self.printer_shares = kwargs.get('printer_shares', None)
        self.reports = kwargs.get('reports', None)
        self.services = kwargs.get('services', None)
        self.shares = kwargs.get('shares', None)
        self.task_definitions = kwargs.get('task_definitions', None)


class microsoftgraphprintcertificatesigningrequest(msrest.serialization.Model):
    """printCertificateSigningRequest.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content:
    :type content: str
    :param transport_key:
    :type transport_key: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'content': {'key': 'content', 'type': 'str'},
        'transport_key': {'key': 'transportKey', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprintcertificatesigningrequest, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.content = kwargs.get('content', None)
        self.transport_key = kwargs.get('transport_key', None)


class microsoftgraphprintconnector(microsoftgraphentity):
    """printConnector.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param app_version:
    :type app_version: str
    :param device_health: deviceHealth.
    :type device_health: ~devices_cloud_print.models.microsoftgraphdevicehealth
    :param display_name:
    :type display_name: str
    :param fully_qualified_domain_name:
    :type fully_qualified_domain_name: str
    :param location: printerLocation.
    :type location: ~devices_cloud_print.models.microsoftgraphprinterlocation
    :param name:
    :type name: str
    :param operating_system:
    :type operating_system: str
    :param registered_date_time:
    :type registered_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'app_version': {'key': 'appVersion', 'type': 'str'},
        'device_health': {'key': 'deviceHealth', 'type': 'microsoftgraphdevicehealth'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'fully_qualified_domain_name': {'key': 'fullyQualifiedDomainName', 'type': 'str'},
        'location': {'key': 'location', 'type': 'microsoftgraphprinterlocation'},
        'name': {'key': 'name', 'type': 'str'},
        'operating_system': {'key': 'operatingSystem', 'type': 'str'},
        'registered_date_time': {'key': 'registeredDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprintconnector, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.app_version = kwargs.get('app_version', None)
        self.device_health = kwargs.get('device_health', None)
        self.display_name = kwargs.get('display_name', None)
        self.fully_qualified_domain_name = kwargs.get('fully_qualified_domain_name', None)
        self.location = kwargs.get('location', None)
        self.name = kwargs.get('name', None)
        self.operating_system = kwargs.get('operating_system', None)
        self.registered_date_time = kwargs.get('registered_date_time', None)


class microsoftgraphprintdocument(microsoftgraphentity):
    """printDocument.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param configuration: printerDocumentConfiguration.
    :type configuration: ~devices_cloud_print.models.microsoftgraphprinterdocumentconfiguration
    :param content_type:
    :type content_type: str
    :param display_name:
    :type display_name: str
    :param size:
    :type size: long
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'configuration': {'key': 'configuration', 'type': 'microsoftgraphprinterdocumentconfiguration'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'size': {'key': 'size', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprintdocument, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.configuration = kwargs.get('configuration', None)
        self.content_type = kwargs.get('content_type', None)
        self.display_name = kwargs.get('display_name', None)
        self.size = kwargs.get('size', None)


class microsoftgraphprinterbase(microsoftgraphentity):
    """printerBase.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param capabilities: printerCapabilities.
    :type capabilities: ~devices_cloud_print.models.microsoftgraphprintercapabilities
    :param defaults: printerDefaults.
    :type defaults: ~devices_cloud_print.models.microsoftgraphprinterdefaults
    :param display_name:
    :type display_name: str
    :param is_accepting_jobs:
    :type is_accepting_jobs: bool
    :param location: printerLocation.
    :type location: ~devices_cloud_print.models.microsoftgraphprinterlocation
    :param manufacturer:
    :type manufacturer: str
    :param model:
    :type model: str
    :param name:
    :type name: str
    :param status: printerStatus.
    :type status: ~devices_cloud_print.models.microsoftgraphprinterstatus
    :param jobs:
    :type jobs: list[~devices_cloud_print.models.microsoftgraphprintjob]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'capabilities': {'key': 'capabilities', 'type': 'microsoftgraphprintercapabilities'},
        'defaults': {'key': 'defaults', 'type': 'microsoftgraphprinterdefaults'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_accepting_jobs': {'key': 'isAcceptingJobs', 'type': 'bool'},
        'location': {'key': 'location', 'type': 'microsoftgraphprinterlocation'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'model': {'key': 'model', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'microsoftgraphprinterstatus'},
        'jobs': {'key': 'jobs', 'type': '[microsoftgraphprintjob]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprinterbase, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.capabilities = kwargs.get('capabilities', None)
        self.defaults = kwargs.get('defaults', None)
        self.display_name = kwargs.get('display_name', None)
        self.is_accepting_jobs = kwargs.get('is_accepting_jobs', None)
        self.location = kwargs.get('location', None)
        self.manufacturer = kwargs.get('manufacturer', None)
        self.model = kwargs.get('model', None)
        self.name = kwargs.get('name', None)
        self.status = kwargs.get('status', None)
        self.jobs = kwargs.get('jobs', None)


class microsoftgraphprinter(microsoftgraphprinterbase):
    """printer.

    :param id: Read-only.
    :type id: str
    :param capabilities: printerCapabilities.
    :type capabilities: ~devices_cloud_print.models.microsoftgraphprintercapabilities
    :param defaults: printerDefaults.
    :type defaults: ~devices_cloud_print.models.microsoftgraphprinterdefaults
    :param display_name:
    :type display_name: str
    :param is_accepting_jobs:
    :type is_accepting_jobs: bool
    :param location: printerLocation.
    :type location: ~devices_cloud_print.models.microsoftgraphprinterlocation
    :param manufacturer:
    :type manufacturer: str
    :param model:
    :type model: str
    :param name:
    :type name: str
    :param status: printerStatus.
    :type status: ~devices_cloud_print.models.microsoftgraphprinterstatus
    :param jobs:
    :type jobs: list[~devices_cloud_print.models.microsoftgraphprintjob]
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param accepting_jobs:
    :type accepting_jobs: bool
    :param is_shared:
    :type is_shared: bool
    :param registered_date_time:
    :type registered_date_time: ~datetime.datetime
    :param allowed_groups:
    :type allowed_groups: list[~devices_cloud_print.models.microsoftgraphprintidentity]
    :param allowed_users:
    :type allowed_users: list[~devices_cloud_print.models.microsoftgraphprintuseridentity]
    :param connectors:
    :type connectors: list[~devices_cloud_print.models.microsoftgraphprintconnector]
    :param share: printerShare.
    :type share: ~devices_cloud_print.models.microsoftgraphprintershare
    :param shares:
    :type shares: list[~devices_cloud_print.models.microsoftgraphprintershare]
    :param task_triggers:
    :type task_triggers: list[~devices_cloud_print.models.microsoftgraphprinttasktrigger]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'capabilities': {'key': 'capabilities', 'type': 'microsoftgraphprintercapabilities'},
        'defaults': {'key': 'defaults', 'type': 'microsoftgraphprinterdefaults'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_accepting_jobs': {'key': 'isAcceptingJobs', 'type': 'bool'},
        'location': {'key': 'location', 'type': 'microsoftgraphprinterlocation'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'model': {'key': 'model', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'microsoftgraphprinterstatus'},
        'jobs': {'key': 'jobs', 'type': '[microsoftgraphprintjob]'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'accepting_jobs': {'key': 'acceptingJobs', 'type': 'bool'},
        'is_shared': {'key': 'isShared', 'type': 'bool'},
        'registered_date_time': {'key': 'registeredDateTime', 'type': 'iso-8601'},
        'allowed_groups': {'key': 'allowedGroups', 'type': '[microsoftgraphprintidentity]'},
        'allowed_users': {'key': 'allowedUsers', 'type': '[microsoftgraphprintuseridentity]'},
        'connectors': {'key': 'connectors', 'type': '[microsoftgraphprintconnector]'},
        'share': {'key': 'share', 'type': 'microsoftgraphprintershare'},
        'shares': {'key': 'shares', 'type': '[microsoftgraphprintershare]'},
        'task_triggers': {'key': 'taskTriggers', 'type': '[microsoftgraphprinttasktrigger]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprinter, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.accepting_jobs = kwargs.get('accepting_jobs', None)
        self.is_shared = kwargs.get('is_shared', None)
        self.registered_date_time = kwargs.get('registered_date_time', None)
        self.allowed_groups = kwargs.get('allowed_groups', None)
        self.allowed_users = kwargs.get('allowed_users', None)
        self.connectors = kwargs.get('connectors', None)
        self.share = kwargs.get('share', None)
        self.shares = kwargs.get('shares', None)
        self.task_triggers = kwargs.get('task_triggers', None)


class microsoftgraphprintercapabilities(msrest.serialization.Model):
    """printerCapabilities.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param bottom_margins:
    :type bottom_margins: list[int]
    :param collation:
    :type collation: bool
    :param color_modes:
    :type color_modes: list[str or ~devices_cloud_print.models.Microsoftgraphprintcolormode]
    :param content_types:
    :type content_types: list[str]
    :param copies_per_job: integerRange.
    :type copies_per_job: ~devices_cloud_print.models.microsoftgraphintegerrange
    :param dpis:
    :type dpis: list[int]
    :param duplex_modes:
    :type duplex_modes: list[str or ~devices_cloud_print.models.Microsoftgraphprintduplexmode]
    :param feed_directions:
    :type feed_directions: list[str or
     ~devices_cloud_print.models.Microsoftgraphprinterfeeddirection]
    :param feed_orientations:
    :type feed_orientations: list[str or
     ~devices_cloud_print.models.Microsoftgraphprinterfeedorientation]
    :param finishings:
    :type finishings: list[str or ~devices_cloud_print.models.Microsoftgraphprintfinishing]
    :param input_bins:
    :type input_bins: list[str]
    :param is_color_printing_supported:
    :type is_color_printing_supported: bool
    :param is_page_range_supported:
    :type is_page_range_supported: bool
    :param left_margins:
    :type left_margins: list[int]
    :param media_colors:
    :type media_colors: list[str]
    :param media_sizes:
    :type media_sizes: list[str]
    :param media_types:
    :type media_types: list[str]
    :param multipage_layouts:
    :type multipage_layouts: list[str or
     ~devices_cloud_print.models.Microsoftgraphprintmultipagelayout]
    :param orientations:
    :type orientations: list[str or ~devices_cloud_print.models.Microsoftgraphprintorientation]
    :param output_bins:
    :type output_bins: list[str]
    :param pages_per_sheet:
    :type pages_per_sheet: list[int]
    :param qualities:
    :type qualities: list[str or ~devices_cloud_print.models.Microsoftgraphprintquality]
    :param right_margins:
    :type right_margins: list[int]
    :param scalings:
    :type scalings: list[str or ~devices_cloud_print.models.Microsoftgraphprintscaling]
    :param supported_color_configurations:
    :type supported_color_configurations: list[str or
     ~devices_cloud_print.models.Microsoftgraphprintcolorconfiguration]
    :param supported_copies_per_job: integerRange.
    :type supported_copies_per_job: ~devices_cloud_print.models.microsoftgraphintegerrange
    :param supported_document_mime_types:
    :type supported_document_mime_types: list[str]
    :param supported_duplex_configurations:
    :type supported_duplex_configurations: list[str or
     ~devices_cloud_print.models.Microsoftgraphprintduplexconfiguration]
    :param supported_finishings:
    :type supported_finishings: list[str or
     ~devices_cloud_print.models.Microsoftgraphprintfinishing]
    :param supported_media_colors:
    :type supported_media_colors: list[str]
    :param supported_media_sizes:
    :type supported_media_sizes: list[str]
    :param supported_media_types:
    :type supported_media_types: list[str or
     ~devices_cloud_print.models.Microsoftgraphprintmediatype]
    :param supported_orientations:
    :type supported_orientations: list[str or
     ~devices_cloud_print.models.Microsoftgraphprintorientation]
    :param supported_output_bins:
    :type supported_output_bins: list[str]
    :param supported_pages_per_sheet: integerRange.
    :type supported_pages_per_sheet: ~devices_cloud_print.models.microsoftgraphintegerrange
    :param supported_presentation_directions:
    :type supported_presentation_directions: list[str or
     ~devices_cloud_print.models.Microsoftgraphprintpresentationdirection]
    :param supported_print_qualities:
    :type supported_print_qualities: list[str or
     ~devices_cloud_print.models.Microsoftgraphprintquality]
    :param supports_fit_pdf_to_page:
    :type supports_fit_pdf_to_page: bool
    :param top_margins:
    :type top_margins: list[int]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'bottom_margins': {'key': 'bottomMargins', 'type': '[int]'},
        'collation': {'key': 'collation', 'type': 'bool'},
        'color_modes': {'key': 'colorModes', 'type': '[str]'},
        'content_types': {'key': 'contentTypes', 'type': '[str]'},
        'copies_per_job': {'key': 'copiesPerJob', 'type': 'microsoftgraphintegerrange'},
        'dpis': {'key': 'dpis', 'type': '[int]'},
        'duplex_modes': {'key': 'duplexModes', 'type': '[str]'},
        'feed_directions': {'key': 'feedDirections', 'type': '[str]'},
        'feed_orientations': {'key': 'feedOrientations', 'type': '[str]'},
        'finishings': {'key': 'finishings', 'type': '[str]'},
        'input_bins': {'key': 'inputBins', 'type': '[str]'},
        'is_color_printing_supported': {'key': 'isColorPrintingSupported', 'type': 'bool'},
        'is_page_range_supported': {'key': 'isPageRangeSupported', 'type': 'bool'},
        'left_margins': {'key': 'leftMargins', 'type': '[int]'},
        'media_colors': {'key': 'mediaColors', 'type': '[str]'},
        'media_sizes': {'key': 'mediaSizes', 'type': '[str]'},
        'media_types': {'key': 'mediaTypes', 'type': '[str]'},
        'multipage_layouts': {'key': 'multipageLayouts', 'type': '[str]'},
        'orientations': {'key': 'orientations', 'type': '[str]'},
        'output_bins': {'key': 'outputBins', 'type': '[str]'},
        'pages_per_sheet': {'key': 'pagesPerSheet', 'type': '[int]'},
        'qualities': {'key': 'qualities', 'type': '[str]'},
        'right_margins': {'key': 'rightMargins', 'type': '[int]'},
        'scalings': {'key': 'scalings', 'type': '[str]'},
        'supported_color_configurations': {'key': 'supportedColorConfigurations', 'type': '[str]'},
        'supported_copies_per_job': {'key': 'supportedCopiesPerJob', 'type': 'microsoftgraphintegerrange'},
        'supported_document_mime_types': {'key': 'supportedDocumentMimeTypes', 'type': '[str]'},
        'supported_duplex_configurations': {'key': 'supportedDuplexConfigurations', 'type': '[str]'},
        'supported_finishings': {'key': 'supportedFinishings', 'type': '[str]'},
        'supported_media_colors': {'key': 'supportedMediaColors', 'type': '[str]'},
        'supported_media_sizes': {'key': 'supportedMediaSizes', 'type': '[str]'},
        'supported_media_types': {'key': 'supportedMediaTypes', 'type': '[str]'},
        'supported_orientations': {'key': 'supportedOrientations', 'type': '[str]'},
        'supported_output_bins': {'key': 'supportedOutputBins', 'type': '[str]'},
        'supported_pages_per_sheet': {'key': 'supportedPagesPerSheet', 'type': 'microsoftgraphintegerrange'},
        'supported_presentation_directions': {'key': 'supportedPresentationDirections', 'type': '[str]'},
        'supported_print_qualities': {'key': 'supportedPrintQualities', 'type': '[str]'},
        'supports_fit_pdf_to_page': {'key': 'supportsFitPdfToPage', 'type': 'bool'},
        'top_margins': {'key': 'topMargins', 'type': '[int]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprintercapabilities, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.bottom_margins = kwargs.get('bottom_margins', None)
        self.collation = kwargs.get('collation', None)
        self.color_modes = kwargs.get('color_modes', None)
        self.content_types = kwargs.get('content_types', None)
        self.copies_per_job = kwargs.get('copies_per_job', None)
        self.dpis = kwargs.get('dpis', None)
        self.duplex_modes = kwargs.get('duplex_modes', None)
        self.feed_directions = kwargs.get('feed_directions', None)
        self.feed_orientations = kwargs.get('feed_orientations', None)
        self.finishings = kwargs.get('finishings', None)
        self.input_bins = kwargs.get('input_bins', None)
        self.is_color_printing_supported = kwargs.get('is_color_printing_supported', None)
        self.is_page_range_supported = kwargs.get('is_page_range_supported', None)
        self.left_margins = kwargs.get('left_margins', None)
        self.media_colors = kwargs.get('media_colors', None)
        self.media_sizes = kwargs.get('media_sizes', None)
        self.media_types = kwargs.get('media_types', None)
        self.multipage_layouts = kwargs.get('multipage_layouts', None)
        self.orientations = kwargs.get('orientations', None)
        self.output_bins = kwargs.get('output_bins', None)
        self.pages_per_sheet = kwargs.get('pages_per_sheet', None)
        self.qualities = kwargs.get('qualities', None)
        self.right_margins = kwargs.get('right_margins', None)
        self.scalings = kwargs.get('scalings', None)
        self.supported_color_configurations = kwargs.get('supported_color_configurations', None)
        self.supported_copies_per_job = kwargs.get('supported_copies_per_job', None)
        self.supported_document_mime_types = kwargs.get('supported_document_mime_types', None)
        self.supported_duplex_configurations = kwargs.get('supported_duplex_configurations', None)
        self.supported_finishings = kwargs.get('supported_finishings', None)
        self.supported_media_colors = kwargs.get('supported_media_colors', None)
        self.supported_media_sizes = kwargs.get('supported_media_sizes', None)
        self.supported_media_types = kwargs.get('supported_media_types', None)
        self.supported_orientations = kwargs.get('supported_orientations', None)
        self.supported_output_bins = kwargs.get('supported_output_bins', None)
        self.supported_pages_per_sheet = kwargs.get('supported_pages_per_sheet', None)
        self.supported_presentation_directions = kwargs.get('supported_presentation_directions', None)
        self.supported_print_qualities = kwargs.get('supported_print_qualities', None)
        self.supports_fit_pdf_to_page = kwargs.get('supports_fit_pdf_to_page', None)
        self.top_margins = kwargs.get('top_margins', None)


class microsoftgraphprinterdefaults(msrest.serialization.Model):
    """printerDefaults.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param color_mode:  Possible values include: "blackAndWhite", "grayscale", "color", "auto".
    :type color_mode: str or ~devices_cloud_print.models.Microsoftgraphprintcolormode
    :param content_type:
    :type content_type: str
    :param copies_per_job:
    :type copies_per_job: int
    :param document_mime_type:
    :type document_mime_type: str
    :param dpi:
    :type dpi: int
    :param duplex_configuration:  Possible values include: "twoSidedLongEdge", "twoSidedShortEdge",
     "oneSided".
    :type duplex_configuration: str or
     ~devices_cloud_print.models.Microsoftgraphprintduplexconfiguration
    :param duplex_mode:  Possible values include: "flipOnLongEdge", "flipOnShortEdge", "oneSided".
    :type duplex_mode: str or ~devices_cloud_print.models.Microsoftgraphprintduplexmode
    :param finishings:
    :type finishings: list[str or ~devices_cloud_print.models.Microsoftgraphprintfinishing]
    :param fit_pdf_to_page:
    :type fit_pdf_to_page: bool
    :param media_color:
    :type media_color: str
    :param media_size:
    :type media_size: str
    :param media_type:
    :type media_type: str
    :param multipage_layout:  Possible values include: "clockwiseFromTopLeft",
     "counterclockwiseFromTopLeft", "counterclockwiseFromTopRight", "clockwiseFromTopRight",
     "counterclockwiseFromBottomLeft", "clockwiseFromBottomLeft", "counterclockwiseFromBottomRight",
     "clockwiseFromBottomRight".
    :type multipage_layout: str or ~devices_cloud_print.models.Microsoftgraphprintmultipagelayout
    :param orientation:  Possible values include: "portrait", "landscape", "reverseLandscape",
     "reversePortrait".
    :type orientation: str or ~devices_cloud_print.models.Microsoftgraphprintorientation
    :param output_bin:
    :type output_bin: str
    :param pages_per_sheet:
    :type pages_per_sheet: int
    :param pdf_fit_to_page:
    :type pdf_fit_to_page: bool
    :param presentation_direction:  Possible values include: "clockwiseFromTopLeft",
     "counterClockwiseFromTopLeft", "counterClockwiseFromTopRight", "clockwiseFromTopRight",
     "counterClockwiseFromBottomLeft", "clockwiseFromBottomLeft", "counterClockwiseFromBottomRight",
     "clockwiseFromBottomRight".
    :type presentation_direction: str or
     ~devices_cloud_print.models.Microsoftgraphprintpresentationdirection
    :param print_color_configuration:  Possible values include: "blackAndWhite", "grayscale",
     "color", "auto".
    :type print_color_configuration: str or
     ~devices_cloud_print.models.Microsoftgraphprintcolorconfiguration
    :param print_quality:  Possible values include: "low", "medium", "high", "unknownFutureValue".
    :type print_quality: str or ~devices_cloud_print.models.Microsoftgraphprintquality
    :param quality:  Possible values include: "low", "medium", "high", "unknownFutureValue".
    :type quality: str or ~devices_cloud_print.models.Microsoftgraphprintquality
    :param scaling:  Possible values include: "auto", "shrinkToFit", "fill", "fit", "none",
     "unknownFutureValue".
    :type scaling: str or ~devices_cloud_print.models.Microsoftgraphprintscaling
    """

    _validation = {
        'copies_per_job': {'maximum': 2147483647, 'minimum': -2147483648},
        'dpi': {'maximum': 2147483647, 'minimum': -2147483648},
        'pages_per_sheet': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'color_mode': {'key': 'colorMode', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'copies_per_job': {'key': 'copiesPerJob', 'type': 'int'},
        'document_mime_type': {'key': 'documentMimeType', 'type': 'str'},
        'dpi': {'key': 'dpi', 'type': 'int'},
        'duplex_configuration': {'key': 'duplexConfiguration', 'type': 'str'},
        'duplex_mode': {'key': 'duplexMode', 'type': 'str'},
        'finishings': {'key': 'finishings', 'type': '[str]'},
        'fit_pdf_to_page': {'key': 'fitPdfToPage', 'type': 'bool'},
        'media_color': {'key': 'mediaColor', 'type': 'str'},
        'media_size': {'key': 'mediaSize', 'type': 'str'},
        'media_type': {'key': 'mediaType', 'type': 'str'},
        'multipage_layout': {'key': 'multipageLayout', 'type': 'str'},
        'orientation': {'key': 'orientation', 'type': 'str'},
        'output_bin': {'key': 'outputBin', 'type': 'str'},
        'pages_per_sheet': {'key': 'pagesPerSheet', 'type': 'int'},
        'pdf_fit_to_page': {'key': 'pdfFitToPage', 'type': 'bool'},
        'presentation_direction': {'key': 'presentationDirection', 'type': 'str'},
        'print_color_configuration': {'key': 'printColorConfiguration', 'type': 'str'},
        'print_quality': {'key': 'printQuality', 'type': 'str'},
        'quality': {'key': 'quality', 'type': 'str'},
        'scaling': {'key': 'scaling', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprinterdefaults, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.color_mode = kwargs.get('color_mode', None)
        self.content_type = kwargs.get('content_type', None)
        self.copies_per_job = kwargs.get('copies_per_job', None)
        self.document_mime_type = kwargs.get('document_mime_type', None)
        self.dpi = kwargs.get('dpi', None)
        self.duplex_configuration = kwargs.get('duplex_configuration', None)
        self.duplex_mode = kwargs.get('duplex_mode', None)
        self.finishings = kwargs.get('finishings', None)
        self.fit_pdf_to_page = kwargs.get('fit_pdf_to_page', None)
        self.media_color = kwargs.get('media_color', None)
        self.media_size = kwargs.get('media_size', None)
        self.media_type = kwargs.get('media_type', None)
        self.multipage_layout = kwargs.get('multipage_layout', None)
        self.orientation = kwargs.get('orientation', None)
        self.output_bin = kwargs.get('output_bin', None)
        self.pages_per_sheet = kwargs.get('pages_per_sheet', None)
        self.pdf_fit_to_page = kwargs.get('pdf_fit_to_page', None)
        self.presentation_direction = kwargs.get('presentation_direction', None)
        self.print_color_configuration = kwargs.get('print_color_configuration', None)
        self.print_quality = kwargs.get('print_quality', None)
        self.quality = kwargs.get('quality', None)
        self.scaling = kwargs.get('scaling', None)


class microsoftgraphprinterdocumentconfiguration(msrest.serialization.Model):
    """printerDocumentConfiguration.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param collate:
    :type collate: bool
    :param color_mode:  Possible values include: "blackAndWhite", "grayscale", "color", "auto".
    :type color_mode: str or ~devices_cloud_print.models.Microsoftgraphprintcolormode
    :param copies:
    :type copies: int
    :param dpi:
    :type dpi: int
    :param duplex_mode:  Possible values include: "flipOnLongEdge", "flipOnShortEdge", "oneSided".
    :type duplex_mode: str or ~devices_cloud_print.models.Microsoftgraphprintduplexmode
    :param feed_direction:  Possible values include: "longEdgeFirst", "shortEdgeFirst".
    :type feed_direction: str or ~devices_cloud_print.models.Microsoftgraphprinterfeeddirection
    :param feed_orientation:  Possible values include: "longEdgeFirst", "shortEdgeFirst".
    :type feed_orientation: str or ~devices_cloud_print.models.Microsoftgraphprinterfeedorientation
    :param finishings:
    :type finishings: list[str or ~devices_cloud_print.models.Microsoftgraphprintfinishing]
    :param fit_pdf_to_page:
    :type fit_pdf_to_page: bool
    :param input_bin:
    :type input_bin: str
    :param margin: printMargin.
    :type margin: ~devices_cloud_print.models.microsoftgraphprintmargin
    :param media_size:
    :type media_size: str
    :param media_type:
    :type media_type: str
    :param multipage_layout:  Possible values include: "clockwiseFromTopLeft",
     "counterclockwiseFromTopLeft", "counterclockwiseFromTopRight", "clockwiseFromTopRight",
     "counterclockwiseFromBottomLeft", "clockwiseFromBottomLeft", "counterclockwiseFromBottomRight",
     "clockwiseFromBottomRight".
    :type multipage_layout: str or ~devices_cloud_print.models.Microsoftgraphprintmultipagelayout
    :param orientation:  Possible values include: "portrait", "landscape", "reverseLandscape",
     "reversePortrait".
    :type orientation: str or ~devices_cloud_print.models.Microsoftgraphprintorientation
    :param output_bin:
    :type output_bin: str
    :param page_ranges:
    :type page_ranges: list[~devices_cloud_print.models.microsoftgraphintegerrange]
    :param pages_per_sheet:
    :type pages_per_sheet: int
    :param quality:  Possible values include: "low", "medium", "high", "unknownFutureValue".
    :type quality: str or ~devices_cloud_print.models.Microsoftgraphprintquality
    :param scaling:  Possible values include: "auto", "shrinkToFit", "fill", "fit", "none",
     "unknownFutureValue".
    :type scaling: str or ~devices_cloud_print.models.Microsoftgraphprintscaling
    """

    _validation = {
        'copies': {'maximum': 2147483647, 'minimum': -2147483648},
        'dpi': {'maximum': 2147483647, 'minimum': -2147483648},
        'pages_per_sheet': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'collate': {'key': 'collate', 'type': 'bool'},
        'color_mode': {'key': 'colorMode', 'type': 'str'},
        'copies': {'key': 'copies', 'type': 'int'},
        'dpi': {'key': 'dpi', 'type': 'int'},
        'duplex_mode': {'key': 'duplexMode', 'type': 'str'},
        'feed_direction': {'key': 'feedDirection', 'type': 'str'},
        'feed_orientation': {'key': 'feedOrientation', 'type': 'str'},
        'finishings': {'key': 'finishings', 'type': '[str]'},
        'fit_pdf_to_page': {'key': 'fitPdfToPage', 'type': 'bool'},
        'input_bin': {'key': 'inputBin', 'type': 'str'},
        'margin': {'key': 'margin', 'type': 'microsoftgraphprintmargin'},
        'media_size': {'key': 'mediaSize', 'type': 'str'},
        'media_type': {'key': 'mediaType', 'type': 'str'},
        'multipage_layout': {'key': 'multipageLayout', 'type': 'str'},
        'orientation': {'key': 'orientation', 'type': 'str'},
        'output_bin': {'key': 'outputBin', 'type': 'str'},
        'page_ranges': {'key': 'pageRanges', 'type': '[microsoftgraphintegerrange]'},
        'pages_per_sheet': {'key': 'pagesPerSheet', 'type': 'int'},
        'quality': {'key': 'quality', 'type': 'str'},
        'scaling': {'key': 'scaling', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprinterdocumentconfiguration, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.collate = kwargs.get('collate', None)
        self.color_mode = kwargs.get('color_mode', None)
        self.copies = kwargs.get('copies', None)
        self.dpi = kwargs.get('dpi', None)
        self.duplex_mode = kwargs.get('duplex_mode', None)
        self.feed_direction = kwargs.get('feed_direction', None)
        self.feed_orientation = kwargs.get('feed_orientation', None)
        self.finishings = kwargs.get('finishings', None)
        self.fit_pdf_to_page = kwargs.get('fit_pdf_to_page', None)
        self.input_bin = kwargs.get('input_bin', None)
        self.margin = kwargs.get('margin', None)
        self.media_size = kwargs.get('media_size', None)
        self.media_type = kwargs.get('media_type', None)
        self.multipage_layout = kwargs.get('multipage_layout', None)
        self.orientation = kwargs.get('orientation', None)
        self.output_bin = kwargs.get('output_bin', None)
        self.page_ranges = kwargs.get('page_ranges', None)
        self.pages_per_sheet = kwargs.get('pages_per_sheet', None)
        self.quality = kwargs.get('quality', None)
        self.scaling = kwargs.get('scaling', None)


class microsoftgraphprinterlocation(msrest.serialization.Model):
    """printerLocation.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param altitude_in_meters:
    :type altitude_in_meters: int
    :param building:
    :type building: str
    :param city:
    :type city: str
    :param country_or_region:
    :type country_or_region: str
    :param floor_description:
    :type floor_description: str
    :param floor_number:
    :type floor_number: int
    :param latitude:
    :type latitude: float
    :param longitude:
    :type longitude: float
    :param organization:
    :type organization: list[str]
    :param postal_code:
    :type postal_code: str
    :param room_description:
    :type room_description: str
    :param room_number:
    :type room_number: int
    :param site:
    :type site: str
    :param state_or_province:
    :type state_or_province: str
    :param street_address:
    :type street_address: str
    :param subdivision:
    :type subdivision: list[str]
    :param subunit:
    :type subunit: list[str]
    """

    _validation = {
        'altitude_in_meters': {'maximum': 2147483647, 'minimum': -2147483648},
        'floor_number': {'maximum': 2147483647, 'minimum': -2147483648},
        'room_number': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'altitude_in_meters': {'key': 'altitudeInMeters', 'type': 'int'},
        'building': {'key': 'building', 'type': 'str'},
        'city': {'key': 'city', 'type': 'str'},
        'country_or_region': {'key': 'countryOrRegion', 'type': 'str'},
        'floor_description': {'key': 'floorDescription', 'type': 'str'},
        'floor_number': {'key': 'floorNumber', 'type': 'int'},
        'latitude': {'key': 'latitude', 'type': 'float'},
        'longitude': {'key': 'longitude', 'type': 'float'},
        'organization': {'key': 'organization', 'type': '[str]'},
        'postal_code': {'key': 'postalCode', 'type': 'str'},
        'room_description': {'key': 'roomDescription', 'type': 'str'},
        'room_number': {'key': 'roomNumber', 'type': 'int'},
        'site': {'key': 'site', 'type': 'str'},
        'state_or_province': {'key': 'stateOrProvince', 'type': 'str'},
        'street_address': {'key': 'streetAddress', 'type': 'str'},
        'subdivision': {'key': 'subdivision', 'type': '[str]'},
        'subunit': {'key': 'subunit', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprinterlocation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.altitude_in_meters = kwargs.get('altitude_in_meters', None)
        self.building = kwargs.get('building', None)
        self.city = kwargs.get('city', None)
        self.country_or_region = kwargs.get('country_or_region', None)
        self.floor_description = kwargs.get('floor_description', None)
        self.floor_number = kwargs.get('floor_number', None)
        self.latitude = kwargs.get('latitude', None)
        self.longitude = kwargs.get('longitude', None)
        self.organization = kwargs.get('organization', None)
        self.postal_code = kwargs.get('postal_code', None)
        self.room_description = kwargs.get('room_description', None)
        self.room_number = kwargs.get('room_number', None)
        self.site = kwargs.get('site', None)
        self.state_or_province = kwargs.get('state_or_province', None)
        self.street_address = kwargs.get('street_address', None)
        self.subdivision = kwargs.get('subdivision', None)
        self.subunit = kwargs.get('subunit', None)


class microsoftgraphprintershare(microsoftgraphprinterbase):
    """printerShare.

    :param id: Read-only.
    :type id: str
    :param capabilities: printerCapabilities.
    :type capabilities: ~devices_cloud_print.models.microsoftgraphprintercapabilities
    :param defaults: printerDefaults.
    :type defaults: ~devices_cloud_print.models.microsoftgraphprinterdefaults
    :param display_name:
    :type display_name: str
    :param is_accepting_jobs:
    :type is_accepting_jobs: bool
    :param location: printerLocation.
    :type location: ~devices_cloud_print.models.microsoftgraphprinterlocation
    :param manufacturer:
    :type manufacturer: str
    :param model:
    :type model: str
    :param name:
    :type name: str
    :param status: printerStatus.
    :type status: ~devices_cloud_print.models.microsoftgraphprinterstatus
    :param jobs:
    :type jobs: list[~devices_cloud_print.models.microsoftgraphprintjob]
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allow_all_users:
    :type allow_all_users: bool
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param allowed_groups:
    :type allowed_groups: list[~devices_cloud_print.models.microsoftgraphprintidentity]
    :param allowed_users:
    :type allowed_users: list[~devices_cloud_print.models.microsoftgraphprintuseridentity]
    :param printer: printer.
    :type printer: ~devices_cloud_print.models.microsoftgraphprinter
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'capabilities': {'key': 'capabilities', 'type': 'microsoftgraphprintercapabilities'},
        'defaults': {'key': 'defaults', 'type': 'microsoftgraphprinterdefaults'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_accepting_jobs': {'key': 'isAcceptingJobs', 'type': 'bool'},
        'location': {'key': 'location', 'type': 'microsoftgraphprinterlocation'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'model': {'key': 'model', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'microsoftgraphprinterstatus'},
        'jobs': {'key': 'jobs', 'type': '[microsoftgraphprintjob]'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'allow_all_users': {'key': 'allowAllUsers', 'type': 'bool'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'allowed_groups': {'key': 'allowedGroups', 'type': '[microsoftgraphprintidentity]'},
        'allowed_users': {'key': 'allowedUsers', 'type': '[microsoftgraphprintuseridentity]'},
        'printer': {'key': 'printer', 'type': 'microsoftgraphprinter'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprintershare, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.allow_all_users = kwargs.get('allow_all_users', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.allowed_groups = kwargs.get('allowed_groups', None)
        self.allowed_users = kwargs.get('allowed_users', None)
        self.printer = kwargs.get('printer', None)


class microsoftgraphprinterstatus(msrest.serialization.Model):
    """printerStatus.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description:
    :type description: str
    :param details:
    :type details: list[str or
     ~devices_cloud_print.models.Microsoftgraphprinterprocessingstatedetail]
    :param processing_state:  Possible values include: "unknown", "idle", "processing", "stopped",
     "unknownFutureValue".
    :type processing_state: str or ~devices_cloud_print.models.Microsoftgraphprinterprocessingstate
    :param processing_state_description:
    :type processing_state_description: str
    :param processing_state_reasons:
    :type processing_state_reasons: list[str or
     ~devices_cloud_print.models.Microsoftgraphprinterprocessingstatereason]
    :param state:  Possible values include: "unknown", "idle", "processing", "stopped",
     "unknownFutureValue".
    :type state: str or ~devices_cloud_print.models.Microsoftgraphprinterprocessingstate
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'details': {'key': 'details', 'type': '[str]'},
        'processing_state': {'key': 'processingState', 'type': 'str'},
        'processing_state_description': {'key': 'processingStateDescription', 'type': 'str'},
        'processing_state_reasons': {'key': 'processingStateReasons', 'type': '[str]'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprinterstatus, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.description = kwargs.get('description', None)
        self.details = kwargs.get('details', None)
        self.processing_state = kwargs.get('processing_state', None)
        self.processing_state_description = kwargs.get('processing_state_description', None)
        self.processing_state_reasons = kwargs.get('processing_state_reasons', None)
        self.state = kwargs.get('state', None)


class microsoftgraphprinterusagesummary(msrest.serialization.Model):
    """printerUsageSummary.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param completed_job_count:
    :type completed_job_count: int
    :param incomplete_job_count:
    :type incomplete_job_count: int
    :param printer_display_name:
    :type printer_display_name: str
    :param printer_id:
    :type printer_id: str
    :param printer_manufacturer:
    :type printer_manufacturer: str
    :param printer_model:
    :type printer_model: str
    :param printer: Represents an Azure Active Directory object. The directoryObject type is the
     base type for many other directory entity types.
    :type printer: ~devices_cloud_print.models.microsoftgraphdirectoryobject
    """

    _validation = {
        'completed_job_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'incomplete_job_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'completed_job_count': {'key': 'completedJobCount', 'type': 'int'},
        'incomplete_job_count': {'key': 'incompleteJobCount', 'type': 'int'},
        'printer_display_name': {'key': 'printerDisplayName', 'type': 'str'},
        'printer_id': {'key': 'printerId', 'type': 'str'},
        'printer_manufacturer': {'key': 'printerManufacturer', 'type': 'str'},
        'printer_model': {'key': 'printerModel', 'type': 'str'},
        'printer': {'key': 'printer', 'type': 'microsoftgraphdirectoryobject'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprinterusagesummary, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.completed_job_count = kwargs.get('completed_job_count', None)
        self.incomplete_job_count = kwargs.get('incomplete_job_count', None)
        self.printer_display_name = kwargs.get('printer_display_name', None)
        self.printer_id = kwargs.get('printer_id', None)
        self.printer_manufacturer = kwargs.get('printer_manufacturer', None)
        self.printer_model = kwargs.get('printer_model', None)
        self.printer = kwargs.get('printer', None)


class microsoftgraphprintidentity(microsoftgraphentity):
    """printIdentity.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprintidentity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)


class microsoftgraphprintjob(microsoftgraphentity):
    """printJob.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param configuration: printJobConfiguration.
    :type configuration: ~devices_cloud_print.models.microsoftgraphprintjobconfiguration
    :param created_by: userIdentity.
    :type created_by: ~devices_cloud_print.models.microsoftgraphuseridentity
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param is_fetchable:
    :type is_fetchable: bool
    :param redirected_from:
    :type redirected_from: str
    :param redirected_to:
    :type redirected_to: str
    :param status: printJobStatus.
    :type status: ~devices_cloud_print.models.microsoftgraphprintjobstatus
    :param documents:
    :type documents: list[~devices_cloud_print.models.microsoftgraphprintdocument]
    :param tasks:
    :type tasks: list[~devices_cloud_print.models.microsoftgraphprinttask]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'configuration': {'key': 'configuration', 'type': 'microsoftgraphprintjobconfiguration'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphuseridentity'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'is_fetchable': {'key': 'isFetchable', 'type': 'bool'},
        'redirected_from': {'key': 'redirectedFrom', 'type': 'str'},
        'redirected_to': {'key': 'redirectedTo', 'type': 'str'},
        'status': {'key': 'status', 'type': 'microsoftgraphprintjobstatus'},
        'documents': {'key': 'documents', 'type': '[microsoftgraphprintdocument]'},
        'tasks': {'key': 'tasks', 'type': '[microsoftgraphprinttask]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprintjob, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.configuration = kwargs.get('configuration', None)
        self.created_by = kwargs.get('created_by', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.is_fetchable = kwargs.get('is_fetchable', None)
        self.redirected_from = kwargs.get('redirected_from', None)
        self.redirected_to = kwargs.get('redirected_to', None)
        self.status = kwargs.get('status', None)
        self.documents = kwargs.get('documents', None)
        self.tasks = kwargs.get('tasks', None)


class microsoftgraphprintjobconfiguration(msrest.serialization.Model):
    """printJobConfiguration.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param collate:
    :type collate: bool
    :param color_mode:  Possible values include: "blackAndWhite", "grayscale", "color", "auto".
    :type color_mode: str or ~devices_cloud_print.models.Microsoftgraphprintcolormode
    :param copies:
    :type copies: int
    :param dpi:
    :type dpi: int
    :param duplex_mode:  Possible values include: "flipOnLongEdge", "flipOnShortEdge", "oneSided".
    :type duplex_mode: str or ~devices_cloud_print.models.Microsoftgraphprintduplexmode
    :param feed_orientation:  Possible values include: "longEdgeFirst", "shortEdgeFirst".
    :type feed_orientation: str or ~devices_cloud_print.models.Microsoftgraphprinterfeedorientation
    :param finishings:
    :type finishings: list[str or ~devices_cloud_print.models.Microsoftgraphprintfinishing]
    :param fit_pdf_to_page:
    :type fit_pdf_to_page: bool
    :param input_bin:
    :type input_bin: str
    :param margin: printMargin.
    :type margin: ~devices_cloud_print.models.microsoftgraphprintmargin
    :param media_size:
    :type media_size: str
    :param media_type:
    :type media_type: str
    :param multipage_layout:  Possible values include: "clockwiseFromTopLeft",
     "counterclockwiseFromTopLeft", "counterclockwiseFromTopRight", "clockwiseFromTopRight",
     "counterclockwiseFromBottomLeft", "clockwiseFromBottomLeft", "counterclockwiseFromBottomRight",
     "clockwiseFromBottomRight".
    :type multipage_layout: str or ~devices_cloud_print.models.Microsoftgraphprintmultipagelayout
    :param orientation:  Possible values include: "portrait", "landscape", "reverseLandscape",
     "reversePortrait".
    :type orientation: str or ~devices_cloud_print.models.Microsoftgraphprintorientation
    :param output_bin:
    :type output_bin: str
    :param page_ranges:
    :type page_ranges: list[~devices_cloud_print.models.microsoftgraphintegerrange]
    :param pages_per_sheet:
    :type pages_per_sheet: int
    :param quality:  Possible values include: "low", "medium", "high", "unknownFutureValue".
    :type quality: str or ~devices_cloud_print.models.Microsoftgraphprintquality
    :param scaling:  Possible values include: "auto", "shrinkToFit", "fill", "fit", "none",
     "unknownFutureValue".
    :type scaling: str or ~devices_cloud_print.models.Microsoftgraphprintscaling
    """

    _validation = {
        'copies': {'maximum': 2147483647, 'minimum': -2147483648},
        'dpi': {'maximum': 2147483647, 'minimum': -2147483648},
        'pages_per_sheet': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'collate': {'key': 'collate', 'type': 'bool'},
        'color_mode': {'key': 'colorMode', 'type': 'str'},
        'copies': {'key': 'copies', 'type': 'int'},
        'dpi': {'key': 'dpi', 'type': 'int'},
        'duplex_mode': {'key': 'duplexMode', 'type': 'str'},
        'feed_orientation': {'key': 'feedOrientation', 'type': 'str'},
        'finishings': {'key': 'finishings', 'type': '[str]'},
        'fit_pdf_to_page': {'key': 'fitPdfToPage', 'type': 'bool'},
        'input_bin': {'key': 'inputBin', 'type': 'str'},
        'margin': {'key': 'margin', 'type': 'microsoftgraphprintmargin'},
        'media_size': {'key': 'mediaSize', 'type': 'str'},
        'media_type': {'key': 'mediaType', 'type': 'str'},
        'multipage_layout': {'key': 'multipageLayout', 'type': 'str'},
        'orientation': {'key': 'orientation', 'type': 'str'},
        'output_bin': {'key': 'outputBin', 'type': 'str'},
        'page_ranges': {'key': 'pageRanges', 'type': '[microsoftgraphintegerrange]'},
        'pages_per_sheet': {'key': 'pagesPerSheet', 'type': 'int'},
        'quality': {'key': 'quality', 'type': 'str'},
        'scaling': {'key': 'scaling', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprintjobconfiguration, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.collate = kwargs.get('collate', None)
        self.color_mode = kwargs.get('color_mode', None)
        self.copies = kwargs.get('copies', None)
        self.dpi = kwargs.get('dpi', None)
        self.duplex_mode = kwargs.get('duplex_mode', None)
        self.feed_orientation = kwargs.get('feed_orientation', None)
        self.finishings = kwargs.get('finishings', None)
        self.fit_pdf_to_page = kwargs.get('fit_pdf_to_page', None)
        self.input_bin = kwargs.get('input_bin', None)
        self.margin = kwargs.get('margin', None)
        self.media_size = kwargs.get('media_size', None)
        self.media_type = kwargs.get('media_type', None)
        self.multipage_layout = kwargs.get('multipage_layout', None)
        self.orientation = kwargs.get('orientation', None)
        self.output_bin = kwargs.get('output_bin', None)
        self.page_ranges = kwargs.get('page_ranges', None)
        self.pages_per_sheet = kwargs.get('pages_per_sheet', None)
        self.quality = kwargs.get('quality', None)
        self.scaling = kwargs.get('scaling', None)


class microsoftgraphprintjobstatus(msrest.serialization.Model):
    """printJobStatus.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param acquired_by_printer:
    :type acquired_by_printer: bool
    :param description:
    :type description: str
    :param details:
    :type details: list[str or ~devices_cloud_print.models.Microsoftgraphprintjobstatedetail]
    :param is_acquired_by_printer:
    :type is_acquired_by_printer: bool
    :param processing_state:  Possible values include: "unknown", "pending", "processing",
     "paused", "stopped", "completed", "canceled", "aborted".
    :type processing_state: str or
     ~devices_cloud_print.models.Microsoftgraphprintjobprocessingstate
    :param processing_state_description:
    :type processing_state_description: str
    :param state:  Possible values include: "unknown", "pending", "processing", "paused",
     "stopped", "completed", "canceled", "aborted".
    :type state: str or ~devices_cloud_print.models.Microsoftgraphprintjobprocessingstate
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'acquired_by_printer': {'key': 'acquiredByPrinter', 'type': 'bool'},
        'description': {'key': 'description', 'type': 'str'},
        'details': {'key': 'details', 'type': '[str]'},
        'is_acquired_by_printer': {'key': 'isAcquiredByPrinter', 'type': 'bool'},
        'processing_state': {'key': 'processingState', 'type': 'str'},
        'processing_state_description': {'key': 'processingStateDescription', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprintjobstatus, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.acquired_by_printer = kwargs.get('acquired_by_printer', None)
        self.description = kwargs.get('description', None)
        self.details = kwargs.get('details', None)
        self.is_acquired_by_printer = kwargs.get('is_acquired_by_printer', None)
        self.processing_state = kwargs.get('processing_state', None)
        self.processing_state_description = kwargs.get('processing_state_description', None)
        self.state = kwargs.get('state', None)


class microsoftgraphprintmargin(msrest.serialization.Model):
    """printMargin.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param bottom:
    :type bottom: int
    :param left:
    :type left: int
    :param right:
    :type right: int
    :param top:
    :type top: int
    """

    _validation = {
        'bottom': {'maximum': 2147483647, 'minimum': -2147483648},
        'left': {'maximum': 2147483647, 'minimum': -2147483648},
        'right': {'maximum': 2147483647, 'minimum': -2147483648},
        'top': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'bottom': {'key': 'bottom', 'type': 'int'},
        'left': {'key': 'left', 'type': 'int'},
        'right': {'key': 'right', 'type': 'int'},
        'top': {'key': 'top', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprintmargin, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.bottom = kwargs.get('bottom', None)
        self.left = kwargs.get('left', None)
        self.right = kwargs.get('right', None)
        self.top = kwargs.get('top', None)


class microsoftgraphprintoperation(microsoftgraphentity):
    """printOperation.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param status: printOperationStatus.
    :type status: ~devices_cloud_print.models.microsoftgraphprintoperationstatus
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'microsoftgraphprintoperationstatus'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprintoperation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.status = kwargs.get('status', None)


class microsoftgraphprintoperationstatus(msrest.serialization.Model):
    """printOperationStatus.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description:
    :type description: str
    :param state:  Possible values include: "notStarted", "running", "succeeded", "failed",
     "unknownFutureValue".
    :type state: str or ~devices_cloud_print.models.Microsoftgraphprintoperationprocessingstate
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprintoperationstatus, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.description = kwargs.get('description', None)
        self.state = kwargs.get('state', None)


class microsoftgraphprintservice(microsoftgraphentity):
    """printService.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param endpoints:
    :type endpoints: list[~devices_cloud_print.models.microsoftgraphprintserviceendpoint]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'endpoints': {'key': 'endpoints', 'type': '[microsoftgraphprintserviceendpoint]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprintservice, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.endpoints = kwargs.get('endpoints', None)


class microsoftgraphprintserviceendpoint(microsoftgraphentity):
    """printServiceEndpoint.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    :param uri:
    :type uri: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'uri': {'key': 'uri', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprintserviceendpoint, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.uri = kwargs.get('uri', None)


class microsoftgraphprintsettings(msrest.serialization.Model):
    """printSettings.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param document_conversion_enabled:
    :type document_conversion_enabled: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'document_conversion_enabled': {'key': 'documentConversionEnabled', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprintsettings, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.document_conversion_enabled = kwargs.get('document_conversion_enabled', None)


class microsoftgraphprinttask(microsoftgraphentity):
    """printTask.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param parent_url:
    :type parent_url: str
    :param status: printTaskStatus.
    :type status: ~devices_cloud_print.models.microsoftgraphprinttaskstatus
    :param definition: printTaskDefinition.
    :type definition: ~devices_cloud_print.models.microsoftgraphprinttaskdefinition
    :param trigger: printTaskTrigger.
    :type trigger: ~devices_cloud_print.models.microsoftgraphprinttasktrigger
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'parent_url': {'key': 'parentUrl', 'type': 'str'},
        'status': {'key': 'status', 'type': 'microsoftgraphprinttaskstatus'},
        'definition': {'key': 'definition', 'type': 'microsoftgraphprinttaskdefinition'},
        'trigger': {'key': 'trigger', 'type': 'microsoftgraphprinttasktrigger'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprinttask, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.parent_url = kwargs.get('parent_url', None)
        self.status = kwargs.get('status', None)
        self.definition = kwargs.get('definition', None)
        self.trigger = kwargs.get('trigger', None)


class microsoftgraphprinttaskdefinition(microsoftgraphentity):
    """printTaskDefinition.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_by: appIdentity.
    :type created_by: ~devices_cloud_print.models.microsoftgraphappidentity
    :param display_name:
    :type display_name: str
    :param tasks:
    :type tasks: list[~devices_cloud_print.models.microsoftgraphprinttask]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphappidentity'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'tasks': {'key': 'tasks', 'type': '[microsoftgraphprinttask]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprinttaskdefinition, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_by = kwargs.get('created_by', None)
        self.display_name = kwargs.get('display_name', None)
        self.tasks = kwargs.get('tasks', None)


class microsoftgraphprinttaskstatus(msrest.serialization.Model):
    """printTaskStatus.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description:
    :type description: str
    :param state:  Possible values include: "pending", "processing", "completed", "aborted",
     "unknownFutureValue".
    :type state: str or ~devices_cloud_print.models.Microsoftgraphprinttaskprocessingstate
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprinttaskstatus, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.description = kwargs.get('description', None)
        self.state = kwargs.get('state', None)


class microsoftgraphprinttasktrigger(microsoftgraphentity):
    """printTaskTrigger.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param event:  Possible values include: "jobStarted", "unknownFutureValue".
    :type event: str or ~devices_cloud_print.models.Microsoftgraphprintevent
    :param definition: printTaskDefinition.
    :type definition: ~devices_cloud_print.models.microsoftgraphprinttaskdefinition
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'event': {'key': 'event', 'type': 'str'},
        'definition': {'key': 'definition', 'type': 'microsoftgraphprinttaskdefinition'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprinttasktrigger, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.event = kwargs.get('event', None)
        self.definition = kwargs.get('definition', None)


class microsoftgraphprintusagesummary(msrest.serialization.Model):
    """printUsageSummary.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param completed_job_count:
    :type completed_job_count: int
    :param incomplete_job_count:
    :type incomplete_job_count: int
    """

    _validation = {
        'completed_job_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'incomplete_job_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'completed_job_count': {'key': 'completedJobCount', 'type': 'int'},
        'incomplete_job_count': {'key': 'incompleteJobCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprintusagesummary, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.completed_job_count = kwargs.get('completed_job_count', None)
        self.incomplete_job_count = kwargs.get('incomplete_job_count', None)


class microsoftgraphprintusagesummarybyprinter(microsoftgraphentity):
    """PrintUsageSummaryByPrinter.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param completed_black_and_white_job_count:
    :type completed_black_and_white_job_count: long
    :param completed_color_job_count:
    :type completed_color_job_count: long
    :param incomplete_job_count:
    :type incomplete_job_count: long
    :param printer_id:
    :type printer_id: str
    :param usage_date:
    :type usage_date: ~datetime.date
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'completed_black_and_white_job_count': {'key': 'completedBlackAndWhiteJobCount', 'type': 'long'},
        'completed_color_job_count': {'key': 'completedColorJobCount', 'type': 'long'},
        'incomplete_job_count': {'key': 'incompleteJobCount', 'type': 'long'},
        'printer_id': {'key': 'printerId', 'type': 'str'},
        'usage_date': {'key': 'usageDate', 'type': 'date'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprintusagesummarybyprinter, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.completed_black_and_white_job_count = kwargs.get('completed_black_and_white_job_count', None)
        self.completed_color_job_count = kwargs.get('completed_color_job_count', None)
        self.incomplete_job_count = kwargs.get('incomplete_job_count', None)
        self.printer_id = kwargs.get('printer_id', None)
        self.usage_date = kwargs.get('usage_date', None)


class microsoftgraphprintusagesummarybyuser(microsoftgraphentity):
    """PrintUsageSummaryByUser.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param completed_black_and_white_job_count:
    :type completed_black_and_white_job_count: long
    :param completed_color_job_count:
    :type completed_color_job_count: long
    :param incomplete_job_count:
    :type incomplete_job_count: long
    :param usage_date:
    :type usage_date: ~datetime.date
    :param user_principal_name:
    :type user_principal_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'completed_black_and_white_job_count': {'key': 'completedBlackAndWhiteJobCount', 'type': 'long'},
        'completed_color_job_count': {'key': 'completedColorJobCount', 'type': 'long'},
        'incomplete_job_count': {'key': 'incompleteJobCount', 'type': 'long'},
        'usage_date': {'key': 'usageDate', 'type': 'date'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprintusagesummarybyuser, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.completed_black_and_white_job_count = kwargs.get('completed_black_and_white_job_count', None)
        self.completed_color_job_count = kwargs.get('completed_color_job_count', None)
        self.incomplete_job_count = kwargs.get('incomplete_job_count', None)
        self.usage_date = kwargs.get('usage_date', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class microsoftgraphprintuseridentity(microsoftgraphentity):
    """printUserIdentity.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    :param ip_address:
    :type ip_address: str
    :param user_principal_name:
    :type user_principal_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprintuseridentity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class microsoftgraphreportroot(microsoftgraphentity):
    """The resource that represents an instance of History Reports.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param application_sign_in_detailed_summary:
    :type application_sign_in_detailed_summary:
     list[~devices_cloud_print.models.microsoftgraphapplicationsignindetailedsummary]
    :param credential_user_registration_details:
    :type credential_user_registration_details:
     list[~devices_cloud_print.models.microsoftgraphcredentialuserregistrationdetails]
    :param user_credential_usage_details:
    :type user_credential_usage_details:
     list[~devices_cloud_print.models.microsoftgraphusercredentialusagedetails]
    :param daily_print_usage_summaries_by_printer:
    :type daily_print_usage_summaries_by_printer:
     list[~devices_cloud_print.models.microsoftgraphprintusagesummarybyprinter]
    :param daily_print_usage_summaries_by_user:
    :type daily_print_usage_summaries_by_user:
     list[~devices_cloud_print.models.microsoftgraphprintusagesummarybyuser]
    :param monthly_print_usage_summaries_by_printer:
    :type monthly_print_usage_summaries_by_printer:
     list[~devices_cloud_print.models.microsoftgraphprintusagesummarybyprinter]
    :param monthly_print_usage_summaries_by_user:
    :type monthly_print_usage_summaries_by_user:
     list[~devices_cloud_print.models.microsoftgraphprintusagesummarybyuser]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'application_sign_in_detailed_summary': {'key': 'applicationSignInDetailedSummary', 'type': '[microsoftgraphapplicationsignindetailedsummary]'},
        'credential_user_registration_details': {'key': 'credentialUserRegistrationDetails', 'type': '[microsoftgraphcredentialuserregistrationdetails]'},
        'user_credential_usage_details': {'key': 'userCredentialUsageDetails', 'type': '[microsoftgraphusercredentialusagedetails]'},
        'daily_print_usage_summaries_by_printer': {'key': 'dailyPrintUsageSummariesByPrinter', 'type': '[microsoftgraphprintusagesummarybyprinter]'},
        'daily_print_usage_summaries_by_user': {'key': 'dailyPrintUsageSummariesByUser', 'type': '[microsoftgraphprintusagesummarybyuser]'},
        'monthly_print_usage_summaries_by_printer': {'key': 'monthlyPrintUsageSummariesByPrinter', 'type': '[microsoftgraphprintusagesummarybyprinter]'},
        'monthly_print_usage_summaries_by_user': {'key': 'monthlyPrintUsageSummariesByUser', 'type': '[microsoftgraphprintusagesummarybyuser]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphreportroot, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.application_sign_in_detailed_summary = kwargs.get('application_sign_in_detailed_summary', None)
        self.credential_user_registration_details = kwargs.get('credential_user_registration_details', None)
        self.user_credential_usage_details = kwargs.get('user_credential_usage_details', None)
        self.daily_print_usage_summaries_by_printer = kwargs.get('daily_print_usage_summaries_by_printer', None)
        self.daily_print_usage_summaries_by_user = kwargs.get('daily_print_usage_summaries_by_user', None)
        self.monthly_print_usage_summaries_by_printer = kwargs.get('monthly_print_usage_summaries_by_printer', None)
        self.monthly_print_usage_summaries_by_user = kwargs.get('monthly_print_usage_summaries_by_user', None)


class microsoftgraphsigninstatus(msrest.serialization.Model):
    """signInStatus.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param additional_details: Provides additional details on the sign-in activity.
    :type additional_details: str
    :param error_code: Provides the 5-6digit error code that's generated during a sign-in failure.
     Check out the list of error codes and messages.
    :type error_code: int
    :param failure_reason: Provides the error message or the reason for failure for the
     corresponding sign-in activity. Check out the list of error codes and messages.
    :type failure_reason: str
    """

    _validation = {
        'error_code': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'additional_details': {'key': 'additionalDetails', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'int'},
        'failure_reason': {'key': 'failureReason', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphsigninstatus, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.additional_details = kwargs.get('additional_details', None)
        self.error_code = kwargs.get('error_code', None)
        self.failure_reason = kwargs.get('failure_reason', None)


class microsoftgraphusercredentialusagedetails(microsoftgraphentity):
    """userCredentialUsageDetails.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param auth_method:  Possible values include: "email", "mobileSMS", "mobileCall",
     "officePhone", "securityQuestion", "appNotification", "appCode", "alternateMobileCall", "fido",
     "appPassword", "unknownFutureValue".
    :type auth_method: str or ~devices_cloud_print.models.Microsoftgraphusageauthmethod
    :param event_date_time:
    :type event_date_time: ~datetime.datetime
    :param failure_reason:
    :type failure_reason: str
    :param feature:  Possible values include: "registration", "reset", "unknownFutureValue".
    :type feature: str or ~devices_cloud_print.models.Microsoftgraphfeaturetype
    :param is_success:
    :type is_success: bool
    :param user_display_name:
    :type user_display_name: str
    :param user_principal_name:
    :type user_principal_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'auth_method': {'key': 'authMethod', 'type': 'str'},
        'event_date_time': {'key': 'eventDateTime', 'type': 'iso-8601'},
        'failure_reason': {'key': 'failureReason', 'type': 'str'},
        'feature': {'key': 'feature', 'type': 'str'},
        'is_success': {'key': 'isSuccess', 'type': 'bool'},
        'user_display_name': {'key': 'userDisplayName', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphusercredentialusagedetails, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.auth_method = kwargs.get('auth_method', None)
        self.event_date_time = kwargs.get('event_date_time', None)
        self.failure_reason = kwargs.get('failure_reason', None)
        self.feature = kwargs.get('feature', None)
        self.is_success = kwargs.get('is_success', None)
        self.user_display_name = kwargs.get('user_display_name', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class microsoftgraphuseridentity(microsoftgraphidentity):
    """userIdentity.

    :param display_name: The identity's display name. Note that this may not always be available or
     up to date. For example, if a user changes their display name, the API may show the new value
     in a future response, but the items associated with the user won't show up as having changed
     when using delta.
    :type display_name: str
    :param id: Unique identifier for the identity.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param ip_address: Indicates the client IP address used by user performing the activity (audit
     log only).
    :type ip_address: str
    :param user_principal_name: The userPrincipalName attribute of the user.
    :type user_principal_name: str
    """

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphuseridentity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class microsoftgraphuserprintusagesummary(msrest.serialization.Model):
    """userPrintUsageSummary.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param completed_job_count:
    :type completed_job_count: int
    :param incomplete_job_count:
    :type incomplete_job_count: int
    :param user: identity.
    :type user: ~devices_cloud_print.models.microsoftgraphidentity
    :param user_display_name:
    :type user_display_name: str
    :param user_principal_name:
    :type user_principal_name: str
    """

    _validation = {
        'completed_job_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'incomplete_job_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'completed_job_count': {'key': 'completedJobCount', 'type': 'int'},
        'incomplete_job_count': {'key': 'incompleteJobCount', 'type': 'int'},
        'user': {'key': 'user', 'type': 'microsoftgraphidentity'},
        'user_display_name': {'key': 'userDisplayName', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphuserprintusagesummary, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.completed_job_count = kwargs.get('completed_job_count', None)
        self.incomplete_job_count = kwargs.get('incomplete_job_count', None)
        self.user = kwargs.get('user', None)
        self.user_display_name = kwargs.get('user_display_name', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class odataerror(msrest.serialization.Model):
    """odataerror.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error: Required.
    :type error: ~devices_cloud_print.models.odataerrormain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'error': {'key': 'error', 'type': 'odataerrormain'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(odataerror, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.error = kwargs['error']


class odataerrordetail(msrest.serialization.Model):
    """odataerrordetail.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(odataerrordetail, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)


class odataerrormain(msrest.serialization.Model):
    """odataerrormain.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~devices_cloud_print.models.odataerrordetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: dict[str, object]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[odataerrordetail]'},
        'innererror': {'key': 'innererror', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(odataerrormain, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)


class paths18vwyqhprintprintersmicrosoftgraphcreatepostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths18vwyqhprintprintersmicrosoftgraphcreatepostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    :param manufacturer:
    :type manufacturer: str
    :param model:
    :type model: str
    :param physical_device_id:
    :type physical_device_id: str
    :param has_physical_device:
    :type has_physical_device: bool
    :param certificate_signing_request: printCertificateSigningRequest.
    :type certificate_signing_request:
     ~devices_cloud_print.models.microsoftgraphprintcertificatesigningrequest
    :param connector_id:
    :type connector_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'model': {'key': 'model', 'type': 'str'},
        'physical_device_id': {'key': 'physicalDeviceId', 'type': 'str'},
        'has_physical_device': {'key': 'hasPhysicalDevice', 'type': 'bool'},
        'certificate_signing_request': {'key': 'certificateSigningRequest', 'type': 'microsoftgraphprintcertificatesigningrequest'},
        'connector_id': {'key': 'connectorId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths18vwyqhprintprintersmicrosoftgraphcreatepostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.manufacturer = kwargs.get('manufacturer', None)
        self.model = kwargs.get('model', None)
        self.physical_device_id = kwargs.get('physical_device_id', None)
        self.has_physical_device = kwargs.get('has_physical_device', False)
        self.certificate_signing_request = kwargs.get('certificate_signing_request', None)
        self.connector_id = kwargs.get('connector_id', None)
