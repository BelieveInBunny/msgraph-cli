# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._devices_cloud_print_enums import *


class CollectionOfLinksOfPrintConnector(msrest.serialization.Model):
    """Collection of links of printConnector.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List[str]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfLinksOfPrintConnector, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfLinksOfPrinterShare(msrest.serialization.Model):
    """Collection of links of printerShare.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List[str]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfLinksOfPrinterShare, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrintConnector(msrest.serialization.Model):
    """Collection of printConnector.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.MicrosoftGraphPrintConnector]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrintConnector]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphPrintConnector"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrintConnector, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrintConnector0(msrest.serialization.Model):
    """Collection of printConnector.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.MicrosoftGraphPrintConnector]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrintConnector]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphPrintConnector"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrintConnector0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrinter(msrest.serialization.Model):
    """Collection of printer.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.MicrosoftGraphPrinter]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrinter]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphPrinter"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrinter, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrinterShare(msrest.serialization.Model):
    """Collection of printerShare.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.MicrosoftGraphPrinterShare]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrinterShare]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphPrinterShare"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrinterShare, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrinterShare0(msrest.serialization.Model):
    """Collection of printerShare.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.MicrosoftGraphPrinterShare]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrinterShare]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphPrinterShare"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrinterShare0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrinterShare1(msrest.serialization.Model):
    """Collection of printerShare.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.MicrosoftGraphPrinterShare]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrinterShare]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphPrinterShare"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrinterShare1, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrintIdentity(msrest.serialization.Model):
    """Collection of printIdentity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.MicrosoftGraphPrintIdentity]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrintIdentity]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphPrintIdentity"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrintIdentity, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrintIdentity0(msrest.serialization.Model):
    """Collection of printIdentity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.MicrosoftGraphPrintIdentity]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrintIdentity]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphPrintIdentity"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrintIdentity0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrintIdentity1(msrest.serialization.Model):
    """Collection of printIdentity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.MicrosoftGraphPrintIdentity]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrintIdentity]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphPrintIdentity"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrintIdentity1, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrintOperation(msrest.serialization.Model):
    """Collection of printOperation.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.MicrosoftGraphPrintOperation]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrintOperation]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphPrintOperation"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrintOperation, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrintService(msrest.serialization.Model):
    """Collection of printService.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.MicrosoftGraphPrintService]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrintService]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphPrintService"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrintService, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrintServiceEndpoint(msrest.serialization.Model):
    """Collection of printServiceEndpoint.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.MicrosoftGraphPrintServiceEndpoint]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrintServiceEndpoint]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphPrintServiceEndpoint"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrintServiceEndpoint, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrintTask(msrest.serialization.Model):
    """Collection of printTask.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.MicrosoftGraphPrintTask]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrintTask]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphPrintTask"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrintTask, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrintTaskDefinition(msrest.serialization.Model):
    """Collection of printTaskDefinition.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.MicrosoftGraphPrintTaskDefinition]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrintTaskDefinition]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphPrintTaskDefinition"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrintTaskDefinition, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrintTaskTrigger(msrest.serialization.Model):
    """Collection of printTaskTrigger.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.MicrosoftGraphPrintTaskTrigger]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrintTaskTrigger]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphPrintTaskTrigger"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrintTaskTrigger, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrintUserIdentity(msrest.serialization.Model):
    """Collection of printUserIdentity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.MicrosoftGraphPrintUserIdentity]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrintUserIdentity]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphPrintUserIdentity"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrintUserIdentity, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrintUserIdentity0(msrest.serialization.Model):
    """Collection of printUserIdentity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.MicrosoftGraphPrintUserIdentity]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrintUserIdentity]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphPrintUserIdentity"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrintUserIdentity0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrintUserIdentity1(msrest.serialization.Model):
    """Collection of printUserIdentity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.MicrosoftGraphPrintUserIdentity]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrintUserIdentity]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphPrintUserIdentity"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrintUserIdentity1, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfReportRoot(msrest.serialization.Model):
    """Collection of reportRoot.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_cloud_print.models.MicrosoftGraphReportRoot]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphReportRoot]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphReportRoot"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfReportRoot, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class MicrosoftGraphAppIdentity(msrest.serialization.Model):
    """appIdentity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param app_id: Refers to the Unique GUID representing Application Id in the Azure Active
     Directory.
    :type app_id: str
    :param display_name: Refers to the Application Name displayed in the Azure Portal.
    :type display_name: str
    :param service_principal_id: Refers to the Unique GUID indicating Service Principal Id in Azure
     Active Directory for the corresponding App.
    :type service_principal_id: str
    :param service_principal_name: Refers to the Service Principal Name is the Application name in
     the tenant.
    :type service_principal_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'service_principal_id': {'key': 'servicePrincipalId', 'type': 'str'},
        'service_principal_name': {'key': 'servicePrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        app_id: Optional[str] = None,
        display_name: Optional[str] = None,
        service_principal_id: Optional[str] = None,
        service_principal_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphAppIdentity, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.app_id = app_id
        self.display_name = display_name
        self.service_principal_id = service_principal_id
        self.service_principal_name = service_principal_name


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.id = id


class MicrosoftGraphApplicationSignInDetailedSummary(MicrosoftGraphEntity):
    """applicationSignInDetailedSummary.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param aggregated_event_date_time:
    :type aggregated_event_date_time: ~datetime.datetime
    :param app_display_name:
    :type app_display_name: str
    :param app_id:
    :type app_id: str
    :param sign_in_count:
    :type sign_in_count: long
    :param status: signInStatus.
    :type status: ~devices_cloud_print.models.MicrosoftGraphSignInStatus
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'aggregated_event_date_time': {'key': 'aggregatedEventDateTime', 'type': 'iso-8601'},
        'app_display_name': {'key': 'appDisplayName', 'type': 'str'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'sign_in_count': {'key': 'signInCount', 'type': 'long'},
        'status': {'key': 'status', 'type': 'MicrosoftGraphSignInStatus'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        aggregated_event_date_time: Optional[datetime.datetime] = None,
        app_display_name: Optional[str] = None,
        app_id: Optional[str] = None,
        sign_in_count: Optional[int] = None,
        status: Optional["MicrosoftGraphSignInStatus"] = None,
        **kwargs
    ):
        super(MicrosoftGraphApplicationSignInDetailedSummary, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.aggregated_event_date_time = aggregated_event_date_time
        self.app_display_name = app_display_name
        self.app_id = app_id
        self.sign_in_count = sign_in_count
        self.status = status


class MicrosoftGraphArchivedPrintJob(msrest.serialization.Model):
    """archivedPrintJob.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param acquired_by_printer:
    :type acquired_by_printer: bool
    :param acquired_date_time:
    :type acquired_date_time: ~datetime.datetime
    :param black_and_white_page_count:
    :type black_and_white_page_count: int
    :param color_page_count:
    :type color_page_count: int
    :param completion_date_time:
    :type completion_date_time: ~datetime.datetime
    :param copies_printed:
    :type copies_printed: int
    :param created_by: userIdentity.
    :type created_by: ~devices_cloud_print.models.MicrosoftGraphUserIdentity
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param duplex_page_count:
    :type duplex_page_count: int
    :param id:
    :type id: str
    :param page_count:
    :type page_count: int
    :param printer_id:
    :type printer_id: str
    :param processing_state:  Possible values include: "unknown", "pending", "processing",
     "paused", "stopped", "completed", "canceled", "aborted".
    :type processing_state: str or
     ~devices_cloud_print.models.MicrosoftGraphPrintJobProcessingState
    :param simplex_page_count:
    :type simplex_page_count: int
    """

    _validation = {
        'black_and_white_page_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'color_page_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'copies_printed': {'maximum': 2147483647, 'minimum': -2147483648},
        'duplex_page_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'page_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'simplex_page_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'acquired_by_printer': {'key': 'acquiredByPrinter', 'type': 'bool'},
        'acquired_date_time': {'key': 'acquiredDateTime', 'type': 'iso-8601'},
        'black_and_white_page_count': {'key': 'blackAndWhitePageCount', 'type': 'int'},
        'color_page_count': {'key': 'colorPageCount', 'type': 'int'},
        'completion_date_time': {'key': 'completionDateTime', 'type': 'iso-8601'},
        'copies_printed': {'key': 'copiesPrinted', 'type': 'int'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphUserIdentity'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'duplex_page_count': {'key': 'duplexPageCount', 'type': 'int'},
        'id': {'key': 'id', 'type': 'str'},
        'page_count': {'key': 'pageCount', 'type': 'int'},
        'printer_id': {'key': 'printerId', 'type': 'str'},
        'processing_state': {'key': 'processingState', 'type': 'str'},
        'simplex_page_count': {'key': 'simplexPageCount', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        acquired_by_printer: Optional[bool] = None,
        acquired_date_time: Optional[datetime.datetime] = None,
        black_and_white_page_count: Optional[int] = None,
        color_page_count: Optional[int] = None,
        completion_date_time: Optional[datetime.datetime] = None,
        copies_printed: Optional[int] = None,
        created_by: Optional["MicrosoftGraphUserIdentity"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        duplex_page_count: Optional[int] = None,
        id: Optional[str] = None,
        page_count: Optional[int] = None,
        printer_id: Optional[str] = None,
        processing_state: Optional[Union[str, "MicrosoftGraphPrintJobProcessingState"]] = None,
        simplex_page_count: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphArchivedPrintJob, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.acquired_by_printer = acquired_by_printer
        self.acquired_date_time = acquired_date_time
        self.black_and_white_page_count = black_and_white_page_count
        self.color_page_count = color_page_count
        self.completion_date_time = completion_date_time
        self.copies_printed = copies_printed
        self.created_by = created_by
        self.created_date_time = created_date_time
        self.duplex_page_count = duplex_page_count
        self.id = id
        self.page_count = page_count
        self.printer_id = printer_id
        self.processing_state = processing_state
        self.simplex_page_count = simplex_page_count


class MicrosoftGraphCredentialUserRegistrationDetails(MicrosoftGraphEntity):
    """credentialUserRegistrationDetails.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param auth_methods:
    :type auth_methods: list[str or
     ~devices_cloud_print.models.MicrosoftGraphRegistrationAuthMethod]
    :param is_capable:
    :type is_capable: bool
    :param is_enabled:
    :type is_enabled: bool
    :param is_mfa_registered:
    :type is_mfa_registered: bool
    :param is_registered:
    :type is_registered: bool
    :param user_display_name:
    :type user_display_name: str
    :param user_principal_name:
    :type user_principal_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'auth_methods': {'key': 'authMethods', 'type': '[str]'},
        'is_capable': {'key': 'isCapable', 'type': 'bool'},
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
        'is_mfa_registered': {'key': 'isMfaRegistered', 'type': 'bool'},
        'is_registered': {'key': 'isRegistered', 'type': 'bool'},
        'user_display_name': {'key': 'userDisplayName', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        auth_methods: Optional[List[Union[str, "MicrosoftGraphRegistrationAuthMethod"]]] = None,
        is_capable: Optional[bool] = None,
        is_enabled: Optional[bool] = None,
        is_mfa_registered: Optional[bool] = None,
        is_registered: Optional[bool] = None,
        user_display_name: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphCredentialUserRegistrationDetails, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.auth_methods = auth_methods
        self.is_capable = is_capable
        self.is_enabled = is_enabled
        self.is_mfa_registered = is_mfa_registered
        self.is_registered = is_registered
        self.user_display_name = user_display_name
        self.user_principal_name = user_principal_name


class MicrosoftGraphDeviceHealth(msrest.serialization.Model):
    """deviceHealth.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param last_connection_time:
    :type last_connection_time: ~datetime.datetime
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'last_connection_time': {'key': 'lastConnectionTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        last_connection_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphDeviceHealth, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.last_connection_time = last_connection_time


class MicrosoftGraphDirectoryObject(MicrosoftGraphEntity):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        deleted_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphDirectoryObject, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.deleted_date_time = deleted_date_time


class MicrosoftGraphGroupPrintUsageSummary(msrest.serialization.Model):
    """groupPrintUsageSummary.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param completed_job_count:
    :type completed_job_count: int
    :param group: identity.
    :type group: ~devices_cloud_print.models.MicrosoftGraphIdentity
    :param group_display_name:
    :type group_display_name: str
    :param group_mail:
    :type group_mail: str
    :param incomplete_job_count:
    :type incomplete_job_count: int
    """

    _validation = {
        'completed_job_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'incomplete_job_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'completed_job_count': {'key': 'completedJobCount', 'type': 'int'},
        'group': {'key': 'group', 'type': 'MicrosoftGraphIdentity'},
        'group_display_name': {'key': 'groupDisplayName', 'type': 'str'},
        'group_mail': {'key': 'groupMail', 'type': 'str'},
        'incomplete_job_count': {'key': 'incompleteJobCount', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        completed_job_count: Optional[int] = None,
        group: Optional["MicrosoftGraphIdentity"] = None,
        group_display_name: Optional[str] = None,
        group_mail: Optional[str] = None,
        incomplete_job_count: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphGroupPrintUsageSummary, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.completed_job_count = completed_job_count
        self.group = group
        self.group_display_name = group_display_name
        self.group_mail = group_mail
        self.incomplete_job_count = incomplete_job_count


class MicrosoftGraphIdentity(msrest.serialization.Model):
    """identity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The identity's display name. Note that this may not always be available or
     up to date. For example, if a user changes their display name, the API may show the new value
     in a future response, but the items associated with the user won't show up as having changed
     when using delta.
    :type display_name: str
    :param id: Unique identifier for the identity.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        display_name: Optional[str] = None,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphIdentity, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.display_name = display_name
        self.id = id


class MicrosoftGraphIntegerRange(msrest.serialization.Model):
    """integerRange.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param end:
    :type end: long
    :param maximum:
    :type maximum: long
    :param minimum:
    :type minimum: long
    :param start:
    :type start: long
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'end': {'key': 'end', 'type': 'long'},
        'maximum': {'key': 'maximum', 'type': 'long'},
        'minimum': {'key': 'minimum', 'type': 'long'},
        'start': {'key': 'start', 'type': 'long'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        end: Optional[int] = None,
        maximum: Optional[int] = None,
        minimum: Optional[int] = None,
        start: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphIntegerRange, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.end = end
        self.maximum = maximum
        self.minimum = minimum
        self.start = start


class MicrosoftGraphOverallPrintUsageSummary(msrest.serialization.Model):
    """overallPrintUsageSummary.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param active_printers_count:
    :type active_printers_count: int
    :param active_users_count:
    :type active_users_count: int
    :param days_in_period:
    :type days_in_period: int
    :param top_printers:
    :type top_printers: list[~devices_cloud_print.models.MicrosoftGraphPrinterUsageSummary]
    :param top_users:
    :type top_users: list[~devices_cloud_print.models.MicrosoftGraphUserPrintUsageSummary]
    :param total_incomplete_jobs:
    :type total_incomplete_jobs: int
    :param total_jobs_processed:
    :type total_jobs_processed: int
    """

    _validation = {
        'active_printers_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'active_users_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'days_in_period': {'maximum': 2147483647, 'minimum': -2147483648},
        'total_incomplete_jobs': {'maximum': 2147483647, 'minimum': -2147483648},
        'total_jobs_processed': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'active_printers_count': {'key': 'activePrintersCount', 'type': 'int'},
        'active_users_count': {'key': 'activeUsersCount', 'type': 'int'},
        'days_in_period': {'key': 'daysInPeriod', 'type': 'int'},
        'top_printers': {'key': 'topPrinters', 'type': '[MicrosoftGraphPrinterUsageSummary]'},
        'top_users': {'key': 'topUsers', 'type': '[MicrosoftGraphUserPrintUsageSummary]'},
        'total_incomplete_jobs': {'key': 'totalIncompleteJobs', 'type': 'int'},
        'total_jobs_processed': {'key': 'totalJobsProcessed', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        active_printers_count: Optional[int] = None,
        active_users_count: Optional[int] = None,
        days_in_period: Optional[int] = None,
        top_printers: Optional[List["MicrosoftGraphPrinterUsageSummary"]] = None,
        top_users: Optional[List["MicrosoftGraphUserPrintUsageSummary"]] = None,
        total_incomplete_jobs: Optional[int] = None,
        total_jobs_processed: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphOverallPrintUsageSummary, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.active_printers_count = active_printers_count
        self.active_users_count = active_users_count
        self.days_in_period = days_in_period
        self.top_printers = top_printers
        self.top_users = top_users
        self.total_incomplete_jobs = total_incomplete_jobs
        self.total_jobs_processed = total_jobs_processed


class MicrosoftGraphPrint(msrest.serialization.Model):
    """print.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param connectors:
    :type connectors: list[~devices_cloud_print.models.MicrosoftGraphPrintConnector]
    :param operations:
    :type operations: list[~devices_cloud_print.models.MicrosoftGraphPrintOperation]
    :param printers:
    :type printers: list[~devices_cloud_print.models.MicrosoftGraphPrinter]
    :param printer_shares:
    :type printer_shares: list[~devices_cloud_print.models.MicrosoftGraphPrinterShare]
    :param reports:
    :type reports: list[~devices_cloud_print.models.MicrosoftGraphReportRoot]
    :param services:
    :type services: list[~devices_cloud_print.models.MicrosoftGraphPrintService]
    :param shares:
    :type shares: list[~devices_cloud_print.models.MicrosoftGraphPrinterShare]
    :param task_definitions:
    :type task_definitions: list[~devices_cloud_print.models.MicrosoftGraphPrintTaskDefinition]
    :param document_conversion_enabled:
    :type document_conversion_enabled: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'connectors': {'key': 'connectors', 'type': '[MicrosoftGraphPrintConnector]'},
        'operations': {'key': 'operations', 'type': '[MicrosoftGraphPrintOperation]'},
        'printers': {'key': 'printers', 'type': '[MicrosoftGraphPrinter]'},
        'printer_shares': {'key': 'printerShares', 'type': '[MicrosoftGraphPrinterShare]'},
        'reports': {'key': 'reports', 'type': '[MicrosoftGraphReportRoot]'},
        'services': {'key': 'services', 'type': '[MicrosoftGraphPrintService]'},
        'shares': {'key': 'shares', 'type': '[MicrosoftGraphPrinterShare]'},
        'task_definitions': {'key': 'taskDefinitions', 'type': '[MicrosoftGraphPrintTaskDefinition]'},
        'document_conversion_enabled': {'key': 'settings.documentConversionEnabled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        connectors: Optional[List["MicrosoftGraphPrintConnector"]] = None,
        operations: Optional[List["MicrosoftGraphPrintOperation"]] = None,
        printers: Optional[List["MicrosoftGraphPrinter"]] = None,
        printer_shares: Optional[List["MicrosoftGraphPrinterShare"]] = None,
        reports: Optional[List["MicrosoftGraphReportRoot"]] = None,
        services: Optional[List["MicrosoftGraphPrintService"]] = None,
        shares: Optional[List["MicrosoftGraphPrinterShare"]] = None,
        task_definitions: Optional[List["MicrosoftGraphPrintTaskDefinition"]] = None,
        document_conversion_enabled: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrint, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.connectors = connectors
        self.operations = operations
        self.printers = printers
        self.printer_shares = printer_shares
        self.reports = reports
        self.services = services
        self.shares = shares
        self.task_definitions = task_definitions
        self.document_conversion_enabled = document_conversion_enabled


class MicrosoftGraphPrintCertificateSigningRequest(msrest.serialization.Model):
    """printCertificateSigningRequest.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content:
    :type content: str
    :param transport_key:
    :type transport_key: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'content': {'key': 'content', 'type': 'str'},
        'transport_key': {'key': 'transportKey', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        content: Optional[str] = None,
        transport_key: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintCertificateSigningRequest, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.content = content
        self.transport_key = transport_key


class MicrosoftGraphPrintConnector(MicrosoftGraphEntity):
    """printConnector.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param app_version:
    :type app_version: str
    :param display_name:
    :type display_name: str
    :param fully_qualified_domain_name:
    :type fully_qualified_domain_name: str
    :param location: printerLocation.
    :type location: ~devices_cloud_print.models.MicrosoftGraphPrinterLocation
    :param name:
    :type name: str
    :param operating_system:
    :type operating_system: str
    :param registered_date_time:
    :type registered_date_time: ~datetime.datetime
    :param last_connection_time:
    :type last_connection_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'app_version': {'key': 'appVersion', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'fully_qualified_domain_name': {'key': 'fullyQualifiedDomainName', 'type': 'str'},
        'location': {'key': 'location', 'type': 'MicrosoftGraphPrinterLocation'},
        'name': {'key': 'name', 'type': 'str'},
        'operating_system': {'key': 'operatingSystem', 'type': 'str'},
        'registered_date_time': {'key': 'registeredDateTime', 'type': 'iso-8601'},
        'last_connection_time': {'key': 'deviceHealth.lastConnectionTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        app_version: Optional[str] = None,
        display_name: Optional[str] = None,
        fully_qualified_domain_name: Optional[str] = None,
        location: Optional["MicrosoftGraphPrinterLocation"] = None,
        name: Optional[str] = None,
        operating_system: Optional[str] = None,
        registered_date_time: Optional[datetime.datetime] = None,
        last_connection_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintConnector, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.app_version = app_version
        self.display_name = display_name
        self.fully_qualified_domain_name = fully_qualified_domain_name
        self.location = location
        self.name = name
        self.operating_system = operating_system
        self.registered_date_time = registered_date_time
        self.last_connection_time = last_connection_time


class MicrosoftGraphPrintDocument(MicrosoftGraphEntity):
    """printDocument.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param configuration: printerDocumentConfiguration.
    :type configuration: ~devices_cloud_print.models.MicrosoftGraphPrinterDocumentConfiguration
    :param content_type:
    :type content_type: str
    :param display_name:
    :type display_name: str
    :param size:
    :type size: long
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'configuration': {'key': 'configuration', 'type': 'MicrosoftGraphPrinterDocumentConfiguration'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'size': {'key': 'size', 'type': 'long'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        configuration: Optional["MicrosoftGraphPrinterDocumentConfiguration"] = None,
        content_type: Optional[str] = None,
        display_name: Optional[str] = None,
        size: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintDocument, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.configuration = configuration
        self.content_type = content_type
        self.display_name = display_name
        self.size = size


class MicrosoftGraphPrinterBase(MicrosoftGraphEntity):
    """printerBase.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param defaults: printerDefaults.
    :type defaults: ~devices_cloud_print.models.MicrosoftGraphPrinterDefaults
    :param display_name:
    :type display_name: str
    :param is_accepting_jobs:
    :type is_accepting_jobs: bool
    :param location: printerLocation.
    :type location: ~devices_cloud_print.models.MicrosoftGraphPrinterLocation
    :param manufacturer:
    :type manufacturer: str
    :param model:
    :type model: str
    :param name:
    :type name: str
    :param status: printerStatus.
    :type status: ~devices_cloud_print.models.MicrosoftGraphPrinterStatus
    :param jobs:
    :type jobs: list[~devices_cloud_print.models.MicrosoftGraphPrintJob]
    :param bottom_margins:
    :type bottom_margins: list[int]
    :param collation:
    :type collation: bool
    :param color_modes:
    :type color_modes: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintColorMode]
    :param content_types:
    :type content_types: list[str]
    :param copies_per_job: integerRange.
    :type copies_per_job: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
    :param dpis:
    :type dpis: list[int]
    :param duplex_modes:
    :type duplex_modes: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintDuplexMode]
    :param feed_directions:
    :type feed_directions: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrinterFeedDirection]
    :param feed_orientations:
    :type feed_orientations: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrinterFeedOrientation]
    :param finishings:
    :type finishings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
    :param input_bins:
    :type input_bins: list[str]
    :param is_color_printing_supported:
    :type is_color_printing_supported: bool
    :param is_page_range_supported:
    :type is_page_range_supported: bool
    :param left_margins:
    :type left_margins: list[int]
    :param media_colors:
    :type media_colors: list[str]
    :param media_sizes:
    :type media_sizes: list[str]
    :param media_types:
    :type media_types: list[str]
    :param multipage_layouts:
    :type multipage_layouts: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintMultipageLayout]
    :param orientations:
    :type orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintOrientation]
    :param output_bins:
    :type output_bins: list[str]
    :param pages_per_sheet:
    :type pages_per_sheet: list[int]
    :param qualities:
    :type qualities: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintQuality]
    :param right_margins:
    :type right_margins: list[int]
    :param scalings:
    :type scalings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintScaling]
    :param supported_color_configurations:
    :type supported_color_configurations: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintColorConfiguration]
    :param supported_copies_per_job: integerRange.
    :type supported_copies_per_job: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
    :param supported_document_mime_types:
    :type supported_document_mime_types: list[str]
    :param supported_duplex_configurations:
    :type supported_duplex_configurations: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintDuplexConfiguration]
    :param supported_finishings:
    :type supported_finishings: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
    :param supported_media_colors:
    :type supported_media_colors: list[str]
    :param supported_media_sizes:
    :type supported_media_sizes: list[str]
    :param supported_media_types:
    :type supported_media_types: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintMediaType]
    :param supported_orientations:
    :type supported_orientations: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintOrientation]
    :param supported_output_bins:
    :type supported_output_bins: list[str]
    :param supported_pages_per_sheet: integerRange.
    :type supported_pages_per_sheet: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
    :param supported_presentation_directions:
    :type supported_presentation_directions: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintPresentationDirection]
    :param supported_print_qualities:
    :type supported_print_qualities: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintQuality]
    :param supports_fit_pdf_to_page:
    :type supports_fit_pdf_to_page: bool
    :param top_margins:
    :type top_margins: list[int]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'defaults': {'key': 'defaults', 'type': 'MicrosoftGraphPrinterDefaults'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_accepting_jobs': {'key': 'isAcceptingJobs', 'type': 'bool'},
        'location': {'key': 'location', 'type': 'MicrosoftGraphPrinterLocation'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'model': {'key': 'model', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'MicrosoftGraphPrinterStatus'},
        'jobs': {'key': 'jobs', 'type': '[MicrosoftGraphPrintJob]'},
        'bottom_margins': {'key': 'capabilities.bottomMargins', 'type': '[int]'},
        'collation': {'key': 'capabilities.collation', 'type': 'bool'},
        'color_modes': {'key': 'capabilities.colorModes', 'type': '[str]'},
        'content_types': {'key': 'capabilities.contentTypes', 'type': '[str]'},
        'copies_per_job': {'key': 'capabilities.copiesPerJob', 'type': 'MicrosoftGraphIntegerRange'},
        'dpis': {'key': 'capabilities.dpis', 'type': '[int]'},
        'duplex_modes': {'key': 'capabilities.duplexModes', 'type': '[str]'},
        'feed_directions': {'key': 'capabilities.feedDirections', 'type': '[str]'},
        'feed_orientations': {'key': 'capabilities.feedOrientations', 'type': '[str]'},
        'finishings': {'key': 'capabilities.finishings', 'type': '[str]'},
        'input_bins': {'key': 'capabilities.inputBins', 'type': '[str]'},
        'is_color_printing_supported': {'key': 'capabilities.isColorPrintingSupported', 'type': 'bool'},
        'is_page_range_supported': {'key': 'capabilities.isPageRangeSupported', 'type': 'bool'},
        'left_margins': {'key': 'capabilities.leftMargins', 'type': '[int]'},
        'media_colors': {'key': 'capabilities.mediaColors', 'type': '[str]'},
        'media_sizes': {'key': 'capabilities.mediaSizes', 'type': '[str]'},
        'media_types': {'key': 'capabilities.mediaTypes', 'type': '[str]'},
        'multipage_layouts': {'key': 'capabilities.multipageLayouts', 'type': '[str]'},
        'orientations': {'key': 'capabilities.orientations', 'type': '[str]'},
        'output_bins': {'key': 'capabilities.outputBins', 'type': '[str]'},
        'pages_per_sheet': {'key': 'capabilities.pagesPerSheet', 'type': '[int]'},
        'qualities': {'key': 'capabilities.qualities', 'type': '[str]'},
        'right_margins': {'key': 'capabilities.rightMargins', 'type': '[int]'},
        'scalings': {'key': 'capabilities.scalings', 'type': '[str]'},
        'supported_color_configurations': {'key': 'capabilities.supportedColorConfigurations', 'type': '[str]'},
        'supported_copies_per_job': {'key': 'capabilities.supportedCopiesPerJob', 'type': 'MicrosoftGraphIntegerRange'},
        'supported_document_mime_types': {'key': 'capabilities.supportedDocumentMimeTypes', 'type': '[str]'},
        'supported_duplex_configurations': {'key': 'capabilities.supportedDuplexConfigurations', 'type': '[str]'},
        'supported_finishings': {'key': 'capabilities.supportedFinishings', 'type': '[str]'},
        'supported_media_colors': {'key': 'capabilities.supportedMediaColors', 'type': '[str]'},
        'supported_media_sizes': {'key': 'capabilities.supportedMediaSizes', 'type': '[str]'},
        'supported_media_types': {'key': 'capabilities.supportedMediaTypes', 'type': '[str]'},
        'supported_orientations': {'key': 'capabilities.supportedOrientations', 'type': '[str]'},
        'supported_output_bins': {'key': 'capabilities.supportedOutputBins', 'type': '[str]'},
        'supported_pages_per_sheet': {'key': 'capabilities.supportedPagesPerSheet', 'type': 'MicrosoftGraphIntegerRange'},
        'supported_presentation_directions': {'key': 'capabilities.supportedPresentationDirections', 'type': '[str]'},
        'supported_print_qualities': {'key': 'capabilities.supportedPrintQualities', 'type': '[str]'},
        'supports_fit_pdf_to_page': {'key': 'capabilities.supportsFitPdfToPage', 'type': 'bool'},
        'top_margins': {'key': 'capabilities.topMargins', 'type': '[int]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        defaults: Optional["MicrosoftGraphPrinterDefaults"] = None,
        display_name: Optional[str] = None,
        is_accepting_jobs: Optional[bool] = None,
        location: Optional["MicrosoftGraphPrinterLocation"] = None,
        manufacturer: Optional[str] = None,
        model: Optional[str] = None,
        name: Optional[str] = None,
        status: Optional["MicrosoftGraphPrinterStatus"] = None,
        jobs: Optional[List["MicrosoftGraphPrintJob"]] = None,
        bottom_margins: Optional[List[int]] = None,
        collation: Optional[bool] = None,
        color_modes: Optional[List[Union[str, "MicrosoftGraphPrintColorMode"]]] = None,
        content_types: Optional[List[str]] = None,
        copies_per_job: Optional["MicrosoftGraphIntegerRange"] = None,
        dpis: Optional[List[int]] = None,
        duplex_modes: Optional[List[Union[str, "MicrosoftGraphPrintDuplexMode"]]] = None,
        feed_directions: Optional[List[Union[str, "MicrosoftGraphPrinterFeedDirection"]]] = None,
        feed_orientations: Optional[List[Union[str, "MicrosoftGraphPrinterFeedOrientation"]]] = None,
        finishings: Optional[List[Union[str, "MicrosoftGraphPrintFinishing"]]] = None,
        input_bins: Optional[List[str]] = None,
        is_color_printing_supported: Optional[bool] = None,
        is_page_range_supported: Optional[bool] = None,
        left_margins: Optional[List[int]] = None,
        media_colors: Optional[List[str]] = None,
        media_sizes: Optional[List[str]] = None,
        media_types: Optional[List[str]] = None,
        multipage_layouts: Optional[List[Union[str, "MicrosoftGraphPrintMultipageLayout"]]] = None,
        orientations: Optional[List[Union[str, "MicrosoftGraphPrintOrientation"]]] = None,
        output_bins: Optional[List[str]] = None,
        pages_per_sheet: Optional[List[int]] = None,
        qualities: Optional[List[Union[str, "MicrosoftGraphPrintQuality"]]] = None,
        right_margins: Optional[List[int]] = None,
        scalings: Optional[List[Union[str, "MicrosoftGraphPrintScaling"]]] = None,
        supported_color_configurations: Optional[List[Union[str, "MicrosoftGraphPrintColorConfiguration"]]] = None,
        supported_copies_per_job: Optional["MicrosoftGraphIntegerRange"] = None,
        supported_document_mime_types: Optional[List[str]] = None,
        supported_duplex_configurations: Optional[List[Union[str, "MicrosoftGraphPrintDuplexConfiguration"]]] = None,
        supported_finishings: Optional[List[Union[str, "MicrosoftGraphPrintFinishing"]]] = None,
        supported_media_colors: Optional[List[str]] = None,
        supported_media_sizes: Optional[List[str]] = None,
        supported_media_types: Optional[List[Union[str, "MicrosoftGraphPrintMediaType"]]] = None,
        supported_orientations: Optional[List[Union[str, "MicrosoftGraphPrintOrientation"]]] = None,
        supported_output_bins: Optional[List[str]] = None,
        supported_pages_per_sheet: Optional["MicrosoftGraphIntegerRange"] = None,
        supported_presentation_directions: Optional[List[Union[str, "MicrosoftGraphPrintPresentationDirection"]]] = None,
        supported_print_qualities: Optional[List[Union[str, "MicrosoftGraphPrintQuality"]]] = None,
        supports_fit_pdf_to_page: Optional[bool] = None,
        top_margins: Optional[List[int]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrinterBase, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.defaults = defaults
        self.display_name = display_name
        self.is_accepting_jobs = is_accepting_jobs
        self.location = location
        self.manufacturer = manufacturer
        self.model = model
        self.name = name
        self.status = status
        self.jobs = jobs
        self.bottom_margins = bottom_margins
        self.collation = collation
        self.color_modes = color_modes
        self.content_types = content_types
        self.copies_per_job = copies_per_job
        self.dpis = dpis
        self.duplex_modes = duplex_modes
        self.feed_directions = feed_directions
        self.feed_orientations = feed_orientations
        self.finishings = finishings
        self.input_bins = input_bins
        self.is_color_printing_supported = is_color_printing_supported
        self.is_page_range_supported = is_page_range_supported
        self.left_margins = left_margins
        self.media_colors = media_colors
        self.media_sizes = media_sizes
        self.media_types = media_types
        self.multipage_layouts = multipage_layouts
        self.orientations = orientations
        self.output_bins = output_bins
        self.pages_per_sheet = pages_per_sheet
        self.qualities = qualities
        self.right_margins = right_margins
        self.scalings = scalings
        self.supported_color_configurations = supported_color_configurations
        self.supported_copies_per_job = supported_copies_per_job
        self.supported_document_mime_types = supported_document_mime_types
        self.supported_duplex_configurations = supported_duplex_configurations
        self.supported_finishings = supported_finishings
        self.supported_media_colors = supported_media_colors
        self.supported_media_sizes = supported_media_sizes
        self.supported_media_types = supported_media_types
        self.supported_orientations = supported_orientations
        self.supported_output_bins = supported_output_bins
        self.supported_pages_per_sheet = supported_pages_per_sheet
        self.supported_presentation_directions = supported_presentation_directions
        self.supported_print_qualities = supported_print_qualities
        self.supports_fit_pdf_to_page = supports_fit_pdf_to_page
        self.top_margins = top_margins


class MicrosoftGraphPrinter(MicrosoftGraphPrinterBase):
    """printer.

    :param id: Read-only.
    :type id: str
    :param defaults: printerDefaults.
    :type defaults: ~devices_cloud_print.models.MicrosoftGraphPrinterDefaults
    :param display_name:
    :type display_name: str
    :param is_accepting_jobs:
    :type is_accepting_jobs: bool
    :param location: printerLocation.
    :type location: ~devices_cloud_print.models.MicrosoftGraphPrinterLocation
    :param manufacturer:
    :type manufacturer: str
    :param model:
    :type model: str
    :param name:
    :type name: str
    :param status: printerStatus.
    :type status: ~devices_cloud_print.models.MicrosoftGraphPrinterStatus
    :param jobs:
    :type jobs: list[~devices_cloud_print.models.MicrosoftGraphPrintJob]
    :param bottom_margins:
    :type bottom_margins: list[int]
    :param collation:
    :type collation: bool
    :param color_modes:
    :type color_modes: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintColorMode]
    :param content_types:
    :type content_types: list[str]
    :param copies_per_job: integerRange.
    :type copies_per_job: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
    :param dpis:
    :type dpis: list[int]
    :param duplex_modes:
    :type duplex_modes: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintDuplexMode]
    :param feed_directions:
    :type feed_directions: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrinterFeedDirection]
    :param feed_orientations:
    :type feed_orientations: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrinterFeedOrientation]
    :param finishings:
    :type finishings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
    :param input_bins:
    :type input_bins: list[str]
    :param is_color_printing_supported:
    :type is_color_printing_supported: bool
    :param is_page_range_supported:
    :type is_page_range_supported: bool
    :param left_margins:
    :type left_margins: list[int]
    :param media_colors:
    :type media_colors: list[str]
    :param media_sizes:
    :type media_sizes: list[str]
    :param media_types:
    :type media_types: list[str]
    :param multipage_layouts:
    :type multipage_layouts: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintMultipageLayout]
    :param orientations:
    :type orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintOrientation]
    :param output_bins:
    :type output_bins: list[str]
    :param pages_per_sheet:
    :type pages_per_sheet: list[int]
    :param qualities:
    :type qualities: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintQuality]
    :param right_margins:
    :type right_margins: list[int]
    :param scalings:
    :type scalings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintScaling]
    :param supported_color_configurations:
    :type supported_color_configurations: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintColorConfiguration]
    :param supported_copies_per_job: integerRange.
    :type supported_copies_per_job: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
    :param supported_document_mime_types:
    :type supported_document_mime_types: list[str]
    :param supported_duplex_configurations:
    :type supported_duplex_configurations: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintDuplexConfiguration]
    :param supported_finishings:
    :type supported_finishings: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
    :param supported_media_colors:
    :type supported_media_colors: list[str]
    :param supported_media_sizes:
    :type supported_media_sizes: list[str]
    :param supported_media_types:
    :type supported_media_types: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintMediaType]
    :param supported_orientations:
    :type supported_orientations: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintOrientation]
    :param supported_output_bins:
    :type supported_output_bins: list[str]
    :param supported_pages_per_sheet: integerRange.
    :type supported_pages_per_sheet: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
    :param supported_presentation_directions:
    :type supported_presentation_directions: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintPresentationDirection]
    :param supported_print_qualities:
    :type supported_print_qualities: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintQuality]
    :param supports_fit_pdf_to_page:
    :type supports_fit_pdf_to_page: bool
    :param top_margins:
    :type top_margins: list[int]
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param accepting_jobs:
    :type accepting_jobs: bool
    :param is_shared:
    :type is_shared: bool
    :param registered_date_time:
    :type registered_date_time: ~datetime.datetime
    :param allowed_groups:
    :type allowed_groups: list[~devices_cloud_print.models.MicrosoftGraphPrintIdentity]
    :param allowed_users:
    :type allowed_users: list[~devices_cloud_print.models.MicrosoftGraphPrintUserIdentity]
    :param connectors:
    :type connectors: list[~devices_cloud_print.models.MicrosoftGraphPrintConnector]
    :param share: printerShare.
    :type share: ~devices_cloud_print.models.MicrosoftGraphPrinterShare
    :param shares:
    :type shares: list[~devices_cloud_print.models.MicrosoftGraphPrinterShare]
    :param task_triggers:
    :type task_triggers: list[~devices_cloud_print.models.MicrosoftGraphPrintTaskTrigger]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'defaults': {'key': 'defaults', 'type': 'MicrosoftGraphPrinterDefaults'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_accepting_jobs': {'key': 'isAcceptingJobs', 'type': 'bool'},
        'location': {'key': 'location', 'type': 'MicrosoftGraphPrinterLocation'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'model': {'key': 'model', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'MicrosoftGraphPrinterStatus'},
        'jobs': {'key': 'jobs', 'type': '[MicrosoftGraphPrintJob]'},
        'bottom_margins': {'key': 'capabilities.bottomMargins', 'type': '[int]'},
        'collation': {'key': 'capabilities.collation', 'type': 'bool'},
        'color_modes': {'key': 'capabilities.colorModes', 'type': '[str]'},
        'content_types': {'key': 'capabilities.contentTypes', 'type': '[str]'},
        'copies_per_job': {'key': 'capabilities.copiesPerJob', 'type': 'MicrosoftGraphIntegerRange'},
        'dpis': {'key': 'capabilities.dpis', 'type': '[int]'},
        'duplex_modes': {'key': 'capabilities.duplexModes', 'type': '[str]'},
        'feed_directions': {'key': 'capabilities.feedDirections', 'type': '[str]'},
        'feed_orientations': {'key': 'capabilities.feedOrientations', 'type': '[str]'},
        'finishings': {'key': 'capabilities.finishings', 'type': '[str]'},
        'input_bins': {'key': 'capabilities.inputBins', 'type': '[str]'},
        'is_color_printing_supported': {'key': 'capabilities.isColorPrintingSupported', 'type': 'bool'},
        'is_page_range_supported': {'key': 'capabilities.isPageRangeSupported', 'type': 'bool'},
        'left_margins': {'key': 'capabilities.leftMargins', 'type': '[int]'},
        'media_colors': {'key': 'capabilities.mediaColors', 'type': '[str]'},
        'media_sizes': {'key': 'capabilities.mediaSizes', 'type': '[str]'},
        'media_types': {'key': 'capabilities.mediaTypes', 'type': '[str]'},
        'multipage_layouts': {'key': 'capabilities.multipageLayouts', 'type': '[str]'},
        'orientations': {'key': 'capabilities.orientations', 'type': '[str]'},
        'output_bins': {'key': 'capabilities.outputBins', 'type': '[str]'},
        'pages_per_sheet': {'key': 'capabilities.pagesPerSheet', 'type': '[int]'},
        'qualities': {'key': 'capabilities.qualities', 'type': '[str]'},
        'right_margins': {'key': 'capabilities.rightMargins', 'type': '[int]'},
        'scalings': {'key': 'capabilities.scalings', 'type': '[str]'},
        'supported_color_configurations': {'key': 'capabilities.supportedColorConfigurations', 'type': '[str]'},
        'supported_copies_per_job': {'key': 'capabilities.supportedCopiesPerJob', 'type': 'MicrosoftGraphIntegerRange'},
        'supported_document_mime_types': {'key': 'capabilities.supportedDocumentMimeTypes', 'type': '[str]'},
        'supported_duplex_configurations': {'key': 'capabilities.supportedDuplexConfigurations', 'type': '[str]'},
        'supported_finishings': {'key': 'capabilities.supportedFinishings', 'type': '[str]'},
        'supported_media_colors': {'key': 'capabilities.supportedMediaColors', 'type': '[str]'},
        'supported_media_sizes': {'key': 'capabilities.supportedMediaSizes', 'type': '[str]'},
        'supported_media_types': {'key': 'capabilities.supportedMediaTypes', 'type': '[str]'},
        'supported_orientations': {'key': 'capabilities.supportedOrientations', 'type': '[str]'},
        'supported_output_bins': {'key': 'capabilities.supportedOutputBins', 'type': '[str]'},
        'supported_pages_per_sheet': {'key': 'capabilities.supportedPagesPerSheet', 'type': 'MicrosoftGraphIntegerRange'},
        'supported_presentation_directions': {'key': 'capabilities.supportedPresentationDirections', 'type': '[str]'},
        'supported_print_qualities': {'key': 'capabilities.supportedPrintQualities', 'type': '[str]'},
        'supports_fit_pdf_to_page': {'key': 'capabilities.supportsFitPdfToPage', 'type': 'bool'},
        'top_margins': {'key': 'capabilities.topMargins', 'type': '[int]'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'accepting_jobs': {'key': 'acceptingJobs', 'type': 'bool'},
        'is_shared': {'key': 'isShared', 'type': 'bool'},
        'registered_date_time': {'key': 'registeredDateTime', 'type': 'iso-8601'},
        'allowed_groups': {'key': 'allowedGroups', 'type': '[MicrosoftGraphPrintIdentity]'},
        'allowed_users': {'key': 'allowedUsers', 'type': '[MicrosoftGraphPrintUserIdentity]'},
        'connectors': {'key': 'connectors', 'type': '[MicrosoftGraphPrintConnector]'},
        'share': {'key': 'share', 'type': 'MicrosoftGraphPrinterShare'},
        'shares': {'key': 'shares', 'type': '[MicrosoftGraphPrinterShare]'},
        'task_triggers': {'key': 'taskTriggers', 'type': '[MicrosoftGraphPrintTaskTrigger]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        defaults: Optional["MicrosoftGraphPrinterDefaults"] = None,
        display_name: Optional[str] = None,
        is_accepting_jobs: Optional[bool] = None,
        location: Optional["MicrosoftGraphPrinterLocation"] = None,
        manufacturer: Optional[str] = None,
        model: Optional[str] = None,
        name: Optional[str] = None,
        status: Optional["MicrosoftGraphPrinterStatus"] = None,
        jobs: Optional[List["MicrosoftGraphPrintJob"]] = None,
        bottom_margins: Optional[List[int]] = None,
        collation: Optional[bool] = None,
        color_modes: Optional[List[Union[str, "MicrosoftGraphPrintColorMode"]]] = None,
        content_types: Optional[List[str]] = None,
        copies_per_job: Optional["MicrosoftGraphIntegerRange"] = None,
        dpis: Optional[List[int]] = None,
        duplex_modes: Optional[List[Union[str, "MicrosoftGraphPrintDuplexMode"]]] = None,
        feed_directions: Optional[List[Union[str, "MicrosoftGraphPrinterFeedDirection"]]] = None,
        feed_orientations: Optional[List[Union[str, "MicrosoftGraphPrinterFeedOrientation"]]] = None,
        finishings: Optional[List[Union[str, "MicrosoftGraphPrintFinishing"]]] = None,
        input_bins: Optional[List[str]] = None,
        is_color_printing_supported: Optional[bool] = None,
        is_page_range_supported: Optional[bool] = None,
        left_margins: Optional[List[int]] = None,
        media_colors: Optional[List[str]] = None,
        media_sizes: Optional[List[str]] = None,
        media_types: Optional[List[str]] = None,
        multipage_layouts: Optional[List[Union[str, "MicrosoftGraphPrintMultipageLayout"]]] = None,
        orientations: Optional[List[Union[str, "MicrosoftGraphPrintOrientation"]]] = None,
        output_bins: Optional[List[str]] = None,
        pages_per_sheet: Optional[List[int]] = None,
        qualities: Optional[List[Union[str, "MicrosoftGraphPrintQuality"]]] = None,
        right_margins: Optional[List[int]] = None,
        scalings: Optional[List[Union[str, "MicrosoftGraphPrintScaling"]]] = None,
        supported_color_configurations: Optional[List[Union[str, "MicrosoftGraphPrintColorConfiguration"]]] = None,
        supported_copies_per_job: Optional["MicrosoftGraphIntegerRange"] = None,
        supported_document_mime_types: Optional[List[str]] = None,
        supported_duplex_configurations: Optional[List[Union[str, "MicrosoftGraphPrintDuplexConfiguration"]]] = None,
        supported_finishings: Optional[List[Union[str, "MicrosoftGraphPrintFinishing"]]] = None,
        supported_media_colors: Optional[List[str]] = None,
        supported_media_sizes: Optional[List[str]] = None,
        supported_media_types: Optional[List[Union[str, "MicrosoftGraphPrintMediaType"]]] = None,
        supported_orientations: Optional[List[Union[str, "MicrosoftGraphPrintOrientation"]]] = None,
        supported_output_bins: Optional[List[str]] = None,
        supported_pages_per_sheet: Optional["MicrosoftGraphIntegerRange"] = None,
        supported_presentation_directions: Optional[List[Union[str, "MicrosoftGraphPrintPresentationDirection"]]] = None,
        supported_print_qualities: Optional[List[Union[str, "MicrosoftGraphPrintQuality"]]] = None,
        supports_fit_pdf_to_page: Optional[bool] = None,
        top_margins: Optional[List[int]] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        accepting_jobs: Optional[bool] = None,
        is_shared: Optional[bool] = None,
        registered_date_time: Optional[datetime.datetime] = None,
        allowed_groups: Optional[List["MicrosoftGraphPrintIdentity"]] = None,
        allowed_users: Optional[List["MicrosoftGraphPrintUserIdentity"]] = None,
        connectors: Optional[List["MicrosoftGraphPrintConnector"]] = None,
        share: Optional["MicrosoftGraphPrinterShare"] = None,
        shares: Optional[List["MicrosoftGraphPrinterShare"]] = None,
        task_triggers: Optional[List["MicrosoftGraphPrintTaskTrigger"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrinter, self).__init__(id=id, defaults=defaults, display_name=display_name, is_accepting_jobs=is_accepting_jobs, location=location, manufacturer=manufacturer, model=model, name=name, status=status, jobs=jobs, bottom_margins=bottom_margins, collation=collation, color_modes=color_modes, content_types=content_types, copies_per_job=copies_per_job, dpis=dpis, duplex_modes=duplex_modes, feed_directions=feed_directions, feed_orientations=feed_orientations, finishings=finishings, input_bins=input_bins, is_color_printing_supported=is_color_printing_supported, is_page_range_supported=is_page_range_supported, left_margins=left_margins, media_colors=media_colors, media_sizes=media_sizes, media_types=media_types, multipage_layouts=multipage_layouts, orientations=orientations, output_bins=output_bins, pages_per_sheet=pages_per_sheet, qualities=qualities, right_margins=right_margins, scalings=scalings, supported_color_configurations=supported_color_configurations, supported_copies_per_job=supported_copies_per_job, supported_document_mime_types=supported_document_mime_types, supported_duplex_configurations=supported_duplex_configurations, supported_finishings=supported_finishings, supported_media_colors=supported_media_colors, supported_media_sizes=supported_media_sizes, supported_media_types=supported_media_types, supported_orientations=supported_orientations, supported_output_bins=supported_output_bins, supported_pages_per_sheet=supported_pages_per_sheet, supported_presentation_directions=supported_presentation_directions, supported_print_qualities=supported_print_qualities, supports_fit_pdf_to_page=supports_fit_pdf_to_page, top_margins=top_margins, **kwargs)
        self.additional_properties = additional_properties
        self.accepting_jobs = accepting_jobs
        self.is_shared = is_shared
        self.registered_date_time = registered_date_time
        self.allowed_groups = allowed_groups
        self.allowed_users = allowed_users
        self.connectors = connectors
        self.share = share
        self.shares = shares
        self.task_triggers = task_triggers


class MicrosoftGraphPrinterCapabilities(msrest.serialization.Model):
    """printerCapabilities.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param bottom_margins:
    :type bottom_margins: list[int]
    :param collation:
    :type collation: bool
    :param color_modes:
    :type color_modes: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintColorMode]
    :param content_types:
    :type content_types: list[str]
    :param copies_per_job: integerRange.
    :type copies_per_job: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
    :param dpis:
    :type dpis: list[int]
    :param duplex_modes:
    :type duplex_modes: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintDuplexMode]
    :param feed_directions:
    :type feed_directions: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrinterFeedDirection]
    :param feed_orientations:
    :type feed_orientations: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrinterFeedOrientation]
    :param finishings:
    :type finishings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
    :param input_bins:
    :type input_bins: list[str]
    :param is_color_printing_supported:
    :type is_color_printing_supported: bool
    :param is_page_range_supported:
    :type is_page_range_supported: bool
    :param left_margins:
    :type left_margins: list[int]
    :param media_colors:
    :type media_colors: list[str]
    :param media_sizes:
    :type media_sizes: list[str]
    :param media_types:
    :type media_types: list[str]
    :param multipage_layouts:
    :type multipage_layouts: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintMultipageLayout]
    :param orientations:
    :type orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintOrientation]
    :param output_bins:
    :type output_bins: list[str]
    :param pages_per_sheet:
    :type pages_per_sheet: list[int]
    :param qualities:
    :type qualities: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintQuality]
    :param right_margins:
    :type right_margins: list[int]
    :param scalings:
    :type scalings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintScaling]
    :param supported_color_configurations:
    :type supported_color_configurations: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintColorConfiguration]
    :param supported_copies_per_job: integerRange.
    :type supported_copies_per_job: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
    :param supported_document_mime_types:
    :type supported_document_mime_types: list[str]
    :param supported_duplex_configurations:
    :type supported_duplex_configurations: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintDuplexConfiguration]
    :param supported_finishings:
    :type supported_finishings: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
    :param supported_media_colors:
    :type supported_media_colors: list[str]
    :param supported_media_sizes:
    :type supported_media_sizes: list[str]
    :param supported_media_types:
    :type supported_media_types: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintMediaType]
    :param supported_orientations:
    :type supported_orientations: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintOrientation]
    :param supported_output_bins:
    :type supported_output_bins: list[str]
    :param supported_pages_per_sheet: integerRange.
    :type supported_pages_per_sheet: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
    :param supported_presentation_directions:
    :type supported_presentation_directions: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintPresentationDirection]
    :param supported_print_qualities:
    :type supported_print_qualities: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintQuality]
    :param supports_fit_pdf_to_page:
    :type supports_fit_pdf_to_page: bool
    :param top_margins:
    :type top_margins: list[int]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'bottom_margins': {'key': 'bottomMargins', 'type': '[int]'},
        'collation': {'key': 'collation', 'type': 'bool'},
        'color_modes': {'key': 'colorModes', 'type': '[str]'},
        'content_types': {'key': 'contentTypes', 'type': '[str]'},
        'copies_per_job': {'key': 'copiesPerJob', 'type': 'MicrosoftGraphIntegerRange'},
        'dpis': {'key': 'dpis', 'type': '[int]'},
        'duplex_modes': {'key': 'duplexModes', 'type': '[str]'},
        'feed_directions': {'key': 'feedDirections', 'type': '[str]'},
        'feed_orientations': {'key': 'feedOrientations', 'type': '[str]'},
        'finishings': {'key': 'finishings', 'type': '[str]'},
        'input_bins': {'key': 'inputBins', 'type': '[str]'},
        'is_color_printing_supported': {'key': 'isColorPrintingSupported', 'type': 'bool'},
        'is_page_range_supported': {'key': 'isPageRangeSupported', 'type': 'bool'},
        'left_margins': {'key': 'leftMargins', 'type': '[int]'},
        'media_colors': {'key': 'mediaColors', 'type': '[str]'},
        'media_sizes': {'key': 'mediaSizes', 'type': '[str]'},
        'media_types': {'key': 'mediaTypes', 'type': '[str]'},
        'multipage_layouts': {'key': 'multipageLayouts', 'type': '[str]'},
        'orientations': {'key': 'orientations', 'type': '[str]'},
        'output_bins': {'key': 'outputBins', 'type': '[str]'},
        'pages_per_sheet': {'key': 'pagesPerSheet', 'type': '[int]'},
        'qualities': {'key': 'qualities', 'type': '[str]'},
        'right_margins': {'key': 'rightMargins', 'type': '[int]'},
        'scalings': {'key': 'scalings', 'type': '[str]'},
        'supported_color_configurations': {'key': 'supportedColorConfigurations', 'type': '[str]'},
        'supported_copies_per_job': {'key': 'supportedCopiesPerJob', 'type': 'MicrosoftGraphIntegerRange'},
        'supported_document_mime_types': {'key': 'supportedDocumentMimeTypes', 'type': '[str]'},
        'supported_duplex_configurations': {'key': 'supportedDuplexConfigurations', 'type': '[str]'},
        'supported_finishings': {'key': 'supportedFinishings', 'type': '[str]'},
        'supported_media_colors': {'key': 'supportedMediaColors', 'type': '[str]'},
        'supported_media_sizes': {'key': 'supportedMediaSizes', 'type': '[str]'},
        'supported_media_types': {'key': 'supportedMediaTypes', 'type': '[str]'},
        'supported_orientations': {'key': 'supportedOrientations', 'type': '[str]'},
        'supported_output_bins': {'key': 'supportedOutputBins', 'type': '[str]'},
        'supported_pages_per_sheet': {'key': 'supportedPagesPerSheet', 'type': 'MicrosoftGraphIntegerRange'},
        'supported_presentation_directions': {'key': 'supportedPresentationDirections', 'type': '[str]'},
        'supported_print_qualities': {'key': 'supportedPrintQualities', 'type': '[str]'},
        'supports_fit_pdf_to_page': {'key': 'supportsFitPdfToPage', 'type': 'bool'},
        'top_margins': {'key': 'topMargins', 'type': '[int]'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        bottom_margins: Optional[List[int]] = None,
        collation: Optional[bool] = None,
        color_modes: Optional[List[Union[str, "MicrosoftGraphPrintColorMode"]]] = None,
        content_types: Optional[List[str]] = None,
        copies_per_job: Optional["MicrosoftGraphIntegerRange"] = None,
        dpis: Optional[List[int]] = None,
        duplex_modes: Optional[List[Union[str, "MicrosoftGraphPrintDuplexMode"]]] = None,
        feed_directions: Optional[List[Union[str, "MicrosoftGraphPrinterFeedDirection"]]] = None,
        feed_orientations: Optional[List[Union[str, "MicrosoftGraphPrinterFeedOrientation"]]] = None,
        finishings: Optional[List[Union[str, "MicrosoftGraphPrintFinishing"]]] = None,
        input_bins: Optional[List[str]] = None,
        is_color_printing_supported: Optional[bool] = None,
        is_page_range_supported: Optional[bool] = None,
        left_margins: Optional[List[int]] = None,
        media_colors: Optional[List[str]] = None,
        media_sizes: Optional[List[str]] = None,
        media_types: Optional[List[str]] = None,
        multipage_layouts: Optional[List[Union[str, "MicrosoftGraphPrintMultipageLayout"]]] = None,
        orientations: Optional[List[Union[str, "MicrosoftGraphPrintOrientation"]]] = None,
        output_bins: Optional[List[str]] = None,
        pages_per_sheet: Optional[List[int]] = None,
        qualities: Optional[List[Union[str, "MicrosoftGraphPrintQuality"]]] = None,
        right_margins: Optional[List[int]] = None,
        scalings: Optional[List[Union[str, "MicrosoftGraphPrintScaling"]]] = None,
        supported_color_configurations: Optional[List[Union[str, "MicrosoftGraphPrintColorConfiguration"]]] = None,
        supported_copies_per_job: Optional["MicrosoftGraphIntegerRange"] = None,
        supported_document_mime_types: Optional[List[str]] = None,
        supported_duplex_configurations: Optional[List[Union[str, "MicrosoftGraphPrintDuplexConfiguration"]]] = None,
        supported_finishings: Optional[List[Union[str, "MicrosoftGraphPrintFinishing"]]] = None,
        supported_media_colors: Optional[List[str]] = None,
        supported_media_sizes: Optional[List[str]] = None,
        supported_media_types: Optional[List[Union[str, "MicrosoftGraphPrintMediaType"]]] = None,
        supported_orientations: Optional[List[Union[str, "MicrosoftGraphPrintOrientation"]]] = None,
        supported_output_bins: Optional[List[str]] = None,
        supported_pages_per_sheet: Optional["MicrosoftGraphIntegerRange"] = None,
        supported_presentation_directions: Optional[List[Union[str, "MicrosoftGraphPrintPresentationDirection"]]] = None,
        supported_print_qualities: Optional[List[Union[str, "MicrosoftGraphPrintQuality"]]] = None,
        supports_fit_pdf_to_page: Optional[bool] = None,
        top_margins: Optional[List[int]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrinterCapabilities, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.bottom_margins = bottom_margins
        self.collation = collation
        self.color_modes = color_modes
        self.content_types = content_types
        self.copies_per_job = copies_per_job
        self.dpis = dpis
        self.duplex_modes = duplex_modes
        self.feed_directions = feed_directions
        self.feed_orientations = feed_orientations
        self.finishings = finishings
        self.input_bins = input_bins
        self.is_color_printing_supported = is_color_printing_supported
        self.is_page_range_supported = is_page_range_supported
        self.left_margins = left_margins
        self.media_colors = media_colors
        self.media_sizes = media_sizes
        self.media_types = media_types
        self.multipage_layouts = multipage_layouts
        self.orientations = orientations
        self.output_bins = output_bins
        self.pages_per_sheet = pages_per_sheet
        self.qualities = qualities
        self.right_margins = right_margins
        self.scalings = scalings
        self.supported_color_configurations = supported_color_configurations
        self.supported_copies_per_job = supported_copies_per_job
        self.supported_document_mime_types = supported_document_mime_types
        self.supported_duplex_configurations = supported_duplex_configurations
        self.supported_finishings = supported_finishings
        self.supported_media_colors = supported_media_colors
        self.supported_media_sizes = supported_media_sizes
        self.supported_media_types = supported_media_types
        self.supported_orientations = supported_orientations
        self.supported_output_bins = supported_output_bins
        self.supported_pages_per_sheet = supported_pages_per_sheet
        self.supported_presentation_directions = supported_presentation_directions
        self.supported_print_qualities = supported_print_qualities
        self.supports_fit_pdf_to_page = supports_fit_pdf_to_page
        self.top_margins = top_margins


class MicrosoftGraphPrinterDefaults(msrest.serialization.Model):
    """printerDefaults.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param color_mode:  Possible values include: "blackAndWhite", "grayscale", "color", "auto".
    :type color_mode: str or ~devices_cloud_print.models.MicrosoftGraphPrintColorMode
    :param content_type:
    :type content_type: str
    :param copies_per_job:
    :type copies_per_job: int
    :param document_mime_type:
    :type document_mime_type: str
    :param dpi:
    :type dpi: int
    :param duplex_configuration:  Possible values include: "twoSidedLongEdge", "twoSidedShortEdge",
     "oneSided".
    :type duplex_configuration: str or
     ~devices_cloud_print.models.MicrosoftGraphPrintDuplexConfiguration
    :param duplex_mode:  Possible values include: "flipOnLongEdge", "flipOnShortEdge", "oneSided".
    :type duplex_mode: str or ~devices_cloud_print.models.MicrosoftGraphPrintDuplexMode
    :param finishings:
    :type finishings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
    :param fit_pdf_to_page:
    :type fit_pdf_to_page: bool
    :param media_color:
    :type media_color: str
    :param media_size:
    :type media_size: str
    :param media_type:
    :type media_type: str
    :param multipage_layout:  Possible values include: "clockwiseFromTopLeft",
     "counterclockwiseFromTopLeft", "counterclockwiseFromTopRight", "clockwiseFromTopRight",
     "counterclockwiseFromBottomLeft", "clockwiseFromBottomLeft", "counterclockwiseFromBottomRight",
     "clockwiseFromBottomRight".
    :type multipage_layout: str or ~devices_cloud_print.models.MicrosoftGraphPrintMultipageLayout
    :param orientation:  Possible values include: "portrait", "landscape", "reverseLandscape",
     "reversePortrait".
    :type orientation: str or ~devices_cloud_print.models.MicrosoftGraphPrintOrientation
    :param output_bin:
    :type output_bin: str
    :param pages_per_sheet:
    :type pages_per_sheet: int
    :param pdf_fit_to_page:
    :type pdf_fit_to_page: bool
    :param presentation_direction:  Possible values include: "clockwiseFromTopLeft",
     "counterClockwiseFromTopLeft", "counterClockwiseFromTopRight", "clockwiseFromTopRight",
     "counterClockwiseFromBottomLeft", "clockwiseFromBottomLeft", "counterClockwiseFromBottomRight",
     "clockwiseFromBottomRight".
    :type presentation_direction: str or
     ~devices_cloud_print.models.MicrosoftGraphPrintPresentationDirection
    :param print_color_configuration:  Possible values include: "blackAndWhite", "grayscale",
     "color", "auto".
    :type print_color_configuration: str or
     ~devices_cloud_print.models.MicrosoftGraphPrintColorConfiguration
    :param print_quality:  Possible values include: "low", "medium", "high", "unknownFutureValue".
    :type print_quality: str or ~devices_cloud_print.models.MicrosoftGraphPrintQuality
    :param quality:  Possible values include: "low", "medium", "high", "unknownFutureValue".
    :type quality: str or ~devices_cloud_print.models.MicrosoftGraphPrintQuality
    :param scaling:  Possible values include: "auto", "shrinkToFit", "fill", "fit", "none",
     "unknownFutureValue".
    :type scaling: str or ~devices_cloud_print.models.MicrosoftGraphPrintScaling
    """

    _validation = {
        'copies_per_job': {'maximum': 2147483647, 'minimum': -2147483648},
        'dpi': {'maximum': 2147483647, 'minimum': -2147483648},
        'pages_per_sheet': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'color_mode': {'key': 'colorMode', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'copies_per_job': {'key': 'copiesPerJob', 'type': 'int'},
        'document_mime_type': {'key': 'documentMimeType', 'type': 'str'},
        'dpi': {'key': 'dpi', 'type': 'int'},
        'duplex_configuration': {'key': 'duplexConfiguration', 'type': 'str'},
        'duplex_mode': {'key': 'duplexMode', 'type': 'str'},
        'finishings': {'key': 'finishings', 'type': '[str]'},
        'fit_pdf_to_page': {'key': 'fitPdfToPage', 'type': 'bool'},
        'media_color': {'key': 'mediaColor', 'type': 'str'},
        'media_size': {'key': 'mediaSize', 'type': 'str'},
        'media_type': {'key': 'mediaType', 'type': 'str'},
        'multipage_layout': {'key': 'multipageLayout', 'type': 'str'},
        'orientation': {'key': 'orientation', 'type': 'str'},
        'output_bin': {'key': 'outputBin', 'type': 'str'},
        'pages_per_sheet': {'key': 'pagesPerSheet', 'type': 'int'},
        'pdf_fit_to_page': {'key': 'pdfFitToPage', 'type': 'bool'},
        'presentation_direction': {'key': 'presentationDirection', 'type': 'str'},
        'print_color_configuration': {'key': 'printColorConfiguration', 'type': 'str'},
        'print_quality': {'key': 'printQuality', 'type': 'str'},
        'quality': {'key': 'quality', 'type': 'str'},
        'scaling': {'key': 'scaling', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        color_mode: Optional[Union[str, "MicrosoftGraphPrintColorMode"]] = None,
        content_type: Optional[str] = None,
        copies_per_job: Optional[int] = None,
        document_mime_type: Optional[str] = None,
        dpi: Optional[int] = None,
        duplex_configuration: Optional[Union[str, "MicrosoftGraphPrintDuplexConfiguration"]] = None,
        duplex_mode: Optional[Union[str, "MicrosoftGraphPrintDuplexMode"]] = None,
        finishings: Optional[List[Union[str, "MicrosoftGraphPrintFinishing"]]] = None,
        fit_pdf_to_page: Optional[bool] = None,
        media_color: Optional[str] = None,
        media_size: Optional[str] = None,
        media_type: Optional[str] = None,
        multipage_layout: Optional[Union[str, "MicrosoftGraphPrintMultipageLayout"]] = None,
        orientation: Optional[Union[str, "MicrosoftGraphPrintOrientation"]] = None,
        output_bin: Optional[str] = None,
        pages_per_sheet: Optional[int] = None,
        pdf_fit_to_page: Optional[bool] = None,
        presentation_direction: Optional[Union[str, "MicrosoftGraphPrintPresentationDirection"]] = None,
        print_color_configuration: Optional[Union[str, "MicrosoftGraphPrintColorConfiguration"]] = None,
        print_quality: Optional[Union[str, "MicrosoftGraphPrintQuality"]] = None,
        quality: Optional[Union[str, "MicrosoftGraphPrintQuality"]] = None,
        scaling: Optional[Union[str, "MicrosoftGraphPrintScaling"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrinterDefaults, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.color_mode = color_mode
        self.content_type = content_type
        self.copies_per_job = copies_per_job
        self.document_mime_type = document_mime_type
        self.dpi = dpi
        self.duplex_configuration = duplex_configuration
        self.duplex_mode = duplex_mode
        self.finishings = finishings
        self.fit_pdf_to_page = fit_pdf_to_page
        self.media_color = media_color
        self.media_size = media_size
        self.media_type = media_type
        self.multipage_layout = multipage_layout
        self.orientation = orientation
        self.output_bin = output_bin
        self.pages_per_sheet = pages_per_sheet
        self.pdf_fit_to_page = pdf_fit_to_page
        self.presentation_direction = presentation_direction
        self.print_color_configuration = print_color_configuration
        self.print_quality = print_quality
        self.quality = quality
        self.scaling = scaling


class MicrosoftGraphPrinterDocumentConfiguration(msrest.serialization.Model):
    """printerDocumentConfiguration.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param collate:
    :type collate: bool
    :param color_mode:  Possible values include: "blackAndWhite", "grayscale", "color", "auto".
    :type color_mode: str or ~devices_cloud_print.models.MicrosoftGraphPrintColorMode
    :param copies:
    :type copies: int
    :param dpi:
    :type dpi: int
    :param duplex_mode:  Possible values include: "flipOnLongEdge", "flipOnShortEdge", "oneSided".
    :type duplex_mode: str or ~devices_cloud_print.models.MicrosoftGraphPrintDuplexMode
    :param feed_direction:  Possible values include: "longEdgeFirst", "shortEdgeFirst".
    :type feed_direction: str or ~devices_cloud_print.models.MicrosoftGraphPrinterFeedDirection
    :param feed_orientation:  Possible values include: "longEdgeFirst", "shortEdgeFirst".
    :type feed_orientation: str or ~devices_cloud_print.models.MicrosoftGraphPrinterFeedOrientation
    :param finishings:
    :type finishings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
    :param fit_pdf_to_page:
    :type fit_pdf_to_page: bool
    :param input_bin:
    :type input_bin: str
    :param margin: printMargin.
    :type margin: ~devices_cloud_print.models.MicrosoftGraphPrintMargin
    :param media_size:
    :type media_size: str
    :param media_type:
    :type media_type: str
    :param multipage_layout:  Possible values include: "clockwiseFromTopLeft",
     "counterclockwiseFromTopLeft", "counterclockwiseFromTopRight", "clockwiseFromTopRight",
     "counterclockwiseFromBottomLeft", "clockwiseFromBottomLeft", "counterclockwiseFromBottomRight",
     "clockwiseFromBottomRight".
    :type multipage_layout: str or ~devices_cloud_print.models.MicrosoftGraphPrintMultipageLayout
    :param orientation:  Possible values include: "portrait", "landscape", "reverseLandscape",
     "reversePortrait".
    :type orientation: str or ~devices_cloud_print.models.MicrosoftGraphPrintOrientation
    :param output_bin:
    :type output_bin: str
    :param page_ranges:
    :type page_ranges: list[~devices_cloud_print.models.MicrosoftGraphIntegerRange]
    :param pages_per_sheet:
    :type pages_per_sheet: int
    :param quality:  Possible values include: "low", "medium", "high", "unknownFutureValue".
    :type quality: str or ~devices_cloud_print.models.MicrosoftGraphPrintQuality
    :param scaling:  Possible values include: "auto", "shrinkToFit", "fill", "fit", "none",
     "unknownFutureValue".
    :type scaling: str or ~devices_cloud_print.models.MicrosoftGraphPrintScaling
    """

    _validation = {
        'copies': {'maximum': 2147483647, 'minimum': -2147483648},
        'dpi': {'maximum': 2147483647, 'minimum': -2147483648},
        'pages_per_sheet': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'collate': {'key': 'collate', 'type': 'bool'},
        'color_mode': {'key': 'colorMode', 'type': 'str'},
        'copies': {'key': 'copies', 'type': 'int'},
        'dpi': {'key': 'dpi', 'type': 'int'},
        'duplex_mode': {'key': 'duplexMode', 'type': 'str'},
        'feed_direction': {'key': 'feedDirection', 'type': 'str'},
        'feed_orientation': {'key': 'feedOrientation', 'type': 'str'},
        'finishings': {'key': 'finishings', 'type': '[str]'},
        'fit_pdf_to_page': {'key': 'fitPdfToPage', 'type': 'bool'},
        'input_bin': {'key': 'inputBin', 'type': 'str'},
        'margin': {'key': 'margin', 'type': 'MicrosoftGraphPrintMargin'},
        'media_size': {'key': 'mediaSize', 'type': 'str'},
        'media_type': {'key': 'mediaType', 'type': 'str'},
        'multipage_layout': {'key': 'multipageLayout', 'type': 'str'},
        'orientation': {'key': 'orientation', 'type': 'str'},
        'output_bin': {'key': 'outputBin', 'type': 'str'},
        'page_ranges': {'key': 'pageRanges', 'type': '[MicrosoftGraphIntegerRange]'},
        'pages_per_sheet': {'key': 'pagesPerSheet', 'type': 'int'},
        'quality': {'key': 'quality', 'type': 'str'},
        'scaling': {'key': 'scaling', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        collate: Optional[bool] = None,
        color_mode: Optional[Union[str, "MicrosoftGraphPrintColorMode"]] = None,
        copies: Optional[int] = None,
        dpi: Optional[int] = None,
        duplex_mode: Optional[Union[str, "MicrosoftGraphPrintDuplexMode"]] = None,
        feed_direction: Optional[Union[str, "MicrosoftGraphPrinterFeedDirection"]] = None,
        feed_orientation: Optional[Union[str, "MicrosoftGraphPrinterFeedOrientation"]] = None,
        finishings: Optional[List[Union[str, "MicrosoftGraphPrintFinishing"]]] = None,
        fit_pdf_to_page: Optional[bool] = None,
        input_bin: Optional[str] = None,
        margin: Optional["MicrosoftGraphPrintMargin"] = None,
        media_size: Optional[str] = None,
        media_type: Optional[str] = None,
        multipage_layout: Optional[Union[str, "MicrosoftGraphPrintMultipageLayout"]] = None,
        orientation: Optional[Union[str, "MicrosoftGraphPrintOrientation"]] = None,
        output_bin: Optional[str] = None,
        page_ranges: Optional[List["MicrosoftGraphIntegerRange"]] = None,
        pages_per_sheet: Optional[int] = None,
        quality: Optional[Union[str, "MicrosoftGraphPrintQuality"]] = None,
        scaling: Optional[Union[str, "MicrosoftGraphPrintScaling"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrinterDocumentConfiguration, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.collate = collate
        self.color_mode = color_mode
        self.copies = copies
        self.dpi = dpi
        self.duplex_mode = duplex_mode
        self.feed_direction = feed_direction
        self.feed_orientation = feed_orientation
        self.finishings = finishings
        self.fit_pdf_to_page = fit_pdf_to_page
        self.input_bin = input_bin
        self.margin = margin
        self.media_size = media_size
        self.media_type = media_type
        self.multipage_layout = multipage_layout
        self.orientation = orientation
        self.output_bin = output_bin
        self.page_ranges = page_ranges
        self.pages_per_sheet = pages_per_sheet
        self.quality = quality
        self.scaling = scaling


class MicrosoftGraphPrinterLocation(msrest.serialization.Model):
    """printerLocation.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param altitude_in_meters:
    :type altitude_in_meters: int
    :param building:
    :type building: str
    :param city:
    :type city: str
    :param country_or_region:
    :type country_or_region: str
    :param floor_description:
    :type floor_description: str
    :param floor_number:
    :type floor_number: int
    :param latitude:
    :type latitude: float
    :param longitude:
    :type longitude: float
    :param organization:
    :type organization: list[str]
    :param postal_code:
    :type postal_code: str
    :param room_description:
    :type room_description: str
    :param room_number:
    :type room_number: int
    :param site:
    :type site: str
    :param state_or_province:
    :type state_or_province: str
    :param street_address:
    :type street_address: str
    :param subdivision:
    :type subdivision: list[str]
    :param subunit:
    :type subunit: list[str]
    """

    _validation = {
        'altitude_in_meters': {'maximum': 2147483647, 'minimum': -2147483648},
        'floor_number': {'maximum': 2147483647, 'minimum': -2147483648},
        'room_number': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'altitude_in_meters': {'key': 'altitudeInMeters', 'type': 'int'},
        'building': {'key': 'building', 'type': 'str'},
        'city': {'key': 'city', 'type': 'str'},
        'country_or_region': {'key': 'countryOrRegion', 'type': 'str'},
        'floor_description': {'key': 'floorDescription', 'type': 'str'},
        'floor_number': {'key': 'floorNumber', 'type': 'int'},
        'latitude': {'key': 'latitude', 'type': 'float'},
        'longitude': {'key': 'longitude', 'type': 'float'},
        'organization': {'key': 'organization', 'type': '[str]'},
        'postal_code': {'key': 'postalCode', 'type': 'str'},
        'room_description': {'key': 'roomDescription', 'type': 'str'},
        'room_number': {'key': 'roomNumber', 'type': 'int'},
        'site': {'key': 'site', 'type': 'str'},
        'state_or_province': {'key': 'stateOrProvince', 'type': 'str'},
        'street_address': {'key': 'streetAddress', 'type': 'str'},
        'subdivision': {'key': 'subdivision', 'type': '[str]'},
        'subunit': {'key': 'subunit', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        altitude_in_meters: Optional[int] = None,
        building: Optional[str] = None,
        city: Optional[str] = None,
        country_or_region: Optional[str] = None,
        floor_description: Optional[str] = None,
        floor_number: Optional[int] = None,
        latitude: Optional[float] = None,
        longitude: Optional[float] = None,
        organization: Optional[List[str]] = None,
        postal_code: Optional[str] = None,
        room_description: Optional[str] = None,
        room_number: Optional[int] = None,
        site: Optional[str] = None,
        state_or_province: Optional[str] = None,
        street_address: Optional[str] = None,
        subdivision: Optional[List[str]] = None,
        subunit: Optional[List[str]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrinterLocation, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.altitude_in_meters = altitude_in_meters
        self.building = building
        self.city = city
        self.country_or_region = country_or_region
        self.floor_description = floor_description
        self.floor_number = floor_number
        self.latitude = latitude
        self.longitude = longitude
        self.organization = organization
        self.postal_code = postal_code
        self.room_description = room_description
        self.room_number = room_number
        self.site = site
        self.state_or_province = state_or_province
        self.street_address = street_address
        self.subdivision = subdivision
        self.subunit = subunit


class MicrosoftGraphPrinterShare(MicrosoftGraphPrinterBase):
    """printerShare.

    :param id: Read-only.
    :type id: str
    :param defaults: printerDefaults.
    :type defaults: ~devices_cloud_print.models.MicrosoftGraphPrinterDefaults
    :param display_name:
    :type display_name: str
    :param is_accepting_jobs:
    :type is_accepting_jobs: bool
    :param location: printerLocation.
    :type location: ~devices_cloud_print.models.MicrosoftGraphPrinterLocation
    :param manufacturer:
    :type manufacturer: str
    :param model:
    :type model: str
    :param name:
    :type name: str
    :param status: printerStatus.
    :type status: ~devices_cloud_print.models.MicrosoftGraphPrinterStatus
    :param jobs:
    :type jobs: list[~devices_cloud_print.models.MicrosoftGraphPrintJob]
    :param bottom_margins:
    :type bottom_margins: list[int]
    :param collation:
    :type collation: bool
    :param color_modes:
    :type color_modes: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintColorMode]
    :param content_types:
    :type content_types: list[str]
    :param copies_per_job: integerRange.
    :type copies_per_job: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
    :param dpis:
    :type dpis: list[int]
    :param duplex_modes:
    :type duplex_modes: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintDuplexMode]
    :param feed_directions:
    :type feed_directions: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrinterFeedDirection]
    :param feed_orientations:
    :type feed_orientations: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrinterFeedOrientation]
    :param finishings:
    :type finishings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
    :param input_bins:
    :type input_bins: list[str]
    :param is_color_printing_supported:
    :type is_color_printing_supported: bool
    :param is_page_range_supported:
    :type is_page_range_supported: bool
    :param left_margins:
    :type left_margins: list[int]
    :param media_colors:
    :type media_colors: list[str]
    :param media_sizes:
    :type media_sizes: list[str]
    :param media_types:
    :type media_types: list[str]
    :param multipage_layouts:
    :type multipage_layouts: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintMultipageLayout]
    :param orientations:
    :type orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintOrientation]
    :param output_bins:
    :type output_bins: list[str]
    :param pages_per_sheet:
    :type pages_per_sheet: list[int]
    :param qualities:
    :type qualities: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintQuality]
    :param right_margins:
    :type right_margins: list[int]
    :param scalings:
    :type scalings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintScaling]
    :param supported_color_configurations:
    :type supported_color_configurations: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintColorConfiguration]
    :param supported_copies_per_job: integerRange.
    :type supported_copies_per_job: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
    :param supported_document_mime_types:
    :type supported_document_mime_types: list[str]
    :param supported_duplex_configurations:
    :type supported_duplex_configurations: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintDuplexConfiguration]
    :param supported_finishings:
    :type supported_finishings: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
    :param supported_media_colors:
    :type supported_media_colors: list[str]
    :param supported_media_sizes:
    :type supported_media_sizes: list[str]
    :param supported_media_types:
    :type supported_media_types: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintMediaType]
    :param supported_orientations:
    :type supported_orientations: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintOrientation]
    :param supported_output_bins:
    :type supported_output_bins: list[str]
    :param supported_pages_per_sheet: integerRange.
    :type supported_pages_per_sheet: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
    :param supported_presentation_directions:
    :type supported_presentation_directions: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintPresentationDirection]
    :param supported_print_qualities:
    :type supported_print_qualities: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrintQuality]
    :param supports_fit_pdf_to_page:
    :type supports_fit_pdf_to_page: bool
    :param top_margins:
    :type top_margins: list[int]
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allow_all_users:
    :type allow_all_users: bool
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param allowed_groups:
    :type allowed_groups: list[~devices_cloud_print.models.MicrosoftGraphPrintIdentity]
    :param allowed_users:
    :type allowed_users: list[~devices_cloud_print.models.MicrosoftGraphPrintUserIdentity]
    :param printer: printer.
    :type printer: ~devices_cloud_print.models.MicrosoftGraphPrinter
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'defaults': {'key': 'defaults', 'type': 'MicrosoftGraphPrinterDefaults'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_accepting_jobs': {'key': 'isAcceptingJobs', 'type': 'bool'},
        'location': {'key': 'location', 'type': 'MicrosoftGraphPrinterLocation'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'model': {'key': 'model', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'MicrosoftGraphPrinterStatus'},
        'jobs': {'key': 'jobs', 'type': '[MicrosoftGraphPrintJob]'},
        'bottom_margins': {'key': 'capabilities.bottomMargins', 'type': '[int]'},
        'collation': {'key': 'capabilities.collation', 'type': 'bool'},
        'color_modes': {'key': 'capabilities.colorModes', 'type': '[str]'},
        'content_types': {'key': 'capabilities.contentTypes', 'type': '[str]'},
        'copies_per_job': {'key': 'capabilities.copiesPerJob', 'type': 'MicrosoftGraphIntegerRange'},
        'dpis': {'key': 'capabilities.dpis', 'type': '[int]'},
        'duplex_modes': {'key': 'capabilities.duplexModes', 'type': '[str]'},
        'feed_directions': {'key': 'capabilities.feedDirections', 'type': '[str]'},
        'feed_orientations': {'key': 'capabilities.feedOrientations', 'type': '[str]'},
        'finishings': {'key': 'capabilities.finishings', 'type': '[str]'},
        'input_bins': {'key': 'capabilities.inputBins', 'type': '[str]'},
        'is_color_printing_supported': {'key': 'capabilities.isColorPrintingSupported', 'type': 'bool'},
        'is_page_range_supported': {'key': 'capabilities.isPageRangeSupported', 'type': 'bool'},
        'left_margins': {'key': 'capabilities.leftMargins', 'type': '[int]'},
        'media_colors': {'key': 'capabilities.mediaColors', 'type': '[str]'},
        'media_sizes': {'key': 'capabilities.mediaSizes', 'type': '[str]'},
        'media_types': {'key': 'capabilities.mediaTypes', 'type': '[str]'},
        'multipage_layouts': {'key': 'capabilities.multipageLayouts', 'type': '[str]'},
        'orientations': {'key': 'capabilities.orientations', 'type': '[str]'},
        'output_bins': {'key': 'capabilities.outputBins', 'type': '[str]'},
        'pages_per_sheet': {'key': 'capabilities.pagesPerSheet', 'type': '[int]'},
        'qualities': {'key': 'capabilities.qualities', 'type': '[str]'},
        'right_margins': {'key': 'capabilities.rightMargins', 'type': '[int]'},
        'scalings': {'key': 'capabilities.scalings', 'type': '[str]'},
        'supported_color_configurations': {'key': 'capabilities.supportedColorConfigurations', 'type': '[str]'},
        'supported_copies_per_job': {'key': 'capabilities.supportedCopiesPerJob', 'type': 'MicrosoftGraphIntegerRange'},
        'supported_document_mime_types': {'key': 'capabilities.supportedDocumentMimeTypes', 'type': '[str]'},
        'supported_duplex_configurations': {'key': 'capabilities.supportedDuplexConfigurations', 'type': '[str]'},
        'supported_finishings': {'key': 'capabilities.supportedFinishings', 'type': '[str]'},
        'supported_media_colors': {'key': 'capabilities.supportedMediaColors', 'type': '[str]'},
        'supported_media_sizes': {'key': 'capabilities.supportedMediaSizes', 'type': '[str]'},
        'supported_media_types': {'key': 'capabilities.supportedMediaTypes', 'type': '[str]'},
        'supported_orientations': {'key': 'capabilities.supportedOrientations', 'type': '[str]'},
        'supported_output_bins': {'key': 'capabilities.supportedOutputBins', 'type': '[str]'},
        'supported_pages_per_sheet': {'key': 'capabilities.supportedPagesPerSheet', 'type': 'MicrosoftGraphIntegerRange'},
        'supported_presentation_directions': {'key': 'capabilities.supportedPresentationDirections', 'type': '[str]'},
        'supported_print_qualities': {'key': 'capabilities.supportedPrintQualities', 'type': '[str]'},
        'supports_fit_pdf_to_page': {'key': 'capabilities.supportsFitPdfToPage', 'type': 'bool'},
        'top_margins': {'key': 'capabilities.topMargins', 'type': '[int]'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'allow_all_users': {'key': 'allowAllUsers', 'type': 'bool'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'allowed_groups': {'key': 'allowedGroups', 'type': '[MicrosoftGraphPrintIdentity]'},
        'allowed_users': {'key': 'allowedUsers', 'type': '[MicrosoftGraphPrintUserIdentity]'},
        'printer': {'key': 'printer', 'type': 'MicrosoftGraphPrinter'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        defaults: Optional["MicrosoftGraphPrinterDefaults"] = None,
        display_name: Optional[str] = None,
        is_accepting_jobs: Optional[bool] = None,
        location: Optional["MicrosoftGraphPrinterLocation"] = None,
        manufacturer: Optional[str] = None,
        model: Optional[str] = None,
        name: Optional[str] = None,
        status: Optional["MicrosoftGraphPrinterStatus"] = None,
        jobs: Optional[List["MicrosoftGraphPrintJob"]] = None,
        bottom_margins: Optional[List[int]] = None,
        collation: Optional[bool] = None,
        color_modes: Optional[List[Union[str, "MicrosoftGraphPrintColorMode"]]] = None,
        content_types: Optional[List[str]] = None,
        copies_per_job: Optional["MicrosoftGraphIntegerRange"] = None,
        dpis: Optional[List[int]] = None,
        duplex_modes: Optional[List[Union[str, "MicrosoftGraphPrintDuplexMode"]]] = None,
        feed_directions: Optional[List[Union[str, "MicrosoftGraphPrinterFeedDirection"]]] = None,
        feed_orientations: Optional[List[Union[str, "MicrosoftGraphPrinterFeedOrientation"]]] = None,
        finishings: Optional[List[Union[str, "MicrosoftGraphPrintFinishing"]]] = None,
        input_bins: Optional[List[str]] = None,
        is_color_printing_supported: Optional[bool] = None,
        is_page_range_supported: Optional[bool] = None,
        left_margins: Optional[List[int]] = None,
        media_colors: Optional[List[str]] = None,
        media_sizes: Optional[List[str]] = None,
        media_types: Optional[List[str]] = None,
        multipage_layouts: Optional[List[Union[str, "MicrosoftGraphPrintMultipageLayout"]]] = None,
        orientations: Optional[List[Union[str, "MicrosoftGraphPrintOrientation"]]] = None,
        output_bins: Optional[List[str]] = None,
        pages_per_sheet: Optional[List[int]] = None,
        qualities: Optional[List[Union[str, "MicrosoftGraphPrintQuality"]]] = None,
        right_margins: Optional[List[int]] = None,
        scalings: Optional[List[Union[str, "MicrosoftGraphPrintScaling"]]] = None,
        supported_color_configurations: Optional[List[Union[str, "MicrosoftGraphPrintColorConfiguration"]]] = None,
        supported_copies_per_job: Optional["MicrosoftGraphIntegerRange"] = None,
        supported_document_mime_types: Optional[List[str]] = None,
        supported_duplex_configurations: Optional[List[Union[str, "MicrosoftGraphPrintDuplexConfiguration"]]] = None,
        supported_finishings: Optional[List[Union[str, "MicrosoftGraphPrintFinishing"]]] = None,
        supported_media_colors: Optional[List[str]] = None,
        supported_media_sizes: Optional[List[str]] = None,
        supported_media_types: Optional[List[Union[str, "MicrosoftGraphPrintMediaType"]]] = None,
        supported_orientations: Optional[List[Union[str, "MicrosoftGraphPrintOrientation"]]] = None,
        supported_output_bins: Optional[List[str]] = None,
        supported_pages_per_sheet: Optional["MicrosoftGraphIntegerRange"] = None,
        supported_presentation_directions: Optional[List[Union[str, "MicrosoftGraphPrintPresentationDirection"]]] = None,
        supported_print_qualities: Optional[List[Union[str, "MicrosoftGraphPrintQuality"]]] = None,
        supports_fit_pdf_to_page: Optional[bool] = None,
        top_margins: Optional[List[int]] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        allow_all_users: Optional[bool] = None,
        created_date_time: Optional[datetime.datetime] = None,
        allowed_groups: Optional[List["MicrosoftGraphPrintIdentity"]] = None,
        allowed_users: Optional[List["MicrosoftGraphPrintUserIdentity"]] = None,
        printer: Optional["MicrosoftGraphPrinter"] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrinterShare, self).__init__(id=id, defaults=defaults, display_name=display_name, is_accepting_jobs=is_accepting_jobs, location=location, manufacturer=manufacturer, model=model, name=name, status=status, jobs=jobs, bottom_margins=bottom_margins, collation=collation, color_modes=color_modes, content_types=content_types, copies_per_job=copies_per_job, dpis=dpis, duplex_modes=duplex_modes, feed_directions=feed_directions, feed_orientations=feed_orientations, finishings=finishings, input_bins=input_bins, is_color_printing_supported=is_color_printing_supported, is_page_range_supported=is_page_range_supported, left_margins=left_margins, media_colors=media_colors, media_sizes=media_sizes, media_types=media_types, multipage_layouts=multipage_layouts, orientations=orientations, output_bins=output_bins, pages_per_sheet=pages_per_sheet, qualities=qualities, right_margins=right_margins, scalings=scalings, supported_color_configurations=supported_color_configurations, supported_copies_per_job=supported_copies_per_job, supported_document_mime_types=supported_document_mime_types, supported_duplex_configurations=supported_duplex_configurations, supported_finishings=supported_finishings, supported_media_colors=supported_media_colors, supported_media_sizes=supported_media_sizes, supported_media_types=supported_media_types, supported_orientations=supported_orientations, supported_output_bins=supported_output_bins, supported_pages_per_sheet=supported_pages_per_sheet, supported_presentation_directions=supported_presentation_directions, supported_print_qualities=supported_print_qualities, supports_fit_pdf_to_page=supports_fit_pdf_to_page, top_margins=top_margins, **kwargs)
        self.additional_properties = additional_properties
        self.allow_all_users = allow_all_users
        self.created_date_time = created_date_time
        self.allowed_groups = allowed_groups
        self.allowed_users = allowed_users
        self.printer = printer


class MicrosoftGraphPrinterStatus(msrest.serialization.Model):
    """printerStatus.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description:
    :type description: str
    :param details:
    :type details: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrinterProcessingStateDetail]
    :param processing_state:  Possible values include: "unknown", "idle", "processing", "stopped",
     "unknownFutureValue".
    :type processing_state: str or ~devices_cloud_print.models.MicrosoftGraphPrinterProcessingState
    :param processing_state_description:
    :type processing_state_description: str
    :param processing_state_reasons:
    :type processing_state_reasons: list[str or
     ~devices_cloud_print.models.MicrosoftGraphPrinterProcessingStateReason]
    :param state:  Possible values include: "unknown", "idle", "processing", "stopped",
     "unknownFutureValue".
    :type state: str or ~devices_cloud_print.models.MicrosoftGraphPrinterProcessingState
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'details': {'key': 'details', 'type': '[str]'},
        'processing_state': {'key': 'processingState', 'type': 'str'},
        'processing_state_description': {'key': 'processingStateDescription', 'type': 'str'},
        'processing_state_reasons': {'key': 'processingStateReasons', 'type': '[str]'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        details: Optional[List[Union[str, "MicrosoftGraphPrinterProcessingStateDetail"]]] = None,
        processing_state: Optional[Union[str, "MicrosoftGraphPrinterProcessingState"]] = None,
        processing_state_description: Optional[str] = None,
        processing_state_reasons: Optional[List[Union[str, "MicrosoftGraphPrinterProcessingStateReason"]]] = None,
        state: Optional[Union[str, "MicrosoftGraphPrinterProcessingState"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrinterStatus, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.description = description
        self.details = details
        self.processing_state = processing_state
        self.processing_state_description = processing_state_description
        self.processing_state_reasons = processing_state_reasons
        self.state = state


class MicrosoftGraphPrinterUsageSummary(msrest.serialization.Model):
    """printerUsageSummary.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param completed_job_count:
    :type completed_job_count: int
    :param incomplete_job_count:
    :type incomplete_job_count: int
    :param printer_display_name:
    :type printer_display_name: str
    :param printer_id:
    :type printer_id: str
    :param printer_manufacturer:
    :type printer_manufacturer: str
    :param printer_model:
    :type printer_model: str
    :param printer: Represents an Azure Active Directory object. The directoryObject type is the
     base type for many other directory entity types.
    :type printer: ~devices_cloud_print.models.MicrosoftGraphDirectoryObject
    """

    _validation = {
        'completed_job_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'incomplete_job_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'completed_job_count': {'key': 'completedJobCount', 'type': 'int'},
        'incomplete_job_count': {'key': 'incompleteJobCount', 'type': 'int'},
        'printer_display_name': {'key': 'printerDisplayName', 'type': 'str'},
        'printer_id': {'key': 'printerId', 'type': 'str'},
        'printer_manufacturer': {'key': 'printerManufacturer', 'type': 'str'},
        'printer_model': {'key': 'printerModel', 'type': 'str'},
        'printer': {'key': 'printer', 'type': 'MicrosoftGraphDirectoryObject'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        completed_job_count: Optional[int] = None,
        incomplete_job_count: Optional[int] = None,
        printer_display_name: Optional[str] = None,
        printer_id: Optional[str] = None,
        printer_manufacturer: Optional[str] = None,
        printer_model: Optional[str] = None,
        printer: Optional["MicrosoftGraphDirectoryObject"] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrinterUsageSummary, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.completed_job_count = completed_job_count
        self.incomplete_job_count = incomplete_job_count
        self.printer_display_name = printer_display_name
        self.printer_id = printer_id
        self.printer_manufacturer = printer_manufacturer
        self.printer_model = printer_model
        self.printer = printer


class MicrosoftGraphPrintIdentity(MicrosoftGraphEntity):
    """printIdentity.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        display_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintIdentity, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.display_name = display_name


class MicrosoftGraphPrintJob(MicrosoftGraphEntity):
    """printJob.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param configuration: printJobConfiguration.
    :type configuration: ~devices_cloud_print.models.MicrosoftGraphPrintJobConfiguration
    :param created_by: userIdentity.
    :type created_by: ~devices_cloud_print.models.MicrosoftGraphUserIdentity
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param is_fetchable:
    :type is_fetchable: bool
    :param redirected_from:
    :type redirected_from: str
    :param redirected_to:
    :type redirected_to: str
    :param status: printJobStatus.
    :type status: ~devices_cloud_print.models.MicrosoftGraphPrintJobStatus
    :param documents:
    :type documents: list[~devices_cloud_print.models.MicrosoftGraphPrintDocument]
    :param tasks:
    :type tasks: list[~devices_cloud_print.models.MicrosoftGraphPrintTask]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'configuration': {'key': 'configuration', 'type': 'MicrosoftGraphPrintJobConfiguration'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphUserIdentity'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'is_fetchable': {'key': 'isFetchable', 'type': 'bool'},
        'redirected_from': {'key': 'redirectedFrom', 'type': 'str'},
        'redirected_to': {'key': 'redirectedTo', 'type': 'str'},
        'status': {'key': 'status', 'type': 'MicrosoftGraphPrintJobStatus'},
        'documents': {'key': 'documents', 'type': '[MicrosoftGraphPrintDocument]'},
        'tasks': {'key': 'tasks', 'type': '[MicrosoftGraphPrintTask]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        configuration: Optional["MicrosoftGraphPrintJobConfiguration"] = None,
        created_by: Optional["MicrosoftGraphUserIdentity"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        is_fetchable: Optional[bool] = None,
        redirected_from: Optional[str] = None,
        redirected_to: Optional[str] = None,
        status: Optional["MicrosoftGraphPrintJobStatus"] = None,
        documents: Optional[List["MicrosoftGraphPrintDocument"]] = None,
        tasks: Optional[List["MicrosoftGraphPrintTask"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintJob, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.configuration = configuration
        self.created_by = created_by
        self.created_date_time = created_date_time
        self.is_fetchable = is_fetchable
        self.redirected_from = redirected_from
        self.redirected_to = redirected_to
        self.status = status
        self.documents = documents
        self.tasks = tasks


class MicrosoftGraphPrintJobConfiguration(msrest.serialization.Model):
    """printJobConfiguration.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param collate:
    :type collate: bool
    :param color_mode:  Possible values include: "blackAndWhite", "grayscale", "color", "auto".
    :type color_mode: str or ~devices_cloud_print.models.MicrosoftGraphPrintColorMode
    :param copies:
    :type copies: int
    :param dpi:
    :type dpi: int
    :param duplex_mode:  Possible values include: "flipOnLongEdge", "flipOnShortEdge", "oneSided".
    :type duplex_mode: str or ~devices_cloud_print.models.MicrosoftGraphPrintDuplexMode
    :param feed_orientation:  Possible values include: "longEdgeFirst", "shortEdgeFirst".
    :type feed_orientation: str or ~devices_cloud_print.models.MicrosoftGraphPrinterFeedOrientation
    :param finishings:
    :type finishings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
    :param fit_pdf_to_page:
    :type fit_pdf_to_page: bool
    :param input_bin:
    :type input_bin: str
    :param margin: printMargin.
    :type margin: ~devices_cloud_print.models.MicrosoftGraphPrintMargin
    :param media_size:
    :type media_size: str
    :param media_type:
    :type media_type: str
    :param multipage_layout:  Possible values include: "clockwiseFromTopLeft",
     "counterclockwiseFromTopLeft", "counterclockwiseFromTopRight", "clockwiseFromTopRight",
     "counterclockwiseFromBottomLeft", "clockwiseFromBottomLeft", "counterclockwiseFromBottomRight",
     "clockwiseFromBottomRight".
    :type multipage_layout: str or ~devices_cloud_print.models.MicrosoftGraphPrintMultipageLayout
    :param orientation:  Possible values include: "portrait", "landscape", "reverseLandscape",
     "reversePortrait".
    :type orientation: str or ~devices_cloud_print.models.MicrosoftGraphPrintOrientation
    :param output_bin:
    :type output_bin: str
    :param page_ranges:
    :type page_ranges: list[~devices_cloud_print.models.MicrosoftGraphIntegerRange]
    :param pages_per_sheet:
    :type pages_per_sheet: int
    :param quality:  Possible values include: "low", "medium", "high", "unknownFutureValue".
    :type quality: str or ~devices_cloud_print.models.MicrosoftGraphPrintQuality
    :param scaling:  Possible values include: "auto", "shrinkToFit", "fill", "fit", "none",
     "unknownFutureValue".
    :type scaling: str or ~devices_cloud_print.models.MicrosoftGraphPrintScaling
    """

    _validation = {
        'copies': {'maximum': 2147483647, 'minimum': -2147483648},
        'dpi': {'maximum': 2147483647, 'minimum': -2147483648},
        'pages_per_sheet': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'collate': {'key': 'collate', 'type': 'bool'},
        'color_mode': {'key': 'colorMode', 'type': 'str'},
        'copies': {'key': 'copies', 'type': 'int'},
        'dpi': {'key': 'dpi', 'type': 'int'},
        'duplex_mode': {'key': 'duplexMode', 'type': 'str'},
        'feed_orientation': {'key': 'feedOrientation', 'type': 'str'},
        'finishings': {'key': 'finishings', 'type': '[str]'},
        'fit_pdf_to_page': {'key': 'fitPdfToPage', 'type': 'bool'},
        'input_bin': {'key': 'inputBin', 'type': 'str'},
        'margin': {'key': 'margin', 'type': 'MicrosoftGraphPrintMargin'},
        'media_size': {'key': 'mediaSize', 'type': 'str'},
        'media_type': {'key': 'mediaType', 'type': 'str'},
        'multipage_layout': {'key': 'multipageLayout', 'type': 'str'},
        'orientation': {'key': 'orientation', 'type': 'str'},
        'output_bin': {'key': 'outputBin', 'type': 'str'},
        'page_ranges': {'key': 'pageRanges', 'type': '[MicrosoftGraphIntegerRange]'},
        'pages_per_sheet': {'key': 'pagesPerSheet', 'type': 'int'},
        'quality': {'key': 'quality', 'type': 'str'},
        'scaling': {'key': 'scaling', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        collate: Optional[bool] = None,
        color_mode: Optional[Union[str, "MicrosoftGraphPrintColorMode"]] = None,
        copies: Optional[int] = None,
        dpi: Optional[int] = None,
        duplex_mode: Optional[Union[str, "MicrosoftGraphPrintDuplexMode"]] = None,
        feed_orientation: Optional[Union[str, "MicrosoftGraphPrinterFeedOrientation"]] = None,
        finishings: Optional[List[Union[str, "MicrosoftGraphPrintFinishing"]]] = None,
        fit_pdf_to_page: Optional[bool] = None,
        input_bin: Optional[str] = None,
        margin: Optional["MicrosoftGraphPrintMargin"] = None,
        media_size: Optional[str] = None,
        media_type: Optional[str] = None,
        multipage_layout: Optional[Union[str, "MicrosoftGraphPrintMultipageLayout"]] = None,
        orientation: Optional[Union[str, "MicrosoftGraphPrintOrientation"]] = None,
        output_bin: Optional[str] = None,
        page_ranges: Optional[List["MicrosoftGraphIntegerRange"]] = None,
        pages_per_sheet: Optional[int] = None,
        quality: Optional[Union[str, "MicrosoftGraphPrintQuality"]] = None,
        scaling: Optional[Union[str, "MicrosoftGraphPrintScaling"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintJobConfiguration, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.collate = collate
        self.color_mode = color_mode
        self.copies = copies
        self.dpi = dpi
        self.duplex_mode = duplex_mode
        self.feed_orientation = feed_orientation
        self.finishings = finishings
        self.fit_pdf_to_page = fit_pdf_to_page
        self.input_bin = input_bin
        self.margin = margin
        self.media_size = media_size
        self.media_type = media_type
        self.multipage_layout = multipage_layout
        self.orientation = orientation
        self.output_bin = output_bin
        self.page_ranges = page_ranges
        self.pages_per_sheet = pages_per_sheet
        self.quality = quality
        self.scaling = scaling


class MicrosoftGraphPrintJobStatus(msrest.serialization.Model):
    """printJobStatus.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param acquired_by_printer:
    :type acquired_by_printer: bool
    :param description:
    :type description: str
    :param details:
    :type details: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintJobStateDetail]
    :param is_acquired_by_printer:
    :type is_acquired_by_printer: bool
    :param processing_state:  Possible values include: "unknown", "pending", "processing",
     "paused", "stopped", "completed", "canceled", "aborted".
    :type processing_state: str or
     ~devices_cloud_print.models.MicrosoftGraphPrintJobProcessingState
    :param processing_state_description:
    :type processing_state_description: str
    :param state:  Possible values include: "unknown", "pending", "processing", "paused",
     "stopped", "completed", "canceled", "aborted".
    :type state: str or ~devices_cloud_print.models.MicrosoftGraphPrintJobProcessingState
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'acquired_by_printer': {'key': 'acquiredByPrinter', 'type': 'bool'},
        'description': {'key': 'description', 'type': 'str'},
        'details': {'key': 'details', 'type': '[str]'},
        'is_acquired_by_printer': {'key': 'isAcquiredByPrinter', 'type': 'bool'},
        'processing_state': {'key': 'processingState', 'type': 'str'},
        'processing_state_description': {'key': 'processingStateDescription', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        acquired_by_printer: Optional[bool] = None,
        description: Optional[str] = None,
        details: Optional[List[Union[str, "MicrosoftGraphPrintJobStateDetail"]]] = None,
        is_acquired_by_printer: Optional[bool] = None,
        processing_state: Optional[Union[str, "MicrosoftGraphPrintJobProcessingState"]] = None,
        processing_state_description: Optional[str] = None,
        state: Optional[Union[str, "MicrosoftGraphPrintJobProcessingState"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintJobStatus, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.acquired_by_printer = acquired_by_printer
        self.description = description
        self.details = details
        self.is_acquired_by_printer = is_acquired_by_printer
        self.processing_state = processing_state
        self.processing_state_description = processing_state_description
        self.state = state


class MicrosoftGraphPrintMargin(msrest.serialization.Model):
    """printMargin.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param bottom:
    :type bottom: int
    :param left:
    :type left: int
    :param right:
    :type right: int
    :param top:
    :type top: int
    """

    _validation = {
        'bottom': {'maximum': 2147483647, 'minimum': -2147483648},
        'left': {'maximum': 2147483647, 'minimum': -2147483648},
        'right': {'maximum': 2147483647, 'minimum': -2147483648},
        'top': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'bottom': {'key': 'bottom', 'type': 'int'},
        'left': {'key': 'left', 'type': 'int'},
        'right': {'key': 'right', 'type': 'int'},
        'top': {'key': 'top', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        bottom: Optional[int] = None,
        left: Optional[int] = None,
        right: Optional[int] = None,
        top: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintMargin, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.bottom = bottom
        self.left = left
        self.right = right
        self.top = top


class MicrosoftGraphPrintOperation(MicrosoftGraphEntity):
    """printOperation.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param status: printOperationStatus.
    :type status: ~devices_cloud_print.models.MicrosoftGraphPrintOperationStatus
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'MicrosoftGraphPrintOperationStatus'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        created_date_time: Optional[datetime.datetime] = None,
        status: Optional["MicrosoftGraphPrintOperationStatus"] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintOperation, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.created_date_time = created_date_time
        self.status = status


class MicrosoftGraphPrintOperationStatus(msrest.serialization.Model):
    """printOperationStatus.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description:
    :type description: str
    :param state:  Possible values include: "notStarted", "running", "succeeded", "failed",
     "unknownFutureValue".
    :type state: str or ~devices_cloud_print.models.MicrosoftGraphPrintOperationProcessingState
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        state: Optional[Union[str, "MicrosoftGraphPrintOperationProcessingState"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintOperationStatus, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.description = description
        self.state = state


class MicrosoftGraphPrintService(MicrosoftGraphEntity):
    """printService.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param endpoints:
    :type endpoints: list[~devices_cloud_print.models.MicrosoftGraphPrintServiceEndpoint]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'endpoints': {'key': 'endpoints', 'type': '[MicrosoftGraphPrintServiceEndpoint]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        endpoints: Optional[List["MicrosoftGraphPrintServiceEndpoint"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintService, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.endpoints = endpoints


class MicrosoftGraphPrintServiceEndpoint(MicrosoftGraphEntity):
    """printServiceEndpoint.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    :param uri:
    :type uri: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'uri': {'key': 'uri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        display_name: Optional[str] = None,
        uri: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintServiceEndpoint, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.display_name = display_name
        self.uri = uri


class MicrosoftGraphPrintSettings(msrest.serialization.Model):
    """printSettings.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param document_conversion_enabled:
    :type document_conversion_enabled: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'document_conversion_enabled': {'key': 'documentConversionEnabled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        document_conversion_enabled: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintSettings, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.document_conversion_enabled = document_conversion_enabled


class MicrosoftGraphPrintTask(MicrosoftGraphEntity):
    """printTask.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param parent_url:
    :type parent_url: str
    :param status: printTaskStatus.
    :type status: ~devices_cloud_print.models.MicrosoftGraphPrintTaskStatus
    :param definition: printTaskDefinition.
    :type definition: ~devices_cloud_print.models.MicrosoftGraphPrintTaskDefinition
    :param id_trigger_id: Read-only.
    :type id_trigger_id: str
    :param event:  Possible values include: "jobStarted", "unknownFutureValue".
    :type event: str or ~devices_cloud_print.models.MicrosoftGraphPrintEvent
    :param definition_trigger_definition: printTaskDefinition.
    :type definition_trigger_definition:
     ~devices_cloud_print.models.MicrosoftGraphPrintTaskDefinition
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'parent_url': {'key': 'parentUrl', 'type': 'str'},
        'status': {'key': 'status', 'type': 'MicrosoftGraphPrintTaskStatus'},
        'definition': {'key': 'definition', 'type': 'MicrosoftGraphPrintTaskDefinition'},
        'id_trigger_id': {'key': 'trigger.id', 'type': 'str'},
        'event': {'key': 'trigger.event', 'type': 'str'},
        'definition_trigger_definition': {'key': 'trigger.definition', 'type': 'MicrosoftGraphPrintTaskDefinition'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        parent_url: Optional[str] = None,
        status: Optional["MicrosoftGraphPrintTaskStatus"] = None,
        definition: Optional["MicrosoftGraphPrintTaskDefinition"] = None,
        id_trigger_id: Optional[str] = None,
        event: Optional[Union[str, "MicrosoftGraphPrintEvent"]] = None,
        definition_trigger_definition: Optional["MicrosoftGraphPrintTaskDefinition"] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintTask, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.parent_url = parent_url
        self.status = status
        self.definition = definition
        self.id_trigger_id = id_trigger_id
        self.event = event
        self.definition_trigger_definition = definition_trigger_definition


class MicrosoftGraphPrintTaskDefinition(MicrosoftGraphEntity):
    """printTaskDefinition.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_by: appIdentity.
    :type created_by: ~devices_cloud_print.models.MicrosoftGraphAppIdentity
    :param display_name:
    :type display_name: str
    :param tasks:
    :type tasks: list[~devices_cloud_print.models.MicrosoftGraphPrintTask]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphAppIdentity'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'tasks': {'key': 'tasks', 'type': '[MicrosoftGraphPrintTask]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        created_by: Optional["MicrosoftGraphAppIdentity"] = None,
        display_name: Optional[str] = None,
        tasks: Optional[List["MicrosoftGraphPrintTask"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintTaskDefinition, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.created_by = created_by
        self.display_name = display_name
        self.tasks = tasks


class MicrosoftGraphPrintTaskStatus(msrest.serialization.Model):
    """printTaskStatus.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description:
    :type description: str
    :param state:  Possible values include: "pending", "processing", "completed", "aborted",
     "unknownFutureValue".
    :type state: str or ~devices_cloud_print.models.MicrosoftGraphPrintTaskProcessingState
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        state: Optional[Union[str, "MicrosoftGraphPrintTaskProcessingState"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintTaskStatus, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.description = description
        self.state = state


class MicrosoftGraphPrintTaskTrigger(MicrosoftGraphEntity):
    """printTaskTrigger.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param event:  Possible values include: "jobStarted", "unknownFutureValue".
    :type event: str or ~devices_cloud_print.models.MicrosoftGraphPrintEvent
    :param definition: printTaskDefinition.
    :type definition: ~devices_cloud_print.models.MicrosoftGraphPrintTaskDefinition
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'event': {'key': 'event', 'type': 'str'},
        'definition': {'key': 'definition', 'type': 'MicrosoftGraphPrintTaskDefinition'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        event: Optional[Union[str, "MicrosoftGraphPrintEvent"]] = None,
        definition: Optional["MicrosoftGraphPrintTaskDefinition"] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintTaskTrigger, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.event = event
        self.definition = definition


class MicrosoftGraphPrintUsageSummary(msrest.serialization.Model):
    """printUsageSummary.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param completed_job_count:
    :type completed_job_count: int
    :param incomplete_job_count:
    :type incomplete_job_count: int
    """

    _validation = {
        'completed_job_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'incomplete_job_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'completed_job_count': {'key': 'completedJobCount', 'type': 'int'},
        'incomplete_job_count': {'key': 'incompleteJobCount', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        completed_job_count: Optional[int] = None,
        incomplete_job_count: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintUsageSummary, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.completed_job_count = completed_job_count
        self.incomplete_job_count = incomplete_job_count


class MicrosoftGraphPrintUsageSummaryByPrinter(MicrosoftGraphEntity):
    """PrintUsageSummaryByPrinter.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param completed_black_and_white_job_count:
    :type completed_black_and_white_job_count: long
    :param completed_color_job_count:
    :type completed_color_job_count: long
    :param incomplete_job_count:
    :type incomplete_job_count: long
    :param printer_id:
    :type printer_id: str
    :param usage_date:
    :type usage_date: ~datetime.date
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'completed_black_and_white_job_count': {'key': 'completedBlackAndWhiteJobCount', 'type': 'long'},
        'completed_color_job_count': {'key': 'completedColorJobCount', 'type': 'long'},
        'incomplete_job_count': {'key': 'incompleteJobCount', 'type': 'long'},
        'printer_id': {'key': 'printerId', 'type': 'str'},
        'usage_date': {'key': 'usageDate', 'type': 'date'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        completed_black_and_white_job_count: Optional[int] = None,
        completed_color_job_count: Optional[int] = None,
        incomplete_job_count: Optional[int] = None,
        printer_id: Optional[str] = None,
        usage_date: Optional[datetime.date] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintUsageSummaryByPrinter, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.completed_black_and_white_job_count = completed_black_and_white_job_count
        self.completed_color_job_count = completed_color_job_count
        self.incomplete_job_count = incomplete_job_count
        self.printer_id = printer_id
        self.usage_date = usage_date


class MicrosoftGraphPrintUsageSummaryByUser(MicrosoftGraphEntity):
    """PrintUsageSummaryByUser.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param completed_black_and_white_job_count:
    :type completed_black_and_white_job_count: long
    :param completed_color_job_count:
    :type completed_color_job_count: long
    :param incomplete_job_count:
    :type incomplete_job_count: long
    :param usage_date:
    :type usage_date: ~datetime.date
    :param user_principal_name:
    :type user_principal_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'completed_black_and_white_job_count': {'key': 'completedBlackAndWhiteJobCount', 'type': 'long'},
        'completed_color_job_count': {'key': 'completedColorJobCount', 'type': 'long'},
        'incomplete_job_count': {'key': 'incompleteJobCount', 'type': 'long'},
        'usage_date': {'key': 'usageDate', 'type': 'date'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        completed_black_and_white_job_count: Optional[int] = None,
        completed_color_job_count: Optional[int] = None,
        incomplete_job_count: Optional[int] = None,
        usage_date: Optional[datetime.date] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintUsageSummaryByUser, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.completed_black_and_white_job_count = completed_black_and_white_job_count
        self.completed_color_job_count = completed_color_job_count
        self.incomplete_job_count = incomplete_job_count
        self.usage_date = usage_date
        self.user_principal_name = user_principal_name


class MicrosoftGraphPrintUserIdentity(MicrosoftGraphEntity):
    """printUserIdentity.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    :param ip_address:
    :type ip_address: str
    :param user_principal_name:
    :type user_principal_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        display_name: Optional[str] = None,
        ip_address: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintUserIdentity, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.display_name = display_name
        self.ip_address = ip_address
        self.user_principal_name = user_principal_name


class MicrosoftGraphReportRoot(MicrosoftGraphEntity):
    """The resource that represents an instance of History Reports.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param application_sign_in_detailed_summary:
    :type application_sign_in_detailed_summary:
     list[~devices_cloud_print.models.MicrosoftGraphApplicationSignInDetailedSummary]
    :param credential_user_registration_details:
    :type credential_user_registration_details:
     list[~devices_cloud_print.models.MicrosoftGraphCredentialUserRegistrationDetails]
    :param user_credential_usage_details:
    :type user_credential_usage_details:
     list[~devices_cloud_print.models.MicrosoftGraphUserCredentialUsageDetails]
    :param daily_print_usage_summaries_by_printer:
    :type daily_print_usage_summaries_by_printer:
     list[~devices_cloud_print.models.MicrosoftGraphPrintUsageSummaryByPrinter]
    :param daily_print_usage_summaries_by_user:
    :type daily_print_usage_summaries_by_user:
     list[~devices_cloud_print.models.MicrosoftGraphPrintUsageSummaryByUser]
    :param monthly_print_usage_summaries_by_printer:
    :type monthly_print_usage_summaries_by_printer:
     list[~devices_cloud_print.models.MicrosoftGraphPrintUsageSummaryByPrinter]
    :param monthly_print_usage_summaries_by_user:
    :type monthly_print_usage_summaries_by_user:
     list[~devices_cloud_print.models.MicrosoftGraphPrintUsageSummaryByUser]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'application_sign_in_detailed_summary': {'key': 'applicationSignInDetailedSummary', 'type': '[MicrosoftGraphApplicationSignInDetailedSummary]'},
        'credential_user_registration_details': {'key': 'credentialUserRegistrationDetails', 'type': '[MicrosoftGraphCredentialUserRegistrationDetails]'},
        'user_credential_usage_details': {'key': 'userCredentialUsageDetails', 'type': '[MicrosoftGraphUserCredentialUsageDetails]'},
        'daily_print_usage_summaries_by_printer': {'key': 'dailyPrintUsageSummariesByPrinter', 'type': '[MicrosoftGraphPrintUsageSummaryByPrinter]'},
        'daily_print_usage_summaries_by_user': {'key': 'dailyPrintUsageSummariesByUser', 'type': '[MicrosoftGraphPrintUsageSummaryByUser]'},
        'monthly_print_usage_summaries_by_printer': {'key': 'monthlyPrintUsageSummariesByPrinter', 'type': '[MicrosoftGraphPrintUsageSummaryByPrinter]'},
        'monthly_print_usage_summaries_by_user': {'key': 'monthlyPrintUsageSummariesByUser', 'type': '[MicrosoftGraphPrintUsageSummaryByUser]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        application_sign_in_detailed_summary: Optional[List["MicrosoftGraphApplicationSignInDetailedSummary"]] = None,
        credential_user_registration_details: Optional[List["MicrosoftGraphCredentialUserRegistrationDetails"]] = None,
        user_credential_usage_details: Optional[List["MicrosoftGraphUserCredentialUsageDetails"]] = None,
        daily_print_usage_summaries_by_printer: Optional[List["MicrosoftGraphPrintUsageSummaryByPrinter"]] = None,
        daily_print_usage_summaries_by_user: Optional[List["MicrosoftGraphPrintUsageSummaryByUser"]] = None,
        monthly_print_usage_summaries_by_printer: Optional[List["MicrosoftGraphPrintUsageSummaryByPrinter"]] = None,
        monthly_print_usage_summaries_by_user: Optional[List["MicrosoftGraphPrintUsageSummaryByUser"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphReportRoot, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.application_sign_in_detailed_summary = application_sign_in_detailed_summary
        self.credential_user_registration_details = credential_user_registration_details
        self.user_credential_usage_details = user_credential_usage_details
        self.daily_print_usage_summaries_by_printer = daily_print_usage_summaries_by_printer
        self.daily_print_usage_summaries_by_user = daily_print_usage_summaries_by_user
        self.monthly_print_usage_summaries_by_printer = monthly_print_usage_summaries_by_printer
        self.monthly_print_usage_summaries_by_user = monthly_print_usage_summaries_by_user


class MicrosoftGraphSignInStatus(msrest.serialization.Model):
    """signInStatus.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param additional_details: Provides additional details on the sign-in activity.
    :type additional_details: str
    :param error_code: Provides the 5-6digit error code that's generated during a sign-in failure.
     Check out the list of error codes and messages.
    :type error_code: int
    :param failure_reason: Provides the error message or the reason for failure for the
     corresponding sign-in activity. Check out the list of error codes and messages.
    :type failure_reason: str
    """

    _validation = {
        'error_code': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'additional_details': {'key': 'additionalDetails', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'int'},
        'failure_reason': {'key': 'failureReason', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        additional_details: Optional[str] = None,
        error_code: Optional[int] = None,
        failure_reason: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSignInStatus, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.additional_details = additional_details
        self.error_code = error_code
        self.failure_reason = failure_reason


class MicrosoftGraphUserCredentialUsageDetails(MicrosoftGraphEntity):
    """userCredentialUsageDetails.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param auth_method:  Possible values include: "email", "mobileSMS", "mobileCall",
     "officePhone", "securityQuestion", "appNotification", "appCode", "alternateMobileCall", "fido",
     "appPassword", "unknownFutureValue".
    :type auth_method: str or ~devices_cloud_print.models.MicrosoftGraphUsageAuthMethod
    :param event_date_time:
    :type event_date_time: ~datetime.datetime
    :param failure_reason:
    :type failure_reason: str
    :param feature:  Possible values include: "registration", "reset", "unknownFutureValue".
    :type feature: str or ~devices_cloud_print.models.MicrosoftGraphFeatureType
    :param is_success:
    :type is_success: bool
    :param user_display_name:
    :type user_display_name: str
    :param user_principal_name:
    :type user_principal_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'auth_method': {'key': 'authMethod', 'type': 'str'},
        'event_date_time': {'key': 'eventDateTime', 'type': 'iso-8601'},
        'failure_reason': {'key': 'failureReason', 'type': 'str'},
        'feature': {'key': 'feature', 'type': 'str'},
        'is_success': {'key': 'isSuccess', 'type': 'bool'},
        'user_display_name': {'key': 'userDisplayName', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        auth_method: Optional[Union[str, "MicrosoftGraphUsageAuthMethod"]] = None,
        event_date_time: Optional[datetime.datetime] = None,
        failure_reason: Optional[str] = None,
        feature: Optional[Union[str, "MicrosoftGraphFeatureType"]] = None,
        is_success: Optional[bool] = None,
        user_display_name: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphUserCredentialUsageDetails, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.auth_method = auth_method
        self.event_date_time = event_date_time
        self.failure_reason = failure_reason
        self.feature = feature
        self.is_success = is_success
        self.user_display_name = user_display_name
        self.user_principal_name = user_principal_name


class MicrosoftGraphUserIdentity(MicrosoftGraphIdentity):
    """userIdentity.

    :param display_name: The identity's display name. Note that this may not always be available or
     up to date. For example, if a user changes their display name, the API may show the new value
     in a future response, but the items associated with the user won't show up as having changed
     when using delta.
    :type display_name: str
    :param id: Unique identifier for the identity.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param ip_address: Indicates the client IP address used by user performing the activity (audit
     log only).
    :type ip_address: str
    :param user_principal_name: The userPrincipalName attribute of the user.
    :type user_principal_name: str
    """

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        ip_address: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphUserIdentity, self).__init__(display_name=display_name, id=id, **kwargs)
        self.additional_properties = additional_properties
        self.ip_address = ip_address
        self.user_principal_name = user_principal_name


class MicrosoftGraphUserPrintUsageSummary(msrest.serialization.Model):
    """userPrintUsageSummary.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param completed_job_count:
    :type completed_job_count: int
    :param incomplete_job_count:
    :type incomplete_job_count: int
    :param user: identity.
    :type user: ~devices_cloud_print.models.MicrosoftGraphIdentity
    :param user_display_name:
    :type user_display_name: str
    :param user_principal_name:
    :type user_principal_name: str
    """

    _validation = {
        'completed_job_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'incomplete_job_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'completed_job_count': {'key': 'completedJobCount', 'type': 'int'},
        'incomplete_job_count': {'key': 'incompleteJobCount', 'type': 'int'},
        'user': {'key': 'user', 'type': 'MicrosoftGraphIdentity'},
        'user_display_name': {'key': 'userDisplayName', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        completed_job_count: Optional[int] = None,
        incomplete_job_count: Optional[int] = None,
        user: Optional["MicrosoftGraphIdentity"] = None,
        user_display_name: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphUserPrintUsageSummary, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.completed_job_count = completed_job_count
        self.incomplete_job_count = incomplete_job_count
        self.user = user
        self.user_display_name = user_display_name
        self.user_principal_name = user_principal_name


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error: Required.
    :type error: ~devices_cloud_print.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        *,
        error: "OdataErrorMain",
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.error = error


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        additional_properties: Optional[Dict[str, object]] = None,
        target: Optional[str] = None,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.message = message
        self.target = target


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~devices_cloud_print.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: dict[str, object]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        additional_properties: Optional[Dict[str, object]] = None,
        target: Optional[str] = None,
        details: Optional[List["OdataErrorDetail"]] = None,
        innererror: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror


class Paths18VwyqhPrintPrintersMicrosoftGraphCreatePostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths18VwyqhPrintPrintersMicrosoftGraphCreatePostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    :param manufacturer:
    :type manufacturer: str
    :param model:
    :type model: str
    :param physical_device_id:
    :type physical_device_id: str
    :param has_physical_device:
    :type has_physical_device: bool
    :param certificate_signing_request: printCertificateSigningRequest.
    :type certificate_signing_request:
     ~devices_cloud_print.models.MicrosoftGraphPrintCertificateSigningRequest
    :param connector_id:
    :type connector_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'model': {'key': 'model', 'type': 'str'},
        'physical_device_id': {'key': 'physicalDeviceId', 'type': 'str'},
        'has_physical_device': {'key': 'hasPhysicalDevice', 'type': 'bool'},
        'certificate_signing_request': {'key': 'certificateSigningRequest', 'type': 'MicrosoftGraphPrintCertificateSigningRequest'},
        'connector_id': {'key': 'connectorId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        display_name: Optional[str] = None,
        manufacturer: Optional[str] = None,
        model: Optional[str] = None,
        physical_device_id: Optional[str] = None,
        has_physical_device: Optional[bool] = False,
        certificate_signing_request: Optional["MicrosoftGraphPrintCertificateSigningRequest"] = None,
        connector_id: Optional[str] = None,
        **kwargs
    ):
        super(Paths18VwyqhPrintPrintersMicrosoftGraphCreatePostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.display_name = display_name
        self.manufacturer = manufacturer
        self.model = model
        self.physical_device_id = physical_device_id
        self.has_physical_device = has_physical_device
        self.certificate_signing_request = certificate_signing_request
        self.connector_id = connector_id
