# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class Enum100(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TASKS = "tasks"

class Enum101(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    DISPLAYNAME = "displayName"
    TASKS = "tasks"

class Enum102(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TASKS = "tasks"

class Enum103(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    PARENTURL = "parentUrl"
    PARENTURLDESC = "parentUrl desc"
    STATUS = "status"
    STATUSDESC = "status desc"

class Enum104(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    PARENTURL = "parentUrl"
    STATUS = "status"
    DEFINITION = "definition"
    TRIGGER = "trigger"

class Enum105(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    DEFINITION = "definition"
    TRIGGER = "trigger"

class Enum106(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    PARENTURL = "parentUrl"
    STATUS = "status"
    DEFINITION = "definition"
    TRIGGER = "trigger"

class Enum107(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    DEFINITION = "definition"
    TRIGGER = "trigger"

class Enum108(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    DISPLAYNAME = "displayName"
    TASKS = "tasks"

class Enum109(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TASKS = "tasks"

class Enum110(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    EVENT = "event"
    DEFINITION = "definition"

class Enum111(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    DEFINITION = "definition"

class Enum28(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    APPVERSION = "appVersion"
    DEVICEHEALTH = "deviceHealth"
    DISPLAYNAME = "displayName"
    FULLYQUALIFIEDDOMAINNAME = "fullyQualifiedDomainName"
    LOCATION = "location"
    NAME = "name"
    OPERATINGSYSTEM = "operatingSystem"
    REGISTEREDDATETIME = "registeredDateTime"

class Enum29(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"
    STATUS = "status"
    STATUSDESC = "status desc"

class Enum30(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDDATETIME = "createdDateTime"
    STATUS = "status"

class Enum31(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDDATETIME = "createdDateTime"
    STATUS = "status"

class Enum32(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CAPABILITIES = "capabilities"
    CAPABILITIESDESC = "capabilities desc"
    DEFAULTS = "defaults"
    DEFAULTSDESC = "defaults desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    ISACCEPTINGJOBS = "isAcceptingJobs"
    ISACCEPTINGJOBSDESC = "isAcceptingJobs desc"
    LOCATION = "location"
    LOCATIONDESC = "location desc"
    MANUFACTURER = "manufacturer"
    MANUFACTURERDESC = "manufacturer desc"
    MODEL = "model"
    MODELDESC = "model desc"
    NAME = "name"
    NAMEDESC = "name desc"
    STATUS = "status"
    STATUSDESC = "status desc"
    ACCEPTINGJOBS = "acceptingJobs"
    ACCEPTINGJOBSDESC = "acceptingJobs desc"
    ISSHARED = "isShared"
    ISSHAREDDESC = "isShared desc"
    REGISTEREDDATETIME = "registeredDateTime"
    REGISTEREDDATETIMEDESC = "registeredDateTime desc"

class Enum33(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CAPABILITIES = "capabilities"
    DEFAULTS = "defaults"
    DISPLAYNAME = "displayName"
    ISACCEPTINGJOBS = "isAcceptingJobs"
    LOCATION = "location"
    MANUFACTURER = "manufacturer"
    MODEL = "model"
    NAME = "name"
    STATUS = "status"
    ACCEPTINGJOBS = "acceptingJobs"
    ISSHARED = "isShared"
    REGISTEREDDATETIME = "registeredDateTime"
    JOBS = "jobs"
    ALLOWEDGROUPS = "allowedGroups"
    ALLOWEDUSERS = "allowedUsers"
    CONNECTORS = "connectors"
    SHARE = "share"
    SHARES = "shares"
    TASKTRIGGERS = "taskTriggers"

class Enum34(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    JOBS = "jobs"
    ALLOWEDGROUPS = "allowedGroups"
    ALLOWEDUSERS = "allowedUsers"
    CONNECTORS = "connectors"
    SHARE = "share"
    SHARES = "shares"
    TASKTRIGGERS = "taskTriggers"

class Enum35(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CAPABILITIES = "capabilities"
    DEFAULTS = "defaults"
    DISPLAYNAME = "displayName"
    ISACCEPTINGJOBS = "isAcceptingJobs"
    LOCATION = "location"
    MANUFACTURER = "manufacturer"
    MODEL = "model"
    NAME = "name"
    STATUS = "status"
    ACCEPTINGJOBS = "acceptingJobs"
    ISSHARED = "isShared"
    REGISTEREDDATETIME = "registeredDateTime"
    JOBS = "jobs"
    ALLOWEDGROUPS = "allowedGroups"
    ALLOWEDUSERS = "allowedUsers"
    CONNECTORS = "connectors"
    SHARE = "share"
    SHARES = "shares"
    TASKTRIGGERS = "taskTriggers"

class Enum36(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    JOBS = "jobs"
    ALLOWEDGROUPS = "allowedGroups"
    ALLOWEDUSERS = "allowedUsers"
    CONNECTORS = "connectors"
    SHARE = "share"
    SHARES = "shares"
    TASKTRIGGERS = "taskTriggers"

class Enum37(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"

class Enum38(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"

class Enum39(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"

class Enum40(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    IPADDRESS = "ipAddress"
    IPADDRESSDESC = "ipAddress desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"

class Enum41(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"
    IPADDRESS = "ipAddress"
    USERPRINCIPALNAME = "userPrincipalName"

class Enum42(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"
    IPADDRESS = "ipAddress"
    USERPRINCIPALNAME = "userPrincipalName"

class Enum43(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    APPVERSION = "appVersion"
    APPVERSIONDESC = "appVersion desc"
    DEVICEHEALTH = "deviceHealth"
    DEVICEHEALTHDESC = "deviceHealth desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    FULLYQUALIFIEDDOMAINNAME = "fullyQualifiedDomainName"
    FULLYQUALIFIEDDOMAINNAMEDESC = "fullyQualifiedDomainName desc"
    LOCATION = "location"
    LOCATIONDESC = "location desc"
    NAME = "name"
    NAMEDESC = "name desc"
    OPERATINGSYSTEM = "operatingSystem"
    OPERATINGSYSTEMDESC = "operatingSystem desc"
    REGISTEREDDATETIME = "registeredDateTime"
    REGISTEREDDATETIMEDESC = "registeredDateTime desc"

class Enum44(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    APPVERSION = "appVersion"
    DEVICEHEALTH = "deviceHealth"
    DISPLAYNAME = "displayName"
    FULLYQUALIFIEDDOMAINNAME = "fullyQualifiedDomainName"
    LOCATION = "location"
    NAME = "name"
    OPERATINGSYSTEM = "operatingSystem"
    REGISTEREDDATETIME = "registeredDateTime"

class Enum45(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    APPVERSION = "appVersion"
    APPVERSIONDESC = "appVersion desc"
    DEVICEHEALTH = "deviceHealth"
    DEVICEHEALTHDESC = "deviceHealth desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    FULLYQUALIFIEDDOMAINNAME = "fullyQualifiedDomainName"
    FULLYQUALIFIEDDOMAINNAMEDESC = "fullyQualifiedDomainName desc"
    LOCATION = "location"
    LOCATIONDESC = "location desc"
    NAME = "name"
    NAMEDESC = "name desc"
    OPERATINGSYSTEM = "operatingSystem"
    OPERATINGSYSTEMDESC = "operatingSystem desc"
    REGISTEREDDATETIME = "registeredDateTime"
    REGISTEREDDATETIMEDESC = "registeredDateTime desc"

class Enum46(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CAPABILITIES = "capabilities"
    DEFAULTS = "defaults"
    DISPLAYNAME = "displayName"
    ISACCEPTINGJOBS = "isAcceptingJobs"
    LOCATION = "location"
    MANUFACTURER = "manufacturer"
    MODEL = "model"
    NAME = "name"
    STATUS = "status"
    ALLOWALLUSERS = "allowAllUsers"
    CREATEDDATETIME = "createdDateTime"
    JOBS = "jobs"
    ALLOWEDGROUPS = "allowedGroups"
    ALLOWEDUSERS = "allowedUsers"
    PRINTER = "printer"

class Enum47(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    JOBS = "jobs"
    ALLOWEDGROUPS = "allowedGroups"
    ALLOWEDUSERS = "allowedUsers"
    PRINTER = "printer"

class Enum48(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CAPABILITIES = "capabilities"
    CAPABILITIESDESC = "capabilities desc"
    DEFAULTS = "defaults"
    DEFAULTSDESC = "defaults desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    ISACCEPTINGJOBS = "isAcceptingJobs"
    ISACCEPTINGJOBSDESC = "isAcceptingJobs desc"
    LOCATION = "location"
    LOCATIONDESC = "location desc"
    MANUFACTURER = "manufacturer"
    MANUFACTURERDESC = "manufacturer desc"
    MODEL = "model"
    MODELDESC = "model desc"
    NAME = "name"
    NAMEDESC = "name desc"
    STATUS = "status"
    STATUSDESC = "status desc"
    ALLOWALLUSERS = "allowAllUsers"
    ALLOWALLUSERSDESC = "allowAllUsers desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"

class Enum49(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CAPABILITIES = "capabilities"
    DEFAULTS = "defaults"
    DISPLAYNAME = "displayName"
    ISACCEPTINGJOBS = "isAcceptingJobs"
    LOCATION = "location"
    MANUFACTURER = "manufacturer"
    MODEL = "model"
    NAME = "name"
    STATUS = "status"
    ALLOWALLUSERS = "allowAllUsers"
    CREATEDDATETIME = "createdDateTime"
    JOBS = "jobs"
    ALLOWEDGROUPS = "allowedGroups"
    ALLOWEDUSERS = "allowedUsers"
    PRINTER = "printer"

class Enum50(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    JOBS = "jobs"
    ALLOWEDGROUPS = "allowedGroups"
    ALLOWEDUSERS = "allowedUsers"
    PRINTER = "printer"

class Enum51(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CAPABILITIES = "capabilities"
    CAPABILITIESDESC = "capabilities desc"
    DEFAULTS = "defaults"
    DEFAULTSDESC = "defaults desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    ISACCEPTINGJOBS = "isAcceptingJobs"
    ISACCEPTINGJOBSDESC = "isAcceptingJobs desc"
    LOCATION = "location"
    LOCATIONDESC = "location desc"
    MANUFACTURER = "manufacturer"
    MANUFACTURERDESC = "manufacturer desc"
    MODEL = "model"
    MODELDESC = "model desc"
    NAME = "name"
    NAMEDESC = "name desc"
    STATUS = "status"
    STATUSDESC = "status desc"
    ALLOWALLUSERS = "allowAllUsers"
    ALLOWALLUSERSDESC = "allowAllUsers desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"

class Enum52(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    EVENT = "event"
    EVENTDESC = "event desc"

class Enum53(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    EVENT = "event"
    DEFINITION = "definition"

class Enum54(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    DEFINITION = "definition"

class Enum55(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    EVENT = "event"
    DEFINITION = "definition"

class Enum56(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    DEFINITION = "definition"

class Enum57(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    DISPLAYNAME = "displayName"
    TASKS = "tasks"

class Enum58(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TASKS = "tasks"

class Enum59(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CAPABILITIES = "capabilities"
    CAPABILITIESDESC = "capabilities desc"
    DEFAULTS = "defaults"
    DEFAULTSDESC = "defaults desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    ISACCEPTINGJOBS = "isAcceptingJobs"
    ISACCEPTINGJOBSDESC = "isAcceptingJobs desc"
    LOCATION = "location"
    LOCATIONDESC = "location desc"
    MANUFACTURER = "manufacturer"
    MANUFACTURERDESC = "manufacturer desc"
    MODEL = "model"
    MODELDESC = "model desc"
    NAME = "name"
    NAMEDESC = "name desc"
    STATUS = "status"
    STATUSDESC = "status desc"
    ALLOWALLUSERS = "allowAllUsers"
    ALLOWALLUSERSDESC = "allowAllUsers desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"

class Enum60(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CAPABILITIES = "capabilities"
    DEFAULTS = "defaults"
    DISPLAYNAME = "displayName"
    ISACCEPTINGJOBS = "isAcceptingJobs"
    LOCATION = "location"
    MANUFACTURER = "manufacturer"
    MODEL = "model"
    NAME = "name"
    STATUS = "status"
    ALLOWALLUSERS = "allowAllUsers"
    CREATEDDATETIME = "createdDateTime"
    JOBS = "jobs"
    ALLOWEDGROUPS = "allowedGroups"
    ALLOWEDUSERS = "allowedUsers"
    PRINTER = "printer"

class Enum61(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    JOBS = "jobs"
    ALLOWEDGROUPS = "allowedGroups"
    ALLOWEDUSERS = "allowedUsers"
    PRINTER = "printer"

class Enum62(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CAPABILITIES = "capabilities"
    DEFAULTS = "defaults"
    DISPLAYNAME = "displayName"
    ISACCEPTINGJOBS = "isAcceptingJobs"
    LOCATION = "location"
    MANUFACTURER = "manufacturer"
    MODEL = "model"
    NAME = "name"
    STATUS = "status"
    ALLOWALLUSERS = "allowAllUsers"
    CREATEDDATETIME = "createdDateTime"
    JOBS = "jobs"
    ALLOWEDGROUPS = "allowedGroups"
    ALLOWEDUSERS = "allowedUsers"
    PRINTER = "printer"

class Enum63(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    JOBS = "jobs"
    ALLOWEDGROUPS = "allowedGroups"
    ALLOWEDUSERS = "allowedUsers"
    PRINTER = "printer"

class Enum64(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"

class Enum65(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"

class Enum66(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"

class Enum67(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    IPADDRESS = "ipAddress"
    IPADDRESSDESC = "ipAddress desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"

class Enum68(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"
    IPADDRESS = "ipAddress"
    USERPRINCIPALNAME = "userPrincipalName"

class Enum69(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"
    IPADDRESS = "ipAddress"
    USERPRINCIPALNAME = "userPrincipalName"

class Enum70(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CAPABILITIES = "capabilities"
    DEFAULTS = "defaults"
    DISPLAYNAME = "displayName"
    ISACCEPTINGJOBS = "isAcceptingJobs"
    LOCATION = "location"
    MANUFACTURER = "manufacturer"
    MODEL = "model"
    NAME = "name"
    STATUS = "status"
    ACCEPTINGJOBS = "acceptingJobs"
    ISSHARED = "isShared"
    REGISTEREDDATETIME = "registeredDateTime"
    JOBS = "jobs"
    ALLOWEDGROUPS = "allowedGroups"
    ALLOWEDUSERS = "allowedUsers"
    CONNECTORS = "connectors"
    SHARE = "share"
    SHARES = "shares"
    TASKTRIGGERS = "taskTriggers"

class Enum71(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    JOBS = "jobs"
    ALLOWEDGROUPS = "allowedGroups"
    ALLOWEDUSERS = "allowedUsers"
    CONNECTORS = "connectors"
    SHARE = "share"
    SHARES = "shares"
    TASKTRIGGERS = "taskTriggers"

class Enum72(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"

class Enum73(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    APPLICATIONSIGNINDETAILEDSUMMARY = "applicationSignInDetailedSummary"
    CREDENTIALUSERREGISTRATIONDETAILS = "credentialUserRegistrationDetails"
    USERCREDENTIALUSAGEDETAILS = "userCredentialUsageDetails"
    DAILYPRINTUSAGESUMMARIESBYPRINTER = "dailyPrintUsageSummariesByPrinter"
    DAILYPRINTUSAGESUMMARIESBYUSER = "dailyPrintUsageSummariesByUser"
    MONTHLYPRINTUSAGESUMMARIESBYPRINTER = "monthlyPrintUsageSummariesByPrinter"
    MONTHLYPRINTUSAGESUMMARIESBYUSER = "monthlyPrintUsageSummariesByUser"

class Enum74(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLICATIONSIGNINDETAILEDSUMMARY = "applicationSignInDetailedSummary"
    CREDENTIALUSERREGISTRATIONDETAILS = "credentialUserRegistrationDetails"
    USERCREDENTIALUSAGEDETAILS = "userCredentialUsageDetails"
    DAILYPRINTUSAGESUMMARIESBYPRINTER = "dailyPrintUsageSummariesByPrinter"
    DAILYPRINTUSAGESUMMARIESBYUSER = "dailyPrintUsageSummariesByUser"
    MONTHLYPRINTUSAGESUMMARIESBYPRINTER = "monthlyPrintUsageSummariesByPrinter"
    MONTHLYPRINTUSAGESUMMARIESBYUSER = "monthlyPrintUsageSummariesByUser"

class Enum75(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    APPLICATIONSIGNINDETAILEDSUMMARY = "applicationSignInDetailedSummary"
    CREDENTIALUSERREGISTRATIONDETAILS = "credentialUserRegistrationDetails"
    USERCREDENTIALUSAGEDETAILS = "userCredentialUsageDetails"
    DAILYPRINTUSAGESUMMARIESBYPRINTER = "dailyPrintUsageSummariesByPrinter"
    DAILYPRINTUSAGESUMMARIESBYUSER = "dailyPrintUsageSummariesByUser"
    MONTHLYPRINTUSAGESUMMARIESBYPRINTER = "monthlyPrintUsageSummariesByPrinter"
    MONTHLYPRINTUSAGESUMMARIESBYUSER = "monthlyPrintUsageSummariesByUser"

class Enum76(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLICATIONSIGNINDETAILEDSUMMARY = "applicationSignInDetailedSummary"
    CREDENTIALUSERREGISTRATIONDETAILS = "credentialUserRegistrationDetails"
    USERCREDENTIALUSAGEDETAILS = "userCredentialUsageDetails"
    DAILYPRINTUSAGESUMMARIESBYPRINTER = "dailyPrintUsageSummariesByPrinter"
    DAILYPRINTUSAGESUMMARIESBYUSER = "dailyPrintUsageSummariesByUser"
    MONTHLYPRINTUSAGESUMMARIESBYPRINTER = "monthlyPrintUsageSummariesByPrinter"
    MONTHLYPRINTUSAGESUMMARIESBYUSER = "monthlyPrintUsageSummariesByUser"

class Enum77(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"

class Enum78(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ENDPOINTS = "endpoints"

class Enum79(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ENDPOINTS = "endpoints"

class Enum80(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ENDPOINTS = "endpoints"

class Enum81(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ENDPOINTS = "endpoints"

class Enum82(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    URI = "uri"
    URIDESC = "uri desc"

class Enum83(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"
    URI = "uri"

class Enum84(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"
    URI = "uri"

class Enum85(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CAPABILITIES = "capabilities"
    CAPABILITIESDESC = "capabilities desc"
    DEFAULTS = "defaults"
    DEFAULTSDESC = "defaults desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    ISACCEPTINGJOBS = "isAcceptingJobs"
    ISACCEPTINGJOBSDESC = "isAcceptingJobs desc"
    LOCATION = "location"
    LOCATIONDESC = "location desc"
    MANUFACTURER = "manufacturer"
    MANUFACTURERDESC = "manufacturer desc"
    MODEL = "model"
    MODELDESC = "model desc"
    NAME = "name"
    NAMEDESC = "name desc"
    STATUS = "status"
    STATUSDESC = "status desc"
    ALLOWALLUSERS = "allowAllUsers"
    ALLOWALLUSERSDESC = "allowAllUsers desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"

class Enum86(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CAPABILITIES = "capabilities"
    DEFAULTS = "defaults"
    DISPLAYNAME = "displayName"
    ISACCEPTINGJOBS = "isAcceptingJobs"
    LOCATION = "location"
    MANUFACTURER = "manufacturer"
    MODEL = "model"
    NAME = "name"
    STATUS = "status"
    ALLOWALLUSERS = "allowAllUsers"
    CREATEDDATETIME = "createdDateTime"
    JOBS = "jobs"
    ALLOWEDGROUPS = "allowedGroups"
    ALLOWEDUSERS = "allowedUsers"
    PRINTER = "printer"

class Enum87(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    JOBS = "jobs"
    ALLOWEDGROUPS = "allowedGroups"
    ALLOWEDUSERS = "allowedUsers"
    PRINTER = "printer"

class Enum88(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CAPABILITIES = "capabilities"
    DEFAULTS = "defaults"
    DISPLAYNAME = "displayName"
    ISACCEPTINGJOBS = "isAcceptingJobs"
    LOCATION = "location"
    MANUFACTURER = "manufacturer"
    MODEL = "model"
    NAME = "name"
    STATUS = "status"
    ALLOWALLUSERS = "allowAllUsers"
    CREATEDDATETIME = "createdDateTime"
    JOBS = "jobs"
    ALLOWEDGROUPS = "allowedGroups"
    ALLOWEDUSERS = "allowedUsers"
    PRINTER = "printer"

class Enum89(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    JOBS = "jobs"
    ALLOWEDGROUPS = "allowedGroups"
    ALLOWEDUSERS = "allowedUsers"
    PRINTER = "printer"

class Enum90(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"

class Enum91(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"

class Enum92(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"

class Enum93(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    IPADDRESS = "ipAddress"
    IPADDRESSDESC = "ipAddress desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"

class Enum94(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"
    IPADDRESS = "ipAddress"
    USERPRINCIPALNAME = "userPrincipalName"

class Enum95(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"
    IPADDRESS = "ipAddress"
    USERPRINCIPALNAME = "userPrincipalName"

class Enum96(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CAPABILITIES = "capabilities"
    DEFAULTS = "defaults"
    DISPLAYNAME = "displayName"
    ISACCEPTINGJOBS = "isAcceptingJobs"
    LOCATION = "location"
    MANUFACTURER = "manufacturer"
    MODEL = "model"
    NAME = "name"
    STATUS = "status"
    ACCEPTINGJOBS = "acceptingJobs"
    ISSHARED = "isShared"
    REGISTEREDDATETIME = "registeredDateTime"
    JOBS = "jobs"
    ALLOWEDGROUPS = "allowedGroups"
    ALLOWEDUSERS = "allowedUsers"
    CONNECTORS = "connectors"
    SHARE = "share"
    SHARES = "shares"
    TASKTRIGGERS = "taskTriggers"

class Enum97(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    JOBS = "jobs"
    ALLOWEDGROUPS = "allowedGroups"
    ALLOWEDUSERS = "allowedUsers"
    CONNECTORS = "connectors"
    SHARE = "share"
    SHARES = "shares"
    TASKTRIGGERS = "taskTriggers"

class Enum98(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"

class Enum99(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    DISPLAYNAME = "displayName"
    TASKS = "tasks"

class Get0itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SETTINGS = "settings"
    CONNECTORS = "connectors"
    OPERATIONS = "operations"
    PRINTERS = "printers"
    PRINTERSHARES = "printerShares"
    REPORTS = "reports"
    SERVICES = "services"
    SHARES = "shares"
    TASKDEFINITIONS = "taskDefinitions"

class Get1itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CONNECTORS = "connectors"
    OPERATIONS = "operations"
    PRINTERS = "printers"
    PRINTERSHARES = "printerShares"
    REPORTS = "reports"
    SERVICES = "services"
    SHARES = "shares"
    TASKDEFINITIONS = "taskDefinitions"

class Get5itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    APPVERSION = "appVersion"
    APPVERSIONDESC = "appVersion desc"
    DEVICEHEALTH = "deviceHealth"
    DEVICEHEALTHDESC = "deviceHealth desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    FULLYQUALIFIEDDOMAINNAME = "fullyQualifiedDomainName"
    FULLYQUALIFIEDDOMAINNAMEDESC = "fullyQualifiedDomainName desc"
    LOCATION = "location"
    LOCATIONDESC = "location desc"
    NAME = "name"
    NAMEDESC = "name desc"
    OPERATINGSYSTEM = "operatingSystem"
    OPERATINGSYSTEMDESC = "operatingSystem desc"
    REGISTEREDDATETIME = "registeredDateTime"
    REGISTEREDDATETIMEDESC = "registeredDateTime desc"

class Get6itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    APPVERSION = "appVersion"
    DEVICEHEALTH = "deviceHealth"
    DISPLAYNAME = "displayName"
    FULLYQUALIFIEDDOMAINNAME = "fullyQualifiedDomainName"
    LOCATION = "location"
    NAME = "name"
    OPERATINGSYSTEM = "operatingSystem"
    REGISTEREDDATETIME = "registeredDateTime"

class Microsoftgraphfeaturetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    REGISTRATION = "registration"
    RESET = "reset"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphprintcolorconfiguration(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    BLACKANDWHITE = "blackAndWhite"
    GRAYSCALE = "grayscale"
    COLOR = "color"
    AUTO = "auto"

class Microsoftgraphprintcolormode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    BLACKANDWHITE = "blackAndWhite"
    GRAYSCALE = "grayscale"
    COLOR = "color"
    AUTO = "auto"

class Microsoftgraphprintduplexconfiguration(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    TWOSIDEDLONGEDGE = "twoSidedLongEdge"
    TWOSIDEDSHORTEDGE = "twoSidedShortEdge"
    ONESIDED = "oneSided"

class Microsoftgraphprintduplexmode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FLIPONLONGEDGE = "flipOnLongEdge"
    FLIPONSHORTEDGE = "flipOnShortEdge"
    ONESIDED = "oneSided"

class Microsoftgraphprinterfeeddirection(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LONGEDGEFIRST = "longEdgeFirst"
    SHORTEDGEFIRST = "shortEdgeFirst"

class Microsoftgraphprinterfeedorientation(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LONGEDGEFIRST = "longEdgeFirst"
    SHORTEDGEFIRST = "shortEdgeFirst"

class Microsoftgraphprinterprocessingstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    IDLE = "idle"
    PROCESSING = "processing"
    STOPPED = "stopped"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphprinterprocessingstatedetail(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PAUSED = "paused"
    DISCONNECTED = "disconnected"
    MEDIAJAM = "mediaJam"
    MEDIANEEDED = "mediaNeeded"
    MEDIALOW = "mediaLow"
    MEDIAEMPTY = "mediaEmpty"
    COVEROPEN = "coverOpen"
    INTERLOCKOPEN = "interlockOpen"
    QUEUEFULL = "queueFull"
    OUTPUTTRAYMISSING = "outputTrayMissing"
    OUTPUTAREAFULL = "outputAreaFull"
    MARKERSUPPLYLOW = "markerSupplyLow"
    MARKERSUPPLYEMPTY = "markerSupplyEmpty"
    INPUTTRAYMISSING = "inputTrayMissing"
    OUTPUTALMOSTFULL = "outputAlmostFull"
    MARKERWASTEALMOSTFULL = "markerWasteAlmostFull"
    MARKERWASTEFULL = "markerWasteFull"
    FUSEROVERTEMP = "fuserOverTemp"
    FUSERUNDERTEMP = "fuserUnderTemp"
    OTHER = "other"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphprinterprocessingstatereason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PAUSED = "paused"
    DISCONNECTED = "disconnected"
    MEDIAJAM = "mediaJam"
    MEDIANEEDED = "mediaNeeded"
    MEDIALOW = "mediaLow"
    MEDIAEMPTY = "mediaEmpty"
    COVEROPEN = "coverOpen"
    INTERLOCKOPEN = "interlockOpen"
    QUEUEFULL = "queueFull"
    OUTPUTTRAYMISSING = "outputTrayMissing"
    OUTPUTAREAFULL = "outputAreaFull"
    MARKERSUPPLYLOW = "markerSupplyLow"
    MARKERSUPPLYEMPTY = "markerSupplyEmpty"
    INPUTTRAYMISSING = "inputTrayMissing"
    OUTPUTALMOSTFULL = "outputAlmostFull"
    MARKERWASTEALMOSTFULL = "markerWasteAlmostFull"
    MARKERWASTEFULL = "markerWasteFull"
    FUSEROVERTEMP = "fuserOverTemp"
    FUSERUNDERTEMP = "fuserUnderTemp"
    OTHER = "other"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphprintevent(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    JOBSTARTED = "jobStarted"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphprintfinishing(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    STAPLE = "staple"
    PUNCH = "punch"
    COVER = "cover"
    BIND = "bind"
    SADDLESTITCH = "saddleStitch"
    STITCHEDGE = "stitchEdge"
    STAPLETOPLEFT = "stapleTopLeft"
    STAPLEBOTTOMLEFT = "stapleBottomLeft"
    STAPLETOPRIGHT = "stapleTopRight"
    STAPLEBOTTOMRIGHT = "stapleBottomRight"
    STITCHLEFTEDGE = "stitchLeftEdge"
    STITCHTOPEDGE = "stitchTopEdge"
    STITCHRIGHTEDGE = "stitchRightEdge"
    STITCHBOTTOMEDGE = "stitchBottomEdge"
    STAPLEDUALLEFT = "stapleDualLeft"
    STAPLEDUALTOP = "stapleDualTop"
    STAPLEDUALRIGHT = "stapleDualRight"
    STAPLEDUALBOTTOM = "stapleDualBottom"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphprintjobprocessingstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    PENDING = "pending"
    PROCESSING = "processing"
    PAUSED = "paused"
    STOPPED = "stopped"
    COMPLETED = "completed"
    CANCELED = "canceled"
    ABORTED = "aborted"

class Microsoftgraphprintjobstatedetail(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UPLOADPENDING = "uploadPending"
    TRANSFORMING = "transforming"
    COMPLETEDSUCCESSFULLY = "completedSuccessfully"
    COMPLETEDWITHWARNINGS = "completedWithWarnings"
    COMPLETEDWITHERRORS = "completedWithErrors"
    RELEASEWAIT = "releaseWait"
    INTERPRETING = "interpreting"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphprintmediatype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STATIONERY = "stationery"
    TRANSPARENCY = "transparency"
    ENVELOPE = "envelope"
    ENVELOPEPLAIN = "envelopePlain"
    CONTINUOUS = "continuous"
    SCREEN = "screen"
    SCREENPAGED = "screenPaged"
    CONTINUOUSLONG = "continuousLong"
    CONTINUOUSSHORT = "continuousShort"
    ENVELOPEWINDOW = "envelopeWindow"
    MULTIPARTFORM = "multiPartForm"
    MULTILAYER = "multiLayer"
    LABELS = "labels"

class Microsoftgraphprintmultipagelayout(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CLOCKWISEFROMTOPLEFT = "clockwiseFromTopLeft"
    COUNTERCLOCKWISEFROMTOPLEFT = "counterclockwiseFromTopLeft"
    COUNTERCLOCKWISEFROMTOPRIGHT = "counterclockwiseFromTopRight"
    CLOCKWISEFROMTOPRIGHT = "clockwiseFromTopRight"
    COUNTERCLOCKWISEFROMBOTTOMLEFT = "counterclockwiseFromBottomLeft"
    CLOCKWISEFROMBOTTOMLEFT = "clockwiseFromBottomLeft"
    COUNTERCLOCKWISEFROMBOTTOMRIGHT = "counterclockwiseFromBottomRight"
    CLOCKWISEFROMBOTTOMRIGHT = "clockwiseFromBottomRight"

class Microsoftgraphprintoperationprocessingstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTSTARTED = "notStarted"
    RUNNING = "running"
    SUCCEEDED = "succeeded"
    FAILED = "failed"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphprintorientation(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PORTRAIT = "portrait"
    LANDSCAPE = "landscape"
    REVERSELANDSCAPE = "reverseLandscape"
    REVERSEPORTRAIT = "reversePortrait"

class Microsoftgraphprintpresentationdirection(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CLOCKWISEFROMTOPLEFT = "clockwiseFromTopLeft"
    COUNTERCLOCKWISEFROMTOPLEFT = "counterClockwiseFromTopLeft"
    COUNTERCLOCKWISEFROMTOPRIGHT = "counterClockwiseFromTopRight"
    CLOCKWISEFROMTOPRIGHT = "clockwiseFromTopRight"
    COUNTERCLOCKWISEFROMBOTTOMLEFT = "counterClockwiseFromBottomLeft"
    CLOCKWISEFROMBOTTOMLEFT = "clockwiseFromBottomLeft"
    COUNTERCLOCKWISEFROMBOTTOMRIGHT = "counterClockwiseFromBottomRight"
    CLOCKWISEFROMBOTTOMRIGHT = "clockwiseFromBottomRight"

class Microsoftgraphprintquality(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphprintscaling(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AUTO = "auto"
    SHRINKTOFIT = "shrinkToFit"
    FILL = "fill"
    FIT = "fit"
    NONE = "none"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphprinttaskprocessingstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "pending"
    PROCESSING = "processing"
    COMPLETED = "completed"
    ABORTED = "aborted"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphregistrationauthmethod(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EMAIL = "email"
    MOBILEPHONE = "mobilePhone"
    OFFICEPHONE = "officePhone"
    SECURITYQUESTION = "securityQuestion"
    APPNOTIFICATION = "appNotification"
    APPCODE = "appCode"
    ALTERNATEMOBILEPHONE = "alternateMobilePhone"
    FIDO = "fido"
    APPPASSWORD = "appPassword"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphusageauthmethod(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EMAIL = "email"
    MOBILESMS = "mobileSMS"
    MOBILECALL = "mobileCall"
    OFFICEPHONE = "officePhone"
    SECURITYQUESTION = "securityQuestion"
    APPNOTIFICATION = "appNotification"
    APPCODE = "appCode"
    ALTERNATEMOBILECALL = "alternateMobileCall"
    FIDO = "fido"
    APPPASSWORD = "appPassword"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"
