# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class PrintTaskDefinitionOperations:
    """PrintTaskDefinitionOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~devices_cloud_print.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_task(
        self,
        print_task_definition_id: str,
        orderby: Optional[List[Union[str, "models.Enum103"]]] = None,
        select: Optional[List[Union[str, "models.Enum104"]]] = None,
        expand: Optional[List[Union[str, "models.Enum105"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfPrintTask"]:
        """Get tasks from print.

        Get tasks from print.

        :param print_task_definition_id: key: id of printTaskDefinition.
        :type print_task_definition_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_cloud_print.models.Enum103]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum104]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_cloud_print.models.Enum105]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfPrintTask or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_cloud_print.models.CollectionOfPrintTask]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfPrintTask"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_task.metadata['url']  # type: ignore
                path_format_arguments = {
                    'printTaskDefinition-id': self._serialize.url("print_task_definition_id", print_task_definition_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfPrintTask', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_task.metadata = {'url': '/print/taskDefinitions/{printTaskDefinition-id}/tasks'}  # type: ignore

    async def create_task(
        self,
        print_task_definition_id: str,
        id: Optional[str] = None,
        parent_url: Optional[str] = None,
        status: Optional["models.MicrosoftGraphPrintTaskStatus"] = None,
        definition: Optional["models.MicrosoftGraphPrintTaskDefinition"] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        event: Optional[Union[str, "models.MicrosoftGraphPrintEvent"]] = None,
        microsoft_graph_print_task_definition: Optional["models.MicrosoftGraphPrintTaskDefinition"] = None,
        **kwargs
    ) -> "models.MicrosoftGraphPrintTask":
        """Create new navigation property to tasks for print.

        Create new navigation property to tasks for print.

        :param print_task_definition_id: key: id of printTaskDefinition.
        :type print_task_definition_id: str
        :param id: Read-only.
        :type id: str
        :param parent_url:
        :type parent_url: str
        :param status: printTaskStatus.
        :type status: ~devices_cloud_print.models.MicrosoftGraphPrintTaskStatus
        :param definition: printTaskDefinition.
        :type definition: ~devices_cloud_print.models.MicrosoftGraphPrintTaskDefinition
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param event:
        :type event: str or ~devices_cloud_print.models.MicrosoftGraphPrintEvent
        :param microsoft_graph_print_task_definition: printTaskDefinition.
        :type microsoft_graph_print_task_definition: ~devices_cloud_print.models.MicrosoftGraphPrintTaskDefinition
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPrintTask, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.MicrosoftGraphPrintTask
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPrintTask"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphPrintTask(id=id, parent_url=parent_url, status=status, definition=definition, id_trigger_id=microsoft_graph_entity_id, event=event, definition_trigger_definition=microsoft_graph_print_task_definition)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_task.metadata['url']  # type: ignore
        path_format_arguments = {
            'printTaskDefinition-id': self._serialize.url("print_task_definition_id", print_task_definition_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphPrintTask')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPrintTask', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_task.metadata = {'url': '/print/taskDefinitions/{printTaskDefinition-id}/tasks'}  # type: ignore

    async def get_task(
        self,
        print_task_definition_id: str,
        print_task_id: str,
        select: Optional[List[Union[str, "models.Enum106"]]] = None,
        expand: Optional[List[Union[str, "models.Enum107"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphPrintTask":
        """Get tasks from print.

        Get tasks from print.

        :param print_task_definition_id: key: id of printTaskDefinition.
        :type print_task_definition_id: str
        :param print_task_id: key: id of printTask.
        :type print_task_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum106]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_cloud_print.models.Enum107]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPrintTask, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.MicrosoftGraphPrintTask
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPrintTask"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_task.metadata['url']  # type: ignore
        path_format_arguments = {
            'printTaskDefinition-id': self._serialize.url("print_task_definition_id", print_task_definition_id, 'str'),
            'printTask-id': self._serialize.url("print_task_id", print_task_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPrintTask', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_task.metadata = {'url': '/print/taskDefinitions/{printTaskDefinition-id}/tasks/{printTask-id}'}  # type: ignore

    async def update_task(
        self,
        print_task_definition_id: str,
        print_task_id: str,
        id: Optional[str] = None,
        parent_url: Optional[str] = None,
        status: Optional["models.MicrosoftGraphPrintTaskStatus"] = None,
        definition: Optional["models.MicrosoftGraphPrintTaskDefinition"] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        event: Optional[Union[str, "models.MicrosoftGraphPrintEvent"]] = None,
        microsoft_graph_print_task_definition: Optional["models.MicrosoftGraphPrintTaskDefinition"] = None,
        **kwargs
    ) -> None:
        """Update the navigation property tasks in print.

        Update the navigation property tasks in print.

        :param print_task_definition_id: key: id of printTaskDefinition.
        :type print_task_definition_id: str
        :param print_task_id: key: id of printTask.
        :type print_task_id: str
        :param id: Read-only.
        :type id: str
        :param parent_url:
        :type parent_url: str
        :param status: printTaskStatus.
        :type status: ~devices_cloud_print.models.MicrosoftGraphPrintTaskStatus
        :param definition: printTaskDefinition.
        :type definition: ~devices_cloud_print.models.MicrosoftGraphPrintTaskDefinition
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param event:
        :type event: str or ~devices_cloud_print.models.MicrosoftGraphPrintEvent
        :param microsoft_graph_print_task_definition: printTaskDefinition.
        :type microsoft_graph_print_task_definition: ~devices_cloud_print.models.MicrosoftGraphPrintTaskDefinition
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphPrintTask(id=id, parent_url=parent_url, status=status, definition=definition, id_trigger_id=microsoft_graph_entity_id, event=event, definition_trigger_definition=microsoft_graph_print_task_definition)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_task.metadata['url']  # type: ignore
        path_format_arguments = {
            'printTaskDefinition-id': self._serialize.url("print_task_definition_id", print_task_definition_id, 'str'),
            'printTask-id': self._serialize.url("print_task_id", print_task_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphPrintTask')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_task.metadata = {'url': '/print/taskDefinitions/{printTaskDefinition-id}/tasks/{printTask-id}'}  # type: ignore

    async def delete_task(
        self,
        print_task_definition_id: str,
        print_task_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property tasks for print.

        Delete navigation property tasks for print.

        :param print_task_definition_id: key: id of printTaskDefinition.
        :type print_task_definition_id: str
        :param print_task_id: key: id of printTask.
        :type print_task_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_task.metadata['url']  # type: ignore
        path_format_arguments = {
            'printTaskDefinition-id': self._serialize.url("print_task_definition_id", print_task_definition_id, 'str'),
            'printTask-id': self._serialize.url("print_task_id", print_task_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_task.metadata = {'url': '/print/taskDefinitions/{printTaskDefinition-id}/tasks/{printTask-id}'}  # type: ignore
