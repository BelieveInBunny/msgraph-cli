# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class PrintOperations:
    """PrintOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~devices_cloud_print.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_connector(
        self,
        orderby: Optional[List[Union[str, "models.Get5ItemsItem"]]] = None,
        select: Optional[List[Union[str, "models.Get6ItemsItem"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfPrintConnector"]:
        """Get connectors from print.

        Get connectors from print.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_cloud_print.models.Get5ItemsItem]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Get6ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfPrintConnector or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_cloud_print.models.CollectionOfPrintConnector]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfPrintConnector"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_connector.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfPrintConnector', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_connector.metadata = {'url': '/print/connectors'}  # type: ignore

    async def create_connector(
        self,
        id: Optional[str] = None,
        app_version: Optional[str] = None,
        display_name: Optional[str] = None,
        fully_qualified_domain_name: Optional[str] = None,
        location: Optional["models.MicrosoftGraphPrinterLocation"] = None,
        name: Optional[str] = None,
        operating_system: Optional[str] = None,
        registered_date_time: Optional[datetime.datetime] = None,
        last_connection_time: Optional[datetime.datetime] = None,
        **kwargs
    ) -> "models.MicrosoftGraphPrintConnector":
        """Create new navigation property to connectors for print.

        Create new navigation property to connectors for print.

        :param id: Read-only.
        :type id: str
        :param app_version:
        :type app_version: str
        :param display_name:
        :type display_name: str
        :param fully_qualified_domain_name:
        :type fully_qualified_domain_name: str
        :param location: printerLocation.
        :type location: ~devices_cloud_print.models.MicrosoftGraphPrinterLocation
        :param name:
        :type name: str
        :param operating_system:
        :type operating_system: str
        :param registered_date_time:
        :type registered_date_time: ~datetime.datetime
        :param last_connection_time:
        :type last_connection_time: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPrintConnector, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.MicrosoftGraphPrintConnector
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPrintConnector"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphPrintConnector(id=id, app_version=app_version, display_name=display_name, fully_qualified_domain_name=fully_qualified_domain_name, location=location, name=name, operating_system=operating_system, registered_date_time=registered_date_time, last_connection_time=last_connection_time)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_connector.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphPrintConnector')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPrintConnector', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_connector.metadata = {'url': '/print/connectors'}  # type: ignore

    async def get_connector(
        self,
        print_connector_id: str,
        select: Optional[List[Union[str, "models.Enum28"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphPrintConnector":
        """Get connectors from print.

        Get connectors from print.

        :param print_connector_id: key: id of printConnector.
        :type print_connector_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum28]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPrintConnector, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.MicrosoftGraphPrintConnector
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPrintConnector"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_connector.metadata['url']  # type: ignore
        path_format_arguments = {
            'printConnector-id': self._serialize.url("print_connector_id", print_connector_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPrintConnector', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_connector.metadata = {'url': '/print/connectors/{printConnector-id}'}  # type: ignore

    async def update_connector(
        self,
        print_connector_id: str,
        id: Optional[str] = None,
        app_version: Optional[str] = None,
        display_name: Optional[str] = None,
        fully_qualified_domain_name: Optional[str] = None,
        location: Optional["models.MicrosoftGraphPrinterLocation"] = None,
        name: Optional[str] = None,
        operating_system: Optional[str] = None,
        registered_date_time: Optional[datetime.datetime] = None,
        last_connection_time: Optional[datetime.datetime] = None,
        **kwargs
    ) -> None:
        """Update the navigation property connectors in print.

        Update the navigation property connectors in print.

        :param print_connector_id: key: id of printConnector.
        :type print_connector_id: str
        :param id: Read-only.
        :type id: str
        :param app_version:
        :type app_version: str
        :param display_name:
        :type display_name: str
        :param fully_qualified_domain_name:
        :type fully_qualified_domain_name: str
        :param location: printerLocation.
        :type location: ~devices_cloud_print.models.MicrosoftGraphPrinterLocation
        :param name:
        :type name: str
        :param operating_system:
        :type operating_system: str
        :param registered_date_time:
        :type registered_date_time: ~datetime.datetime
        :param last_connection_time:
        :type last_connection_time: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphPrintConnector(id=id, app_version=app_version, display_name=display_name, fully_qualified_domain_name=fully_qualified_domain_name, location=location, name=name, operating_system=operating_system, registered_date_time=registered_date_time, last_connection_time=last_connection_time)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_connector.metadata['url']  # type: ignore
        path_format_arguments = {
            'printConnector-id': self._serialize.url("print_connector_id", print_connector_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphPrintConnector')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_connector.metadata = {'url': '/print/connectors/{printConnector-id}'}  # type: ignore

    async def delete_connector(
        self,
        print_connector_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property connectors for print.

        Delete navigation property connectors for print.

        :param print_connector_id: key: id of printConnector.
        :type print_connector_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_connector.metadata['url']  # type: ignore
        path_format_arguments = {
            'printConnector-id': self._serialize.url("print_connector_id", print_connector_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_connector.metadata = {'url': '/print/connectors/{printConnector-id}'}  # type: ignore

    def list_operation(
        self,
        orderby: Optional[List[Union[str, "models.Enum29"]]] = None,
        select: Optional[List[Union[str, "models.Enum30"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfPrintOperation"]:
        """Get operations from print.

        Get operations from print.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_cloud_print.models.Enum29]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum30]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfPrintOperation or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_cloud_print.models.CollectionOfPrintOperation]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfPrintOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_operation.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfPrintOperation', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_operation.metadata = {'url': '/print/operations'}  # type: ignore

    async def create_operation(
        self,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        state: Optional[Union[str, "models.MicrosoftGraphPrintOperationProcessingState"]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphPrintOperation":
        """Create new navigation property to operations for print.

        Create new navigation property to operations for print.

        :param id: Read-only.
        :type id: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param state:
        :type state: str or ~devices_cloud_print.models.MicrosoftGraphPrintOperationProcessingState
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPrintOperation, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.MicrosoftGraphPrintOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPrintOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphPrintOperation(id=id, created_date_time=created_date_time, description=description, state=state)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_operation.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphPrintOperation')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPrintOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_operation.metadata = {'url': '/print/operations'}  # type: ignore

    async def get_operation(
        self,
        print_operation_id: str,
        select: Optional[List[Union[str, "models.Enum31"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphPrintOperation":
        """Get operations from print.

        Get operations from print.

        :param print_operation_id: key: id of printOperation.
        :type print_operation_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum31]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPrintOperation, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.MicrosoftGraphPrintOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPrintOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_operation.metadata['url']  # type: ignore
        path_format_arguments = {
            'printOperation-id': self._serialize.url("print_operation_id", print_operation_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPrintOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_operation.metadata = {'url': '/print/operations/{printOperation-id}'}  # type: ignore

    async def update_operation(
        self,
        print_operation_id: str,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        state: Optional[Union[str, "models.MicrosoftGraphPrintOperationProcessingState"]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property operations in print.

        Update the navigation property operations in print.

        :param print_operation_id: key: id of printOperation.
        :type print_operation_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param state:
        :type state: str or ~devices_cloud_print.models.MicrosoftGraphPrintOperationProcessingState
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphPrintOperation(id=id, created_date_time=created_date_time, description=description, state=state)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_operation.metadata['url']  # type: ignore
        path_format_arguments = {
            'printOperation-id': self._serialize.url("print_operation_id", print_operation_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphPrintOperation')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_operation.metadata = {'url': '/print/operations/{printOperation-id}'}  # type: ignore

    async def delete_operation(
        self,
        print_operation_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property operations for print.

        Delete navigation property operations for print.

        :param print_operation_id: key: id of printOperation.
        :type print_operation_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_operation.metadata['url']  # type: ignore
        path_format_arguments = {
            'printOperation-id': self._serialize.url("print_operation_id", print_operation_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_operation.metadata = {'url': '/print/operations/{printOperation-id}'}  # type: ignore

    def list_printer(
        self,
        orderby: Optional[List[Union[str, "models.Enum32"]]] = None,
        select: Optional[List[Union[str, "models.Enum33"]]] = None,
        expand: Optional[List[Union[str, "models.Enum34"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfPrinter"]:
        """Get printers from print.

        Get printers from print.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_cloud_print.models.Enum32]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum33]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_cloud_print.models.Enum34]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfPrinter or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_cloud_print.models.CollectionOfPrinter]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfPrinter"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_printer.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfPrinter', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_printer.metadata = {'url': '/print/printers'}  # type: ignore

    async def create_printer(
        self,
        id: Optional[str] = None,
        defaults: Optional["models.MicrosoftGraphPrinterDefaults"] = None,
        display_name: Optional[str] = None,
        is_accepting_jobs: Optional[bool] = None,
        location: Optional["models.MicrosoftGraphPrinterLocation"] = None,
        manufacturer: Optional[str] = None,
        model: Optional[str] = None,
        name: Optional[str] = None,
        status: Optional["models.MicrosoftGraphPrinterStatus"] = None,
        jobs: Optional[List["models.MicrosoftGraphPrintJob"]] = None,
        bottom_margins: Optional[List[int]] = None,
        collation: Optional[bool] = None,
        color_modes: Optional[List[Union[str, "models.MicrosoftGraphPrintColorMode"]]] = None,
        content_types: Optional[List[str]] = None,
        copies_per_job: Optional["models.MicrosoftGraphIntegerRange"] = None,
        dpis: Optional[List[int]] = None,
        duplex_modes: Optional[List[Union[str, "models.MicrosoftGraphPrintDuplexMode"]]] = None,
        feed_directions: Optional[List[Union[str, "models.MicrosoftGraphPrinterFeedDirection"]]] = None,
        feed_orientations: Optional[List[Union[str, "models.MicrosoftGraphPrinterFeedOrientation"]]] = None,
        finishings: Optional[List[Union[str, "models.MicrosoftGraphPrintFinishing"]]] = None,
        input_bins: Optional[List[str]] = None,
        is_color_printing_supported: Optional[bool] = None,
        is_page_range_supported: Optional[bool] = None,
        left_margins: Optional[List[int]] = None,
        media_colors: Optional[List[str]] = None,
        media_sizes: Optional[List[str]] = None,
        media_types: Optional[List[str]] = None,
        multipage_layouts: Optional[List[Union[str, "models.MicrosoftGraphPrintMultipageLayout"]]] = None,
        orientations: Optional[List[Union[str, "models.MicrosoftGraphPrintOrientation"]]] = None,
        output_bins: Optional[List[str]] = None,
        pages_per_sheet: Optional[List[int]] = None,
        qualities: Optional[List[Union[str, "models.MicrosoftGraphPrintQuality"]]] = None,
        right_margins: Optional[List[int]] = None,
        scalings: Optional[List[Union[str, "models.MicrosoftGraphPrintScaling"]]] = None,
        supported_color_configurations: Optional[List[Union[str, "models.MicrosoftGraphPrintColorConfiguration"]]] = None,
        supported_copies_per_job: Optional["models.MicrosoftGraphIntegerRange"] = None,
        supported_document_mime_types: Optional[List[str]] = None,
        supported_duplex_configurations: Optional[List[Union[str, "models.MicrosoftGraphPrintDuplexConfiguration"]]] = None,
        supported_finishings: Optional[List[Union[str, "models.MicrosoftGraphPrintFinishing"]]] = None,
        supported_media_colors: Optional[List[str]] = None,
        supported_media_sizes: Optional[List[str]] = None,
        supported_media_types: Optional[List[Union[str, "models.MicrosoftGraphPrintMediaType"]]] = None,
        supported_orientations: Optional[List[Union[str, "models.MicrosoftGraphPrintOrientation"]]] = None,
        supported_output_bins: Optional[List[str]] = None,
        supported_pages_per_sheet: Optional["models.MicrosoftGraphIntegerRange"] = None,
        supported_presentation_directions: Optional[List[Union[str, "models.MicrosoftGraphPrintPresentationDirection"]]] = None,
        supported_print_qualities: Optional[List[Union[str, "models.MicrosoftGraphPrintQuality"]]] = None,
        supports_fit_pdf_to_page: Optional[bool] = None,
        top_margins: Optional[List[int]] = None,
        accepting_jobs: Optional[bool] = None,
        is_shared: Optional[bool] = None,
        registered_date_time: Optional[datetime.datetime] = None,
        allowed_groups: Optional[List["models.MicrosoftGraphPrintIdentity"]] = None,
        allowed_users: Optional[List["models.MicrosoftGraphPrintUserIdentity"]] = None,
        connectors: Optional[List["models.MicrosoftGraphPrintConnector"]] = None,
        share: Optional["models.MicrosoftGraphPrinterShare"] = None,
        shares: Optional[List["models.MicrosoftGraphPrinterShare"]] = None,
        task_triggers: Optional[List["models.MicrosoftGraphPrintTaskTrigger"]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphPrinter":
        """Create new navigation property to printers for print.

        Create new navigation property to printers for print.

        :param id: Read-only.
        :type id: str
        :param defaults: printerDefaults.
        :type defaults: ~devices_cloud_print.models.MicrosoftGraphPrinterDefaults
        :param display_name:
        :type display_name: str
        :param is_accepting_jobs:
        :type is_accepting_jobs: bool
        :param location: printerLocation.
        :type location: ~devices_cloud_print.models.MicrosoftGraphPrinterLocation
        :param manufacturer:
        :type manufacturer: str
        :param model:
        :type model: str
        :param name:
        :type name: str
        :param status: printerStatus.
        :type status: ~devices_cloud_print.models.MicrosoftGraphPrinterStatus
        :param jobs:
        :type jobs: list[~devices_cloud_print.models.MicrosoftGraphPrintJob]
        :param bottom_margins:
        :type bottom_margins: list[int]
        :param collation:
        :type collation: bool
        :param color_modes:
        :type color_modes: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintColorMode]
        :param content_types:
        :type content_types: list[str]
        :param copies_per_job: integerRange.
        :type copies_per_job: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
        :param dpis:
        :type dpis: list[int]
        :param duplex_modes:
        :type duplex_modes: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintDuplexMode]
        :param feed_directions:
        :type feed_directions: list[str or ~devices_cloud_print.models.MicrosoftGraphPrinterFeedDirection]
        :param feed_orientations:
        :type feed_orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrinterFeedOrientation]
        :param finishings:
        :type finishings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
        :param input_bins:
        :type input_bins: list[str]
        :param is_color_printing_supported:
        :type is_color_printing_supported: bool
        :param is_page_range_supported:
        :type is_page_range_supported: bool
        :param left_margins:
        :type left_margins: list[int]
        :param media_colors:
        :type media_colors: list[str]
        :param media_sizes:
        :type media_sizes: list[str]
        :param media_types:
        :type media_types: list[str]
        :param multipage_layouts:
        :type multipage_layouts: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintMultipageLayout]
        :param orientations:
        :type orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintOrientation]
        :param output_bins:
        :type output_bins: list[str]
        :param pages_per_sheet:
        :type pages_per_sheet: list[int]
        :param qualities:
        :type qualities: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintQuality]
        :param right_margins:
        :type right_margins: list[int]
        :param scalings:
        :type scalings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintScaling]
        :param supported_color_configurations:
        :type supported_color_configurations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintColorConfiguration]
        :param supported_copies_per_job: integerRange.
        :type supported_copies_per_job: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
        :param supported_document_mime_types:
        :type supported_document_mime_types: list[str]
        :param supported_duplex_configurations:
        :type supported_duplex_configurations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintDuplexConfiguration]
        :param supported_finishings:
        :type supported_finishings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
        :param supported_media_colors:
        :type supported_media_colors: list[str]
        :param supported_media_sizes:
        :type supported_media_sizes: list[str]
        :param supported_media_types:
        :type supported_media_types: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintMediaType]
        :param supported_orientations:
        :type supported_orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintOrientation]
        :param supported_output_bins:
        :type supported_output_bins: list[str]
        :param supported_pages_per_sheet: integerRange.
        :type supported_pages_per_sheet: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
        :param supported_presentation_directions:
        :type supported_presentation_directions: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintPresentationDirection]
        :param supported_print_qualities:
        :type supported_print_qualities: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintQuality]
        :param supports_fit_pdf_to_page:
        :type supports_fit_pdf_to_page: bool
        :param top_margins:
        :type top_margins: list[int]
        :param accepting_jobs:
        :type accepting_jobs: bool
        :param is_shared:
        :type is_shared: bool
        :param registered_date_time:
        :type registered_date_time: ~datetime.datetime
        :param allowed_groups:
        :type allowed_groups: list[~devices_cloud_print.models.MicrosoftGraphPrintIdentity]
        :param allowed_users:
        :type allowed_users: list[~devices_cloud_print.models.MicrosoftGraphPrintUserIdentity]
        :param connectors:
        :type connectors: list[~devices_cloud_print.models.MicrosoftGraphPrintConnector]
        :param share: printerShare.
        :type share: ~devices_cloud_print.models.MicrosoftGraphPrinterShare
        :param shares:
        :type shares: list[~devices_cloud_print.models.MicrosoftGraphPrinterShare]
        :param task_triggers:
        :type task_triggers: list[~devices_cloud_print.models.MicrosoftGraphPrintTaskTrigger]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPrinter, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.MicrosoftGraphPrinter
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPrinter"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphPrinter(id=id, defaults=defaults, display_name=display_name, is_accepting_jobs=is_accepting_jobs, location=location, manufacturer=manufacturer, model=model, name=name, status=status, jobs=jobs, bottom_margins=bottom_margins, collation=collation, color_modes=color_modes, content_types=content_types, copies_per_job=copies_per_job, dpis=dpis, duplex_modes=duplex_modes, feed_directions=feed_directions, feed_orientations=feed_orientations, finishings=finishings, input_bins=input_bins, is_color_printing_supported=is_color_printing_supported, is_page_range_supported=is_page_range_supported, left_margins=left_margins, media_colors=media_colors, media_sizes=media_sizes, media_types=media_types, multipage_layouts=multipage_layouts, orientations=orientations, output_bins=output_bins, pages_per_sheet=pages_per_sheet, qualities=qualities, right_margins=right_margins, scalings=scalings, supported_color_configurations=supported_color_configurations, supported_copies_per_job=supported_copies_per_job, supported_document_mime_types=supported_document_mime_types, supported_duplex_configurations=supported_duplex_configurations, supported_finishings=supported_finishings, supported_media_colors=supported_media_colors, supported_media_sizes=supported_media_sizes, supported_media_types=supported_media_types, supported_orientations=supported_orientations, supported_output_bins=supported_output_bins, supported_pages_per_sheet=supported_pages_per_sheet, supported_presentation_directions=supported_presentation_directions, supported_print_qualities=supported_print_qualities, supports_fit_pdf_to_page=supports_fit_pdf_to_page, top_margins=top_margins, accepting_jobs=accepting_jobs, is_shared=is_shared, registered_date_time=registered_date_time, allowed_groups=allowed_groups, allowed_users=allowed_users, connectors=connectors, share=share, shares=shares, task_triggers=task_triggers)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_printer.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphPrinter')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPrinter', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_printer.metadata = {'url': '/print/printers'}  # type: ignore

    async def get_printer(
        self,
        printer_id: str,
        select: Optional[List[Union[str, "models.Enum35"]]] = None,
        expand: Optional[List[Union[str, "models.Enum36"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphPrinter":
        """Get printers from print.

        Get printers from print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum35]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_cloud_print.models.Enum36]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPrinter, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.MicrosoftGraphPrinter
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPrinter"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_printer.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPrinter', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_printer.metadata = {'url': '/print/printers/{printer-id}'}  # type: ignore

    async def update_printer(
        self,
        printer_id: str,
        id: Optional[str] = None,
        defaults: Optional["models.MicrosoftGraphPrinterDefaults"] = None,
        display_name: Optional[str] = None,
        is_accepting_jobs: Optional[bool] = None,
        location: Optional["models.MicrosoftGraphPrinterLocation"] = None,
        manufacturer: Optional[str] = None,
        model: Optional[str] = None,
        name: Optional[str] = None,
        status: Optional["models.MicrosoftGraphPrinterStatus"] = None,
        jobs: Optional[List["models.MicrosoftGraphPrintJob"]] = None,
        bottom_margins: Optional[List[int]] = None,
        collation: Optional[bool] = None,
        color_modes: Optional[List[Union[str, "models.MicrosoftGraphPrintColorMode"]]] = None,
        content_types: Optional[List[str]] = None,
        copies_per_job: Optional["models.MicrosoftGraphIntegerRange"] = None,
        dpis: Optional[List[int]] = None,
        duplex_modes: Optional[List[Union[str, "models.MicrosoftGraphPrintDuplexMode"]]] = None,
        feed_directions: Optional[List[Union[str, "models.MicrosoftGraphPrinterFeedDirection"]]] = None,
        feed_orientations: Optional[List[Union[str, "models.MicrosoftGraphPrinterFeedOrientation"]]] = None,
        finishings: Optional[List[Union[str, "models.MicrosoftGraphPrintFinishing"]]] = None,
        input_bins: Optional[List[str]] = None,
        is_color_printing_supported: Optional[bool] = None,
        is_page_range_supported: Optional[bool] = None,
        left_margins: Optional[List[int]] = None,
        media_colors: Optional[List[str]] = None,
        media_sizes: Optional[List[str]] = None,
        media_types: Optional[List[str]] = None,
        multipage_layouts: Optional[List[Union[str, "models.MicrosoftGraphPrintMultipageLayout"]]] = None,
        orientations: Optional[List[Union[str, "models.MicrosoftGraphPrintOrientation"]]] = None,
        output_bins: Optional[List[str]] = None,
        pages_per_sheet: Optional[List[int]] = None,
        qualities: Optional[List[Union[str, "models.MicrosoftGraphPrintQuality"]]] = None,
        right_margins: Optional[List[int]] = None,
        scalings: Optional[List[Union[str, "models.MicrosoftGraphPrintScaling"]]] = None,
        supported_color_configurations: Optional[List[Union[str, "models.MicrosoftGraphPrintColorConfiguration"]]] = None,
        supported_copies_per_job: Optional["models.MicrosoftGraphIntegerRange"] = None,
        supported_document_mime_types: Optional[List[str]] = None,
        supported_duplex_configurations: Optional[List[Union[str, "models.MicrosoftGraphPrintDuplexConfiguration"]]] = None,
        supported_finishings: Optional[List[Union[str, "models.MicrosoftGraphPrintFinishing"]]] = None,
        supported_media_colors: Optional[List[str]] = None,
        supported_media_sizes: Optional[List[str]] = None,
        supported_media_types: Optional[List[Union[str, "models.MicrosoftGraphPrintMediaType"]]] = None,
        supported_orientations: Optional[List[Union[str, "models.MicrosoftGraphPrintOrientation"]]] = None,
        supported_output_bins: Optional[List[str]] = None,
        supported_pages_per_sheet: Optional["models.MicrosoftGraphIntegerRange"] = None,
        supported_presentation_directions: Optional[List[Union[str, "models.MicrosoftGraphPrintPresentationDirection"]]] = None,
        supported_print_qualities: Optional[List[Union[str, "models.MicrosoftGraphPrintQuality"]]] = None,
        supports_fit_pdf_to_page: Optional[bool] = None,
        top_margins: Optional[List[int]] = None,
        accepting_jobs: Optional[bool] = None,
        is_shared: Optional[bool] = None,
        registered_date_time: Optional[datetime.datetime] = None,
        allowed_groups: Optional[List["models.MicrosoftGraphPrintIdentity"]] = None,
        allowed_users: Optional[List["models.MicrosoftGraphPrintUserIdentity"]] = None,
        connectors: Optional[List["models.MicrosoftGraphPrintConnector"]] = None,
        share: Optional["models.MicrosoftGraphPrinterShare"] = None,
        shares: Optional[List["models.MicrosoftGraphPrinterShare"]] = None,
        task_triggers: Optional[List["models.MicrosoftGraphPrintTaskTrigger"]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property printers in print.

        Update the navigation property printers in print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param id: Read-only.
        :type id: str
        :param defaults: printerDefaults.
        :type defaults: ~devices_cloud_print.models.MicrosoftGraphPrinterDefaults
        :param display_name:
        :type display_name: str
        :param is_accepting_jobs:
        :type is_accepting_jobs: bool
        :param location: printerLocation.
        :type location: ~devices_cloud_print.models.MicrosoftGraphPrinterLocation
        :param manufacturer:
        :type manufacturer: str
        :param model:
        :type model: str
        :param name:
        :type name: str
        :param status: printerStatus.
        :type status: ~devices_cloud_print.models.MicrosoftGraphPrinterStatus
        :param jobs:
        :type jobs: list[~devices_cloud_print.models.MicrosoftGraphPrintJob]
        :param bottom_margins:
        :type bottom_margins: list[int]
        :param collation:
        :type collation: bool
        :param color_modes:
        :type color_modes: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintColorMode]
        :param content_types:
        :type content_types: list[str]
        :param copies_per_job: integerRange.
        :type copies_per_job: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
        :param dpis:
        :type dpis: list[int]
        :param duplex_modes:
        :type duplex_modes: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintDuplexMode]
        :param feed_directions:
        :type feed_directions: list[str or ~devices_cloud_print.models.MicrosoftGraphPrinterFeedDirection]
        :param feed_orientations:
        :type feed_orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrinterFeedOrientation]
        :param finishings:
        :type finishings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
        :param input_bins:
        :type input_bins: list[str]
        :param is_color_printing_supported:
        :type is_color_printing_supported: bool
        :param is_page_range_supported:
        :type is_page_range_supported: bool
        :param left_margins:
        :type left_margins: list[int]
        :param media_colors:
        :type media_colors: list[str]
        :param media_sizes:
        :type media_sizes: list[str]
        :param media_types:
        :type media_types: list[str]
        :param multipage_layouts:
        :type multipage_layouts: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintMultipageLayout]
        :param orientations:
        :type orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintOrientation]
        :param output_bins:
        :type output_bins: list[str]
        :param pages_per_sheet:
        :type pages_per_sheet: list[int]
        :param qualities:
        :type qualities: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintQuality]
        :param right_margins:
        :type right_margins: list[int]
        :param scalings:
        :type scalings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintScaling]
        :param supported_color_configurations:
        :type supported_color_configurations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintColorConfiguration]
        :param supported_copies_per_job: integerRange.
        :type supported_copies_per_job: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
        :param supported_document_mime_types:
        :type supported_document_mime_types: list[str]
        :param supported_duplex_configurations:
        :type supported_duplex_configurations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintDuplexConfiguration]
        :param supported_finishings:
        :type supported_finishings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
        :param supported_media_colors:
        :type supported_media_colors: list[str]
        :param supported_media_sizes:
        :type supported_media_sizes: list[str]
        :param supported_media_types:
        :type supported_media_types: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintMediaType]
        :param supported_orientations:
        :type supported_orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintOrientation]
        :param supported_output_bins:
        :type supported_output_bins: list[str]
        :param supported_pages_per_sheet: integerRange.
        :type supported_pages_per_sheet: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
        :param supported_presentation_directions:
        :type supported_presentation_directions: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintPresentationDirection]
        :param supported_print_qualities:
        :type supported_print_qualities: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintQuality]
        :param supports_fit_pdf_to_page:
        :type supports_fit_pdf_to_page: bool
        :param top_margins:
        :type top_margins: list[int]
        :param accepting_jobs:
        :type accepting_jobs: bool
        :param is_shared:
        :type is_shared: bool
        :param registered_date_time:
        :type registered_date_time: ~datetime.datetime
        :param allowed_groups:
        :type allowed_groups: list[~devices_cloud_print.models.MicrosoftGraphPrintIdentity]
        :param allowed_users:
        :type allowed_users: list[~devices_cloud_print.models.MicrosoftGraphPrintUserIdentity]
        :param connectors:
        :type connectors: list[~devices_cloud_print.models.MicrosoftGraphPrintConnector]
        :param share: printerShare.
        :type share: ~devices_cloud_print.models.MicrosoftGraphPrinterShare
        :param shares:
        :type shares: list[~devices_cloud_print.models.MicrosoftGraphPrinterShare]
        :param task_triggers:
        :type task_triggers: list[~devices_cloud_print.models.MicrosoftGraphPrintTaskTrigger]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphPrinter(id=id, defaults=defaults, display_name=display_name, is_accepting_jobs=is_accepting_jobs, location=location, manufacturer=manufacturer, model=model, name=name, status=status, jobs=jobs, bottom_margins=bottom_margins, collation=collation, color_modes=color_modes, content_types=content_types, copies_per_job=copies_per_job, dpis=dpis, duplex_modes=duplex_modes, feed_directions=feed_directions, feed_orientations=feed_orientations, finishings=finishings, input_bins=input_bins, is_color_printing_supported=is_color_printing_supported, is_page_range_supported=is_page_range_supported, left_margins=left_margins, media_colors=media_colors, media_sizes=media_sizes, media_types=media_types, multipage_layouts=multipage_layouts, orientations=orientations, output_bins=output_bins, pages_per_sheet=pages_per_sheet, qualities=qualities, right_margins=right_margins, scalings=scalings, supported_color_configurations=supported_color_configurations, supported_copies_per_job=supported_copies_per_job, supported_document_mime_types=supported_document_mime_types, supported_duplex_configurations=supported_duplex_configurations, supported_finishings=supported_finishings, supported_media_colors=supported_media_colors, supported_media_sizes=supported_media_sizes, supported_media_types=supported_media_types, supported_orientations=supported_orientations, supported_output_bins=supported_output_bins, supported_pages_per_sheet=supported_pages_per_sheet, supported_presentation_directions=supported_presentation_directions, supported_print_qualities=supported_print_qualities, supports_fit_pdf_to_page=supports_fit_pdf_to_page, top_margins=top_margins, accepting_jobs=accepting_jobs, is_shared=is_shared, registered_date_time=registered_date_time, allowed_groups=allowed_groups, allowed_users=allowed_users, connectors=connectors, share=share, shares=shares, task_triggers=task_triggers)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_printer.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphPrinter')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_printer.metadata = {'url': '/print/printers/{printer-id}'}  # type: ignore

    async def delete_printer(
        self,
        printer_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property printers for print.

        Delete navigation property printers for print.

        :param printer_id: key: id of printer.
        :type printer_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_printer.metadata['url']  # type: ignore
        path_format_arguments = {
            'printer-id': self._serialize.url("printer_id", printer_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_printer.metadata = {'url': '/print/printers/{printer-id}'}  # type: ignore

    def list_printer_share(
        self,
        orderby: Optional[List[Union[str, "models.Enum59"]]] = None,
        select: Optional[List[Union[str, "models.Enum60"]]] = None,
        expand: Optional[List[Union[str, "models.Enum61"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfPrinterShare0"]:
        """Get printerShares from print.

        Get printerShares from print.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_cloud_print.models.Enum59]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum60]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_cloud_print.models.Enum61]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfPrinterShare0 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_cloud_print.models.CollectionOfPrinterShare0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfPrinterShare0"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_printer_share.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfPrinterShare0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_printer_share.metadata = {'url': '/print/printerShares'}  # type: ignore

    async def create_printer_share(
        self,
        id: Optional[str] = None,
        defaults: Optional["models.MicrosoftGraphPrinterDefaults"] = None,
        display_name: Optional[str] = None,
        is_accepting_jobs: Optional[bool] = None,
        location: Optional["models.MicrosoftGraphPrinterLocation"] = None,
        manufacturer: Optional[str] = None,
        model: Optional[str] = None,
        name: Optional[str] = None,
        status: Optional["models.MicrosoftGraphPrinterStatus"] = None,
        jobs: Optional[List["models.MicrosoftGraphPrintJob"]] = None,
        bottom_margins: Optional[List[int]] = None,
        collation: Optional[bool] = None,
        color_modes: Optional[List[Union[str, "models.MicrosoftGraphPrintColorMode"]]] = None,
        content_types: Optional[List[str]] = None,
        copies_per_job: Optional["models.MicrosoftGraphIntegerRange"] = None,
        dpis: Optional[List[int]] = None,
        duplex_modes: Optional[List[Union[str, "models.MicrosoftGraphPrintDuplexMode"]]] = None,
        feed_directions: Optional[List[Union[str, "models.MicrosoftGraphPrinterFeedDirection"]]] = None,
        feed_orientations: Optional[List[Union[str, "models.MicrosoftGraphPrinterFeedOrientation"]]] = None,
        finishings: Optional[List[Union[str, "models.MicrosoftGraphPrintFinishing"]]] = None,
        input_bins: Optional[List[str]] = None,
        is_color_printing_supported: Optional[bool] = None,
        is_page_range_supported: Optional[bool] = None,
        left_margins: Optional[List[int]] = None,
        media_colors: Optional[List[str]] = None,
        media_sizes: Optional[List[str]] = None,
        media_types: Optional[List[str]] = None,
        multipage_layouts: Optional[List[Union[str, "models.MicrosoftGraphPrintMultipageLayout"]]] = None,
        orientations: Optional[List[Union[str, "models.MicrosoftGraphPrintOrientation"]]] = None,
        output_bins: Optional[List[str]] = None,
        pages_per_sheet: Optional[List[int]] = None,
        qualities: Optional[List[Union[str, "models.MicrosoftGraphPrintQuality"]]] = None,
        right_margins: Optional[List[int]] = None,
        scalings: Optional[List[Union[str, "models.MicrosoftGraphPrintScaling"]]] = None,
        supported_color_configurations: Optional[List[Union[str, "models.MicrosoftGraphPrintColorConfiguration"]]] = None,
        supported_copies_per_job: Optional["models.MicrosoftGraphIntegerRange"] = None,
        supported_document_mime_types: Optional[List[str]] = None,
        supported_duplex_configurations: Optional[List[Union[str, "models.MicrosoftGraphPrintDuplexConfiguration"]]] = None,
        supported_finishings: Optional[List[Union[str, "models.MicrosoftGraphPrintFinishing"]]] = None,
        supported_media_colors: Optional[List[str]] = None,
        supported_media_sizes: Optional[List[str]] = None,
        supported_media_types: Optional[List[Union[str, "models.MicrosoftGraphPrintMediaType"]]] = None,
        supported_orientations: Optional[List[Union[str, "models.MicrosoftGraphPrintOrientation"]]] = None,
        supported_output_bins: Optional[List[str]] = None,
        supported_pages_per_sheet: Optional["models.MicrosoftGraphIntegerRange"] = None,
        supported_presentation_directions: Optional[List[Union[str, "models.MicrosoftGraphPrintPresentationDirection"]]] = None,
        supported_print_qualities: Optional[List[Union[str, "models.MicrosoftGraphPrintQuality"]]] = None,
        supports_fit_pdf_to_page: Optional[bool] = None,
        top_margins: Optional[List[int]] = None,
        allow_all_users: Optional[bool] = None,
        created_date_time: Optional[datetime.datetime] = None,
        allowed_groups: Optional[List["models.MicrosoftGraphPrintIdentity"]] = None,
        allowed_users: Optional[List["models.MicrosoftGraphPrintUserIdentity"]] = None,
        printer: Optional["models.MicrosoftGraphPrinter"] = None,
        **kwargs
    ) -> "models.MicrosoftGraphPrinterShare":
        """Create new navigation property to printerShares for print.

        Create new navigation property to printerShares for print.

        :param id: Read-only.
        :type id: str
        :param defaults: printerDefaults.
        :type defaults: ~devices_cloud_print.models.MicrosoftGraphPrinterDefaults
        :param display_name:
        :type display_name: str
        :param is_accepting_jobs:
        :type is_accepting_jobs: bool
        :param location: printerLocation.
        :type location: ~devices_cloud_print.models.MicrosoftGraphPrinterLocation
        :param manufacturer:
        :type manufacturer: str
        :param model:
        :type model: str
        :param name:
        :type name: str
        :param status: printerStatus.
        :type status: ~devices_cloud_print.models.MicrosoftGraphPrinterStatus
        :param jobs:
        :type jobs: list[~devices_cloud_print.models.MicrosoftGraphPrintJob]
        :param bottom_margins:
        :type bottom_margins: list[int]
        :param collation:
        :type collation: bool
        :param color_modes:
        :type color_modes: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintColorMode]
        :param content_types:
        :type content_types: list[str]
        :param copies_per_job: integerRange.
        :type copies_per_job: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
        :param dpis:
        :type dpis: list[int]
        :param duplex_modes:
        :type duplex_modes: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintDuplexMode]
        :param feed_directions:
        :type feed_directions: list[str or ~devices_cloud_print.models.MicrosoftGraphPrinterFeedDirection]
        :param feed_orientations:
        :type feed_orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrinterFeedOrientation]
        :param finishings:
        :type finishings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
        :param input_bins:
        :type input_bins: list[str]
        :param is_color_printing_supported:
        :type is_color_printing_supported: bool
        :param is_page_range_supported:
        :type is_page_range_supported: bool
        :param left_margins:
        :type left_margins: list[int]
        :param media_colors:
        :type media_colors: list[str]
        :param media_sizes:
        :type media_sizes: list[str]
        :param media_types:
        :type media_types: list[str]
        :param multipage_layouts:
        :type multipage_layouts: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintMultipageLayout]
        :param orientations:
        :type orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintOrientation]
        :param output_bins:
        :type output_bins: list[str]
        :param pages_per_sheet:
        :type pages_per_sheet: list[int]
        :param qualities:
        :type qualities: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintQuality]
        :param right_margins:
        :type right_margins: list[int]
        :param scalings:
        :type scalings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintScaling]
        :param supported_color_configurations:
        :type supported_color_configurations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintColorConfiguration]
        :param supported_copies_per_job: integerRange.
        :type supported_copies_per_job: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
        :param supported_document_mime_types:
        :type supported_document_mime_types: list[str]
        :param supported_duplex_configurations:
        :type supported_duplex_configurations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintDuplexConfiguration]
        :param supported_finishings:
        :type supported_finishings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
        :param supported_media_colors:
        :type supported_media_colors: list[str]
        :param supported_media_sizes:
        :type supported_media_sizes: list[str]
        :param supported_media_types:
        :type supported_media_types: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintMediaType]
        :param supported_orientations:
        :type supported_orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintOrientation]
        :param supported_output_bins:
        :type supported_output_bins: list[str]
        :param supported_pages_per_sheet: integerRange.
        :type supported_pages_per_sheet: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
        :param supported_presentation_directions:
        :type supported_presentation_directions: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintPresentationDirection]
        :param supported_print_qualities:
        :type supported_print_qualities: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintQuality]
        :param supports_fit_pdf_to_page:
        :type supports_fit_pdf_to_page: bool
        :param top_margins:
        :type top_margins: list[int]
        :param allow_all_users:
        :type allow_all_users: bool
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param allowed_groups:
        :type allowed_groups: list[~devices_cloud_print.models.MicrosoftGraphPrintIdentity]
        :param allowed_users:
        :type allowed_users: list[~devices_cloud_print.models.MicrosoftGraphPrintUserIdentity]
        :param printer: printer.
        :type printer: ~devices_cloud_print.models.MicrosoftGraphPrinter
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPrinterShare, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.MicrosoftGraphPrinterShare
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPrinterShare"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphPrinterShare(id=id, defaults=defaults, display_name=display_name, is_accepting_jobs=is_accepting_jobs, location=location, manufacturer=manufacturer, model=model, name=name, status=status, jobs=jobs, bottom_margins=bottom_margins, collation=collation, color_modes=color_modes, content_types=content_types, copies_per_job=copies_per_job, dpis=dpis, duplex_modes=duplex_modes, feed_directions=feed_directions, feed_orientations=feed_orientations, finishings=finishings, input_bins=input_bins, is_color_printing_supported=is_color_printing_supported, is_page_range_supported=is_page_range_supported, left_margins=left_margins, media_colors=media_colors, media_sizes=media_sizes, media_types=media_types, multipage_layouts=multipage_layouts, orientations=orientations, output_bins=output_bins, pages_per_sheet=pages_per_sheet, qualities=qualities, right_margins=right_margins, scalings=scalings, supported_color_configurations=supported_color_configurations, supported_copies_per_job=supported_copies_per_job, supported_document_mime_types=supported_document_mime_types, supported_duplex_configurations=supported_duplex_configurations, supported_finishings=supported_finishings, supported_media_colors=supported_media_colors, supported_media_sizes=supported_media_sizes, supported_media_types=supported_media_types, supported_orientations=supported_orientations, supported_output_bins=supported_output_bins, supported_pages_per_sheet=supported_pages_per_sheet, supported_presentation_directions=supported_presentation_directions, supported_print_qualities=supported_print_qualities, supports_fit_pdf_to_page=supports_fit_pdf_to_page, top_margins=top_margins, allow_all_users=allow_all_users, created_date_time=created_date_time, allowed_groups=allowed_groups, allowed_users=allowed_users, printer=printer)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_printer_share.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphPrinterShare')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPrinterShare', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_printer_share.metadata = {'url': '/print/printerShares'}  # type: ignore

    async def get_printer_share(
        self,
        printer_share_id: str,
        select: Optional[List[Union[str, "models.Enum62"]]] = None,
        expand: Optional[List[Union[str, "models.Enum63"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphPrinterShare":
        """Get printerShares from print.

        Get printerShares from print.

        :param printer_share_id: key: id of printerShare.
        :type printer_share_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum62]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_cloud_print.models.Enum63]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPrinterShare, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.MicrosoftGraphPrinterShare
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPrinterShare"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_printer_share.metadata['url']  # type: ignore
        path_format_arguments = {
            'printerShare-id': self._serialize.url("printer_share_id", printer_share_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPrinterShare', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_printer_share.metadata = {'url': '/print/printerShares/{printerShare-id}'}  # type: ignore

    async def update_printer_share(
        self,
        printer_share_id: str,
        id: Optional[str] = None,
        defaults: Optional["models.MicrosoftGraphPrinterDefaults"] = None,
        display_name: Optional[str] = None,
        is_accepting_jobs: Optional[bool] = None,
        location: Optional["models.MicrosoftGraphPrinterLocation"] = None,
        manufacturer: Optional[str] = None,
        model: Optional[str] = None,
        name: Optional[str] = None,
        status: Optional["models.MicrosoftGraphPrinterStatus"] = None,
        jobs: Optional[List["models.MicrosoftGraphPrintJob"]] = None,
        bottom_margins: Optional[List[int]] = None,
        collation: Optional[bool] = None,
        color_modes: Optional[List[Union[str, "models.MicrosoftGraphPrintColorMode"]]] = None,
        content_types: Optional[List[str]] = None,
        copies_per_job: Optional["models.MicrosoftGraphIntegerRange"] = None,
        dpis: Optional[List[int]] = None,
        duplex_modes: Optional[List[Union[str, "models.MicrosoftGraphPrintDuplexMode"]]] = None,
        feed_directions: Optional[List[Union[str, "models.MicrosoftGraphPrinterFeedDirection"]]] = None,
        feed_orientations: Optional[List[Union[str, "models.MicrosoftGraphPrinterFeedOrientation"]]] = None,
        finishings: Optional[List[Union[str, "models.MicrosoftGraphPrintFinishing"]]] = None,
        input_bins: Optional[List[str]] = None,
        is_color_printing_supported: Optional[bool] = None,
        is_page_range_supported: Optional[bool] = None,
        left_margins: Optional[List[int]] = None,
        media_colors: Optional[List[str]] = None,
        media_sizes: Optional[List[str]] = None,
        media_types: Optional[List[str]] = None,
        multipage_layouts: Optional[List[Union[str, "models.MicrosoftGraphPrintMultipageLayout"]]] = None,
        orientations: Optional[List[Union[str, "models.MicrosoftGraphPrintOrientation"]]] = None,
        output_bins: Optional[List[str]] = None,
        pages_per_sheet: Optional[List[int]] = None,
        qualities: Optional[List[Union[str, "models.MicrosoftGraphPrintQuality"]]] = None,
        right_margins: Optional[List[int]] = None,
        scalings: Optional[List[Union[str, "models.MicrosoftGraphPrintScaling"]]] = None,
        supported_color_configurations: Optional[List[Union[str, "models.MicrosoftGraphPrintColorConfiguration"]]] = None,
        supported_copies_per_job: Optional["models.MicrosoftGraphIntegerRange"] = None,
        supported_document_mime_types: Optional[List[str]] = None,
        supported_duplex_configurations: Optional[List[Union[str, "models.MicrosoftGraphPrintDuplexConfiguration"]]] = None,
        supported_finishings: Optional[List[Union[str, "models.MicrosoftGraphPrintFinishing"]]] = None,
        supported_media_colors: Optional[List[str]] = None,
        supported_media_sizes: Optional[List[str]] = None,
        supported_media_types: Optional[List[Union[str, "models.MicrosoftGraphPrintMediaType"]]] = None,
        supported_orientations: Optional[List[Union[str, "models.MicrosoftGraphPrintOrientation"]]] = None,
        supported_output_bins: Optional[List[str]] = None,
        supported_pages_per_sheet: Optional["models.MicrosoftGraphIntegerRange"] = None,
        supported_presentation_directions: Optional[List[Union[str, "models.MicrosoftGraphPrintPresentationDirection"]]] = None,
        supported_print_qualities: Optional[List[Union[str, "models.MicrosoftGraphPrintQuality"]]] = None,
        supports_fit_pdf_to_page: Optional[bool] = None,
        top_margins: Optional[List[int]] = None,
        allow_all_users: Optional[bool] = None,
        created_date_time: Optional[datetime.datetime] = None,
        allowed_groups: Optional[List["models.MicrosoftGraphPrintIdentity"]] = None,
        allowed_users: Optional[List["models.MicrosoftGraphPrintUserIdentity"]] = None,
        printer: Optional["models.MicrosoftGraphPrinter"] = None,
        **kwargs
    ) -> None:
        """Update the navigation property printerShares in print.

        Update the navigation property printerShares in print.

        :param printer_share_id: key: id of printerShare.
        :type printer_share_id: str
        :param id: Read-only.
        :type id: str
        :param defaults: printerDefaults.
        :type defaults: ~devices_cloud_print.models.MicrosoftGraphPrinterDefaults
        :param display_name:
        :type display_name: str
        :param is_accepting_jobs:
        :type is_accepting_jobs: bool
        :param location: printerLocation.
        :type location: ~devices_cloud_print.models.MicrosoftGraphPrinterLocation
        :param manufacturer:
        :type manufacturer: str
        :param model:
        :type model: str
        :param name:
        :type name: str
        :param status: printerStatus.
        :type status: ~devices_cloud_print.models.MicrosoftGraphPrinterStatus
        :param jobs:
        :type jobs: list[~devices_cloud_print.models.MicrosoftGraphPrintJob]
        :param bottom_margins:
        :type bottom_margins: list[int]
        :param collation:
        :type collation: bool
        :param color_modes:
        :type color_modes: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintColorMode]
        :param content_types:
        :type content_types: list[str]
        :param copies_per_job: integerRange.
        :type copies_per_job: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
        :param dpis:
        :type dpis: list[int]
        :param duplex_modes:
        :type duplex_modes: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintDuplexMode]
        :param feed_directions:
        :type feed_directions: list[str or ~devices_cloud_print.models.MicrosoftGraphPrinterFeedDirection]
        :param feed_orientations:
        :type feed_orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrinterFeedOrientation]
        :param finishings:
        :type finishings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
        :param input_bins:
        :type input_bins: list[str]
        :param is_color_printing_supported:
        :type is_color_printing_supported: bool
        :param is_page_range_supported:
        :type is_page_range_supported: bool
        :param left_margins:
        :type left_margins: list[int]
        :param media_colors:
        :type media_colors: list[str]
        :param media_sizes:
        :type media_sizes: list[str]
        :param media_types:
        :type media_types: list[str]
        :param multipage_layouts:
        :type multipage_layouts: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintMultipageLayout]
        :param orientations:
        :type orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintOrientation]
        :param output_bins:
        :type output_bins: list[str]
        :param pages_per_sheet:
        :type pages_per_sheet: list[int]
        :param qualities:
        :type qualities: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintQuality]
        :param right_margins:
        :type right_margins: list[int]
        :param scalings:
        :type scalings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintScaling]
        :param supported_color_configurations:
        :type supported_color_configurations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintColorConfiguration]
        :param supported_copies_per_job: integerRange.
        :type supported_copies_per_job: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
        :param supported_document_mime_types:
        :type supported_document_mime_types: list[str]
        :param supported_duplex_configurations:
        :type supported_duplex_configurations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintDuplexConfiguration]
        :param supported_finishings:
        :type supported_finishings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
        :param supported_media_colors:
        :type supported_media_colors: list[str]
        :param supported_media_sizes:
        :type supported_media_sizes: list[str]
        :param supported_media_types:
        :type supported_media_types: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintMediaType]
        :param supported_orientations:
        :type supported_orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintOrientation]
        :param supported_output_bins:
        :type supported_output_bins: list[str]
        :param supported_pages_per_sheet: integerRange.
        :type supported_pages_per_sheet: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
        :param supported_presentation_directions:
        :type supported_presentation_directions: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintPresentationDirection]
        :param supported_print_qualities:
        :type supported_print_qualities: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintQuality]
        :param supports_fit_pdf_to_page:
        :type supports_fit_pdf_to_page: bool
        :param top_margins:
        :type top_margins: list[int]
        :param allow_all_users:
        :type allow_all_users: bool
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param allowed_groups:
        :type allowed_groups: list[~devices_cloud_print.models.MicrosoftGraphPrintIdentity]
        :param allowed_users:
        :type allowed_users: list[~devices_cloud_print.models.MicrosoftGraphPrintUserIdentity]
        :param printer: printer.
        :type printer: ~devices_cloud_print.models.MicrosoftGraphPrinter
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphPrinterShare(id=id, defaults=defaults, display_name=display_name, is_accepting_jobs=is_accepting_jobs, location=location, manufacturer=manufacturer, model=model, name=name, status=status, jobs=jobs, bottom_margins=bottom_margins, collation=collation, color_modes=color_modes, content_types=content_types, copies_per_job=copies_per_job, dpis=dpis, duplex_modes=duplex_modes, feed_directions=feed_directions, feed_orientations=feed_orientations, finishings=finishings, input_bins=input_bins, is_color_printing_supported=is_color_printing_supported, is_page_range_supported=is_page_range_supported, left_margins=left_margins, media_colors=media_colors, media_sizes=media_sizes, media_types=media_types, multipage_layouts=multipage_layouts, orientations=orientations, output_bins=output_bins, pages_per_sheet=pages_per_sheet, qualities=qualities, right_margins=right_margins, scalings=scalings, supported_color_configurations=supported_color_configurations, supported_copies_per_job=supported_copies_per_job, supported_document_mime_types=supported_document_mime_types, supported_duplex_configurations=supported_duplex_configurations, supported_finishings=supported_finishings, supported_media_colors=supported_media_colors, supported_media_sizes=supported_media_sizes, supported_media_types=supported_media_types, supported_orientations=supported_orientations, supported_output_bins=supported_output_bins, supported_pages_per_sheet=supported_pages_per_sheet, supported_presentation_directions=supported_presentation_directions, supported_print_qualities=supported_print_qualities, supports_fit_pdf_to_page=supports_fit_pdf_to_page, top_margins=top_margins, allow_all_users=allow_all_users, created_date_time=created_date_time, allowed_groups=allowed_groups, allowed_users=allowed_users, printer=printer)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_printer_share.metadata['url']  # type: ignore
        path_format_arguments = {
            'printerShare-id': self._serialize.url("printer_share_id", printer_share_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphPrinterShare')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_printer_share.metadata = {'url': '/print/printerShares/{printerShare-id}'}  # type: ignore

    async def delete_printer_share(
        self,
        printer_share_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property printerShares for print.

        Delete navigation property printerShares for print.

        :param printer_share_id: key: id of printerShare.
        :type printer_share_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_printer_share.metadata['url']  # type: ignore
        path_format_arguments = {
            'printerShare-id': self._serialize.url("printer_share_id", printer_share_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_printer_share.metadata = {'url': '/print/printerShares/{printerShare-id}'}  # type: ignore

    def list_report(
        self,
        orderby: Optional[List[Union[str, "models.Enum72"]]] = None,
        select: Optional[List[Union[str, "models.Enum73"]]] = None,
        expand: Optional[List[Union[str, "models.Enum74"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfReportRoot"]:
        """Get reports from print.

        Get reports from print.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_cloud_print.models.Enum72]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum73]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_cloud_print.models.Enum74]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfReportRoot or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_cloud_print.models.CollectionOfReportRoot]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfReportRoot"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_report.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfReportRoot', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_report.metadata = {'url': '/print/reports'}  # type: ignore

    async def create_report(
        self,
        id: Optional[str] = None,
        application_sign_in_detailed_summary: Optional[List["models.MicrosoftGraphApplicationSignInDetailedSummary"]] = None,
        credential_user_registration_details: Optional[List["models.MicrosoftGraphCredentialUserRegistrationDetails"]] = None,
        user_credential_usage_details: Optional[List["models.MicrosoftGraphUserCredentialUsageDetails"]] = None,
        daily_print_usage_summaries_by_printer: Optional[List["models.MicrosoftGraphPrintUsageSummaryByPrinter"]] = None,
        daily_print_usage_summaries_by_user: Optional[List["models.MicrosoftGraphPrintUsageSummaryByUser"]] = None,
        monthly_print_usage_summaries_by_printer: Optional[List["models.MicrosoftGraphPrintUsageSummaryByPrinter"]] = None,
        monthly_print_usage_summaries_by_user: Optional[List["models.MicrosoftGraphPrintUsageSummaryByUser"]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphReportRoot":
        """Create new navigation property to reports for print.

        Create new navigation property to reports for print.

        :param id: Read-only.
        :type id: str
        :param application_sign_in_detailed_summary:
        :type application_sign_in_detailed_summary: list[~devices_cloud_print.models.MicrosoftGraphApplicationSignInDetailedSummary]
        :param credential_user_registration_details:
        :type credential_user_registration_details: list[~devices_cloud_print.models.MicrosoftGraphCredentialUserRegistrationDetails]
        :param user_credential_usage_details:
        :type user_credential_usage_details: list[~devices_cloud_print.models.MicrosoftGraphUserCredentialUsageDetails]
        :param daily_print_usage_summaries_by_printer:
        :type daily_print_usage_summaries_by_printer: list[~devices_cloud_print.models.MicrosoftGraphPrintUsageSummaryByPrinter]
        :param daily_print_usage_summaries_by_user:
        :type daily_print_usage_summaries_by_user: list[~devices_cloud_print.models.MicrosoftGraphPrintUsageSummaryByUser]
        :param monthly_print_usage_summaries_by_printer:
        :type monthly_print_usage_summaries_by_printer: list[~devices_cloud_print.models.MicrosoftGraphPrintUsageSummaryByPrinter]
        :param monthly_print_usage_summaries_by_user:
        :type monthly_print_usage_summaries_by_user: list[~devices_cloud_print.models.MicrosoftGraphPrintUsageSummaryByUser]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReportRoot, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.MicrosoftGraphReportRoot
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReportRoot"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphReportRoot(id=id, application_sign_in_detailed_summary=application_sign_in_detailed_summary, credential_user_registration_details=credential_user_registration_details, user_credential_usage_details=user_credential_usage_details, daily_print_usage_summaries_by_printer=daily_print_usage_summaries_by_printer, daily_print_usage_summaries_by_user=daily_print_usage_summaries_by_user, monthly_print_usage_summaries_by_printer=monthly_print_usage_summaries_by_printer, monthly_print_usage_summaries_by_user=monthly_print_usage_summaries_by_user)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_report.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphReportRoot')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReportRoot', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_report.metadata = {'url': '/print/reports'}  # type: ignore

    async def get_report(
        self,
        report_root_id: str,
        select: Optional[List[Union[str, "models.Enum75"]]] = None,
        expand: Optional[List[Union[str, "models.Enum76"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphReportRoot":
        """Get reports from print.

        Get reports from print.

        :param report_root_id: key: id of reportRoot.
        :type report_root_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum75]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_cloud_print.models.Enum76]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReportRoot, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.MicrosoftGraphReportRoot
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReportRoot"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_report.metadata['url']  # type: ignore
        path_format_arguments = {
            'reportRoot-id': self._serialize.url("report_root_id", report_root_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReportRoot', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_report.metadata = {'url': '/print/reports/{reportRoot-id}'}  # type: ignore

    async def update_report(
        self,
        report_root_id: str,
        id: Optional[str] = None,
        application_sign_in_detailed_summary: Optional[List["models.MicrosoftGraphApplicationSignInDetailedSummary"]] = None,
        credential_user_registration_details: Optional[List["models.MicrosoftGraphCredentialUserRegistrationDetails"]] = None,
        user_credential_usage_details: Optional[List["models.MicrosoftGraphUserCredentialUsageDetails"]] = None,
        daily_print_usage_summaries_by_printer: Optional[List["models.MicrosoftGraphPrintUsageSummaryByPrinter"]] = None,
        daily_print_usage_summaries_by_user: Optional[List["models.MicrosoftGraphPrintUsageSummaryByUser"]] = None,
        monthly_print_usage_summaries_by_printer: Optional[List["models.MicrosoftGraphPrintUsageSummaryByPrinter"]] = None,
        monthly_print_usage_summaries_by_user: Optional[List["models.MicrosoftGraphPrintUsageSummaryByUser"]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property reports in print.

        Update the navigation property reports in print.

        :param report_root_id: key: id of reportRoot.
        :type report_root_id: str
        :param id: Read-only.
        :type id: str
        :param application_sign_in_detailed_summary:
        :type application_sign_in_detailed_summary: list[~devices_cloud_print.models.MicrosoftGraphApplicationSignInDetailedSummary]
        :param credential_user_registration_details:
        :type credential_user_registration_details: list[~devices_cloud_print.models.MicrosoftGraphCredentialUserRegistrationDetails]
        :param user_credential_usage_details:
        :type user_credential_usage_details: list[~devices_cloud_print.models.MicrosoftGraphUserCredentialUsageDetails]
        :param daily_print_usage_summaries_by_printer:
        :type daily_print_usage_summaries_by_printer: list[~devices_cloud_print.models.MicrosoftGraphPrintUsageSummaryByPrinter]
        :param daily_print_usage_summaries_by_user:
        :type daily_print_usage_summaries_by_user: list[~devices_cloud_print.models.MicrosoftGraphPrintUsageSummaryByUser]
        :param monthly_print_usage_summaries_by_printer:
        :type monthly_print_usage_summaries_by_printer: list[~devices_cloud_print.models.MicrosoftGraphPrintUsageSummaryByPrinter]
        :param monthly_print_usage_summaries_by_user:
        :type monthly_print_usage_summaries_by_user: list[~devices_cloud_print.models.MicrosoftGraphPrintUsageSummaryByUser]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphReportRoot(id=id, application_sign_in_detailed_summary=application_sign_in_detailed_summary, credential_user_registration_details=credential_user_registration_details, user_credential_usage_details=user_credential_usage_details, daily_print_usage_summaries_by_printer=daily_print_usage_summaries_by_printer, daily_print_usage_summaries_by_user=daily_print_usage_summaries_by_user, monthly_print_usage_summaries_by_printer=monthly_print_usage_summaries_by_printer, monthly_print_usage_summaries_by_user=monthly_print_usage_summaries_by_user)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_report.metadata['url']  # type: ignore
        path_format_arguments = {
            'reportRoot-id': self._serialize.url("report_root_id", report_root_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphReportRoot')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_report.metadata = {'url': '/print/reports/{reportRoot-id}'}  # type: ignore

    async def delete_report(
        self,
        report_root_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property reports for print.

        Delete navigation property reports for print.

        :param report_root_id: key: id of reportRoot.
        :type report_root_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_report.metadata['url']  # type: ignore
        path_format_arguments = {
            'reportRoot-id': self._serialize.url("report_root_id", report_root_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_report.metadata = {'url': '/print/reports/{reportRoot-id}'}  # type: ignore

    def list_service(
        self,
        orderby: Optional[List[Union[str, "models.Enum77"]]] = None,
        select: Optional[List[Union[str, "models.Enum78"]]] = None,
        expand: Optional[List[Union[str, "models.Enum79"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfPrintService"]:
        """Get services from print.

        Get services from print.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_cloud_print.models.Enum77]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum78]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_cloud_print.models.Enum79]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfPrintService or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_cloud_print.models.CollectionOfPrintService]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfPrintService"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_service.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfPrintService', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_service.metadata = {'url': '/print/services'}  # type: ignore

    async def create_service(
        self,
        id: Optional[str] = None,
        endpoints: Optional[List["models.MicrosoftGraphPrintServiceEndpoint"]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphPrintService":
        """Create new navigation property to services for print.

        Create new navigation property to services for print.

        :param id: Read-only.
        :type id: str
        :param endpoints:
        :type endpoints: list[~devices_cloud_print.models.MicrosoftGraphPrintServiceEndpoint]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPrintService, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.MicrosoftGraphPrintService
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPrintService"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphPrintService(id=id, endpoints=endpoints)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_service.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphPrintService')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPrintService', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_service.metadata = {'url': '/print/services'}  # type: ignore

    async def get_service(
        self,
        print_service_id: str,
        select: Optional[List[Union[str, "models.Enum80"]]] = None,
        expand: Optional[List[Union[str, "models.Enum81"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphPrintService":
        """Get services from print.

        Get services from print.

        :param print_service_id: key: id of printService.
        :type print_service_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum80]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_cloud_print.models.Enum81]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPrintService, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.MicrosoftGraphPrintService
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPrintService"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_service.metadata['url']  # type: ignore
        path_format_arguments = {
            'printService-id': self._serialize.url("print_service_id", print_service_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPrintService', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_service.metadata = {'url': '/print/services/{printService-id}'}  # type: ignore

    async def update_service(
        self,
        print_service_id: str,
        id: Optional[str] = None,
        endpoints: Optional[List["models.MicrosoftGraphPrintServiceEndpoint"]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property services in print.

        Update the navigation property services in print.

        :param print_service_id: key: id of printService.
        :type print_service_id: str
        :param id: Read-only.
        :type id: str
        :param endpoints:
        :type endpoints: list[~devices_cloud_print.models.MicrosoftGraphPrintServiceEndpoint]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphPrintService(id=id, endpoints=endpoints)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_service.metadata['url']  # type: ignore
        path_format_arguments = {
            'printService-id': self._serialize.url("print_service_id", print_service_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphPrintService')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_service.metadata = {'url': '/print/services/{printService-id}'}  # type: ignore

    async def delete_service(
        self,
        print_service_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property services for print.

        Delete navigation property services for print.

        :param print_service_id: key: id of printService.
        :type print_service_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_service.metadata['url']  # type: ignore
        path_format_arguments = {
            'printService-id': self._serialize.url("print_service_id", print_service_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_service.metadata = {'url': '/print/services/{printService-id}'}  # type: ignore

    def list_share(
        self,
        orderby: Optional[List[Union[str, "models.Enum85"]]] = None,
        select: Optional[List[Union[str, "models.Enum86"]]] = None,
        expand: Optional[List[Union[str, "models.Enum87"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfPrinterShare1"]:
        """Get shares from print.

        Get shares from print.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_cloud_print.models.Enum85]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum86]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_cloud_print.models.Enum87]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfPrinterShare1 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_cloud_print.models.CollectionOfPrinterShare1]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfPrinterShare1"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_share.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfPrinterShare1', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_share.metadata = {'url': '/print/shares'}  # type: ignore

    async def create_share(
        self,
        id: Optional[str] = None,
        defaults: Optional["models.MicrosoftGraphPrinterDefaults"] = None,
        display_name: Optional[str] = None,
        is_accepting_jobs: Optional[bool] = None,
        location: Optional["models.MicrosoftGraphPrinterLocation"] = None,
        manufacturer: Optional[str] = None,
        model: Optional[str] = None,
        name: Optional[str] = None,
        status: Optional["models.MicrosoftGraphPrinterStatus"] = None,
        jobs: Optional[List["models.MicrosoftGraphPrintJob"]] = None,
        bottom_margins: Optional[List[int]] = None,
        collation: Optional[bool] = None,
        color_modes: Optional[List[Union[str, "models.MicrosoftGraphPrintColorMode"]]] = None,
        content_types: Optional[List[str]] = None,
        copies_per_job: Optional["models.MicrosoftGraphIntegerRange"] = None,
        dpis: Optional[List[int]] = None,
        duplex_modes: Optional[List[Union[str, "models.MicrosoftGraphPrintDuplexMode"]]] = None,
        feed_directions: Optional[List[Union[str, "models.MicrosoftGraphPrinterFeedDirection"]]] = None,
        feed_orientations: Optional[List[Union[str, "models.MicrosoftGraphPrinterFeedOrientation"]]] = None,
        finishings: Optional[List[Union[str, "models.MicrosoftGraphPrintFinishing"]]] = None,
        input_bins: Optional[List[str]] = None,
        is_color_printing_supported: Optional[bool] = None,
        is_page_range_supported: Optional[bool] = None,
        left_margins: Optional[List[int]] = None,
        media_colors: Optional[List[str]] = None,
        media_sizes: Optional[List[str]] = None,
        media_types: Optional[List[str]] = None,
        multipage_layouts: Optional[List[Union[str, "models.MicrosoftGraphPrintMultipageLayout"]]] = None,
        orientations: Optional[List[Union[str, "models.MicrosoftGraphPrintOrientation"]]] = None,
        output_bins: Optional[List[str]] = None,
        pages_per_sheet: Optional[List[int]] = None,
        qualities: Optional[List[Union[str, "models.MicrosoftGraphPrintQuality"]]] = None,
        right_margins: Optional[List[int]] = None,
        scalings: Optional[List[Union[str, "models.MicrosoftGraphPrintScaling"]]] = None,
        supported_color_configurations: Optional[List[Union[str, "models.MicrosoftGraphPrintColorConfiguration"]]] = None,
        supported_copies_per_job: Optional["models.MicrosoftGraphIntegerRange"] = None,
        supported_document_mime_types: Optional[List[str]] = None,
        supported_duplex_configurations: Optional[List[Union[str, "models.MicrosoftGraphPrintDuplexConfiguration"]]] = None,
        supported_finishings: Optional[List[Union[str, "models.MicrosoftGraphPrintFinishing"]]] = None,
        supported_media_colors: Optional[List[str]] = None,
        supported_media_sizes: Optional[List[str]] = None,
        supported_media_types: Optional[List[Union[str, "models.MicrosoftGraphPrintMediaType"]]] = None,
        supported_orientations: Optional[List[Union[str, "models.MicrosoftGraphPrintOrientation"]]] = None,
        supported_output_bins: Optional[List[str]] = None,
        supported_pages_per_sheet: Optional["models.MicrosoftGraphIntegerRange"] = None,
        supported_presentation_directions: Optional[List[Union[str, "models.MicrosoftGraphPrintPresentationDirection"]]] = None,
        supported_print_qualities: Optional[List[Union[str, "models.MicrosoftGraphPrintQuality"]]] = None,
        supports_fit_pdf_to_page: Optional[bool] = None,
        top_margins: Optional[List[int]] = None,
        allow_all_users: Optional[bool] = None,
        created_date_time: Optional[datetime.datetime] = None,
        allowed_groups: Optional[List["models.MicrosoftGraphPrintIdentity"]] = None,
        allowed_users: Optional[List["models.MicrosoftGraphPrintUserIdentity"]] = None,
        printer: Optional["models.MicrosoftGraphPrinter"] = None,
        **kwargs
    ) -> "models.MicrosoftGraphPrinterShare":
        """Create new navigation property to shares for print.

        Create new navigation property to shares for print.

        :param id: Read-only.
        :type id: str
        :param defaults: printerDefaults.
        :type defaults: ~devices_cloud_print.models.MicrosoftGraphPrinterDefaults
        :param display_name:
        :type display_name: str
        :param is_accepting_jobs:
        :type is_accepting_jobs: bool
        :param location: printerLocation.
        :type location: ~devices_cloud_print.models.MicrosoftGraphPrinterLocation
        :param manufacturer:
        :type manufacturer: str
        :param model:
        :type model: str
        :param name:
        :type name: str
        :param status: printerStatus.
        :type status: ~devices_cloud_print.models.MicrosoftGraphPrinterStatus
        :param jobs:
        :type jobs: list[~devices_cloud_print.models.MicrosoftGraphPrintJob]
        :param bottom_margins:
        :type bottom_margins: list[int]
        :param collation:
        :type collation: bool
        :param color_modes:
        :type color_modes: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintColorMode]
        :param content_types:
        :type content_types: list[str]
        :param copies_per_job: integerRange.
        :type copies_per_job: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
        :param dpis:
        :type dpis: list[int]
        :param duplex_modes:
        :type duplex_modes: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintDuplexMode]
        :param feed_directions:
        :type feed_directions: list[str or ~devices_cloud_print.models.MicrosoftGraphPrinterFeedDirection]
        :param feed_orientations:
        :type feed_orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrinterFeedOrientation]
        :param finishings:
        :type finishings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
        :param input_bins:
        :type input_bins: list[str]
        :param is_color_printing_supported:
        :type is_color_printing_supported: bool
        :param is_page_range_supported:
        :type is_page_range_supported: bool
        :param left_margins:
        :type left_margins: list[int]
        :param media_colors:
        :type media_colors: list[str]
        :param media_sizes:
        :type media_sizes: list[str]
        :param media_types:
        :type media_types: list[str]
        :param multipage_layouts:
        :type multipage_layouts: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintMultipageLayout]
        :param orientations:
        :type orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintOrientation]
        :param output_bins:
        :type output_bins: list[str]
        :param pages_per_sheet:
        :type pages_per_sheet: list[int]
        :param qualities:
        :type qualities: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintQuality]
        :param right_margins:
        :type right_margins: list[int]
        :param scalings:
        :type scalings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintScaling]
        :param supported_color_configurations:
        :type supported_color_configurations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintColorConfiguration]
        :param supported_copies_per_job: integerRange.
        :type supported_copies_per_job: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
        :param supported_document_mime_types:
        :type supported_document_mime_types: list[str]
        :param supported_duplex_configurations:
        :type supported_duplex_configurations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintDuplexConfiguration]
        :param supported_finishings:
        :type supported_finishings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
        :param supported_media_colors:
        :type supported_media_colors: list[str]
        :param supported_media_sizes:
        :type supported_media_sizes: list[str]
        :param supported_media_types:
        :type supported_media_types: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintMediaType]
        :param supported_orientations:
        :type supported_orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintOrientation]
        :param supported_output_bins:
        :type supported_output_bins: list[str]
        :param supported_pages_per_sheet: integerRange.
        :type supported_pages_per_sheet: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
        :param supported_presentation_directions:
        :type supported_presentation_directions: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintPresentationDirection]
        :param supported_print_qualities:
        :type supported_print_qualities: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintQuality]
        :param supports_fit_pdf_to_page:
        :type supports_fit_pdf_to_page: bool
        :param top_margins:
        :type top_margins: list[int]
        :param allow_all_users:
        :type allow_all_users: bool
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param allowed_groups:
        :type allowed_groups: list[~devices_cloud_print.models.MicrosoftGraphPrintIdentity]
        :param allowed_users:
        :type allowed_users: list[~devices_cloud_print.models.MicrosoftGraphPrintUserIdentity]
        :param printer: printer.
        :type printer: ~devices_cloud_print.models.MicrosoftGraphPrinter
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPrinterShare, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.MicrosoftGraphPrinterShare
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPrinterShare"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphPrinterShare(id=id, defaults=defaults, display_name=display_name, is_accepting_jobs=is_accepting_jobs, location=location, manufacturer=manufacturer, model=model, name=name, status=status, jobs=jobs, bottom_margins=bottom_margins, collation=collation, color_modes=color_modes, content_types=content_types, copies_per_job=copies_per_job, dpis=dpis, duplex_modes=duplex_modes, feed_directions=feed_directions, feed_orientations=feed_orientations, finishings=finishings, input_bins=input_bins, is_color_printing_supported=is_color_printing_supported, is_page_range_supported=is_page_range_supported, left_margins=left_margins, media_colors=media_colors, media_sizes=media_sizes, media_types=media_types, multipage_layouts=multipage_layouts, orientations=orientations, output_bins=output_bins, pages_per_sheet=pages_per_sheet, qualities=qualities, right_margins=right_margins, scalings=scalings, supported_color_configurations=supported_color_configurations, supported_copies_per_job=supported_copies_per_job, supported_document_mime_types=supported_document_mime_types, supported_duplex_configurations=supported_duplex_configurations, supported_finishings=supported_finishings, supported_media_colors=supported_media_colors, supported_media_sizes=supported_media_sizes, supported_media_types=supported_media_types, supported_orientations=supported_orientations, supported_output_bins=supported_output_bins, supported_pages_per_sheet=supported_pages_per_sheet, supported_presentation_directions=supported_presentation_directions, supported_print_qualities=supported_print_qualities, supports_fit_pdf_to_page=supports_fit_pdf_to_page, top_margins=top_margins, allow_all_users=allow_all_users, created_date_time=created_date_time, allowed_groups=allowed_groups, allowed_users=allowed_users, printer=printer)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_share.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphPrinterShare')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPrinterShare', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_share.metadata = {'url': '/print/shares'}  # type: ignore

    async def get_share(
        self,
        printer_share_id: str,
        select: Optional[List[Union[str, "models.Enum88"]]] = None,
        expand: Optional[List[Union[str, "models.Enum89"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphPrinterShare":
        """Get shares from print.

        Get shares from print.

        :param printer_share_id: key: id of printerShare.
        :type printer_share_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum88]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_cloud_print.models.Enum89]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPrinterShare, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.MicrosoftGraphPrinterShare
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPrinterShare"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_share.metadata['url']  # type: ignore
        path_format_arguments = {
            'printerShare-id': self._serialize.url("printer_share_id", printer_share_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPrinterShare', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_share.metadata = {'url': '/print/shares/{printerShare-id}'}  # type: ignore

    async def update_share(
        self,
        printer_share_id: str,
        id: Optional[str] = None,
        defaults: Optional["models.MicrosoftGraphPrinterDefaults"] = None,
        display_name: Optional[str] = None,
        is_accepting_jobs: Optional[bool] = None,
        location: Optional["models.MicrosoftGraphPrinterLocation"] = None,
        manufacturer: Optional[str] = None,
        model: Optional[str] = None,
        name: Optional[str] = None,
        status: Optional["models.MicrosoftGraphPrinterStatus"] = None,
        jobs: Optional[List["models.MicrosoftGraphPrintJob"]] = None,
        bottom_margins: Optional[List[int]] = None,
        collation: Optional[bool] = None,
        color_modes: Optional[List[Union[str, "models.MicrosoftGraphPrintColorMode"]]] = None,
        content_types: Optional[List[str]] = None,
        copies_per_job: Optional["models.MicrosoftGraphIntegerRange"] = None,
        dpis: Optional[List[int]] = None,
        duplex_modes: Optional[List[Union[str, "models.MicrosoftGraphPrintDuplexMode"]]] = None,
        feed_directions: Optional[List[Union[str, "models.MicrosoftGraphPrinterFeedDirection"]]] = None,
        feed_orientations: Optional[List[Union[str, "models.MicrosoftGraphPrinterFeedOrientation"]]] = None,
        finishings: Optional[List[Union[str, "models.MicrosoftGraphPrintFinishing"]]] = None,
        input_bins: Optional[List[str]] = None,
        is_color_printing_supported: Optional[bool] = None,
        is_page_range_supported: Optional[bool] = None,
        left_margins: Optional[List[int]] = None,
        media_colors: Optional[List[str]] = None,
        media_sizes: Optional[List[str]] = None,
        media_types: Optional[List[str]] = None,
        multipage_layouts: Optional[List[Union[str, "models.MicrosoftGraphPrintMultipageLayout"]]] = None,
        orientations: Optional[List[Union[str, "models.MicrosoftGraphPrintOrientation"]]] = None,
        output_bins: Optional[List[str]] = None,
        pages_per_sheet: Optional[List[int]] = None,
        qualities: Optional[List[Union[str, "models.MicrosoftGraphPrintQuality"]]] = None,
        right_margins: Optional[List[int]] = None,
        scalings: Optional[List[Union[str, "models.MicrosoftGraphPrintScaling"]]] = None,
        supported_color_configurations: Optional[List[Union[str, "models.MicrosoftGraphPrintColorConfiguration"]]] = None,
        supported_copies_per_job: Optional["models.MicrosoftGraphIntegerRange"] = None,
        supported_document_mime_types: Optional[List[str]] = None,
        supported_duplex_configurations: Optional[List[Union[str, "models.MicrosoftGraphPrintDuplexConfiguration"]]] = None,
        supported_finishings: Optional[List[Union[str, "models.MicrosoftGraphPrintFinishing"]]] = None,
        supported_media_colors: Optional[List[str]] = None,
        supported_media_sizes: Optional[List[str]] = None,
        supported_media_types: Optional[List[Union[str, "models.MicrosoftGraphPrintMediaType"]]] = None,
        supported_orientations: Optional[List[Union[str, "models.MicrosoftGraphPrintOrientation"]]] = None,
        supported_output_bins: Optional[List[str]] = None,
        supported_pages_per_sheet: Optional["models.MicrosoftGraphIntegerRange"] = None,
        supported_presentation_directions: Optional[List[Union[str, "models.MicrosoftGraphPrintPresentationDirection"]]] = None,
        supported_print_qualities: Optional[List[Union[str, "models.MicrosoftGraphPrintQuality"]]] = None,
        supports_fit_pdf_to_page: Optional[bool] = None,
        top_margins: Optional[List[int]] = None,
        allow_all_users: Optional[bool] = None,
        created_date_time: Optional[datetime.datetime] = None,
        allowed_groups: Optional[List["models.MicrosoftGraphPrintIdentity"]] = None,
        allowed_users: Optional[List["models.MicrosoftGraphPrintUserIdentity"]] = None,
        printer: Optional["models.MicrosoftGraphPrinter"] = None,
        **kwargs
    ) -> None:
        """Update the navigation property shares in print.

        Update the navigation property shares in print.

        :param printer_share_id: key: id of printerShare.
        :type printer_share_id: str
        :param id: Read-only.
        :type id: str
        :param defaults: printerDefaults.
        :type defaults: ~devices_cloud_print.models.MicrosoftGraphPrinterDefaults
        :param display_name:
        :type display_name: str
        :param is_accepting_jobs:
        :type is_accepting_jobs: bool
        :param location: printerLocation.
        :type location: ~devices_cloud_print.models.MicrosoftGraphPrinterLocation
        :param manufacturer:
        :type manufacturer: str
        :param model:
        :type model: str
        :param name:
        :type name: str
        :param status: printerStatus.
        :type status: ~devices_cloud_print.models.MicrosoftGraphPrinterStatus
        :param jobs:
        :type jobs: list[~devices_cloud_print.models.MicrosoftGraphPrintJob]
        :param bottom_margins:
        :type bottom_margins: list[int]
        :param collation:
        :type collation: bool
        :param color_modes:
        :type color_modes: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintColorMode]
        :param content_types:
        :type content_types: list[str]
        :param copies_per_job: integerRange.
        :type copies_per_job: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
        :param dpis:
        :type dpis: list[int]
        :param duplex_modes:
        :type duplex_modes: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintDuplexMode]
        :param feed_directions:
        :type feed_directions: list[str or ~devices_cloud_print.models.MicrosoftGraphPrinterFeedDirection]
        :param feed_orientations:
        :type feed_orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrinterFeedOrientation]
        :param finishings:
        :type finishings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
        :param input_bins:
        :type input_bins: list[str]
        :param is_color_printing_supported:
        :type is_color_printing_supported: bool
        :param is_page_range_supported:
        :type is_page_range_supported: bool
        :param left_margins:
        :type left_margins: list[int]
        :param media_colors:
        :type media_colors: list[str]
        :param media_sizes:
        :type media_sizes: list[str]
        :param media_types:
        :type media_types: list[str]
        :param multipage_layouts:
        :type multipage_layouts: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintMultipageLayout]
        :param orientations:
        :type orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintOrientation]
        :param output_bins:
        :type output_bins: list[str]
        :param pages_per_sheet:
        :type pages_per_sheet: list[int]
        :param qualities:
        :type qualities: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintQuality]
        :param right_margins:
        :type right_margins: list[int]
        :param scalings:
        :type scalings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintScaling]
        :param supported_color_configurations:
        :type supported_color_configurations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintColorConfiguration]
        :param supported_copies_per_job: integerRange.
        :type supported_copies_per_job: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
        :param supported_document_mime_types:
        :type supported_document_mime_types: list[str]
        :param supported_duplex_configurations:
        :type supported_duplex_configurations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintDuplexConfiguration]
        :param supported_finishings:
        :type supported_finishings: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintFinishing]
        :param supported_media_colors:
        :type supported_media_colors: list[str]
        :param supported_media_sizes:
        :type supported_media_sizes: list[str]
        :param supported_media_types:
        :type supported_media_types: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintMediaType]
        :param supported_orientations:
        :type supported_orientations: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintOrientation]
        :param supported_output_bins:
        :type supported_output_bins: list[str]
        :param supported_pages_per_sheet: integerRange.
        :type supported_pages_per_sheet: ~devices_cloud_print.models.MicrosoftGraphIntegerRange
        :param supported_presentation_directions:
        :type supported_presentation_directions: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintPresentationDirection]
        :param supported_print_qualities:
        :type supported_print_qualities: list[str or ~devices_cloud_print.models.MicrosoftGraphPrintQuality]
        :param supports_fit_pdf_to_page:
        :type supports_fit_pdf_to_page: bool
        :param top_margins:
        :type top_margins: list[int]
        :param allow_all_users:
        :type allow_all_users: bool
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param allowed_groups:
        :type allowed_groups: list[~devices_cloud_print.models.MicrosoftGraphPrintIdentity]
        :param allowed_users:
        :type allowed_users: list[~devices_cloud_print.models.MicrosoftGraphPrintUserIdentity]
        :param printer: printer.
        :type printer: ~devices_cloud_print.models.MicrosoftGraphPrinter
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphPrinterShare(id=id, defaults=defaults, display_name=display_name, is_accepting_jobs=is_accepting_jobs, location=location, manufacturer=manufacturer, model=model, name=name, status=status, jobs=jobs, bottom_margins=bottom_margins, collation=collation, color_modes=color_modes, content_types=content_types, copies_per_job=copies_per_job, dpis=dpis, duplex_modes=duplex_modes, feed_directions=feed_directions, feed_orientations=feed_orientations, finishings=finishings, input_bins=input_bins, is_color_printing_supported=is_color_printing_supported, is_page_range_supported=is_page_range_supported, left_margins=left_margins, media_colors=media_colors, media_sizes=media_sizes, media_types=media_types, multipage_layouts=multipage_layouts, orientations=orientations, output_bins=output_bins, pages_per_sheet=pages_per_sheet, qualities=qualities, right_margins=right_margins, scalings=scalings, supported_color_configurations=supported_color_configurations, supported_copies_per_job=supported_copies_per_job, supported_document_mime_types=supported_document_mime_types, supported_duplex_configurations=supported_duplex_configurations, supported_finishings=supported_finishings, supported_media_colors=supported_media_colors, supported_media_sizes=supported_media_sizes, supported_media_types=supported_media_types, supported_orientations=supported_orientations, supported_output_bins=supported_output_bins, supported_pages_per_sheet=supported_pages_per_sheet, supported_presentation_directions=supported_presentation_directions, supported_print_qualities=supported_print_qualities, supports_fit_pdf_to_page=supports_fit_pdf_to_page, top_margins=top_margins, allow_all_users=allow_all_users, created_date_time=created_date_time, allowed_groups=allowed_groups, allowed_users=allowed_users, printer=printer)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_share.metadata['url']  # type: ignore
        path_format_arguments = {
            'printerShare-id': self._serialize.url("printer_share_id", printer_share_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphPrinterShare')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_share.metadata = {'url': '/print/shares/{printerShare-id}'}  # type: ignore

    async def delete_share(
        self,
        printer_share_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property shares for print.

        Delete navigation property shares for print.

        :param printer_share_id: key: id of printerShare.
        :type printer_share_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_share.metadata['url']  # type: ignore
        path_format_arguments = {
            'printerShare-id': self._serialize.url("printer_share_id", printer_share_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_share.metadata = {'url': '/print/shares/{printerShare-id}'}  # type: ignore

    def list_task_definition(
        self,
        orderby: Optional[List[Union[str, "models.Enum98"]]] = None,
        select: Optional[List[Union[str, "models.Enum99"]]] = None,
        expand: Optional[List[Union[str, "models.Enum100"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfPrintTaskDefinition"]:
        """Get taskDefinitions from print.

        Get taskDefinitions from print.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_cloud_print.models.Enum98]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum99]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_cloud_print.models.Enum100]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfPrintTaskDefinition or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_cloud_print.models.CollectionOfPrintTaskDefinition]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfPrintTaskDefinition"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_task_definition.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfPrintTaskDefinition', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_task_definition.metadata = {'url': '/print/taskDefinitions'}  # type: ignore

    async def create_task_definition(
        self,
        id: Optional[str] = None,
        created_by: Optional["models.MicrosoftGraphAppIdentity"] = None,
        display_name: Optional[str] = None,
        tasks: Optional[List["models.MicrosoftGraphPrintTask"]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphPrintTaskDefinition":
        """Create new navigation property to taskDefinitions for print.

        Create new navigation property to taskDefinitions for print.

        :param id: Read-only.
        :type id: str
        :param created_by: appIdentity.
        :type created_by: ~devices_cloud_print.models.MicrosoftGraphAppIdentity
        :param display_name:
        :type display_name: str
        :param tasks:
        :type tasks: list[~devices_cloud_print.models.MicrosoftGraphPrintTask]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPrintTaskDefinition, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.MicrosoftGraphPrintTaskDefinition
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPrintTaskDefinition"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphPrintTaskDefinition(id=id, created_by=created_by, display_name=display_name, tasks=tasks)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_task_definition.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphPrintTaskDefinition')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPrintTaskDefinition', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_task_definition.metadata = {'url': '/print/taskDefinitions'}  # type: ignore

    async def get_task_definition(
        self,
        print_task_definition_id: str,
        select: Optional[List[Union[str, "models.Enum101"]]] = None,
        expand: Optional[List[Union[str, "models.Enum102"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphPrintTaskDefinition":
        """Get taskDefinitions from print.

        Get taskDefinitions from print.

        :param print_task_definition_id: key: id of printTaskDefinition.
        :type print_task_definition_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_cloud_print.models.Enum101]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_cloud_print.models.Enum102]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPrintTaskDefinition, or the result of cls(response)
        :rtype: ~devices_cloud_print.models.MicrosoftGraphPrintTaskDefinition
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPrintTaskDefinition"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_task_definition.metadata['url']  # type: ignore
        path_format_arguments = {
            'printTaskDefinition-id': self._serialize.url("print_task_definition_id", print_task_definition_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPrintTaskDefinition', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_task_definition.metadata = {'url': '/print/taskDefinitions/{printTaskDefinition-id}'}  # type: ignore

    async def update_task_definition(
        self,
        print_task_definition_id: str,
        id: Optional[str] = None,
        created_by: Optional["models.MicrosoftGraphAppIdentity"] = None,
        display_name: Optional[str] = None,
        tasks: Optional[List["models.MicrosoftGraphPrintTask"]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property taskDefinitions in print.

        Update the navigation property taskDefinitions in print.

        :param print_task_definition_id: key: id of printTaskDefinition.
        :type print_task_definition_id: str
        :param id: Read-only.
        :type id: str
        :param created_by: appIdentity.
        :type created_by: ~devices_cloud_print.models.MicrosoftGraphAppIdentity
        :param display_name:
        :type display_name: str
        :param tasks:
        :type tasks: list[~devices_cloud_print.models.MicrosoftGraphPrintTask]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphPrintTaskDefinition(id=id, created_by=created_by, display_name=display_name, tasks=tasks)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_task_definition.metadata['url']  # type: ignore
        path_format_arguments = {
            'printTaskDefinition-id': self._serialize.url("print_task_definition_id", print_task_definition_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphPrintTaskDefinition')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_task_definition.metadata = {'url': '/print/taskDefinitions/{printTaskDefinition-id}'}  # type: ignore

    async def delete_task_definition(
        self,
        print_task_definition_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property taskDefinitions for print.

        Delete navigation property taskDefinitions for print.

        :param print_task_definition_id: key: id of printTaskDefinition.
        :type print_task_definition_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_task_definition.metadata['url']  # type: ignore
        path_format_arguments = {
            'printTaskDefinition-id': self._serialize.url("print_task_definition_id", print_task_definition_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_task_definition.metadata = {'url': '/print/taskDefinitions/{printTaskDefinition-id}'}  # type: ignore
