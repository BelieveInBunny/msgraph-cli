# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.core import AsyncPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

from ._configuration import DevicesCloudPrintConfiguration
from .operations import printprintOperations
from .operations import printOperations
from .operations import printprintersOperations
from .operations import printprinterstasktriggersOperations
from .operations import printprintersharesOperations
from .operations import printprintersharesprinterOperations
from .operations import printreportsOperations
from .operations import printservicesOperations
from .operations import printsharesOperations
from .operations import printsharesprinterOperations
from .operations import printtaskdefinitionsOperations
from .operations import printtaskdefinitionstasksOperations
from .. import models


class DevicesCloudPrint(object):
    """DevicesCloudPrint.

    :ivar printprint: printprintOperations operations
    :vartype printprint: devices_cloud_print.aio.operations.printprintOperations
    :ivar print: printOperations operations
    :vartype print: devices_cloud_print.aio.operations.printOperations
    :ivar printprinters: printprintersOperations operations
    :vartype printprinters: devices_cloud_print.aio.operations.printprintersOperations
    :ivar printprinterstasktriggers: printprinterstasktriggersOperations operations
    :vartype printprinterstasktriggers: devices_cloud_print.aio.operations.printprinterstasktriggersOperations
    :ivar printprintershares: printprintersharesOperations operations
    :vartype printprintershares: devices_cloud_print.aio.operations.printprintersharesOperations
    :ivar printprintersharesprinter: printprintersharesprinterOperations operations
    :vartype printprintersharesprinter: devices_cloud_print.aio.operations.printprintersharesprinterOperations
    :ivar printreports: printreportsOperations operations
    :vartype printreports: devices_cloud_print.aio.operations.printreportsOperations
    :ivar printservices: printservicesOperations operations
    :vartype printservices: devices_cloud_print.aio.operations.printservicesOperations
    :ivar printshares: printsharesOperations operations
    :vartype printshares: devices_cloud_print.aio.operations.printsharesOperations
    :ivar printsharesprinter: printsharesprinterOperations operations
    :vartype printsharesprinter: devices_cloud_print.aio.operations.printsharesprinterOperations
    :ivar printtaskdefinitions: printtaskdefinitionsOperations operations
    :vartype printtaskdefinitions: devices_cloud_print.aio.operations.printtaskdefinitionsOperations
    :ivar printtaskdefinitionstasks: printtaskdefinitionstasksOperations operations
    :vartype printtaskdefinitionstasks: devices_cloud_print.aio.operations.printtaskdefinitionstasksOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param top: Show only the first n items.
    :type top: int
    :param skip: Skip the first n items.
    :type skip: int
    :param search: Search items by search phrases.
    :type search: str
    :param filter: Filter items by property values.
    :type filter: str
    :param count: Include count of items.
    :type count: bool
    :param str base_url: Service URL
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://graph.microsoft.com/beta'
        self._config = DevicesCloudPrintConfiguration(credential, top, skip, search, filter, count, **kwargs)
        self._client = AsyncPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.printprint = printprintOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print = printOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.printprinters = printprintersOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.printprinterstasktriggers = printprinterstasktriggersOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.printprintershares = printprintersharesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.printprintersharesprinter = printprintersharesprinterOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.printreports = printreportsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.printservices = printservicesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.printshares = printsharesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.printsharesprinter = printsharesprinterOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.printtaskdefinitions = printtaskdefinitionsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.printtaskdefinitionstasks = printtaskdefinitionstasksOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "DevicesCloudPrint":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
