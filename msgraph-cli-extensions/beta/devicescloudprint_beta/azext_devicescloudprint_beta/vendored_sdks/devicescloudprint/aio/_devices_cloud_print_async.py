# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.mgmt.core import AsyncARMPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

from ._configuration_async import DevicesCloudPrintConfiguration
from .operations_async import PrintPrintOperations
from .operations_async import PrintOperations
from .operations_async import PrintPrinterOperations
from .operations_async import PrintPrinterTaskTriggerOperations
from .operations_async import PrintPrinterShareOperations
from .operations_async import PrintPrinterSharePrinterOperations
from .operations_async import PrintReportOperations
from .operations_async import PrintServiceOperations
from .operations_async import PrintShareOperations
from .operations_async import PrintSharePrinterOperations
from .operations_async import PrintTaskDefinitionOperations
from .operations_async import PrintTaskDefinitionTaskOperations
from .. import models


class DevicesCloudPrint(object):
    """DevicesCloudPrint.

    :ivar print_print: PrintPrintOperations operations
    :vartype print_print: devices_cloud_print.aio.operations_async.PrintPrintOperations
    :ivar print: PrintOperations operations
    :vartype print: devices_cloud_print.aio.operations_async.PrintOperations
    :ivar print_printer: PrintPrinterOperations operations
    :vartype print_printer: devices_cloud_print.aio.operations_async.PrintPrinterOperations
    :ivar print_printer_task_trigger: PrintPrinterTaskTriggerOperations operations
    :vartype print_printer_task_trigger: devices_cloud_print.aio.operations_async.PrintPrinterTaskTriggerOperations
    :ivar print_printer_share: PrintPrinterShareOperations operations
    :vartype print_printer_share: devices_cloud_print.aio.operations_async.PrintPrinterShareOperations
    :ivar print_printer_share_printer: PrintPrinterSharePrinterOperations operations
    :vartype print_printer_share_printer: devices_cloud_print.aio.operations_async.PrintPrinterSharePrinterOperations
    :ivar print_report: PrintReportOperations operations
    :vartype print_report: devices_cloud_print.aio.operations_async.PrintReportOperations
    :ivar print_service: PrintServiceOperations operations
    :vartype print_service: devices_cloud_print.aio.operations_async.PrintServiceOperations
    :ivar print_share: PrintShareOperations operations
    :vartype print_share: devices_cloud_print.aio.operations_async.PrintShareOperations
    :ivar print_share_printer: PrintSharePrinterOperations operations
    :vartype print_share_printer: devices_cloud_print.aio.operations_async.PrintSharePrinterOperations
    :ivar print_task_definition: PrintTaskDefinitionOperations operations
    :vartype print_task_definition: devices_cloud_print.aio.operations_async.PrintTaskDefinitionOperations
    :ivar print_task_definition_task: PrintTaskDefinitionTaskOperations operations
    :vartype print_task_definition_task: devices_cloud_print.aio.operations_async.PrintTaskDefinitionTaskOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param top: Show only the first n items.
    :type top: int
    :param skip: Skip the first n items.
    :type skip: int
    :param search: Search items by search phrases.
    :type search: str
    :param filter: Filter items by property values.
    :type filter: str
    :param count: Include count of items.
    :type count: bool
    :param str base_url: Service URL
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://graph.microsoft.com/beta'
        self._config = DevicesCloudPrintConfiguration(credential, top, skip, search, filter, count, **kwargs)
        self._client = AsyncARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.print_print = PrintPrintOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print = PrintOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print_printer = PrintPrinterOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print_printer_task_trigger = PrintPrinterTaskTriggerOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print_printer_share = PrintPrinterShareOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print_printer_share_printer = PrintPrinterSharePrinterOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print_report = PrintReportOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print_service = PrintServiceOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print_share = PrintShareOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print_share_printer = PrintSharePrinterOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print_task_definition = PrintTaskDefinitionOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.print_task_definition_task = PrintTaskDefinitionTaskOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "DevicesCloudPrint":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
