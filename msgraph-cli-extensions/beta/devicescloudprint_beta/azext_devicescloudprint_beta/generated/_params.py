# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type,
    get_location_type
)
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_devicescloudprint_beta.action import (
    AddOperations,
    AddServices,
    AddDefaults,
    AddPrintStatus,
    AddCapabilitiesCopiesPerJob,
    AddDevicescloudprintCreatePrinterAllowedGroups,
    AddDevicescloudprintCreatePrinterAllowedUsers,
    AddDevicescloudprintCreatePrinterShareAllowedGroups,
    AddDevicescloudprintCreatePrinterShareAllowedUsers,
    AddApplicationSignInDetailedSummary,
    AddCredentialUserRegistrationDetails,
    AddUserCredentialUsageDetails,
    AddDailyPrintUsageSummariesByPrinter,
    AddDailyPrintUsageSummariesByUser,
    AddMonthlyPrintUsageSummariesByPrinter,
    AddMonthlyPrintUsageSummariesByUser,
    AddEndpoints,
    AddCreatedBy,
    AddCertificateSigningRequest,
    AddPrintTaskdefinitionsStatus
)


def load_arguments(self, _):

    with self.argument_context('devicescloudprint get-print') as c:
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint update-print') as c:
        c.argument('connectors', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('operations', action=AddOperations, nargs='*', help='')
        c.argument('printers', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('printer_shares', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('reports', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('services', action=AddServices, nargs='*', help='')
        c.argument('shares', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('task_definitions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('settings_document_conversion_enabled', arg_type=get_three_state_flag(), help='')

    with self.argument_context('devicescloudprint delete') as c:
        c.argument('print_connector_id', type=str, help='key: id of printConnector')
        c.argument('if_match', type=str, help='ETag')
        c.argument('print_operation_id', type=str, help='key: id of printOperation')
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('report_root_id', type=str, help='key: id of reportRoot')
        c.argument('print_service_id', type=str, help='key: id of printService')
        c.argument('print_task_definition_id', type=str, help='key: id of printTaskDefinition')

    with self.argument_context('devicescloudprint create-connector') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('app_version', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('fully_qualified_domain_name', type=str, help='')
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('name', type=str, help='')
        c.argument('operating_system', type=str, help='')
        c.argument('registered_date_time', help='')
        c.argument('device_health_last_connection_time', help='')

    with self.argument_context('devicescloudprint create-operation') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='')
        c.argument('status_description', type=str, help='')
        c.argument('status_state', arg_type=get_enum_type(['notStarted', 'running', 'succeeded', 'failed', ''
                                                           'unknownFutureValue']), help='')

    with self.argument_context('devicescloudprint create-printer') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('defaults', action=AddDefaults, nargs='*', help='printerDefaults')
        c.argument('display_name', type=str, help='')
        c.argument('is_accepting_jobs', arg_type=get_three_state_flag(), help='')
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('manufacturer', type=str, help='')
        c.argument('model', type=str, help='')
        c.argument('name', type=str, help='')
        c.argument('status', action=AddPrintStatus, nargs='*', help='printerStatus')
        c.argument('jobs', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('capabilities_bottom_margins', nargs='*', help='')
        c.argument('capabilities_collation', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_color_modes', nargs='*', help='')
        c.argument('capabilities_content_types', nargs='*', help='')
        c.argument('capabilities_copies_per_job', action=AddCapabilitiesCopiesPerJob, nargs='*', help='integerRange')
        c.argument('capabilities_dpis', nargs='*', help='')
        c.argument('capabilities_duplex_modes', nargs='*', help='')
        c.argument('capabilities_feed_directions', nargs='*', help='')
        c.argument('capabilities_feed_orientations', nargs='*', help='')
        c.argument('capabilities_finishings', nargs='*', help='')
        c.argument('capabilities_input_bins', nargs='*', help='')
        c.argument('capabilities_is_color_printing_supported', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_is_page_range_supported', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_left_margins', nargs='*', help='')
        c.argument('capabilities_media_colors', nargs='*', help='')
        c.argument('capabilities_media_sizes', nargs='*', help='')
        c.argument('capabilities_media_types', nargs='*', help='')
        c.argument('capabilities_multipage_layouts', nargs='*', help='')
        c.argument('capabilities_orientations', nargs='*', help='')
        c.argument('capabilities_output_bins', nargs='*', help='')
        c.argument('capabilities_pages_per_sheet', nargs='*', help='')
        c.argument('capabilities_qualities', nargs='*', help='')
        c.argument('capabilities_right_margins', nargs='*', help='')
        c.argument('capabilities_scalings', nargs='*', help='')
        c.argument('capabilities_supported_color_configurations', nargs='*', help='')
        c.argument('capabilities_supported_copies_per_job', action=AddCapabilitiesCopiesPerJob, nargs='*', help=''
                   'integerRange')
        c.argument('capabilities_supported_document_mime_types', nargs='*', help='')
        c.argument('capabilities_supported_duplex_configurations', nargs='*', help='')
        c.argument('capabilities_supported_finishings', nargs='*', help='')
        c.argument('capabilities_supported_media_colors', nargs='*', help='')
        c.argument('capabilities_supported_media_sizes', nargs='*', help='')
        c.argument('capabilities_supported_media_types', nargs='*', help='')
        c.argument('capabilities_supported_orientations', nargs='*', help='')
        c.argument('capabilities_supported_output_bins', nargs='*', help='')
        c.argument('capabilities_supported_pages_per_sheet', action=AddCapabilitiesCopiesPerJob, nargs='*', help=''
                   'integerRange')
        c.argument('capabilities_supported_presentation_directions', nargs='*', help='')
        c.argument('capabilities_supported_print_qualities', nargs='*', help='')
        c.argument('capabilities_supports_fit_pdf_to_page', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_top_margins', nargs='*', help='')
        c.argument('accepting_jobs', arg_type=get_three_state_flag(), help='')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='')
        c.argument('registered_date_time', help='')
        c.argument('allowed_groups', action=AddDevicescloudprintCreatePrinterAllowedGroups, nargs='*', help='')
        c.argument('allowed_users', action=AddDevicescloudprintCreatePrinterAllowedUsers, nargs='*', help='')
        c.argument('connectors', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('share', type=validate_file_or_dict, help='printerShare Expected value: json-string/@json-file.')
        c.argument('shares', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('task_triggers', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('devicescloudprint create-printer-share') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('defaults', action=AddDefaults, nargs='*', help='printerDefaults')
        c.argument('display_name', type=str, help='')
        c.argument('is_accepting_jobs', arg_type=get_three_state_flag(), help='')
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('manufacturer', type=str, help='')
        c.argument('model', type=str, help='')
        c.argument('name', type=str, help='')
        c.argument('status', action=AddPrintStatus, nargs='*', help='printerStatus')
        c.argument('jobs', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('capabilities_bottom_margins', nargs='*', help='')
        c.argument('capabilities_collation', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_color_modes', nargs='*', help='')
        c.argument('capabilities_content_types', nargs='*', help='')
        c.argument('capabilities_copies_per_job', action=AddCapabilitiesCopiesPerJob, nargs='*', help='integerRange')
        c.argument('capabilities_dpis', nargs='*', help='')
        c.argument('capabilities_duplex_modes', nargs='*', help='')
        c.argument('capabilities_feed_directions', nargs='*', help='')
        c.argument('capabilities_feed_orientations', nargs='*', help='')
        c.argument('capabilities_finishings', nargs='*', help='')
        c.argument('capabilities_input_bins', nargs='*', help='')
        c.argument('capabilities_is_color_printing_supported', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_is_page_range_supported', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_left_margins', nargs='*', help='')
        c.argument('capabilities_media_colors', nargs='*', help='')
        c.argument('capabilities_media_sizes', nargs='*', help='')
        c.argument('capabilities_media_types', nargs='*', help='')
        c.argument('capabilities_multipage_layouts', nargs='*', help='')
        c.argument('capabilities_orientations', nargs='*', help='')
        c.argument('capabilities_output_bins', nargs='*', help='')
        c.argument('capabilities_pages_per_sheet', nargs='*', help='')
        c.argument('capabilities_qualities', nargs='*', help='')
        c.argument('capabilities_right_margins', nargs='*', help='')
        c.argument('capabilities_scalings', nargs='*', help='')
        c.argument('capabilities_supported_color_configurations', nargs='*', help='')
        c.argument('capabilities_supported_copies_per_job', action=AddCapabilitiesCopiesPerJob, nargs='*', help=''
                   'integerRange')
        c.argument('capabilities_supported_document_mime_types', nargs='*', help='')
        c.argument('capabilities_supported_duplex_configurations', nargs='*', help='')
        c.argument('capabilities_supported_finishings', nargs='*', help='')
        c.argument('capabilities_supported_media_colors', nargs='*', help='')
        c.argument('capabilities_supported_media_sizes', nargs='*', help='')
        c.argument('capabilities_supported_media_types', nargs='*', help='')
        c.argument('capabilities_supported_orientations', nargs='*', help='')
        c.argument('capabilities_supported_output_bins', nargs='*', help='')
        c.argument('capabilities_supported_pages_per_sheet', action=AddCapabilitiesCopiesPerJob, nargs='*', help=''
                   'integerRange')
        c.argument('capabilities_supported_presentation_directions', nargs='*', help='')
        c.argument('capabilities_supported_print_qualities', nargs='*', help='')
        c.argument('capabilities_supports_fit_pdf_to_page', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_top_margins', nargs='*', help='')
        c.argument('allow_all_users', arg_type=get_three_state_flag(), help='')
        c.argument('created_date_time', help='')
        c.argument('allowed_groups', action=AddDevicescloudprintCreatePrinterShareAllowedGroups, nargs='*', help='')
        c.argument('allowed_users', action=AddDevicescloudprintCreatePrinterShareAllowedUsers, nargs='*', help='')
        c.argument('printer', type=validate_file_or_dict, help='printer Expected value: json-string/@json-file.')

    with self.argument_context('devicescloudprint create-report') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('application_sign_in_detailed_summary', action=AddApplicationSignInDetailedSummary, nargs='*',
                   help='')
        c.argument('credential_user_registration_details', action=AddCredentialUserRegistrationDetails, nargs='*',
                   help='')
        c.argument('user_credential_usage_details', action=AddUserCredentialUsageDetails, nargs='*', help='')
        c.argument('daily_print_usage_summaries_by_printer', action=AddDailyPrintUsageSummariesByPrinter, nargs='*',
                   help='')
        c.argument('daily_print_usage_summaries_by_user', action=AddDailyPrintUsageSummariesByUser, nargs='*',
                   help='')
        c.argument('monthly_print_usage_summaries_by_printer', action=AddMonthlyPrintUsageSummariesByPrinter,
                   nargs='*', help='')
        c.argument('monthly_print_usage_summaries_by_user', action=AddMonthlyPrintUsageSummariesByUser, nargs='*',
                   help='')

    with self.argument_context('devicescloudprint create-service') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('endpoints', action=AddEndpoints, nargs='*', help='')

    with self.argument_context('devicescloudprint create-share') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('defaults', action=AddDefaults, nargs='*', help='printerDefaults')
        c.argument('display_name', type=str, help='')
        c.argument('is_accepting_jobs', arg_type=get_three_state_flag(), help='')
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('manufacturer', type=str, help='')
        c.argument('model', type=str, help='')
        c.argument('name', type=str, help='')
        c.argument('status', action=AddPrintStatus, nargs='*', help='printerStatus')
        c.argument('jobs', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('capabilities_bottom_margins', nargs='*', help='')
        c.argument('capabilities_collation', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_color_modes', nargs='*', help='')
        c.argument('capabilities_content_types', nargs='*', help='')
        c.argument('capabilities_copies_per_job', action=AddCapabilitiesCopiesPerJob, nargs='*', help='integerRange')
        c.argument('capabilities_dpis', nargs='*', help='')
        c.argument('capabilities_duplex_modes', nargs='*', help='')
        c.argument('capabilities_feed_directions', nargs='*', help='')
        c.argument('capabilities_feed_orientations', nargs='*', help='')
        c.argument('capabilities_finishings', nargs='*', help='')
        c.argument('capabilities_input_bins', nargs='*', help='')
        c.argument('capabilities_is_color_printing_supported', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_is_page_range_supported', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_left_margins', nargs='*', help='')
        c.argument('capabilities_media_colors', nargs='*', help='')
        c.argument('capabilities_media_sizes', nargs='*', help='')
        c.argument('capabilities_media_types', nargs='*', help='')
        c.argument('capabilities_multipage_layouts', nargs='*', help='')
        c.argument('capabilities_orientations', nargs='*', help='')
        c.argument('capabilities_output_bins', nargs='*', help='')
        c.argument('capabilities_pages_per_sheet', nargs='*', help='')
        c.argument('capabilities_qualities', nargs='*', help='')
        c.argument('capabilities_right_margins', nargs='*', help='')
        c.argument('capabilities_scalings', nargs='*', help='')
        c.argument('capabilities_supported_color_configurations', nargs='*', help='')
        c.argument('capabilities_supported_copies_per_job', action=AddCapabilitiesCopiesPerJob, nargs='*', help=''
                   'integerRange')
        c.argument('capabilities_supported_document_mime_types', nargs='*', help='')
        c.argument('capabilities_supported_duplex_configurations', nargs='*', help='')
        c.argument('capabilities_supported_finishings', nargs='*', help='')
        c.argument('capabilities_supported_media_colors', nargs='*', help='')
        c.argument('capabilities_supported_media_sizes', nargs='*', help='')
        c.argument('capabilities_supported_media_types', nargs='*', help='')
        c.argument('capabilities_supported_orientations', nargs='*', help='')
        c.argument('capabilities_supported_output_bins', nargs='*', help='')
        c.argument('capabilities_supported_pages_per_sheet', action=AddCapabilitiesCopiesPerJob, nargs='*', help=''
                   'integerRange')
        c.argument('capabilities_supported_presentation_directions', nargs='*', help='')
        c.argument('capabilities_supported_print_qualities', nargs='*', help='')
        c.argument('capabilities_supports_fit_pdf_to_page', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_top_margins', nargs='*', help='')
        c.argument('allow_all_users', arg_type=get_three_state_flag(), help='')
        c.argument('created_date_time', help='')
        c.argument('allowed_groups', action=AddDevicescloudprintCreatePrinterShareAllowedGroups, nargs='*', help='')
        c.argument('allowed_users', action=AddDevicescloudprintCreatePrinterShareAllowedUsers, nargs='*', help='')
        c.argument('printer', type=validate_file_or_dict, help='printer Expected value: json-string/@json-file.')

    with self.argument_context('devicescloudprint create-task-definition') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_by', action=AddCreatedBy, nargs='*', help='appIdentity')
        c.argument('display_name', type=str, help='')
        c.argument('tasks', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('devicescloudprint get-connector') as c:
        c.argument('print_connector_id', type=str, help='key: id of printConnector')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint get-operation') as c:
        c.argument('print_operation_id', type=str, help='key: id of printOperation')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint get-printer') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint get-printer-share') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint get-report') as c:
        c.argument('report_root_id', type=str, help='key: id of reportRoot')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint get-service') as c:
        c.argument('print_service_id', type=str, help='key: id of printService')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint get-share') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint get-task-definition') as c:
        c.argument('print_task_definition_id', type=str, help='key: id of printTaskDefinition')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint list-connector') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint list-operation') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint list-printer') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint list-printer-share') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint list-report') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint list-service') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint list-share') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint list-task-definition') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint update-connector') as c:
        c.argument('print_connector_id', type=str, help='key: id of printConnector')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('app_version', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('fully_qualified_domain_name', type=str, help='')
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('name', type=str, help='')
        c.argument('operating_system', type=str, help='')
        c.argument('registered_date_time', help='')
        c.argument('device_health_last_connection_time', help='')

    with self.argument_context('devicescloudprint update-operation') as c:
        c.argument('print_operation_id', type=str, help='key: id of printOperation')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='')
        c.argument('status_description', type=str, help='')
        c.argument('status_state', arg_type=get_enum_type(['notStarted', 'running', 'succeeded', 'failed', ''
                                                           'unknownFutureValue']), help='')

    with self.argument_context('devicescloudprint update-printer') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('defaults', action=AddDefaults, nargs='*', help='printerDefaults')
        c.argument('display_name', type=str, help='')
        c.argument('is_accepting_jobs', arg_type=get_three_state_flag(), help='')
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('manufacturer', type=str, help='')
        c.argument('model', type=str, help='')
        c.argument('name', type=str, help='')
        c.argument('status', action=AddPrintStatus, nargs='*', help='printerStatus')
        c.argument('jobs', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('capabilities_bottom_margins', nargs='*', help='')
        c.argument('capabilities_collation', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_color_modes', nargs='*', help='')
        c.argument('capabilities_content_types', nargs='*', help='')
        c.argument('capabilities_copies_per_job', action=AddCapabilitiesCopiesPerJob, nargs='*', help='integerRange')
        c.argument('capabilities_dpis', nargs='*', help='')
        c.argument('capabilities_duplex_modes', nargs='*', help='')
        c.argument('capabilities_feed_directions', nargs='*', help='')
        c.argument('capabilities_feed_orientations', nargs='*', help='')
        c.argument('capabilities_finishings', nargs='*', help='')
        c.argument('capabilities_input_bins', nargs='*', help='')
        c.argument('capabilities_is_color_printing_supported', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_is_page_range_supported', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_left_margins', nargs='*', help='')
        c.argument('capabilities_media_colors', nargs='*', help='')
        c.argument('capabilities_media_sizes', nargs='*', help='')
        c.argument('capabilities_media_types', nargs='*', help='')
        c.argument('capabilities_multipage_layouts', nargs='*', help='')
        c.argument('capabilities_orientations', nargs='*', help='')
        c.argument('capabilities_output_bins', nargs='*', help='')
        c.argument('capabilities_pages_per_sheet', nargs='*', help='')
        c.argument('capabilities_qualities', nargs='*', help='')
        c.argument('capabilities_right_margins', nargs='*', help='')
        c.argument('capabilities_scalings', nargs='*', help='')
        c.argument('capabilities_supported_color_configurations', nargs='*', help='')
        c.argument('capabilities_supported_copies_per_job', action=AddCapabilitiesCopiesPerJob, nargs='*', help=''
                   'integerRange')
        c.argument('capabilities_supported_document_mime_types', nargs='*', help='')
        c.argument('capabilities_supported_duplex_configurations', nargs='*', help='')
        c.argument('capabilities_supported_finishings', nargs='*', help='')
        c.argument('capabilities_supported_media_colors', nargs='*', help='')
        c.argument('capabilities_supported_media_sizes', nargs='*', help='')
        c.argument('capabilities_supported_media_types', nargs='*', help='')
        c.argument('capabilities_supported_orientations', nargs='*', help='')
        c.argument('capabilities_supported_output_bins', nargs='*', help='')
        c.argument('capabilities_supported_pages_per_sheet', action=AddCapabilitiesCopiesPerJob, nargs='*', help=''
                   'integerRange')
        c.argument('capabilities_supported_presentation_directions', nargs='*', help='')
        c.argument('capabilities_supported_print_qualities', nargs='*', help='')
        c.argument('capabilities_supports_fit_pdf_to_page', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_top_margins', nargs='*', help='')
        c.argument('accepting_jobs', arg_type=get_three_state_flag(), help='')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='')
        c.argument('registered_date_time', help='')
        c.argument('allowed_groups', action=AddDevicescloudprintCreatePrinterAllowedGroups, nargs='*', help='')
        c.argument('allowed_users', action=AddDevicescloudprintCreatePrinterAllowedUsers, nargs='*', help='')
        c.argument('connectors', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('share', type=validate_file_or_dict, help='printerShare Expected value: json-string/@json-file.')
        c.argument('shares', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('task_triggers', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('devicescloudprint update-printer-share') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('defaults', action=AddDefaults, nargs='*', help='printerDefaults')
        c.argument('display_name', type=str, help='')
        c.argument('is_accepting_jobs', arg_type=get_three_state_flag(), help='')
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('manufacturer', type=str, help='')
        c.argument('model', type=str, help='')
        c.argument('name', type=str, help='')
        c.argument('status', action=AddPrintStatus, nargs='*', help='printerStatus')
        c.argument('jobs', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('capabilities_bottom_margins', nargs='*', help='')
        c.argument('capabilities_collation', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_color_modes', nargs='*', help='')
        c.argument('capabilities_content_types', nargs='*', help='')
        c.argument('capabilities_copies_per_job', action=AddCapabilitiesCopiesPerJob, nargs='*', help='integerRange')
        c.argument('capabilities_dpis', nargs='*', help='')
        c.argument('capabilities_duplex_modes', nargs='*', help='')
        c.argument('capabilities_feed_directions', nargs='*', help='')
        c.argument('capabilities_feed_orientations', nargs='*', help='')
        c.argument('capabilities_finishings', nargs='*', help='')
        c.argument('capabilities_input_bins', nargs='*', help='')
        c.argument('capabilities_is_color_printing_supported', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_is_page_range_supported', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_left_margins', nargs='*', help='')
        c.argument('capabilities_media_colors', nargs='*', help='')
        c.argument('capabilities_media_sizes', nargs='*', help='')
        c.argument('capabilities_media_types', nargs='*', help='')
        c.argument('capabilities_multipage_layouts', nargs='*', help='')
        c.argument('capabilities_orientations', nargs='*', help='')
        c.argument('capabilities_output_bins', nargs='*', help='')
        c.argument('capabilities_pages_per_sheet', nargs='*', help='')
        c.argument('capabilities_qualities', nargs='*', help='')
        c.argument('capabilities_right_margins', nargs='*', help='')
        c.argument('capabilities_scalings', nargs='*', help='')
        c.argument('capabilities_supported_color_configurations', nargs='*', help='')
        c.argument('capabilities_supported_copies_per_job', action=AddCapabilitiesCopiesPerJob, nargs='*', help=''
                   'integerRange')
        c.argument('capabilities_supported_document_mime_types', nargs='*', help='')
        c.argument('capabilities_supported_duplex_configurations', nargs='*', help='')
        c.argument('capabilities_supported_finishings', nargs='*', help='')
        c.argument('capabilities_supported_media_colors', nargs='*', help='')
        c.argument('capabilities_supported_media_sizes', nargs='*', help='')
        c.argument('capabilities_supported_media_types', nargs='*', help='')
        c.argument('capabilities_supported_orientations', nargs='*', help='')
        c.argument('capabilities_supported_output_bins', nargs='*', help='')
        c.argument('capabilities_supported_pages_per_sheet', action=AddCapabilitiesCopiesPerJob, nargs='*', help=''
                   'integerRange')
        c.argument('capabilities_supported_presentation_directions', nargs='*', help='')
        c.argument('capabilities_supported_print_qualities', nargs='*', help='')
        c.argument('capabilities_supports_fit_pdf_to_page', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_top_margins', nargs='*', help='')
        c.argument('allow_all_users', arg_type=get_three_state_flag(), help='')
        c.argument('created_date_time', help='')
        c.argument('allowed_groups', action=AddDevicescloudprintCreatePrinterShareAllowedGroups, nargs='*', help='')
        c.argument('allowed_users', action=AddDevicescloudprintCreatePrinterShareAllowedUsers, nargs='*', help='')
        c.argument('printer', type=validate_file_or_dict, help='printer Expected value: json-string/@json-file.')

    with self.argument_context('devicescloudprint update-report') as c:
        c.argument('report_root_id', type=str, help='key: id of reportRoot')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('application_sign_in_detailed_summary', action=AddApplicationSignInDetailedSummary, nargs='*',
                   help='')
        c.argument('credential_user_registration_details', action=AddCredentialUserRegistrationDetails, nargs='*',
                   help='')
        c.argument('user_credential_usage_details', action=AddUserCredentialUsageDetails, nargs='*', help='')
        c.argument('daily_print_usage_summaries_by_printer', action=AddDailyPrintUsageSummariesByPrinter, nargs='*',
                   help='')
        c.argument('daily_print_usage_summaries_by_user', action=AddDailyPrintUsageSummariesByUser, nargs='*',
                   help='')
        c.argument('monthly_print_usage_summaries_by_printer', action=AddMonthlyPrintUsageSummariesByPrinter,
                   nargs='*', help='')
        c.argument('monthly_print_usage_summaries_by_user', action=AddMonthlyPrintUsageSummariesByUser, nargs='*',
                   help='')

    with self.argument_context('devicescloudprint update-service') as c:
        c.argument('print_service_id', type=str, help='key: id of printService')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('endpoints', action=AddEndpoints, nargs='*', help='')

    with self.argument_context('devicescloudprint update-share') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('defaults', action=AddDefaults, nargs='*', help='printerDefaults')
        c.argument('display_name', type=str, help='')
        c.argument('is_accepting_jobs', arg_type=get_three_state_flag(), help='')
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('manufacturer', type=str, help='')
        c.argument('model', type=str, help='')
        c.argument('name', type=str, help='')
        c.argument('status', action=AddPrintStatus, nargs='*', help='printerStatus')
        c.argument('jobs', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('capabilities_bottom_margins', nargs='*', help='')
        c.argument('capabilities_collation', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_color_modes', nargs='*', help='')
        c.argument('capabilities_content_types', nargs='*', help='')
        c.argument('capabilities_copies_per_job', action=AddCapabilitiesCopiesPerJob, nargs='*', help='integerRange')
        c.argument('capabilities_dpis', nargs='*', help='')
        c.argument('capabilities_duplex_modes', nargs='*', help='')
        c.argument('capabilities_feed_directions', nargs='*', help='')
        c.argument('capabilities_feed_orientations', nargs='*', help='')
        c.argument('capabilities_finishings', nargs='*', help='')
        c.argument('capabilities_input_bins', nargs='*', help='')
        c.argument('capabilities_is_color_printing_supported', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_is_page_range_supported', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_left_margins', nargs='*', help='')
        c.argument('capabilities_media_colors', nargs='*', help='')
        c.argument('capabilities_media_sizes', nargs='*', help='')
        c.argument('capabilities_media_types', nargs='*', help='')
        c.argument('capabilities_multipage_layouts', nargs='*', help='')
        c.argument('capabilities_orientations', nargs='*', help='')
        c.argument('capabilities_output_bins', nargs='*', help='')
        c.argument('capabilities_pages_per_sheet', nargs='*', help='')
        c.argument('capabilities_qualities', nargs='*', help='')
        c.argument('capabilities_right_margins', nargs='*', help='')
        c.argument('capabilities_scalings', nargs='*', help='')
        c.argument('capabilities_supported_color_configurations', nargs='*', help='')
        c.argument('capabilities_supported_copies_per_job', action=AddCapabilitiesCopiesPerJob, nargs='*', help=''
                   'integerRange')
        c.argument('capabilities_supported_document_mime_types', nargs='*', help='')
        c.argument('capabilities_supported_duplex_configurations', nargs='*', help='')
        c.argument('capabilities_supported_finishings', nargs='*', help='')
        c.argument('capabilities_supported_media_colors', nargs='*', help='')
        c.argument('capabilities_supported_media_sizes', nargs='*', help='')
        c.argument('capabilities_supported_media_types', nargs='*', help='')
        c.argument('capabilities_supported_orientations', nargs='*', help='')
        c.argument('capabilities_supported_output_bins', nargs='*', help='')
        c.argument('capabilities_supported_pages_per_sheet', action=AddCapabilitiesCopiesPerJob, nargs='*', help=''
                   'integerRange')
        c.argument('capabilities_supported_presentation_directions', nargs='*', help='')
        c.argument('capabilities_supported_print_qualities', nargs='*', help='')
        c.argument('capabilities_supports_fit_pdf_to_page', arg_type=get_three_state_flag(), help='')
        c.argument('capabilities_top_margins', nargs='*', help='')
        c.argument('allow_all_users', arg_type=get_three_state_flag(), help='')
        c.argument('created_date_time', help='')
        c.argument('allowed_groups', action=AddDevicescloudprintCreatePrinterShareAllowedGroups, nargs='*', help='')
        c.argument('allowed_users', action=AddDevicescloudprintCreatePrinterShareAllowedUsers, nargs='*', help='')
        c.argument('printer', type=validate_file_or_dict, help='printer Expected value: json-string/@json-file.')

    with self.argument_context('devicescloudprint update-task-definition') as c:
        c.argument('print_task_definition_id', type=str, help='key: id of printTaskDefinition')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_by', action=AddCreatedBy, nargs='*', help='appIdentity')
        c.argument('display_name', type=str, help='')
        c.argument('tasks', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('devicescloudprint create') as c:
        c.argument('display_name', type=str, help='')
        c.argument('manufacturer', type=str, help='')
        c.argument('model', type=str, help='')
        c.argument('physical_device_id', type=str, help='')
        c.argument('has_physical_device', arg_type=get_three_state_flag(), help='')
        c.argument('certificate_signing_request', action=AddCertificateSigningRequest, nargs='*', help=''
                   'printCertificateSigningRequest')
        c.argument('connector_id', type=str, help='')

    with self.argument_context('devicescloudprint delete') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('print_identity_id', type=str, help='key: id of printIdentity')
        c.argument('if_match', type=str, help='ETag')
        c.argument('print_user_identity_id', type=str, help='key: id of printUserIdentity')
        c.argument('print_task_trigger_id', type=str, help='key: id of printTaskTrigger')

    with self.argument_context('devicescloudprint create-allowed-group') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')

    with self.argument_context('devicescloudprint create-allowed-user') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')
        c.argument('ip_address', type=str, help='')
        c.argument('user_principal_name', type=str, help='')

    with self.argument_context('devicescloudprint create-ref-connector') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('devicescloudprint create-ref-share') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('devicescloudprint create-task-trigger') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('event', arg_type=get_enum_type(['jobStarted', 'unknownFutureValue']), help='')
        c.argument('definition', type=validate_file_or_dict, help='printTaskDefinition Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('devicescloudprint get-allowed-group') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('print_identity_id', type=str, help='key: id of printIdentity')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint get-allowed-user') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('print_user_identity_id', type=str, help='key: id of printUserIdentity')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint get-capability') as c:
        c.argument('printer_id', type=str, help='key: id of printer')

    with self.argument_context('devicescloudprint get-ref-share') as c:
        c.argument('printer_id', type=str, help='key: id of printer')

    with self.argument_context('devicescloudprint get-share') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint get-task-trigger') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('print_task_trigger_id', type=str, help='key: id of printTaskTrigger')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint list-allowed-group') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint list-allowed-user') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint list-connector') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint list-ref-connector') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('devicescloudprint list-ref-share') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('devicescloudprint list-share') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint list-task-trigger') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint reset-default') as c:
        c.argument('printer_id', type=str, help='key: id of printer')

    with self.argument_context('devicescloudprint restore-factory-default') as c:
        c.argument('printer_id', type=str, help='key: id of printer')

    with self.argument_context('devicescloudprint set-ref-share') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('devicescloudprint update-allowed-group') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('print_identity_id', type=str, help='key: id of printIdentity')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')

    with self.argument_context('devicescloudprint update-allowed-user') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('print_user_identity_id', type=str, help='key: id of printUserIdentity')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')
        c.argument('ip_address', type=str, help='')
        c.argument('user_principal_name', type=str, help='')

    with self.argument_context('devicescloudprint update-task-trigger') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('print_task_trigger_id', type=str, help='key: id of printTaskTrigger')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('event', arg_type=get_enum_type(['jobStarted', 'unknownFutureValue']), help='')
        c.argument('definition', type=validate_file_or_dict, help='printTaskDefinition Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('devicescloudprint delete') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('print_task_trigger_id', type=str, help='key: id of printTaskTrigger')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('devicescloudprint get-definition') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('print_task_trigger_id', type=str, help='key: id of printTaskTrigger')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint get-ref-definition') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('print_task_trigger_id', type=str, help='key: id of printTaskTrigger')

    with self.argument_context('devicescloudprint set-ref-definition') as c:
        c.argument('printer_id', type=str, help='key: id of printer')
        c.argument('print_task_trigger_id', type=str, help='key: id of printTaskTrigger')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('devicescloudprint delete') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('print_identity_id', type=str, help='key: id of printIdentity')
        c.argument('if_match', type=str, help='ETag')
        c.argument('print_user_identity_id', type=str, help='key: id of printUserIdentity')

    with self.argument_context('devicescloudprint create-allowed-group') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')

    with self.argument_context('devicescloudprint create-allowed-user') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')
        c.argument('ip_address', type=str, help='')
        c.argument('user_principal_name', type=str, help='')

    with self.argument_context('devicescloudprint get-allowed-group') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('print_identity_id', type=str, help='key: id of printIdentity')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint get-allowed-user') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('print_user_identity_id', type=str, help='key: id of printUserIdentity')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint get-printer') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint get-ref-printer') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')

    with self.argument_context('devicescloudprint list-allowed-group') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint list-allowed-user') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint set-ref-printer') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('devicescloudprint update-allowed-group') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('print_identity_id', type=str, help='key: id of printIdentity')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')

    with self.argument_context('devicescloudprint update-allowed-user') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('print_user_identity_id', type=str, help='key: id of printUserIdentity')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')
        c.argument('ip_address', type=str, help='')
        c.argument('user_principal_name', type=str, help='')

    with self.argument_context('devicescloudprint get-capability') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')

    with self.argument_context('devicescloudprint reset-default') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')

    with self.argument_context('devicescloudprint restore-factory-default') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')

    with self.argument_context('devicescloudprint get-group-archived-print-job') as c:
        c.argument('group_id', type=str, help='')
        c.argument('period_start', help='')
        c.argument('period_end', help='')

    with self.argument_context('devicescloudprint get-group-print-usage-summary') as c:
        c.argument('group_id', type=str, help='')
        c.argument('period_start', help='')
        c.argument('period_end', help='')

    with self.argument_context('devicescloudprint get-overall-print-usage-summary') as c:
        c.argument('period_start', help='')
        c.argument('period_end', help='')
        c.argument('top_lists_size', type=int, help='')

    with self.argument_context('devicescloudprint get-print-usage-summary-by-group') as c:
        c.argument('period_start', help='')
        c.argument('period_end', help='')

    with self.argument_context('devicescloudprint get-print-usage-summary-by-printer') as c:
        c.argument('period_start', help='')
        c.argument('period_end', help='')

    with self.argument_context('devicescloudprint get-print-usage-summary-by-time-span') as c:
        c.argument('period_start', help='')
        c.argument('period_end', help='')
        c.argument('time_span_in_minutes', type=int, help='')

    with self.argument_context('devicescloudprint get-print-usage-summary-by-user') as c:
        c.argument('period_start', help='')
        c.argument('period_end', help='')

    with self.argument_context('devicescloudprint get-printer-archived-print-job') as c:
        c.argument('printer_id', type=str, help='')
        c.argument('period_start', help='')
        c.argument('period_end', help='')

    with self.argument_context('devicescloudprint get-printer-usage-summary') as c:
        c.argument('printer_id', type=str, help='')
        c.argument('period_start', help='')
        c.argument('period_end', help='')

    with self.argument_context('devicescloudprint get-user-archived-print-job') as c:
        c.argument('user_id', type=str, help='')
        c.argument('period_start', help='')
        c.argument('period_end', help='')

    with self.argument_context('devicescloudprint get-user-print-usage-summary') as c:
        c.argument('user_id', type=str, help='')
        c.argument('period_start', help='')
        c.argument('period_end', help='')

    with self.argument_context('devicescloudprint delete') as c:
        c.argument('print_service_id', type=str, help='key: id of printService')
        c.argument('print_service_endpoint_id', type=str, help='key: id of printServiceEndpoint')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('devicescloudprint create-endpoint') as c:
        c.argument('print_service_id', type=str, help='key: id of printService')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')
        c.argument('uri', type=str, help='')

    with self.argument_context('devicescloudprint get-endpoint') as c:
        c.argument('print_service_id', type=str, help='key: id of printService')
        c.argument('print_service_endpoint_id', type=str, help='key: id of printServiceEndpoint')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint list-endpoint') as c:
        c.argument('print_service_id', type=str, help='key: id of printService')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint update-endpoint') as c:
        c.argument('print_service_id', type=str, help='key: id of printService')
        c.argument('print_service_endpoint_id', type=str, help='key: id of printServiceEndpoint')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')
        c.argument('uri', type=str, help='')

    with self.argument_context('devicescloudprint delete') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('print_identity_id', type=str, help='key: id of printIdentity')
        c.argument('if_match', type=str, help='ETag')
        c.argument('print_user_identity_id', type=str, help='key: id of printUserIdentity')

    with self.argument_context('devicescloudprint create-allowed-group') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')

    with self.argument_context('devicescloudprint create-allowed-user') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')
        c.argument('ip_address', type=str, help='')
        c.argument('user_principal_name', type=str, help='')

    with self.argument_context('devicescloudprint get-allowed-group') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('print_identity_id', type=str, help='key: id of printIdentity')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint get-allowed-user') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('print_user_identity_id', type=str, help='key: id of printUserIdentity')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint get-printer') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint get-ref-printer') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')

    with self.argument_context('devicescloudprint list-allowed-group') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint list-allowed-user') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint set-ref-printer') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('devicescloudprint update-allowed-group') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('print_identity_id', type=str, help='key: id of printIdentity')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')

    with self.argument_context('devicescloudprint update-allowed-user') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')
        c.argument('print_user_identity_id', type=str, help='key: id of printUserIdentity')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')
        c.argument('ip_address', type=str, help='')
        c.argument('user_principal_name', type=str, help='')

    with self.argument_context('devicescloudprint get-capability') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')

    with self.argument_context('devicescloudprint reset-default') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')

    with self.argument_context('devicescloudprint restore-factory-default') as c:
        c.argument('printer_share_id', type=str, help='key: id of printerShare')

    with self.argument_context('devicescloudprint delete') as c:
        c.argument('print_task_definition_id', type=str, help='key: id of printTaskDefinition')
        c.argument('print_task_id', type=str, help='key: id of printTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('devicescloudprint create-task') as c:
        c.argument('print_task_definition_id', type=str, help='key: id of printTaskDefinition')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('parent_url', type=str, help='')
        c.argument('status', action=AddPrintTaskdefinitionsStatus, nargs='*', help='printTaskStatus')
        c.argument('definition', type=validate_file_or_dict, help='printTaskDefinition Expected value: '
                   'json-string/@json-file.')
        c.argument('trigger_id', type=str, help='Read-only.')
        c.argument('trigger_event', arg_type=get_enum_type(['jobStarted', 'unknownFutureValue']), help='')
        c.argument('trigger_definition', type=validate_file_or_dict, help='printTaskDefinition Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('devicescloudprint get-task') as c:
        c.argument('print_task_definition_id', type=str, help='key: id of printTaskDefinition')
        c.argument('print_task_id', type=str, help='key: id of printTask')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint list-task') as c:
        c.argument('print_task_definition_id', type=str, help='key: id of printTaskDefinition')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint update-task') as c:
        c.argument('print_task_definition_id', type=str, help='key: id of printTaskDefinition')
        c.argument('print_task_id', type=str, help='key: id of printTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('parent_url', type=str, help='')
        c.argument('status', action=AddPrintTaskdefinitionsStatus, nargs='*', help='printTaskStatus')
        c.argument('definition', type=validate_file_or_dict, help='printTaskDefinition Expected value: '
                   'json-string/@json-file.')
        c.argument('trigger_id', type=str, help='Read-only.')
        c.argument('trigger_event', arg_type=get_enum_type(['jobStarted', 'unknownFutureValue']), help='')
        c.argument('trigger_definition', type=validate_file_or_dict, help='printTaskDefinition Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('devicescloudprint delete') as c:
        c.argument('print_task_definition_id', type=str, help='key: id of printTaskDefinition')
        c.argument('print_task_id', type=str, help='key: id of printTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('devicescloudprint get-definition') as c:
        c.argument('print_task_definition_id', type=str, help='key: id of printTaskDefinition')
        c.argument('print_task_id', type=str, help='key: id of printTask')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint get-ref-definition') as c:
        c.argument('print_task_definition_id', type=str, help='key: id of printTaskDefinition')
        c.argument('print_task_id', type=str, help='key: id of printTask')

    with self.argument_context('devicescloudprint get-ref-trigger') as c:
        c.argument('print_task_definition_id', type=str, help='key: id of printTaskDefinition')
        c.argument('print_task_id', type=str, help='key: id of printTask')

    with self.argument_context('devicescloudprint get-trigger') as c:
        c.argument('print_task_definition_id', type=str, help='key: id of printTaskDefinition')
        c.argument('print_task_id', type=str, help='key: id of printTask')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('devicescloudprint set-ref-definition') as c:
        c.argument('print_task_definition_id', type=str, help='key: id of printTaskDefinition')
        c.argument('print_task_id', type=str, help='key: id of printTask')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('devicescloudprint set-ref-trigger') as c:
        c.argument('print_task_definition_id', type=str, help='key: id of printTaskDefinition')
        c.argument('print_task_id', type=str, help='key: id of printTask')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')
