# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type
)
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_usersactions_beta.action import (
    AddAttachmentItem,
    AddEndTime,
    AddUsersCalendarCalendarviewExceptionoccurrencesToRecipients,
    AddUsersCalendarCalendarviewInstancesToRecipients,
    AddUsersCalendarCalendarviewToRecipients,
    AddUsersCalendarEventsExceptionoccurrencesToRecipients,
    AddUsersCalendarEventsInstancesToRecipients,
    AddUsersCalendarEventsToRecipients,
    AddUsersCalendargroupsCalendarsCalendarviewExceptionoccurrencesToRecipients,
    AddUsersCalendargroupsCalendarsCalendarviewInstancesToRecipients,
    AddUsersCalendargroupsCalendarsCalendarviewToRecipients,
    AddUsersCalendargroupsCalendarsEventsExceptionoccurrencesToRecipients,
    AddUsersCalendargroupsCalendarsEventsInstancesToRecipients,
    AddUsersCalendargroupsCalendarsEventsToRecipients,
    AddUsersCalendarsCalendarviewExceptionoccurrencesToRecipients,
    AddUsersCalendarsCalendarviewInstancesToRecipients,
    AddUsersCalendarsCalendarviewToRecipients,
    AddUsersCalendarsEventsExceptionoccurrencesToRecipients,
    AddUsersCalendarsEventsInstancesToRecipients,
    AddUsersCalendarsEventsToRecipients,
    AddUsersCalendarviewCalendarCalendarviewToRecipients,
    AddUsersCalendarviewCalendarEventsToRecipients,
    AddUsersCalendarviewExceptionoccurrencesToRecipients,
    AddUsersCalendarviewInstancesToRecipients,
    AddUsersCalendarviewToRecipients,
    AddEnrollmentConfigurationAssignments,
    AddUsersEventsCalendarCalendarviewToRecipients,
    AddUsersEventsCalendarEventsToRecipients,
    AddUsersEventsExceptionoccurrencesToRecipients,
    AddUsersEventsInstancesToRecipients,
    AddUsersEventsToRecipients,
    AddUsersactionsUserMailFolderMessageCreateForwardToRecipients,
    AddMessageBccRecipients,
    AddMessageBody,
    AddMessageCcRecipients,
    AddMessageFrom,
    AddMessageInternetMessageHeaders,
    AddMessageMentionsPreview,
    AddMessageReplyTo,
    AddMessageToRecipients,
    AddMessageAttachments,
    AddMessageExtensions,
    AddMessageMultiValueExtendedProperties,
    AddMessageSingleValueExtendedProperties,
    AddUsersactionsUserMailFolderMessageForwardToRecipients,
    AddUpdateWindowsDeviceAccountActionParameterDeviceAccount,
    AddUsersactionsUserMessageCreateForwardToRecipients,
    AddUsersactionsUserMessageForwardToRecipients,
    AddAddLicenses,
    AddAttendees,
    AddLocationConstraintLocations,
    AddUsersOnenoteNotebooksSectiongroupsSectionsPagesCommands,
    AddUsersOnenoteNotebooksSectionsPagesCommands,
    AddUsersOnenotePagesCommands,
    AddUsersOnenotePagesParentnotebookSectiongroupsSectionsPagesCommands,
    AddUsersOnenotePagesParentnotebookSectionsPagesCommands,
    AddUsersOnenotePagesParentsectionPagesCommands,
    AddUsersOnenoteSectiongroupsParentnotebookSectionsPagesCommands,
    AddUsersOnenoteSectiongroupsSectionsPagesCommands,
    AddCommands,
    AddChatInfo,
    AddTopic,
    AddTemplateParameters
)


def load_arguments(self, _):

    with self.argument_context('usersactions user-authentication-method disable-sm-sign-in') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('authentication_method_id', type=str, help='key: id of authenticationMethod')

    with self.argument_context('usersactions user-authentication-method enable-sm-sign-in') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('authentication_method_id', type=str, help='key: id of authenticationMethod')

    with self.argument_context('usersactions user-authentication-method reset-password') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('authentication_method_id', type=str, help='key: id of authenticationMethod')
        c.argument('new_password', type=str, help='')
        c.argument('require_change_on_next_sign_in', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-calendar-view-attachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='*', help='attachmentItem')

    with self.argument_context('usersactions user-calendar-calendar-view-calendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('schedules', nargs='*', help='')
        c.argument('end_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions user-calendar-calendar-view-exception-occurrence accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-calendar-view-exception-occurrence cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-calendar-view-exception-occurrence decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-calendar-view-exception-occurrence dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-calendar-view-exception-occurrence forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendarCalendarviewExceptionoccurrencesToRecipients, nargs='*',
                   help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-calendar-view-exception-occurrence snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-calendar-view-exception-occurrence tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-calendar-view-instance accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-calendar-view-instance cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-calendar-view-instance decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-calendar-view-instance dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-calendar-view-instance forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendarCalendarviewInstancesToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-calendar-view-instance snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-calendar-view-instance tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-calendar-view accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-calendar-view cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-calendar-view decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-calendar-view dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-calendar-view forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendarCalendarviewToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-calendar-view snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-calendar-view tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-event-attachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='*', help='attachmentItem')

    with self.argument_context('usersactions user-calendar-event-calendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('schedules', nargs='*', help='')
        c.argument('end_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions user-calendar-event-exception-occurrence accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-event-exception-occurrence cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-event-exception-occurrence decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-event-exception-occurrence dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-event-exception-occurrence forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendarEventsExceptionoccurrencesToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-event-exception-occurrence snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-event-exception-occurrence tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-event-instance accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-event-instance cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-event-instance decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-event-instance dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-event-instance forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendarEventsInstancesToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-event-instance snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-event-instance tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-event accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-event cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-event decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-event dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-event forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendarEventsToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-event snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-event tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('schedules', nargs='*', help='')
        c.argument('end_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view-attachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='*', help='attachmentItem')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view-calendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('schedules', nargs='*', help='')
        c.argument('end_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view-exception-occurrence accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view-exception-occurrence cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view-exception-occurrence decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view-exception-occurrence dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view-exception-occurrence forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendargroupsCalendarsCalendarviewExceptionoccurrencesToRecipients,
                   nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view-exception-occurrence snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view-exception-occurrence tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view-instance accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view-instance cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view-instance decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view-instance dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view-instance forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendargroupsCalendarsCalendarviewInstancesToRecipients, nargs='*',
                   help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view-instance snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view-instance tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendargroupsCalendarsCalendarviewToRecipients, nargs='*',
                   help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-group-calendar-calendar-view tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-group-calendar-event-attachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='*', help='attachmentItem')

    with self.argument_context('usersactions user-calendar-group-calendar-event-calendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('schedules', nargs='*', help='')
        c.argument('end_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions user-calendar-group-calendar-event-exception-occurrence accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-group-calendar-event-exception-occurrence cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-group-calendar-event-exception-occurrence decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-group-calendar-event-exception-occurrence dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-group-calendar-event-exception-occurrence forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendargroupsCalendarsEventsExceptionoccurrencesToRecipients,
                   nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-group-calendar-event-exception-occurrence snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-group-calendar-event-exception-occurrence tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-group-calendar-event-instance accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-group-calendar-event-instance cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-group-calendar-event-instance decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-group-calendar-event-instance dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-group-calendar-event-instance forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendargroupsCalendarsEventsInstancesToRecipients, nargs='*',
                   help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-group-calendar-event-instance snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-group-calendar-event-instance tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-group-calendar-event accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-group-calendar-event cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-group-calendar-event decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-group-calendar-event dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-group-calendar-event forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendargroupsCalendarsEventsToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-group-calendar-event snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-group-calendar-event tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-group-calendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('schedules', nargs='*', help='')
        c.argument('end_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions user-calendar-calendar-view-attachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='*', help='attachmentItem')

    with self.argument_context('usersactions user-calendar-calendar-view-calendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('schedules', nargs='*', help='')
        c.argument('end_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions user-calendar-calendar-view-exception-occurrence accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-calendar-view-exception-occurrence cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-calendar-view-exception-occurrence decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-calendar-view-exception-occurrence dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-calendar-view-exception-occurrence forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendarsCalendarviewExceptionoccurrencesToRecipients, nargs='*',
                   help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-calendar-view-exception-occurrence snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-calendar-view-exception-occurrence tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-calendar-view-instance accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-calendar-view-instance cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-calendar-view-instance decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-calendar-view-instance dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-calendar-view-instance forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendarsCalendarviewInstancesToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-calendar-view-instance snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-calendar-view-instance tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-calendar-view accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-calendar-view cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-calendar-view decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-calendar-view dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-calendar-view forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendarsCalendarviewToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-calendar-view snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-calendar-view tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-event-attachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='*', help='attachmentItem')

    with self.argument_context('usersactions user-calendar-event-calendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('schedules', nargs='*', help='')
        c.argument('end_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions user-calendar-event-exception-occurrence accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-event-exception-occurrence cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-event-exception-occurrence decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-event-exception-occurrence dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-event-exception-occurrence forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendarsEventsExceptionoccurrencesToRecipients, nargs='*',
                   help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-event-exception-occurrence snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-event-exception-occurrence tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-event-instance accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-event-instance cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-event-instance decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-event-instance dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-event-instance forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendarsEventsInstancesToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-event-instance snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-event-instance tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-event accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-event cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-event decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-event dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-event forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendarsEventsToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-event snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-event tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('schedules', nargs='*', help='')
        c.argument('end_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions user-calendar-view-attachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='*', help='attachmentItem')

    with self.argument_context('usersactions user-calendar-view-calendar-calendar-view accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-view-calendar-calendar-view cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-view-calendar-calendar-view decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-view-calendar-calendar-view dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-view-calendar-calendar-view forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendarviewCalendarCalendarviewToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-view-calendar-calendar-view snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-view-calendar-calendar-view tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-view-calendar-event accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-view-calendar-event cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-view-calendar-event decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-view-calendar-event dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-view-calendar-event forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendarviewCalendarEventsToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-view-calendar-event snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-view-calendar-event tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-view-calendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('schedules', nargs='*', help='')
        c.argument('end_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions user-calendar-view-exception-occurrence accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-view-exception-occurrence cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-view-exception-occurrence decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-view-exception-occurrence dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-view-exception-occurrence forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendarviewExceptionoccurrencesToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-view-exception-occurrence snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-view-exception-occurrence tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-view-instance accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-view-instance cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-view-instance decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-view-instance dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-view-instance forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendarviewInstancesToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-view-instance snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-view-instance tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-view accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-view cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-view decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-calendar-view dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('usersactions user-calendar-view forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersCalendarviewToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-calendar-view snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-calendar-view tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-device-enrollment-configuration assign') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('device_enrollment_configuration_id', type=str, help='key: id of deviceEnrollmentConfiguration')
        c.argument('enrollment_configuration_assignments', action=AddEnrollmentConfigurationAssignments, nargs='*',
                   help='')

    with self.argument_context('usersactions user-device-enrollment-configuration has-payload-link') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('payload_ids', nargs='*', help='')

    with self.argument_context('usersactions user-device-enrollment-configuration set-priority') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('device_enrollment_configuration_id', type=str, help='key: id of deviceEnrollmentConfiguration')
        c.argument('priority', type=int, help='')

    with self.argument_context('usersactions user-event-attachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='*', help='attachmentItem')

    with self.argument_context('usersactions user-event-calendar-calendar-view accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-event-calendar-calendar-view cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-event-calendar-calendar-view decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-event-calendar-calendar-view dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions user-event-calendar-calendar-view forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersEventsCalendarCalendarviewToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-event-calendar-calendar-view snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-event-calendar-calendar-view tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-event-calendar-event accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-event-calendar-event cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-event-calendar-event decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-event-calendar-event dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions user-event-calendar-event forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersEventsCalendarEventsToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-event-calendar-event snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-event-calendar-event tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-event-calendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('schedules', nargs='*', help='')
        c.argument('end_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions user-event-exception-occurrence accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-event-exception-occurrence cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-event-exception-occurrence decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-event-exception-occurrence dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions user-event-exception-occurrence forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersEventsExceptionoccurrencesToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-event-exception-occurrence snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-event-exception-occurrence tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-event-instance accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-event-instance cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-event-instance decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-event-instance dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions user-event-instance forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersEventsInstancesToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-event-instance snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-event-instance tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-event accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-event cancel') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-event decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-event dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('usersactions user-event forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('to_recipients', action=AddUsersEventsToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')

    with self.argument_context('usersactions user-event snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('usersactions user-event tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-mail-folder-child-folder copy') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('mail_folder_id1', type=str, help='key: id of mailFolder')
        c.argument('destination_id', type=str, help='')

    with self.argument_context('usersactions user-mail-folder-child-folder move') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('mail_folder_id1', type=str, help='key: id of mailFolder')
        c.argument('destination_id', type=str, help='')

    with self.argument_context('usersactions user-mail-folder-message-attachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='*', help='attachmentItem')

    with self.argument_context('usersactions user-mail-folder-message copy') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('destination_id', type=str, help='')

    with self.argument_context('usersactions user-mail-folder-message create-forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('to_recipients', action=AddUsersactionsUserMailFolderMessageCreateForwardToRecipients, nargs='*',
                   help='')
        c.argument('comment', type=str, help='')
        c.argument('id', type=str, help='Read-only.')
        c.argument('message_categories', nargs='*', help='The categories associated with the item')
        c.argument('message_change_key', type=str, help='Identifies the version of the item. Every time the item is '
                   'changed, changeKey changes as well. This allows Exchange to apply changes to the correct version '
                   'of the object. Read-only.')
        c.argument('message_created_date_time', help='The Timestamp type represents date and time information using '
                   'ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look '
                   'like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_last_modified_date_time', help='The Timestamp type represents date and time information '
                   'using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_bcc_recipients', action=AddMessageBccRecipients, nargs='*', help='The Bcc: recipients for '
                   'the message.')
        c.argument('message_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_body_preview', type=str, help='The first 255 characters of the message body. It is in text '
                   'format.')
        c.argument('message_cc_recipients', action=AddMessageCcRecipients, nargs='*', help='The Cc: recipients for the '
                   'message.')
        c.argument('message_conversation_id', type=str, help='The ID of the conversation the email belongs to.')
        c.argument('message_conversation_index',
                   help='Indicates the position of the message within the conversation.')
        c.argument('message_flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/@json-file.')
        c.argument('message_from', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as :code:`<IMG src=\'cid:image001.jpg@01D26CD8.'
                   '6C05F070\'>`.')
        c.argument('message_importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('message_inference_classification', arg_type=get_enum_type(['focused', 'other']), help='')
        c.argument('message_internet_message_headers', action=AddMessageInternetMessageHeaders, nargs='*', help='A '
                   'collection of message headers defined by RFC5322. The set includes message headers indicating the '
                   'network path taken by a message from the sender to the recipient. It can also contain custom '
                   'message headers that hold app data for the message.  Returned only on applying a $select query '
                   'option. Read-only.')
        c.argument('message_internet_message_id', type=str, help='The message ID in the format specified by RFC2822.')
        c.argument('message_is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a '
                   'draft. A message is a draft if it hasn\'t been sent yet.')
        c.argument('message_is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been '
                   'read.')
        c.argument('message_is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_mentions_preview', action=AddMessageMentionsPreview, nargs='*', help='mentionsPreview')
        c.argument('message_parent_folder_id', type=str, help='The unique identifier for the message\'s parent '
                   'mailFolder.')
        c.argument('message_received_date_time', help='The date and time the message was received.')
        c.argument('message_reply_to', action=AddMessageReplyTo, nargs='*', help='The email addresses to use when '
                   'replying.')
        c.argument('message_sender', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_sent_date_time', help='The date and time the message was sent.')
        c.argument('message_subject', type=str, help='The subject of the message.')
        c.argument('message_to_recipients', action=AddMessageToRecipients, nargs='*', help='The To: recipients for the '
                   'message.')
        c.argument('message_unique_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_unsubscribe_data', nargs='*', help='')
        c.argument('message_unsubscribe_enabled', arg_type=get_three_state_flag(), help='')
        c.argument('message_web_link', type=str, help='The URL to open the message in Outlook on the web.You can '
                   'append an ispopout argument to the end of the URL to change how the message is displayed. If '
                   'ispopout is not present or if it is set to 1, then the message is shown in a popout window. If '
                   'ispopout is set to 0, then the browser will show the message in the Outlook on the web review '
                   'pane.The message will open in the browser if you are logged in to your mailbox via Outlook on the '
                   'web. You will be prompted to login if you are not already logged in with the browser.This URL '
                   'cannot be accessed from within an iFrame.')
        c.argument('message_attachments', action=AddMessageAttachments, nargs='*', help='The fileAttachment and '
                   'itemAttachment attachments for the message.')
        c.argument('message_extensions', action=AddMessageExtensions, nargs='*', help='The collection of open '
                   'extensions defined for the message. Nullable.')
        c.argument('message_mentions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('message_multi_value_extended_properties', action=AddMessageMultiValueExtendedProperties, nargs='*',
                   help='The collection of multi-value extended properties defined for the message. Nullable.')
        c.argument('message_single_value_extended_properties', action=AddMessageSingleValueExtendedProperties, nargs=''
                   '*', help='The collection of single-value extended properties defined for the message. Nullable.')

    with self.argument_context('usersactions user-mail-folder-message create-reply') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('comment', type=str, help='')
        c.argument('id', type=str, help='Read-only.')
        c.argument('message_categories', nargs='*', help='The categories associated with the item')
        c.argument('message_change_key', type=str, help='Identifies the version of the item. Every time the item is '
                   'changed, changeKey changes as well. This allows Exchange to apply changes to the correct version '
                   'of the object. Read-only.')
        c.argument('message_created_date_time', help='The Timestamp type represents date and time information using '
                   'ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look '
                   'like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_last_modified_date_time', help='The Timestamp type represents date and time information '
                   'using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_bcc_recipients', action=AddMessageBccRecipients, nargs='*', help='The Bcc: recipients for '
                   'the message.')
        c.argument('message_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_body_preview', type=str, help='The first 255 characters of the message body. It is in text '
                   'format.')
        c.argument('message_cc_recipients', action=AddMessageCcRecipients, nargs='*', help='The Cc: recipients for the '
                   'message.')
        c.argument('message_conversation_id', type=str, help='The ID of the conversation the email belongs to.')
        c.argument('message_conversation_index',
                   help='Indicates the position of the message within the conversation.')
        c.argument('message_flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/@json-file.')
        c.argument('message_from', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as :code:`<IMG src=\'cid:image001.jpg@01D26CD8.'
                   '6C05F070\'>`.')
        c.argument('message_importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('message_inference_classification', arg_type=get_enum_type(['focused', 'other']), help='')
        c.argument('message_internet_message_headers', action=AddMessageInternetMessageHeaders, nargs='*', help='A '
                   'collection of message headers defined by RFC5322. The set includes message headers indicating the '
                   'network path taken by a message from the sender to the recipient. It can also contain custom '
                   'message headers that hold app data for the message.  Returned only on applying a $select query '
                   'option. Read-only.')
        c.argument('message_internet_message_id', type=str, help='The message ID in the format specified by RFC2822.')
        c.argument('message_is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a '
                   'draft. A message is a draft if it hasn\'t been sent yet.')
        c.argument('message_is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been '
                   'read.')
        c.argument('message_is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_mentions_preview', action=AddMessageMentionsPreview, nargs='*', help='mentionsPreview')
        c.argument('message_parent_folder_id', type=str, help='The unique identifier for the message\'s parent '
                   'mailFolder.')
        c.argument('message_received_date_time', help='The date and time the message was received.')
        c.argument('message_reply_to', action=AddMessageReplyTo, nargs='*', help='The email addresses to use when '
                   'replying.')
        c.argument('message_sender', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_sent_date_time', help='The date and time the message was sent.')
        c.argument('message_subject', type=str, help='The subject of the message.')
        c.argument('message_to_recipients', action=AddMessageToRecipients, nargs='*', help='The To: recipients for the '
                   'message.')
        c.argument('message_unique_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_unsubscribe_data', nargs='*', help='')
        c.argument('message_unsubscribe_enabled', arg_type=get_three_state_flag(), help='')
        c.argument('message_web_link', type=str, help='The URL to open the message in Outlook on the web.You can '
                   'append an ispopout argument to the end of the URL to change how the message is displayed. If '
                   'ispopout is not present or if it is set to 1, then the message is shown in a popout window. If '
                   'ispopout is set to 0, then the browser will show the message in the Outlook on the web review '
                   'pane.The message will open in the browser if you are logged in to your mailbox via Outlook on the '
                   'web. You will be prompted to login if you are not already logged in with the browser.This URL '
                   'cannot be accessed from within an iFrame.')
        c.argument('message_attachments', action=AddMessageAttachments, nargs='*', help='The fileAttachment and '
                   'itemAttachment attachments for the message.')
        c.argument('message_extensions', action=AddMessageExtensions, nargs='*', help='The collection of open '
                   'extensions defined for the message. Nullable.')
        c.argument('message_mentions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('message_multi_value_extended_properties', action=AddMessageMultiValueExtendedProperties, nargs='*',
                   help='The collection of multi-value extended properties defined for the message. Nullable.')
        c.argument('message_single_value_extended_properties', action=AddMessageSingleValueExtendedProperties, nargs=''
                   '*', help='The collection of single-value extended properties defined for the message. Nullable.')

    with self.argument_context('usersactions user-mail-folder-message create-reply-all') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('comment', type=str, help='')
        c.argument('id', type=str, help='Read-only.')
        c.argument('message_categories', nargs='*', help='The categories associated with the item')
        c.argument('message_change_key', type=str, help='Identifies the version of the item. Every time the item is '
                   'changed, changeKey changes as well. This allows Exchange to apply changes to the correct version '
                   'of the object. Read-only.')
        c.argument('message_created_date_time', help='The Timestamp type represents date and time information using '
                   'ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look '
                   'like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_last_modified_date_time', help='The Timestamp type represents date and time information '
                   'using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_bcc_recipients', action=AddMessageBccRecipients, nargs='*', help='The Bcc: recipients for '
                   'the message.')
        c.argument('message_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_body_preview', type=str, help='The first 255 characters of the message body. It is in text '
                   'format.')
        c.argument('message_cc_recipients', action=AddMessageCcRecipients, nargs='*', help='The Cc: recipients for the '
                   'message.')
        c.argument('message_conversation_id', type=str, help='The ID of the conversation the email belongs to.')
        c.argument('message_conversation_index',
                   help='Indicates the position of the message within the conversation.')
        c.argument('message_flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/@json-file.')
        c.argument('message_from', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as :code:`<IMG src=\'cid:image001.jpg@01D26CD8.'
                   '6C05F070\'>`.')
        c.argument('message_importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('message_inference_classification', arg_type=get_enum_type(['focused', 'other']), help='')
        c.argument('message_internet_message_headers', action=AddMessageInternetMessageHeaders, nargs='*', help='A '
                   'collection of message headers defined by RFC5322. The set includes message headers indicating the '
                   'network path taken by a message from the sender to the recipient. It can also contain custom '
                   'message headers that hold app data for the message.  Returned only on applying a $select query '
                   'option. Read-only.')
        c.argument('message_internet_message_id', type=str, help='The message ID in the format specified by RFC2822.')
        c.argument('message_is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a '
                   'draft. A message is a draft if it hasn\'t been sent yet.')
        c.argument('message_is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been '
                   'read.')
        c.argument('message_is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_mentions_preview', action=AddMessageMentionsPreview, nargs='*', help='mentionsPreview')
        c.argument('message_parent_folder_id', type=str, help='The unique identifier for the message\'s parent '
                   'mailFolder.')
        c.argument('message_received_date_time', help='The date and time the message was received.')
        c.argument('message_reply_to', action=AddMessageReplyTo, nargs='*', help='The email addresses to use when '
                   'replying.')
        c.argument('message_sender', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_sent_date_time', help='The date and time the message was sent.')
        c.argument('message_subject', type=str, help='The subject of the message.')
        c.argument('message_to_recipients', action=AddMessageToRecipients, nargs='*', help='The To: recipients for the '
                   'message.')
        c.argument('message_unique_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_unsubscribe_data', nargs='*', help='')
        c.argument('message_unsubscribe_enabled', arg_type=get_three_state_flag(), help='')
        c.argument('message_web_link', type=str, help='The URL to open the message in Outlook on the web.You can '
                   'append an ispopout argument to the end of the URL to change how the message is displayed. If '
                   'ispopout is not present or if it is set to 1, then the message is shown in a popout window. If '
                   'ispopout is set to 0, then the browser will show the message in the Outlook on the web review '
                   'pane.The message will open in the browser if you are logged in to your mailbox via Outlook on the '
                   'web. You will be prompted to login if you are not already logged in with the browser.This URL '
                   'cannot be accessed from within an iFrame.')
        c.argument('message_attachments', action=AddMessageAttachments, nargs='*', help='The fileAttachment and '
                   'itemAttachment attachments for the message.')
        c.argument('message_extensions', action=AddMessageExtensions, nargs='*', help='The collection of open '
                   'extensions defined for the message. Nullable.')
        c.argument('message_mentions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('message_multi_value_extended_properties', action=AddMessageMultiValueExtendedProperties, nargs='*',
                   help='The collection of multi-value extended properties defined for the message. Nullable.')
        c.argument('message_single_value_extended_properties', action=AddMessageSingleValueExtendedProperties, nargs=''
                   '*', help='The collection of single-value extended properties defined for the message. Nullable.')

    with self.argument_context('usersactions user-mail-folder-message forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('to_recipients', action=AddUsersactionsUserMailFolderMessageForwardToRecipients, nargs='*',
                   help='')
        c.argument('comment', type=str, help='')
        c.argument('id', type=str, help='Read-only.')
        c.argument('message_categories', nargs='*', help='The categories associated with the item')
        c.argument('message_change_key', type=str, help='Identifies the version of the item. Every time the item is '
                   'changed, changeKey changes as well. This allows Exchange to apply changes to the correct version '
                   'of the object. Read-only.')
        c.argument('message_created_date_time', help='The Timestamp type represents date and time information using '
                   'ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look '
                   'like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_last_modified_date_time', help='The Timestamp type represents date and time information '
                   'using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_bcc_recipients', action=AddMessageBccRecipients, nargs='*', help='The Bcc: recipients for '
                   'the message.')
        c.argument('message_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_body_preview', type=str, help='The first 255 characters of the message body. It is in text '
                   'format.')
        c.argument('message_cc_recipients', action=AddMessageCcRecipients, nargs='*', help='The Cc: recipients for the '
                   'message.')
        c.argument('message_conversation_id', type=str, help='The ID of the conversation the email belongs to.')
        c.argument('message_conversation_index',
                   help='Indicates the position of the message within the conversation.')
        c.argument('message_flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/@json-file.')
        c.argument('message_from', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as :code:`<IMG src=\'cid:image001.jpg@01D26CD8.'
                   '6C05F070\'>`.')
        c.argument('message_importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('message_inference_classification', arg_type=get_enum_type(['focused', 'other']), help='')
        c.argument('message_internet_message_headers', action=AddMessageInternetMessageHeaders, nargs='*', help='A '
                   'collection of message headers defined by RFC5322. The set includes message headers indicating the '
                   'network path taken by a message from the sender to the recipient. It can also contain custom '
                   'message headers that hold app data for the message.  Returned only on applying a $select query '
                   'option. Read-only.')
        c.argument('message_internet_message_id', type=str, help='The message ID in the format specified by RFC2822.')
        c.argument('message_is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a '
                   'draft. A message is a draft if it hasn\'t been sent yet.')
        c.argument('message_is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been '
                   'read.')
        c.argument('message_is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_mentions_preview', action=AddMessageMentionsPreview, nargs='*', help='mentionsPreview')
        c.argument('message_parent_folder_id', type=str, help='The unique identifier for the message\'s parent '
                   'mailFolder.')
        c.argument('message_received_date_time', help='The date and time the message was received.')
        c.argument('message_reply_to', action=AddMessageReplyTo, nargs='*', help='The email addresses to use when '
                   'replying.')
        c.argument('message_sender', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_sent_date_time', help='The date and time the message was sent.')
        c.argument('message_subject', type=str, help='The subject of the message.')
        c.argument('message_to_recipients', action=AddMessageToRecipients, nargs='*', help='The To: recipients for the '
                   'message.')
        c.argument('message_unique_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_unsubscribe_data', nargs='*', help='')
        c.argument('message_unsubscribe_enabled', arg_type=get_three_state_flag(), help='')
        c.argument('message_web_link', type=str, help='The URL to open the message in Outlook on the web.You can '
                   'append an ispopout argument to the end of the URL to change how the message is displayed. If '
                   'ispopout is not present or if it is set to 1, then the message is shown in a popout window. If '
                   'ispopout is set to 0, then the browser will show the message in the Outlook on the web review '
                   'pane.The message will open in the browser if you are logged in to your mailbox via Outlook on the '
                   'web. You will be prompted to login if you are not already logged in with the browser.This URL '
                   'cannot be accessed from within an iFrame.')
        c.argument('message_attachments', action=AddMessageAttachments, nargs='*', help='The fileAttachment and '
                   'itemAttachment attachments for the message.')
        c.argument('message_extensions', action=AddMessageExtensions, nargs='*', help='The collection of open '
                   'extensions defined for the message. Nullable.')
        c.argument('message_mentions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('message_multi_value_extended_properties', action=AddMessageMultiValueExtendedProperties, nargs='*',
                   help='The collection of multi-value extended properties defined for the message. Nullable.')
        c.argument('message_single_value_extended_properties', action=AddMessageSingleValueExtendedProperties, nargs=''
                   '*', help='The collection of single-value extended properties defined for the message. Nullable.')

    with self.argument_context('usersactions user-mail-folder-message move') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('destination_id', type=str, help='')

    with self.argument_context('usersactions user-mail-folder-message reply') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('comment', type=str, help='')
        c.argument('id', type=str, help='Read-only.')
        c.argument('message_categories', nargs='*', help='The categories associated with the item')
        c.argument('message_change_key', type=str, help='Identifies the version of the item. Every time the item is '
                   'changed, changeKey changes as well. This allows Exchange to apply changes to the correct version '
                   'of the object. Read-only.')
        c.argument('message_created_date_time', help='The Timestamp type represents date and time information using '
                   'ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look '
                   'like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_last_modified_date_time', help='The Timestamp type represents date and time information '
                   'using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_bcc_recipients', action=AddMessageBccRecipients, nargs='*', help='The Bcc: recipients for '
                   'the message.')
        c.argument('message_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_body_preview', type=str, help='The first 255 characters of the message body. It is in text '
                   'format.')
        c.argument('message_cc_recipients', action=AddMessageCcRecipients, nargs='*', help='The Cc: recipients for the '
                   'message.')
        c.argument('message_conversation_id', type=str, help='The ID of the conversation the email belongs to.')
        c.argument('message_conversation_index',
                   help='Indicates the position of the message within the conversation.')
        c.argument('message_flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/@json-file.')
        c.argument('message_from', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as :code:`<IMG src=\'cid:image001.jpg@01D26CD8.'
                   '6C05F070\'>`.')
        c.argument('message_importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('message_inference_classification', arg_type=get_enum_type(['focused', 'other']), help='')
        c.argument('message_internet_message_headers', action=AddMessageInternetMessageHeaders, nargs='*', help='A '
                   'collection of message headers defined by RFC5322. The set includes message headers indicating the '
                   'network path taken by a message from the sender to the recipient. It can also contain custom '
                   'message headers that hold app data for the message.  Returned only on applying a $select query '
                   'option. Read-only.')
        c.argument('message_internet_message_id', type=str, help='The message ID in the format specified by RFC2822.')
        c.argument('message_is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a '
                   'draft. A message is a draft if it hasn\'t been sent yet.')
        c.argument('message_is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been '
                   'read.')
        c.argument('message_is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_mentions_preview', action=AddMessageMentionsPreview, nargs='*', help='mentionsPreview')
        c.argument('message_parent_folder_id', type=str, help='The unique identifier for the message\'s parent '
                   'mailFolder.')
        c.argument('message_received_date_time', help='The date and time the message was received.')
        c.argument('message_reply_to', action=AddMessageReplyTo, nargs='*', help='The email addresses to use when '
                   'replying.')
        c.argument('message_sender', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_sent_date_time', help='The date and time the message was sent.')
        c.argument('message_subject', type=str, help='The subject of the message.')
        c.argument('message_to_recipients', action=AddMessageToRecipients, nargs='*', help='The To: recipients for the '
                   'message.')
        c.argument('message_unique_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_unsubscribe_data', nargs='*', help='')
        c.argument('message_unsubscribe_enabled', arg_type=get_three_state_flag(), help='')
        c.argument('message_web_link', type=str, help='The URL to open the message in Outlook on the web.You can '
                   'append an ispopout argument to the end of the URL to change how the message is displayed. If '
                   'ispopout is not present or if it is set to 1, then the message is shown in a popout window. If '
                   'ispopout is set to 0, then the browser will show the message in the Outlook on the web review '
                   'pane.The message will open in the browser if you are logged in to your mailbox via Outlook on the '
                   'web. You will be prompted to login if you are not already logged in with the browser.This URL '
                   'cannot be accessed from within an iFrame.')
        c.argument('message_attachments', action=AddMessageAttachments, nargs='*', help='The fileAttachment and '
                   'itemAttachment attachments for the message.')
        c.argument('message_extensions', action=AddMessageExtensions, nargs='*', help='The collection of open '
                   'extensions defined for the message. Nullable.')
        c.argument('message_mentions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('message_multi_value_extended_properties', action=AddMessageMultiValueExtendedProperties, nargs='*',
                   help='The collection of multi-value extended properties defined for the message. Nullable.')
        c.argument('message_single_value_extended_properties', action=AddMessageSingleValueExtendedProperties, nargs=''
                   '*', help='The collection of single-value extended properties defined for the message. Nullable.')

    with self.argument_context('usersactions user-mail-folder-message reply-all') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('comment', type=str, help='')
        c.argument('id', type=str, help='Read-only.')
        c.argument('message_categories', nargs='*', help='The categories associated with the item')
        c.argument('message_change_key', type=str, help='Identifies the version of the item. Every time the item is '
                   'changed, changeKey changes as well. This allows Exchange to apply changes to the correct version '
                   'of the object. Read-only.')
        c.argument('message_created_date_time', help='The Timestamp type represents date and time information using '
                   'ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look '
                   'like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_last_modified_date_time', help='The Timestamp type represents date and time information '
                   'using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_bcc_recipients', action=AddMessageBccRecipients, nargs='*', help='The Bcc: recipients for '
                   'the message.')
        c.argument('message_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_body_preview', type=str, help='The first 255 characters of the message body. It is in text '
                   'format.')
        c.argument('message_cc_recipients', action=AddMessageCcRecipients, nargs='*', help='The Cc: recipients for the '
                   'message.')
        c.argument('message_conversation_id', type=str, help='The ID of the conversation the email belongs to.')
        c.argument('message_conversation_index',
                   help='Indicates the position of the message within the conversation.')
        c.argument('message_flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/@json-file.')
        c.argument('message_from', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as :code:`<IMG src=\'cid:image001.jpg@01D26CD8.'
                   '6C05F070\'>`.')
        c.argument('message_importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('message_inference_classification', arg_type=get_enum_type(['focused', 'other']), help='')
        c.argument('message_internet_message_headers', action=AddMessageInternetMessageHeaders, nargs='*', help='A '
                   'collection of message headers defined by RFC5322. The set includes message headers indicating the '
                   'network path taken by a message from the sender to the recipient. It can also contain custom '
                   'message headers that hold app data for the message.  Returned only on applying a $select query '
                   'option. Read-only.')
        c.argument('message_internet_message_id', type=str, help='The message ID in the format specified by RFC2822.')
        c.argument('message_is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a '
                   'draft. A message is a draft if it hasn\'t been sent yet.')
        c.argument('message_is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been '
                   'read.')
        c.argument('message_is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_mentions_preview', action=AddMessageMentionsPreview, nargs='*', help='mentionsPreview')
        c.argument('message_parent_folder_id', type=str, help='The unique identifier for the message\'s parent '
                   'mailFolder.')
        c.argument('message_received_date_time', help='The date and time the message was received.')
        c.argument('message_reply_to', action=AddMessageReplyTo, nargs='*', help='The email addresses to use when '
                   'replying.')
        c.argument('message_sender', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_sent_date_time', help='The date and time the message was sent.')
        c.argument('message_subject', type=str, help='The subject of the message.')
        c.argument('message_to_recipients', action=AddMessageToRecipients, nargs='*', help='The To: recipients for the '
                   'message.')
        c.argument('message_unique_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_unsubscribe_data', nargs='*', help='')
        c.argument('message_unsubscribe_enabled', arg_type=get_three_state_flag(), help='')
        c.argument('message_web_link', type=str, help='The URL to open the message in Outlook on the web.You can '
                   'append an ispopout argument to the end of the URL to change how the message is displayed. If '
                   'ispopout is not present or if it is set to 1, then the message is shown in a popout window. If '
                   'ispopout is set to 0, then the browser will show the message in the Outlook on the web review '
                   'pane.The message will open in the browser if you are logged in to your mailbox via Outlook on the '
                   'web. You will be prompted to login if you are not already logged in with the browser.This URL '
                   'cannot be accessed from within an iFrame.')
        c.argument('message_attachments', action=AddMessageAttachments, nargs='*', help='The fileAttachment and '
                   'itemAttachment attachments for the message.')
        c.argument('message_extensions', action=AddMessageExtensions, nargs='*', help='The collection of open '
                   'extensions defined for the message. Nullable.')
        c.argument('message_mentions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('message_multi_value_extended_properties', action=AddMessageMultiValueExtendedProperties, nargs='*',
                   help='The collection of multi-value extended properties defined for the message. Nullable.')
        c.argument('message_single_value_extended_properties', action=AddMessageSingleValueExtendedProperties, nargs=''
                   '*', help='The collection of single-value extended properties defined for the message. Nullable.')

    with self.argument_context('usersactions user-mail-folder-message send') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')

    with self.argument_context('usersactions user-mail-folder-message unsubscribe') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')

    with self.argument_context('usersactions user-mail-folder copy') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('destination_id', type=str, help='')

    with self.argument_context('usersactions user-mail-folder move') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('destination_id', type=str, help='')

    with self.argument_context('usersactions user-managed-device-log-collection-request create-download-url') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')
        c.argument('device_log_collection_response_id', type=str, help='key: id of deviceLogCollectionResponse')

    with self.argument_context('usersactions user-managed-device bypass-activation-lock') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions user-managed-device clean-window-device') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')
        c.argument('keep_user_data', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-managed-device create-device-log-collection-request') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')
        c.argument('template_type_id', type=str, help='The unique identifier')

    with self.argument_context('usersactions user-managed-device delete-user-from-shared-apple-device') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')
        c.argument('user_principal_name', type=str, help='')

    with self.argument_context('usersactions user-managed-device disable-lost-mode') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions user-managed-device enable-lost-mode') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')
        c.argument('message', type=str, help='')
        c.argument('phone_number', type=str, help='')
        c.argument('footer', type=str, help='')

    with self.argument_context('usersactions user-managed-device execute-action') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('action_name', arg_type=get_enum_type(['retire', 'delete', 'fullScan', 'quickScan', ''
                                                          'signatureUpdate', 'wipe', 'customTextNotification', ''
                                                          'rebootNow', 'setDeviceName', 'syncDevice']), help='')
        c.argument('keep_enrollment_data', arg_type=get_three_state_flag(), help='')
        c.argument('keep_user_data', arg_type=get_three_state_flag(), help='')
        c.argument('device_ids', nargs='*', help='')
        c.argument('notification_title', type=str, help='')
        c.argument('notification_body', type=str, help='')
        c.argument('device_name', type=str, help='')

    with self.argument_context('usersactions user-managed-device locate-device') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions user-managed-device logout-shared-apple-device-active-user') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions user-managed-device override-compliance-state') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')
        c.argument('compliance_state', arg_type=get_enum_type(['basedOnDeviceCompliancePolicy', 'nonCompliant']),
                   help='')
        c.argument('remediation_url', type=str, help='')

    with self.argument_context('usersactions user-managed-device play-lost-mode-sound') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions user-managed-device reboot-now') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions user-managed-device recover-passcode') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions user-managed-device remote-lock') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions user-managed-device request-remote-assistance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions user-managed-device reset-passcode') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions user-managed-device retire') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions user-managed-device revoke-apple-vpp-license') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions user-managed-device rotate-bit-locker-key') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions user-managed-device rotate-file-vault-key') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions user-managed-device send-custom-notification-to-company-portal') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')
        c.argument('notification_title', type=str, help='')
        c.argument('notification_body', type=str, help='')

    with self.argument_context('usersactions user-managed-device set-device-name') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')
        c.argument('device_name', type=str, help='')

    with self.argument_context('usersactions user-managed-device shut-down') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions user-managed-device sync-device') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions user-managed-device trigger-configuration-manager-action') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')
        c.argument('configuration_manager_action_action', arg_type=get_enum_type(['refreshMachinePolicy', ''
                                                                                  'refreshUserPolicy', 'wakeUpClient',
                                                                                  'appEvaluation']), help='')

    with self.argument_context('usersactions user-managed-device update-window-device-account') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')
        c.argument('update_windows_device_account_action_parameter_calendar_sync_enabled',
                   arg_type=get_three_state_flag(), help='Not yet documented')
        c.argument('update_windows_device_account_action_parameter_device_account',
                   action=AddUpdateWindowsDeviceAccountActionParameterDeviceAccount, nargs='*', help=''
                   'windowsDeviceAccount')
        c.argument('update_windows_device_account_action_parameter_device_account_email', type=str, help='Not yet '
                   'documented')
        c.argument('update_windows_device_account_action_parameter_exchange_server', type=str, help='Not yet '
                   'documented')
        c.argument('update_windows_device_account_action_parameter_password_rotation_enabled',
                   arg_type=get_three_state_flag(), help='Not yet documented')
        c.argument('update_windows_device_account_action_parameter_session_initiation_protocal_address', type=str,
                   help='Not yet documented')

    with self.argument_context('usersactions user-managed-device window-defender-scan') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')
        c.argument('quick_scan', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-managed-device window-defender-update-signature') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions user-managed-device wipe') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')
        c.argument('keep_enrollment_data', arg_type=get_three_state_flag(), help='')
        c.argument('keep_user_data', arg_type=get_three_state_flag(), help='')
        c.argument('mac_os_unlock_code', type=str, help='')
        c.argument('use_protected_wipe', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user-message-attachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='*', help='attachmentItem')

    with self.argument_context('usersactions user-message copy') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('destination_id', type=str, help='')

    with self.argument_context('usersactions user-message create-forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('to_recipients', action=AddUsersactionsUserMessageCreateForwardToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')
        c.argument('id', type=str, help='Read-only.')
        c.argument('message_categories', nargs='*', help='The categories associated with the item')
        c.argument('message_change_key', type=str, help='Identifies the version of the item. Every time the item is '
                   'changed, changeKey changes as well. This allows Exchange to apply changes to the correct version '
                   'of the object. Read-only.')
        c.argument('message_created_date_time', help='The Timestamp type represents date and time information using '
                   'ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look '
                   'like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_last_modified_date_time', help='The Timestamp type represents date and time information '
                   'using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_bcc_recipients', action=AddMessageBccRecipients, nargs='*', help='The Bcc: recipients for '
                   'the message.')
        c.argument('message_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_body_preview', type=str, help='The first 255 characters of the message body. It is in text '
                   'format.')
        c.argument('message_cc_recipients', action=AddMessageCcRecipients, nargs='*', help='The Cc: recipients for the '
                   'message.')
        c.argument('message_conversation_id', type=str, help='The ID of the conversation the email belongs to.')
        c.argument('message_conversation_index',
                   help='Indicates the position of the message within the conversation.')
        c.argument('message_flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/@json-file.')
        c.argument('message_from', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as :code:`<IMG src=\'cid:image001.jpg@01D26CD8.'
                   '6C05F070\'>`.')
        c.argument('message_importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('message_inference_classification', arg_type=get_enum_type(['focused', 'other']), help='')
        c.argument('message_internet_message_headers', action=AddMessageInternetMessageHeaders, nargs='*', help='A '
                   'collection of message headers defined by RFC5322. The set includes message headers indicating the '
                   'network path taken by a message from the sender to the recipient. It can also contain custom '
                   'message headers that hold app data for the message.  Returned only on applying a $select query '
                   'option. Read-only.')
        c.argument('message_internet_message_id', type=str, help='The message ID in the format specified by RFC2822.')
        c.argument('message_is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a '
                   'draft. A message is a draft if it hasn\'t been sent yet.')
        c.argument('message_is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been '
                   'read.')
        c.argument('message_is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_mentions_preview', action=AddMessageMentionsPreview, nargs='*', help='mentionsPreview')
        c.argument('message_parent_folder_id', type=str, help='The unique identifier for the message\'s parent '
                   'mailFolder.')
        c.argument('message_received_date_time', help='The date and time the message was received.')
        c.argument('message_reply_to', action=AddMessageReplyTo, nargs='*', help='The email addresses to use when '
                   'replying.')
        c.argument('message_sender', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_sent_date_time', help='The date and time the message was sent.')
        c.argument('message_subject', type=str, help='The subject of the message.')
        c.argument('message_to_recipients', action=AddMessageToRecipients, nargs='*', help='The To: recipients for the '
                   'message.')
        c.argument('message_unique_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_unsubscribe_data', nargs='*', help='')
        c.argument('message_unsubscribe_enabled', arg_type=get_three_state_flag(), help='')
        c.argument('message_web_link', type=str, help='The URL to open the message in Outlook on the web.You can '
                   'append an ispopout argument to the end of the URL to change how the message is displayed. If '
                   'ispopout is not present or if it is set to 1, then the message is shown in a popout window. If '
                   'ispopout is set to 0, then the browser will show the message in the Outlook on the web review '
                   'pane.The message will open in the browser if you are logged in to your mailbox via Outlook on the '
                   'web. You will be prompted to login if you are not already logged in with the browser.This URL '
                   'cannot be accessed from within an iFrame.')
        c.argument('message_attachments', action=AddMessageAttachments, nargs='*', help='The fileAttachment and '
                   'itemAttachment attachments for the message.')
        c.argument('message_extensions', action=AddMessageExtensions, nargs='*', help='The collection of open '
                   'extensions defined for the message. Nullable.')
        c.argument('message_mentions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('message_multi_value_extended_properties', action=AddMessageMultiValueExtendedProperties, nargs='*',
                   help='The collection of multi-value extended properties defined for the message. Nullable.')
        c.argument('message_single_value_extended_properties', action=AddMessageSingleValueExtendedProperties, nargs=''
                   '*', help='The collection of single-value extended properties defined for the message. Nullable.')

    with self.argument_context('usersactions user-message create-reply') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('comment', type=str, help='')
        c.argument('id', type=str, help='Read-only.')
        c.argument('message_categories', nargs='*', help='The categories associated with the item')
        c.argument('message_change_key', type=str, help='Identifies the version of the item. Every time the item is '
                   'changed, changeKey changes as well. This allows Exchange to apply changes to the correct version '
                   'of the object. Read-only.')
        c.argument('message_created_date_time', help='The Timestamp type represents date and time information using '
                   'ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look '
                   'like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_last_modified_date_time', help='The Timestamp type represents date and time information '
                   'using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_bcc_recipients', action=AddMessageBccRecipients, nargs='*', help='The Bcc: recipients for '
                   'the message.')
        c.argument('message_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_body_preview', type=str, help='The first 255 characters of the message body. It is in text '
                   'format.')
        c.argument('message_cc_recipients', action=AddMessageCcRecipients, nargs='*', help='The Cc: recipients for the '
                   'message.')
        c.argument('message_conversation_id', type=str, help='The ID of the conversation the email belongs to.')
        c.argument('message_conversation_index',
                   help='Indicates the position of the message within the conversation.')
        c.argument('message_flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/@json-file.')
        c.argument('message_from', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as :code:`<IMG src=\'cid:image001.jpg@01D26CD8.'
                   '6C05F070\'>`.')
        c.argument('message_importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('message_inference_classification', arg_type=get_enum_type(['focused', 'other']), help='')
        c.argument('message_internet_message_headers', action=AddMessageInternetMessageHeaders, nargs='*', help='A '
                   'collection of message headers defined by RFC5322. The set includes message headers indicating the '
                   'network path taken by a message from the sender to the recipient. It can also contain custom '
                   'message headers that hold app data for the message.  Returned only on applying a $select query '
                   'option. Read-only.')
        c.argument('message_internet_message_id', type=str, help='The message ID in the format specified by RFC2822.')
        c.argument('message_is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a '
                   'draft. A message is a draft if it hasn\'t been sent yet.')
        c.argument('message_is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been '
                   'read.')
        c.argument('message_is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_mentions_preview', action=AddMessageMentionsPreview, nargs='*', help='mentionsPreview')
        c.argument('message_parent_folder_id', type=str, help='The unique identifier for the message\'s parent '
                   'mailFolder.')
        c.argument('message_received_date_time', help='The date and time the message was received.')
        c.argument('message_reply_to', action=AddMessageReplyTo, nargs='*', help='The email addresses to use when '
                   'replying.')
        c.argument('message_sender', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_sent_date_time', help='The date and time the message was sent.')
        c.argument('message_subject', type=str, help='The subject of the message.')
        c.argument('message_to_recipients', action=AddMessageToRecipients, nargs='*', help='The To: recipients for the '
                   'message.')
        c.argument('message_unique_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_unsubscribe_data', nargs='*', help='')
        c.argument('message_unsubscribe_enabled', arg_type=get_three_state_flag(), help='')
        c.argument('message_web_link', type=str, help='The URL to open the message in Outlook on the web.You can '
                   'append an ispopout argument to the end of the URL to change how the message is displayed. If '
                   'ispopout is not present or if it is set to 1, then the message is shown in a popout window. If '
                   'ispopout is set to 0, then the browser will show the message in the Outlook on the web review '
                   'pane.The message will open in the browser if you are logged in to your mailbox via Outlook on the '
                   'web. You will be prompted to login if you are not already logged in with the browser.This URL '
                   'cannot be accessed from within an iFrame.')
        c.argument('message_attachments', action=AddMessageAttachments, nargs='*', help='The fileAttachment and '
                   'itemAttachment attachments for the message.')
        c.argument('message_extensions', action=AddMessageExtensions, nargs='*', help='The collection of open '
                   'extensions defined for the message. Nullable.')
        c.argument('message_mentions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('message_multi_value_extended_properties', action=AddMessageMultiValueExtendedProperties, nargs='*',
                   help='The collection of multi-value extended properties defined for the message. Nullable.')
        c.argument('message_single_value_extended_properties', action=AddMessageSingleValueExtendedProperties, nargs=''
                   '*', help='The collection of single-value extended properties defined for the message. Nullable.')

    with self.argument_context('usersactions user-message create-reply-all') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('comment', type=str, help='')
        c.argument('id', type=str, help='Read-only.')
        c.argument('message_categories', nargs='*', help='The categories associated with the item')
        c.argument('message_change_key', type=str, help='Identifies the version of the item. Every time the item is '
                   'changed, changeKey changes as well. This allows Exchange to apply changes to the correct version '
                   'of the object. Read-only.')
        c.argument('message_created_date_time', help='The Timestamp type represents date and time information using '
                   'ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look '
                   'like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_last_modified_date_time', help='The Timestamp type represents date and time information '
                   'using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_bcc_recipients', action=AddMessageBccRecipients, nargs='*', help='The Bcc: recipients for '
                   'the message.')
        c.argument('message_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_body_preview', type=str, help='The first 255 characters of the message body. It is in text '
                   'format.')
        c.argument('message_cc_recipients', action=AddMessageCcRecipients, nargs='*', help='The Cc: recipients for the '
                   'message.')
        c.argument('message_conversation_id', type=str, help='The ID of the conversation the email belongs to.')
        c.argument('message_conversation_index',
                   help='Indicates the position of the message within the conversation.')
        c.argument('message_flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/@json-file.')
        c.argument('message_from', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as :code:`<IMG src=\'cid:image001.jpg@01D26CD8.'
                   '6C05F070\'>`.')
        c.argument('message_importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('message_inference_classification', arg_type=get_enum_type(['focused', 'other']), help='')
        c.argument('message_internet_message_headers', action=AddMessageInternetMessageHeaders, nargs='*', help='A '
                   'collection of message headers defined by RFC5322. The set includes message headers indicating the '
                   'network path taken by a message from the sender to the recipient. It can also contain custom '
                   'message headers that hold app data for the message.  Returned only on applying a $select query '
                   'option. Read-only.')
        c.argument('message_internet_message_id', type=str, help='The message ID in the format specified by RFC2822.')
        c.argument('message_is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a '
                   'draft. A message is a draft if it hasn\'t been sent yet.')
        c.argument('message_is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been '
                   'read.')
        c.argument('message_is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_mentions_preview', action=AddMessageMentionsPreview, nargs='*', help='mentionsPreview')
        c.argument('message_parent_folder_id', type=str, help='The unique identifier for the message\'s parent '
                   'mailFolder.')
        c.argument('message_received_date_time', help='The date and time the message was received.')
        c.argument('message_reply_to', action=AddMessageReplyTo, nargs='*', help='The email addresses to use when '
                   'replying.')
        c.argument('message_sender', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_sent_date_time', help='The date and time the message was sent.')
        c.argument('message_subject', type=str, help='The subject of the message.')
        c.argument('message_to_recipients', action=AddMessageToRecipients, nargs='*', help='The To: recipients for the '
                   'message.')
        c.argument('message_unique_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_unsubscribe_data', nargs='*', help='')
        c.argument('message_unsubscribe_enabled', arg_type=get_three_state_flag(), help='')
        c.argument('message_web_link', type=str, help='The URL to open the message in Outlook on the web.You can '
                   'append an ispopout argument to the end of the URL to change how the message is displayed. If '
                   'ispopout is not present or if it is set to 1, then the message is shown in a popout window. If '
                   'ispopout is set to 0, then the browser will show the message in the Outlook on the web review '
                   'pane.The message will open in the browser if you are logged in to your mailbox via Outlook on the '
                   'web. You will be prompted to login if you are not already logged in with the browser.This URL '
                   'cannot be accessed from within an iFrame.')
        c.argument('message_attachments', action=AddMessageAttachments, nargs='*', help='The fileAttachment and '
                   'itemAttachment attachments for the message.')
        c.argument('message_extensions', action=AddMessageExtensions, nargs='*', help='The collection of open '
                   'extensions defined for the message. Nullable.')
        c.argument('message_mentions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('message_multi_value_extended_properties', action=AddMessageMultiValueExtendedProperties, nargs='*',
                   help='The collection of multi-value extended properties defined for the message. Nullable.')
        c.argument('message_single_value_extended_properties', action=AddMessageSingleValueExtendedProperties, nargs=''
                   '*', help='The collection of single-value extended properties defined for the message. Nullable.')

    with self.argument_context('usersactions user-message forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('to_recipients', action=AddUsersactionsUserMessageForwardToRecipients, nargs='*', help='')
        c.argument('comment', type=str, help='')
        c.argument('id', type=str, help='Read-only.')
        c.argument('message_categories', nargs='*', help='The categories associated with the item')
        c.argument('message_change_key', type=str, help='Identifies the version of the item. Every time the item is '
                   'changed, changeKey changes as well. This allows Exchange to apply changes to the correct version '
                   'of the object. Read-only.')
        c.argument('message_created_date_time', help='The Timestamp type represents date and time information using '
                   'ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look '
                   'like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_last_modified_date_time', help='The Timestamp type represents date and time information '
                   'using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_bcc_recipients', action=AddMessageBccRecipients, nargs='*', help='The Bcc: recipients for '
                   'the message.')
        c.argument('message_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_body_preview', type=str, help='The first 255 characters of the message body. It is in text '
                   'format.')
        c.argument('message_cc_recipients', action=AddMessageCcRecipients, nargs='*', help='The Cc: recipients for the '
                   'message.')
        c.argument('message_conversation_id', type=str, help='The ID of the conversation the email belongs to.')
        c.argument('message_conversation_index',
                   help='Indicates the position of the message within the conversation.')
        c.argument('message_flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/@json-file.')
        c.argument('message_from', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as :code:`<IMG src=\'cid:image001.jpg@01D26CD8.'
                   '6C05F070\'>`.')
        c.argument('message_importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('message_inference_classification', arg_type=get_enum_type(['focused', 'other']), help='')
        c.argument('message_internet_message_headers', action=AddMessageInternetMessageHeaders, nargs='*', help='A '
                   'collection of message headers defined by RFC5322. The set includes message headers indicating the '
                   'network path taken by a message from the sender to the recipient. It can also contain custom '
                   'message headers that hold app data for the message.  Returned only on applying a $select query '
                   'option. Read-only.')
        c.argument('message_internet_message_id', type=str, help='The message ID in the format specified by RFC2822.')
        c.argument('message_is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a '
                   'draft. A message is a draft if it hasn\'t been sent yet.')
        c.argument('message_is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been '
                   'read.')
        c.argument('message_is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_mentions_preview', action=AddMessageMentionsPreview, nargs='*', help='mentionsPreview')
        c.argument('message_parent_folder_id', type=str, help='The unique identifier for the message\'s parent '
                   'mailFolder.')
        c.argument('message_received_date_time', help='The date and time the message was received.')
        c.argument('message_reply_to', action=AddMessageReplyTo, nargs='*', help='The email addresses to use when '
                   'replying.')
        c.argument('message_sender', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_sent_date_time', help='The date and time the message was sent.')
        c.argument('message_subject', type=str, help='The subject of the message.')
        c.argument('message_to_recipients', action=AddMessageToRecipients, nargs='*', help='The To: recipients for the '
                   'message.')
        c.argument('message_unique_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_unsubscribe_data', nargs='*', help='')
        c.argument('message_unsubscribe_enabled', arg_type=get_three_state_flag(), help='')
        c.argument('message_web_link', type=str, help='The URL to open the message in Outlook on the web.You can '
                   'append an ispopout argument to the end of the URL to change how the message is displayed. If '
                   'ispopout is not present or if it is set to 1, then the message is shown in a popout window. If '
                   'ispopout is set to 0, then the browser will show the message in the Outlook on the web review '
                   'pane.The message will open in the browser if you are logged in to your mailbox via Outlook on the '
                   'web. You will be prompted to login if you are not already logged in with the browser.This URL '
                   'cannot be accessed from within an iFrame.')
        c.argument('message_attachments', action=AddMessageAttachments, nargs='*', help='The fileAttachment and '
                   'itemAttachment attachments for the message.')
        c.argument('message_extensions', action=AddMessageExtensions, nargs='*', help='The collection of open '
                   'extensions defined for the message. Nullable.')
        c.argument('message_mentions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('message_multi_value_extended_properties', action=AddMessageMultiValueExtendedProperties, nargs='*',
                   help='The collection of multi-value extended properties defined for the message. Nullable.')
        c.argument('message_single_value_extended_properties', action=AddMessageSingleValueExtendedProperties, nargs=''
                   '*', help='The collection of single-value extended properties defined for the message. Nullable.')

    with self.argument_context('usersactions user-message move') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('destination_id', type=str, help='')

    with self.argument_context('usersactions user-message reply') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('comment', type=str, help='')
        c.argument('id', type=str, help='Read-only.')
        c.argument('message_categories', nargs='*', help='The categories associated with the item')
        c.argument('message_change_key', type=str, help='Identifies the version of the item. Every time the item is '
                   'changed, changeKey changes as well. This allows Exchange to apply changes to the correct version '
                   'of the object. Read-only.')
        c.argument('message_created_date_time', help='The Timestamp type represents date and time information using '
                   'ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look '
                   'like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_last_modified_date_time', help='The Timestamp type represents date and time information '
                   'using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_bcc_recipients', action=AddMessageBccRecipients, nargs='*', help='The Bcc: recipients for '
                   'the message.')
        c.argument('message_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_body_preview', type=str, help='The first 255 characters of the message body. It is in text '
                   'format.')
        c.argument('message_cc_recipients', action=AddMessageCcRecipients, nargs='*', help='The Cc: recipients for the '
                   'message.')
        c.argument('message_conversation_id', type=str, help='The ID of the conversation the email belongs to.')
        c.argument('message_conversation_index',
                   help='Indicates the position of the message within the conversation.')
        c.argument('message_flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/@json-file.')
        c.argument('message_from', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as :code:`<IMG src=\'cid:image001.jpg@01D26CD8.'
                   '6C05F070\'>`.')
        c.argument('message_importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('message_inference_classification', arg_type=get_enum_type(['focused', 'other']), help='')
        c.argument('message_internet_message_headers', action=AddMessageInternetMessageHeaders, nargs='*', help='A '
                   'collection of message headers defined by RFC5322. The set includes message headers indicating the '
                   'network path taken by a message from the sender to the recipient. It can also contain custom '
                   'message headers that hold app data for the message.  Returned only on applying a $select query '
                   'option. Read-only.')
        c.argument('message_internet_message_id', type=str, help='The message ID in the format specified by RFC2822.')
        c.argument('message_is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a '
                   'draft. A message is a draft if it hasn\'t been sent yet.')
        c.argument('message_is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been '
                   'read.')
        c.argument('message_is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_mentions_preview', action=AddMessageMentionsPreview, nargs='*', help='mentionsPreview')
        c.argument('message_parent_folder_id', type=str, help='The unique identifier for the message\'s parent '
                   'mailFolder.')
        c.argument('message_received_date_time', help='The date and time the message was received.')
        c.argument('message_reply_to', action=AddMessageReplyTo, nargs='*', help='The email addresses to use when '
                   'replying.')
        c.argument('message_sender', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_sent_date_time', help='The date and time the message was sent.')
        c.argument('message_subject', type=str, help='The subject of the message.')
        c.argument('message_to_recipients', action=AddMessageToRecipients, nargs='*', help='The To: recipients for the '
                   'message.')
        c.argument('message_unique_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_unsubscribe_data', nargs='*', help='')
        c.argument('message_unsubscribe_enabled', arg_type=get_three_state_flag(), help='')
        c.argument('message_web_link', type=str, help='The URL to open the message in Outlook on the web.You can '
                   'append an ispopout argument to the end of the URL to change how the message is displayed. If '
                   'ispopout is not present or if it is set to 1, then the message is shown in a popout window. If '
                   'ispopout is set to 0, then the browser will show the message in the Outlook on the web review '
                   'pane.The message will open in the browser if you are logged in to your mailbox via Outlook on the '
                   'web. You will be prompted to login if you are not already logged in with the browser.This URL '
                   'cannot be accessed from within an iFrame.')
        c.argument('message_attachments', action=AddMessageAttachments, nargs='*', help='The fileAttachment and '
                   'itemAttachment attachments for the message.')
        c.argument('message_extensions', action=AddMessageExtensions, nargs='*', help='The collection of open '
                   'extensions defined for the message. Nullable.')
        c.argument('message_mentions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('message_multi_value_extended_properties', action=AddMessageMultiValueExtendedProperties, nargs='*',
                   help='The collection of multi-value extended properties defined for the message. Nullable.')
        c.argument('message_single_value_extended_properties', action=AddMessageSingleValueExtendedProperties, nargs=''
                   '*', help='The collection of single-value extended properties defined for the message. Nullable.')

    with self.argument_context('usersactions user-message reply-all') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('comment', type=str, help='')
        c.argument('id', type=str, help='Read-only.')
        c.argument('message_categories', nargs='*', help='The categories associated with the item')
        c.argument('message_change_key', type=str, help='Identifies the version of the item. Every time the item is '
                   'changed, changeKey changes as well. This allows Exchange to apply changes to the correct version '
                   'of the object. Read-only.')
        c.argument('message_created_date_time', help='The Timestamp type represents date and time information using '
                   'ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look '
                   'like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_last_modified_date_time', help='The Timestamp type represents date and time information '
                   'using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_bcc_recipients', action=AddMessageBccRecipients, nargs='*', help='The Bcc: recipients for '
                   'the message.')
        c.argument('message_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_body_preview', type=str, help='The first 255 characters of the message body. It is in text '
                   'format.')
        c.argument('message_cc_recipients', action=AddMessageCcRecipients, nargs='*', help='The Cc: recipients for the '
                   'message.')
        c.argument('message_conversation_id', type=str, help='The ID of the conversation the email belongs to.')
        c.argument('message_conversation_index',
                   help='Indicates the position of the message within the conversation.')
        c.argument('message_flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/@json-file.')
        c.argument('message_from', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as :code:`<IMG src=\'cid:image001.jpg@01D26CD8.'
                   '6C05F070\'>`.')
        c.argument('message_importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('message_inference_classification', arg_type=get_enum_type(['focused', 'other']), help='')
        c.argument('message_internet_message_headers', action=AddMessageInternetMessageHeaders, nargs='*', help='A '
                   'collection of message headers defined by RFC5322. The set includes message headers indicating the '
                   'network path taken by a message from the sender to the recipient. It can also contain custom '
                   'message headers that hold app data for the message.  Returned only on applying a $select query '
                   'option. Read-only.')
        c.argument('message_internet_message_id', type=str, help='The message ID in the format specified by RFC2822.')
        c.argument('message_is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a '
                   'draft. A message is a draft if it hasn\'t been sent yet.')
        c.argument('message_is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been '
                   'read.')
        c.argument('message_is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_mentions_preview', action=AddMessageMentionsPreview, nargs='*', help='mentionsPreview')
        c.argument('message_parent_folder_id', type=str, help='The unique identifier for the message\'s parent '
                   'mailFolder.')
        c.argument('message_received_date_time', help='The date and time the message was received.')
        c.argument('message_reply_to', action=AddMessageReplyTo, nargs='*', help='The email addresses to use when '
                   'replying.')
        c.argument('message_sender', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_sent_date_time', help='The date and time the message was sent.')
        c.argument('message_subject', type=str, help='The subject of the message.')
        c.argument('message_to_recipients', action=AddMessageToRecipients, nargs='*', help='The To: recipients for the '
                   'message.')
        c.argument('message_unique_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_unsubscribe_data', nargs='*', help='')
        c.argument('message_unsubscribe_enabled', arg_type=get_three_state_flag(), help='')
        c.argument('message_web_link', type=str, help='The URL to open the message in Outlook on the web.You can '
                   'append an ispopout argument to the end of the URL to change how the message is displayed. If '
                   'ispopout is not present or if it is set to 1, then the message is shown in a popout window. If '
                   'ispopout is set to 0, then the browser will show the message in the Outlook on the web review '
                   'pane.The message will open in the browser if you are logged in to your mailbox via Outlook on the '
                   'web. You will be prompted to login if you are not already logged in with the browser.This URL '
                   'cannot be accessed from within an iFrame.')
        c.argument('message_attachments', action=AddMessageAttachments, nargs='*', help='The fileAttachment and '
                   'itemAttachment attachments for the message.')
        c.argument('message_extensions', action=AddMessageExtensions, nargs='*', help='The collection of open '
                   'extensions defined for the message. Nullable.')
        c.argument('message_mentions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('message_multi_value_extended_properties', action=AddMessageMultiValueExtendedProperties, nargs='*',
                   help='The collection of multi-value extended properties defined for the message. Nullable.')
        c.argument('message_single_value_extended_properties', action=AddMessageSingleValueExtendedProperties, nargs=''
                   '*', help='The collection of single-value extended properties defined for the message. Nullable.')

    with self.argument_context('usersactions user-message send') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')

    with self.argument_context('usersactions user-message unsubscribe') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')

    with self.argument_context('usersactions user assign-license') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('add_licenses', action=AddAddLicenses, nargs='*', help='')
        c.argument('remove_licenses', nargs='*', help='')

    with self.argument_context('usersactions user change-password') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('current_password', type=str, help='')
        c.argument('new_password', type=str, help='')

    with self.argument_context('usersactions user check-member-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('group_ids', nargs='*', help='')

    with self.argument_context('usersactions user check-member-object') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('ids', nargs='*', help='')

    with self.argument_context('usersactions user export-personal-data') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('storage_location', type=str, help='')

    with self.argument_context('usersactions user find-meeting-time') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('attendees', action=AddAttendees, nargs='*', help='')
        c.argument('meeting_duration', help='')
        c.argument('max_candidates', type=int, help='')
        c.argument('is_organizer_optional', arg_type=get_three_state_flag(), help='')
        c.argument('return_suggestion_reasons', arg_type=get_three_state_flag(), help='')
        c.argument('minimum_attendee_percentage', type=float, help='')
        c.argument('time_constraint_activity_domain', arg_type=get_enum_type(['unknown', 'work', 'personal', ''
                                                                              'unrestricted']), help='')
        c.argument('time_constraint_time_slots', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('location_constraint_is_required', arg_type=get_three_state_flag(), help='The client requests the '
                   'service to include in the response a meeting location for the meeting. If this is true and all the '
                   'resources are busy, findMeetingTimes will not return any meeting time suggestions. If this is '
                   'false and all the resources are busy, findMeetingTimes would still look for meeting times without '
                   'locations.')
        c.argument('location_constraint_locations', action=AddLocationConstraintLocations, nargs='*', help='Constraint '
                   'information for one or more locations that the client requests for the meeting.')
        c.argument('location_constraint_suggest_location', arg_type=get_three_state_flag(), help='The client requests '
                   'the service to suggest one or more meeting locations.')

    with self.argument_context('usersactions user get-by-id') as c:
        c.argument('ids', nargs='*', help='')
        c.argument('types', nargs='*', help='')

    with self.argument_context('usersactions user get-mail-tip') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('email_addresses', nargs='*', help='')
        c.argument('mail_tips_options', arg_type=get_enum_type(['automaticReplies', 'mailboxFullStatus', ''
                                                                'customMailTip', 'externalMemberCount', ''
                                                                'totalMemberCount', 'maxMessageSize', ''
                                                                'deliveryRestriction', 'moderationStatus', ''
                                                                'recipientScope', 'recipientSuggestions']), help='')

    with self.argument_context('usersactions user get-member-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('security_enabled_only', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user get-member-object') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('security_enabled_only', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user get-user-owned-object') as c:
        c.argument('user_id', type=str, help='')
        c.argument('type_', options_list=['--type'], type=str, help='')

    with self.argument_context('usersactions user invalidate-all-refresh-token') as c:
        c.argument('user_id', type=str, help='key: id of user')

    with self.argument_context('usersactions user remove-all-device-from-management') as c:
        c.argument('user_id', type=str, help='key: id of user')

    with self.argument_context('usersactions user reprocess-license-assignment') as c:
        c.argument('user_id', type=str, help='key: id of user')

    with self.argument_context('usersactions user restore') as c:
        c.argument('user_id', type=str, help='key: id of user')

    with self.argument_context('usersactions user revoke-sign-in-session') as c:
        c.argument('user_id', type=str, help='key: id of user')

    with self.argument_context('usersactions user send-mail') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('save_to_sent_items', arg_type=get_three_state_flag(), help='')
        c.argument('message_id', type=str, help='Read-only.')
        c.argument('message_categories', nargs='*', help='The categories associated with the item')
        c.argument('message_change_key', type=str, help='Identifies the version of the item. Every time the item is '
                   'changed, changeKey changes as well. This allows Exchange to apply changes to the correct version '
                   'of the object. Read-only.')
        c.argument('message_created_date_time', help='The Timestamp type represents date and time information using '
                   'ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look '
                   'like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_last_modified_date_time', help='The Timestamp type represents date and time information '
                   'using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('message_bcc_recipients', action=AddMessageBccRecipients, nargs='*', help='The Bcc: recipients for '
                   'the message.')
        c.argument('message_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_body_preview', type=str, help='The first 255 characters of the message body. It is in text '
                   'format.')
        c.argument('message_cc_recipients', action=AddMessageCcRecipients, nargs='*', help='The Cc: recipients for the '
                   'message.')
        c.argument('message_conversation_id', type=str, help='The ID of the conversation the email belongs to.')
        c.argument('message_conversation_index',
                   help='Indicates the position of the message within the conversation.')
        c.argument('message_flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/@json-file.')
        c.argument('message_from', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as :code:`<IMG src=\'cid:image001.jpg@01D26CD8.'
                   '6C05F070\'>`.')
        c.argument('message_importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('message_inference_classification', arg_type=get_enum_type(['focused', 'other']), help='')
        c.argument('message_internet_message_headers', action=AddMessageInternetMessageHeaders, nargs='*', help='A '
                   'collection of message headers defined by RFC5322. The set includes message headers indicating the '
                   'network path taken by a message from the sender to the recipient. It can also contain custom '
                   'message headers that hold app data for the message.  Returned only on applying a $select query '
                   'option. Read-only.')
        c.argument('message_internet_message_id', type=str, help='The message ID in the format specified by RFC2822.')
        c.argument('message_is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a '
                   'draft. A message is a draft if it hasn\'t been sent yet.')
        c.argument('message_is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been '
                   'read.')
        c.argument('message_is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a '
                   'read receipt is requested for the message.')
        c.argument('message_mentions_preview', action=AddMessageMentionsPreview, nargs='*', help='mentionsPreview')
        c.argument('message_parent_folder_id', type=str, help='The unique identifier for the message\'s parent '
                   'mailFolder.')
        c.argument('message_received_date_time', help='The date and time the message was received.')
        c.argument('message_reply_to', action=AddMessageReplyTo, nargs='*', help='The email addresses to use when '
                   'replying.')
        c.argument('message_sender', action=AddMessageFrom, nargs='*', help='recipient')
        c.argument('message_sent_date_time', help='The date and time the message was sent.')
        c.argument('message_subject', type=str, help='The subject of the message.')
        c.argument('message_to_recipients', action=AddMessageToRecipients, nargs='*', help='The To: recipients for the '
                   'message.')
        c.argument('message_unique_body', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('message_unsubscribe_data', nargs='*', help='')
        c.argument('message_unsubscribe_enabled', arg_type=get_three_state_flag(), help='')
        c.argument('message_web_link', type=str, help='The URL to open the message in Outlook on the web.You can '
                   'append an ispopout argument to the end of the URL to change how the message is displayed. If '
                   'ispopout is not present or if it is set to 1, then the message is shown in a popout window. If '
                   'ispopout is set to 0, then the browser will show the message in the Outlook on the web review '
                   'pane.The message will open in the browser if you are logged in to your mailbox via Outlook on the '
                   'web. You will be prompted to login if you are not already logged in with the browser.This URL '
                   'cannot be accessed from within an iFrame.')
        c.argument('message_attachments', action=AddMessageAttachments, nargs='*', help='The fileAttachment and '
                   'itemAttachment attachments for the message.')
        c.argument('message_extensions', action=AddMessageExtensions, nargs='*', help='The collection of open '
                   'extensions defined for the message. Nullable.')
        c.argument('message_mentions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('message_multi_value_extended_properties', action=AddMessageMultiValueExtendedProperties, nargs='*',
                   help='The collection of multi-value extended properties defined for the message. Nullable.')
        c.argument('message_single_value_extended_properties', action=AddMessageSingleValueExtendedProperties, nargs=''
                   '*', help='The collection of single-value extended properties defined for the message. Nullable.')

    with self.argument_context('usersactions user translate-exchange-id') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('input_ids', nargs='*', help='')
        c.argument('target_id_type', arg_type=get_enum_type(['entryId', 'ewsId', 'immutableEntryId', 'restId', ''
                                                             'restImmutableEntryId']), help='')
        c.argument('source_id_type', arg_type=get_enum_type(['entryId', 'ewsId', 'immutableEntryId', 'restId', ''
                                                             'restImmutableEntryId']), help='')

    with self.argument_context('usersactions user unblock-managed-app') as c:
        c.argument('user_id', type=str, help='key: id of user')

    with self.argument_context('usersactions user validate-property') as c:
        c.argument('entity_type', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('mail_nickname', type=str, help='')
        c.argument('on_behalf_of_user_id', help='')

    with self.argument_context('usersactions user wipe-and-block-managed-app') as c:
        c.argument('user_id', type=str, help='key: id of user')

    with self.argument_context('usersactions user wipe-managed-app-registration-by-device-tag') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('device_tag', type=str, help='')

    with self.argument_context('usersactions user-mobile-app-troubleshooting-event-app-log-collection-request create-download-url') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mobile_app_troubleshooting_event_id', type=str, help='key: id of mobileAppTroubleshootingEvent')
        c.argument('app_log_collection_request_id', type=str, help='key: id of appLogCollectionRequest')

    with self.argument_context('usersactions user-onenote-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-notebook get-notebook-from-web-url') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('web_url', type=str, help='')

    with self.argument_context('usersactions user-onenote-notebook-section-group-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-notebook-section-group-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-notebook-section-group-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-notebook-section-group-section-page copy-to-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-notebook-section-group-section-page onenote-patch-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddUsersOnenoteNotebooksSectiongroupsSectionsPagesCommands, nargs='*', help='')

    with self.argument_context('usersactions user-onenote-notebook-section-group-section-page-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-notebook-section-group-section-page-parent-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-notebook-section-group-section-page-parent-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-notebook-section-group-section-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-notebook-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-notebook-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-notebook-section-page copy-to-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-notebook-section-page onenote-patch-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddUsersOnenoteNotebooksSectionsPagesCommands, nargs='*', help='')

    with self.argument_context('usersactions user-onenote-notebook-section-page-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-notebook-section-page-parent-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-notebook-section-page-parent-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-notebook-section-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-notebook-section-parent-section-group-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-notebook-section-parent-section-group-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-notebook-section-parent-section-group-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page copy-to-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page onenote-patch-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddUsersOnenotePagesCommands, nargs='*', help='')

    with self.argument_context('usersactions user-onenote-page-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-notebook-section-group-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-notebook-section-group-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-notebook-section-group-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-notebook-section-group-section-page copy-to-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-notebook-section-group-section-page onenote-patch-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddUsersOnenotePagesParentnotebookSectiongroupsSectionsPagesCommands, nargs='*',
                   help='')

    with self.argument_context('usersactions user-onenote-page-parent-notebook-section-group-section-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-notebook-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-notebook-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-notebook-section-page copy-to-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-notebook-section-page onenote-patch-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddUsersOnenotePagesParentnotebookSectionsPagesCommands, nargs='*', help='')

    with self.argument_context('usersactions user-onenote-page-parent-notebook-section-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-notebook-section-parent-section-group-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-notebook-section-parent-section-group-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-notebook-section-parent-section-group-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-section-page copy-to-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-section-page onenote-patch-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddUsersOnenotePagesParentsectionPagesCommands, nargs='*', help='')

    with self.argument_context('usersactions user-onenote-page-parent-section-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-section-parent-notebook-section-group-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-section-parent-notebook-section-group-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-section-parent-notebook-section-group-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-section-parent-notebook-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-section-parent-notebook-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-section-parent-section-group-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-section-parent-section-group-parent-notebook-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-section-parent-section-group-parent-notebook-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-section-parent-section-group-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-page-parent-section-parent-section-group-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-group-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-group-parent-notebook-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-group-parent-notebook-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-group-parent-notebook-section-page copy-to-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-group-parent-notebook-section-page onenote-patch-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddUsersOnenoteSectiongroupsParentnotebookSectionsPagesCommands, nargs='*',
                   help='')

    with self.argument_context('usersactions user-onenote-section-group-parent-notebook-section-page-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-group-parent-notebook-section-page-parent-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-group-parent-notebook-section-page-parent-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-group-parent-notebook-section-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-group-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-group-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-group-section-page copy-to-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-group-section-page onenote-patch-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddUsersOnenoteSectiongroupsSectionsPagesCommands, nargs='*', help='')

    with self.argument_context('usersactions user-onenote-section-group-section-page-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-group-section-page-parent-notebook-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-group-section-page-parent-notebook-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-group-section-page-parent-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-group-section-page-parent-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-group-section-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-group-section-parent-notebook-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-group-section-parent-notebook-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-page copy-to-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-page onenote-patch-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddCommands, nargs='*', help='')

    with self.argument_context('usersactions user-onenote-section-page-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-page-parent-notebook-section-group-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-page-parent-notebook-section-group-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-page-parent-notebook-section-group-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-page-parent-notebook-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-page-parent-notebook-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-page-parent-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-page-parent-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-parent-notebook-section-group-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-parent-notebook-section-group-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-parent-notebook-section-group-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-parent-notebook-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-parent-notebook-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-parent-section-group-parent-notebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-parent-section-group-parent-notebook-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-parent-section-group-parent-notebook-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-parent-section-group-section copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-onenote-section-parent-section-group-section copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions user-online-meeting create-or-get') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('chat_info', action=AddChatInfo, nargs='*', help='chatInfo')
        c.argument('end_date_time', help='')
        c.argument('external_id', type=str, help='')
        c.argument('start_date_time', help='')
        c.argument('subject', type=str, help='')
        c.argument('participants_attendees', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('participants_contributors', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('participants_organizer', type=validate_file_or_dict, help='meetingParticipantInfo Expected value: '
                   'json-string/@json-file.')
        c.argument('participants_producers', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('usersactions user-outlook-task-folder-task-attachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='*', help='attachmentItem')

    with self.argument_context('usersactions user-outlook-task-folder-task complete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')

    with self.argument_context('usersactions user-outlook-task-group-task-folder-task-attachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='*', help='attachmentItem')

    with self.argument_context('usersactions user-outlook-task-group-task-folder-task complete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')

    with self.argument_context('usersactions user-outlook-task-attachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='*', help='attachmentItem')

    with self.argument_context('usersactions user-outlook-task complete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')

    with self.argument_context('usersactions user-pending-access-review-instance-definition stop') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('access_review_instance_id', type=str, help='key: id of accessReviewInstance')

    with self.argument_context('usersactions user-pending-access-review-instance accept-recommendation') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('access_review_instance_id', type=str, help='key: id of accessReviewInstance')

    with self.argument_context('usersactions user-pending-access-review-instance apply-decision') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('access_review_instance_id', type=str, help='key: id of accessReviewInstance')

    with self.argument_context('usersactions user-pending-access-review-instance reset-decision') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('access_review_instance_id', type=str, help='key: id of accessReviewInstance')

    with self.argument_context('usersactions user-pending-access-review-instance send-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('access_review_instance_id', type=str, help='key: id of accessReviewInstance')

    with self.argument_context('usersactions user-pending-access-review-instance stop') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('access_review_instance_id', type=str, help='key: id of accessReviewInstance')

    with self.argument_context('usersactions user-teamwork send-activity-notification') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('topic', action=AddTopic, nargs='*', help='teamworkActivityTopic')
        c.argument('activity_type', type=str, help='')
        c.argument('chain_id', type=int, help='')
        c.argument('preview_text', action=AddMessageBody, nargs='*', help='itemBody')
        c.argument('template_parameters', action=AddTemplateParameters, nargs='*', help='')
