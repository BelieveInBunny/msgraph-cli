# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from msgraph.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_identitysignins_beta.generated._client_factory import cf_data_policy_operation_data_policy_operation
    identitysignins_beta_data_policy_operation_data_policy_operation = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._data_policy_operation_dat'
        'a_policy_operation_operations#DataPolicyOperationDataPolicyOperationOperations.{}',
        client_factory=cf_data_policy_operation_data_policy_operation)
    with self.command_group('identitysignins data-policy-operation-data-policy-operation',
                            identitysignins_beta_data_policy_operation_data_policy_operation,
                            client_factory=cf_data_policy_operation_data_policy_operation, is_experimental=True) as g:
        g.custom_command('delete', 'identitysignins_data_policy_operation_data_policy_operation_delete',
                         confirmation=True)
        g.custom_command('create-data-policy-operation', 'identitysignins_data_policy_operation_data_policy_operation_c'
                         'reate_data_policy_operation')
        g.custom_command('get-data-policy-operation', 'identitysignins_data_policy_operation_data_policy_operation_get_'
                         'data_policy_operation')
        g.custom_command('list-data-policy-operation', 'identitysignins_data_policy_operation_data_policy_operation_lis'
                         't_data_policy_operation')
        g.custom_command('update-data-policy-operation', 'identitysignins_data_policy_operation_data_policy_operation_u'
                         'pdate_data_policy_operation')

    from azext_identitysignins_beta.generated._client_factory import cf_identity
    identitysignins_beta_identity = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._identity_operations#Ident'
        'ityOperations.{}',
        client_factory=cf_identity)
    with self.command_group('identitysignins identity', identitysignins_beta_identity, client_factory=cf_identity,
                            is_experimental=True) as g:
        g.custom_command('delete', 'identitysignins_identity_delete', confirmation=True)
        g.custom_command('create-user-flow', 'identitysignins_identity_create_user_flow')
        g.custom_command('get-conditional-access', 'identitysignins_identity_get_conditional_access')
        g.custom_command('get-user-flow', 'identitysignins_identity_get_user_flow')
        g.custom_command('list-user-flow', 'identitysignins_identity_list_user_flow')
        g.custom_command('update-conditional-access', 'identitysignins_identity_update_conditional_access')
        g.custom_command('update-user-flow', 'identitysignins_identity_update_user_flow')

    from azext_identitysignins_beta.generated._client_factory import cf_identity_conditional_access
    identitysignins_beta_identity_conditional_access = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._identity_conditional_acce'
        'ss_operations#IdentityConditionalAccessOperations.{}',
        client_factory=cf_identity_conditional_access)
    with self.command_group('identitysignins identity-conditional-access',
                            identitysignins_beta_identity_conditional_access,
                            client_factory=cf_identity_conditional_access, is_experimental=True) as g:
        g.custom_command('delete', 'identitysignins_identity_conditional_access_delete', confirmation=True)
        g.custom_command('create-named-location', 'identitysignins_identity_conditional_access_create_named_location')
        g.custom_command('create-policy', 'identitysignins_identity_conditional_access_create_policy')
        g.custom_command('get-named-location', 'identitysignins_identity_conditional_access_get_named_location')
        g.custom_command('get-policy', 'identitysignins_identity_conditional_access_get_policy')
        g.custom_command('list-named-location', 'identitysignins_identity_conditional_access_list_named_location')
        g.custom_command('list-policy', 'identitysignins_identity_conditional_access_list_policy')
        g.custom_command('update-named-location', 'identitysignins_identity_conditional_access_update_named_location')
        g.custom_command('update-policy', 'identitysignins_identity_conditional_access_update_policy')

    from azext_identitysignins_beta.generated._client_factory import cf_identity_provider_identity_provider
    identitysignins_beta_identity_provider_identity_provider = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._identity_provider_identit'
        'y_provider_operations#IdentityProviderIdentityProviderOperations.{}',
        client_factory=cf_identity_provider_identity_provider)
    with self.command_group('identitysignins identity-provider-identity-provider',
                            identitysignins_beta_identity_provider_identity_provider,
                            client_factory=cf_identity_provider_identity_provider, is_experimental=True) as g:
        g.custom_command('delete', 'identitysignins_identity_provider_identity_provider_delete', confirmation=True)
        g.custom_command('create-identity-provider', 'identitysignins_identity_provider_identity_provider_create_identi'
                         'ty_provider')
        g.custom_command('get-identity-provider', 'identitysignins_identity_provider_identity_provider_get_identity_pro'
                         'vider')
        g.custom_command('list-identity-provider', 'identitysignins_identity_provider_identity_provider_list_identity_p'
                         'rovider')
        g.custom_command('update-identity-provider', 'identitysignins_identity_provider_identity_provider_update_identi'
                         'ty_provider')

    from azext_identitysignins_beta.generated._client_factory import cf_identity_provider
    identitysignins_beta_identity_provider = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._identity_provider_operati'
        'ons#IdentityProviderOperations.{}',
        client_factory=cf_identity_provider)
    with self.command_group('identitysignins identity-provider', identitysignins_beta_identity_provider,
                            client_factory=cf_identity_provider, is_experimental=True) as g:
        g.custom_command('available-provider-type', 'identitysignins_identity_provider_available_provider_type')

    from azext_identitysignins_beta.generated._client_factory import cf_information_protection_information_protection
    identitysignins_beta_information_protection_information_protection = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._information_protection_in'
        'formation_protection_operations#InformationProtectionInformationProtectionOperations.{}',
        client_factory=cf_information_protection_information_protection)
    with self.command_group('identitysignins information-protection-information-protection',
                            identitysignins_beta_information_protection_information_protection,
                            client_factory=cf_information_protection_information_protection,
                            is_experimental=True) as g:
        g.custom_command('get-information-protection', 'identitysignins_information_protection_information_protection_g'
                         'et_information_protection')
        g.custom_command('update-information-protection', 'identitysignins_information_protection_information_protectio'
                         'n_update_information_protection')

    from azext_identitysignins_beta.generated._client_factory import cf_information_protection
    identitysignins_beta_information_protection = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._information_protection_op'
        'erations#InformationProtectionOperations.{}',
        client_factory=cf_information_protection)
    with self.command_group('identitysignins information-protection', identitysignins_beta_information_protection,
                            client_factory=cf_information_protection, is_experimental=True) as g:
        g.custom_command('delete', 'identitysignins_information_protection_delete', confirmation=True)
        g.custom_command('create-data-loss-prevention-policy', 'identitysignins_information_protection_create_data_loss'
                         '_prevention_policy')
        g.custom_command('create-sensitivity-label',
                         'identitysignins_information_protection_create_sensitivity_label')
        g.custom_command('create-threat-assessment-request', 'identitysignins_information_protection_create_threat_asse'
                         'ssment_request')
        g.custom_command('evaluate-label-and-policy', 'identitysignins_information_protection_evaluate_label_and_policy'
                         '')
        g.custom_command('get-data-loss-prevention-policy', 'identitysignins_information_protection_get_data_loss_preve'
                         'ntion_policy')
        g.custom_command('get-policy', 'identitysignins_information_protection_get_policy')
        g.custom_command('get-sensitivity-label', 'identitysignins_information_protection_get_sensitivity_label')
        g.custom_command('get-sensitivity-policy-setting', 'identitysignins_information_protection_get_sensitivity_poli'
                         'cy_setting')
        g.custom_command('get-threat-assessment-request', 'identitysignins_information_protection_get_threat_assessment'
                         '_request')
        g.custom_command('list-data-loss-prevention-policy', 'identitysignins_information_protection_list_data_loss_pre'
                         'vention_policy')
        g.custom_command('list-sensitivity-label', 'identitysignins_information_protection_list_sensitivity_label')
        g.custom_command('list-threat-assessment-request', 'identitysignins_information_protection_list_threat_assessme'
                         'nt_request')
        g.custom_command('update-data-loss-prevention-policy', 'identitysignins_information_protection_update_data_loss'
                         '_prevention_policy')
        g.custom_command('update-policy', 'identitysignins_information_protection_update_policy')
        g.custom_command('update-sensitivity-label',
                         'identitysignins_information_protection_update_sensitivity_label')
        g.custom_command('update-sensitivity-policy-setting', 'identitysignins_information_protection_update_sensitivit'
                         'y_policy_setting')
        g.custom_command('update-threat-assessment-request', 'identitysignins_information_protection_update_threat_asse'
                         'ssment_request')

    from azext_identitysignins_beta.generated._client_factory import cf_information_protection_data_loss_prevention_policy
    identitysignins_beta_information_protection_data_loss_prevention_policy = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._information_protection_da'
        'ta_loss_prevention_policy_operations#InformationProtectionDataLossPreventionPolicyOperations.{}',
        client_factory=cf_information_protection_data_loss_prevention_policy)
    with self.command_group('identitysignins information-protection-data-loss-prevention-policy',
                            identitysignins_beta_information_protection_data_loss_prevention_policy,
                            client_factory=cf_information_protection_data_loss_prevention_policy,
                            is_experimental=True) as g:
        g.custom_command('evaluate', 'identitysignins_information_protection_data_loss_prevention_policy_evaluate')

    from azext_identitysignins_beta.generated._client_factory import cf_information_protection_policy
    identitysignins_beta_information_protection_policy = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._information_protection_po'
        'licy_operations#InformationProtectionPolicyOperations.{}',
        client_factory=cf_information_protection_policy)
    with self.command_group('identitysignins information-protection-policy',
                            identitysignins_beta_information_protection_policy,
                            client_factory=cf_information_protection_policy, is_experimental=True) as g:
        g.custom_command('delete', 'identitysignins_information_protection_policy_delete', confirmation=True)
        g.custom_command('create-label', 'identitysignins_information_protection_policy_create_label')
        g.custom_command('get-label', 'identitysignins_information_protection_policy_get_label')
        g.custom_command('list-label', 'identitysignins_information_protection_policy_list_label')
        g.custom_command('update-label', 'identitysignins_information_protection_policy_update_label')

    from azext_identitysignins_beta.generated._client_factory import cf_information_protection_policy_label
    identitysignins_beta_information_protection_policy_label = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._information_protection_po'
        'licy_label_operations#InformationProtectionPolicyLabelOperations.{}',
        client_factory=cf_information_protection_policy_label)
    with self.command_group('identitysignins information-protection-policy-label',
                            identitysignins_beta_information_protection_policy_label,
                            client_factory=cf_information_protection_policy_label, is_experimental=True) as g:
        g.custom_command('evaluate-application', 'identitysignins_information_protection_policy_label_evaluate_applicat'
                         'ion')
        g.custom_command('evaluate-classification-result', 'identitysignins_information_protection_policy_label_evaluat'
                         'e_classification_result')
        g.custom_command('evaluate-removal', 'identitysignins_information_protection_policy_label_evaluate_removal')
        g.custom_command('extract-label', 'identitysignins_information_protection_policy_label_extract_label')

    from azext_identitysignins_beta.generated._client_factory import cf_information_protection_sensitivity_label
    identitysignins_beta_information_protection_sensitivity_label = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._information_protection_se'
        'nsitivity_label_operations#InformationProtectionSensitivityLabelOperations.{}',
        client_factory=cf_information_protection_sensitivity_label)
    with self.command_group('identitysignins information-protection-sensitivity-label',
                            identitysignins_beta_information_protection_sensitivity_label,
                            client_factory=cf_information_protection_sensitivity_label, is_experimental=True) as g:
        g.custom_command('delete', 'identitysignins_information_protection_sensitivity_label_delete',
                         confirmation=True)
        g.custom_command('create-sublabel',
                         'identitysignins_information_protection_sensitivity_label_create_sublabel')
        g.custom_command('evaluate', 'identitysignins_information_protection_sensitivity_label_evaluate')
        g.custom_command('get-sublabel', 'identitysignins_information_protection_sensitivity_label_get_sublabel')
        g.custom_command('list-sublabel', 'identitysignins_information_protection_sensitivity_label_list_sublabel')
        g.custom_command('update-sublabel',
                         'identitysignins_information_protection_sensitivity_label_update_sublabel')

    from azext_identitysignins_beta.generated._client_factory import cf_information_protection_sensitivity_label_sublabel
    identitysignins_beta_information_protection_sensitivity_label_sublabel = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._information_protection_se'
        'nsitivity_label_sublabel_operations#InformationProtectionSensitivityLabelSublabelOperations.{}',
        client_factory=cf_information_protection_sensitivity_label_sublabel)
    with self.command_group('identitysignins information-protection-sensitivity-label-sublabel',
                            identitysignins_beta_information_protection_sensitivity_label_sublabel,
                            client_factory=cf_information_protection_sensitivity_label_sublabel,
                            is_experimental=True) as g:
        g.custom_command('evaluate', 'identitysignins_information_protection_sensitivity_label_sublabel_evaluate')

    from azext_identitysignins_beta.generated._client_factory import cf_information_protection_threat_assessment_request
    identitysignins_beta_information_protection_threat_assessment_request = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._information_protection_th'
        'reat_assessment_request_operations#InformationProtectionThreatAssessmentRequestOperations.{}',
        client_factory=cf_information_protection_threat_assessment_request)
    with self.command_group('identitysignins information-protection-threat-assessment-request',
                            identitysignins_beta_information_protection_threat_assessment_request,
                            client_factory=cf_information_protection_threat_assessment_request,
                            is_experimental=True) as g:
        g.custom_command('delete', 'identitysignins_information_protection_threat_assessment_request_delete',
                         confirmation=True)
        g.custom_command('create-result', 'identitysignins_information_protection_threat_assessment_request_create_resu'
                         'lt')
        g.custom_command('get-result', 'identitysignins_information_protection_threat_assessment_request_get_result')
        g.custom_command('list-result',
                         'identitysignins_information_protection_threat_assessment_request_list_result')
        g.custom_command('update-result', 'identitysignins_information_protection_threat_assessment_request_update_resu'
                         'lt')

    from azext_identitysignins_beta.generated._client_factory import cf_invitation_invitation
    identitysignins_beta_invitation_invitation = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._invitation_invitation_ope'
        'rations#InvitationInvitationOperations.{}',
        client_factory=cf_invitation_invitation)
    with self.command_group('identitysignins invitation-invitation', identitysignins_beta_invitation_invitation,
                            client_factory=cf_invitation_invitation, is_experimental=True) as g:
        g.custom_command('delete', 'identitysignins_invitation_invitation_delete', confirmation=True)
        g.custom_command('create-invitation', 'identitysignins_invitation_invitation_create_invitation')
        g.custom_command('get-invitation', 'identitysignins_invitation_invitation_get_invitation')
        g.custom_command('list-invitation', 'identitysignins_invitation_invitation_list_invitation')
        g.custom_command('update-invitation', 'identitysignins_invitation_invitation_update_invitation')

    from azext_identitysignins_beta.generated._client_factory import cf_invitation
    identitysignins_beta_invitation = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._invitation_operations#Inv'
        'itationOperations.{}',
        client_factory=cf_invitation)
    with self.command_group('identitysignins invitation', identitysignins_beta_invitation,
                            client_factory=cf_invitation, is_experimental=True) as g:
        g.custom_command('delete', 'identitysignins_invitation_delete', confirmation=True)
        g.custom_command('get-invited-user', 'identitysignins_invitation_get_invited_user')
        g.custom_command('get-ref-invited-user', 'identitysignins_invitation_get_ref_invited_user')
        g.custom_command('set-ref-invited-user', 'identitysignins_invitation_set_ref_invited_user')

    from azext_identitysignins_beta.generated._client_factory import cf_oauth2permission_grant_oauth2permission_grant
    identitysignins_beta_oauth2permission_grant_oauth2permission_grant = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._oauth2_permission_grant_o'
        'auth2_permission_grant_operations#Oauth2PermissionGrantOAuth2PermissionGrantOperations.{}',
        client_factory=cf_oauth2permission_grant_oauth2permission_grant)
    with self.command_group('identitysignins oauth2-permission-grant-o-auth2-permission-grant',
                            identitysignins_beta_oauth2permission_grant_oauth2permission_grant,
                            client_factory=cf_oauth2permission_grant_oauth2permission_grant,
                            is_experimental=True) as g:
        g.custom_command('delete', 'identitysignins_oauth2_permission_grant_o_auth2_permission_grant_delete',
                         confirmation=True)
        g.custom_command('create-o-auth2-permission-grant', 'identitysignins_oauth2_permission_grant_o_auth2_permission'
                         '_grant_create_o_auth2_permission_grant')
        g.custom_command('get-o-auth2-permission-grant', 'identitysignins_oauth2_permission_grant_o_auth2_permission_gr'
                         'ant_get_o_auth2_permission_grant')
        g.custom_command('list-o-auth2-permission-grant', 'identitysignins_oauth2_permission_grant_o_auth2_permission_g'
                         'rant_list_o_auth2_permission_grant')
        g.custom_command('update-o-auth2-permission-grant', 'identitysignins_oauth2_permission_grant_o_auth2_permission'
                         '_grant_update_o_auth2_permission_grant')

    from azext_identitysignins_beta.generated._client_factory import cf_oauth2permission_grant
    identitysignins_beta_oauth2permission_grant = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._oauth2_permission_grant_o'
        'perations#Oauth2PermissionGrantOperations.{}',
        client_factory=cf_oauth2permission_grant)
    with self.command_group('identitysignins oauth2-permission-grant', identitysignins_beta_oauth2permission_grant,
                            client_factory=cf_oauth2permission_grant, is_experimental=True) as g:
        g.custom_command('delta', 'identitysignins_oauth2_permission_grant_delta')

    from azext_identitysignins_beta.generated._client_factory import cf_organization
    identitysignins_beta_organization = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._organization_operations#O'
        'rganizationOperations.{}',
        client_factory=cf_organization)
    with self.command_group('identitysignins organization', identitysignins_beta_organization,
                            client_factory=cf_organization, is_experimental=True) as g:
        g.custom_command('create-ref-certificate-based-auth-configuration', 'identitysignins_organization_create_ref_ce'
                         'rtificate_based_auth_configuration')
        g.custom_command('list-certificate-based-auth-configuration', 'identitysignins_organization_list_certificate_ba'
                         'sed_auth_configuration')
        g.custom_command('list-ref-certificate-based-auth-configuration', 'identitysignins_organization_list_ref_certif'
                         'icate_based_auth_configuration')

    from azext_identitysignins_beta.generated._client_factory import cf_policy_policy_root
    identitysignins_beta_policy_policy_root = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._policy_policy_root_operat'
        'ions#PolicyPolicyRootOperations.{}',
        client_factory=cf_policy_policy_root)
    with self.command_group('identitysignins policy-policy-root', identitysignins_beta_policy_policy_root,
                            client_factory=cf_policy_policy_root, is_experimental=True) as g:
        g.custom_command('get-policy-root', 'identitysignins_policy_policy_root_get_policy_root')
        g.custom_command('update-policy-root', 'identitysignins_policy_policy_root_update_policy_root')

    from azext_identitysignins_beta.generated._client_factory import cf_policy
    identitysignins_beta_policy = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._policy_operations#PolicyO'
        'perations.{}',
        client_factory=cf_policy)
    with self.command_group('identitysignins policy', identitysignins_beta_policy, client_factory=cf_policy,
                            is_experimental=True) as g:
        g.custom_command('delete', 'identitysignins_policy_delete', confirmation=True)
        g.custom_command('create-activity-based-timeout-policy', 'identitysignins_policy_create_activity_based_timeout_'
                         'policy')
        g.custom_command('create-authorization-policy', 'identitysignins_policy_create_authorization_policy')
        g.custom_command('create-claim-mapping-policy', 'identitysignins_policy_create_claim_mapping_policy')
        g.custom_command('create-conditional-access-policy',
                         'identitysignins_policy_create_conditional_access_policy')
        g.custom_command('create-home-realm-discovery-policy', 'identitysignins_policy_create_home_realm_discovery_poli'
                         'cy')
        g.custom_command('create-permission-grant-policy', 'identitysignins_policy_create_permission_grant_policy')
        g.custom_command('create-private-link-resource-policy', 'identitysignins_policy_create_private_link_resource_po'
                         'licy')
        g.custom_command('create-token-issuance-policy', 'identitysignins_policy_create_token_issuance_policy')
        g.custom_command('create-token-lifetime-policy', 'identitysignins_policy_create_token_lifetime_policy')
        g.custom_command('get-activity-based-timeout-policy', 'identitysignins_policy_get_activity_based_timeout_policy'
                         '')
        g.custom_command('get-admin-consent-request-policy',
                         'identitysignins_policy_get_admin_consent_request_policy')
        g.custom_command('get-authentication-flow-policy', 'identitysignins_policy_get_authentication_flow_policy')
        g.custom_command('get-authorization-policy', 'identitysignins_policy_get_authorization_policy')
        g.custom_command('get-b2-c-authentication-method-policy', 'identitysignins_policy_get_b2_c_authentication_metho'
                         'd_policy')
        g.custom_command('get-claim-mapping-policy', 'identitysignins_policy_get_claim_mapping_policy')
        g.custom_command('get-conditional-access-policy', 'identitysignins_policy_get_conditional_access_policy')
        g.custom_command('get-device-registration-policy', 'identitysignins_policy_get_device_registration_policy')
        g.custom_command('get-directory-role-access-review-policy', 'identitysignins_policy_get_directory_role_access_r'
                         'eview_policy')
        g.custom_command('get-home-realm-discovery-policy', 'identitysignins_policy_get_home_realm_discovery_policy')
        g.custom_command('get-identity-security-default-enforcement-policy', 'identitysignins_policy_get_identity_secur'
                         'ity_default_enforcement_policy')
        g.custom_command('get-permission-grant-policy', 'identitysignins_policy_get_permission_grant_policy')
        g.custom_command('get-private-link-resource-policy',
                         'identitysignins_policy_get_private_link_resource_policy')
        g.custom_command('get-token-issuance-policy', 'identitysignins_policy_get_token_issuance_policy')
        g.custom_command('get-token-lifetime-policy', 'identitysignins_policy_get_token_lifetime_policy')
        g.custom_command('list-activity-based-timeout-policy', 'identitysignins_policy_list_activity_based_timeout_poli'
                         'cy')
        g.custom_command('list-authorization-policy', 'identitysignins_policy_list_authorization_policy')
        g.custom_command('list-claim-mapping-policy', 'identitysignins_policy_list_claim_mapping_policy')
        g.custom_command('list-conditional-access-policy', 'identitysignins_policy_list_conditional_access_policy')
        g.custom_command('list-home-realm-discovery-policy',
                         'identitysignins_policy_list_home_realm_discovery_policy')
        g.custom_command('list-permission-grant-policy', 'identitysignins_policy_list_permission_grant_policy')
        g.custom_command('list-private-link-resource-policy', 'identitysignins_policy_list_private_link_resource_policy'
                         '')
        g.custom_command('list-token-issuance-policy', 'identitysignins_policy_list_token_issuance_policy')
        g.custom_command('list-token-lifetime-policy', 'identitysignins_policy_list_token_lifetime_policy')
        g.custom_command('update-activity-based-timeout-policy', 'identitysignins_policy_update_activity_based_timeout_'
                         'policy')
        g.custom_command('update-admin-consent-request-policy', 'identitysignins_policy_update_admin_consent_request_po'
                         'licy')
        g.custom_command('update-authentication-flow-policy', 'identitysignins_policy_update_authentication_flow_policy'
                         '')
        g.custom_command('update-authorization-policy', 'identitysignins_policy_update_authorization_policy')
        g.custom_command('update-b2-c-authentication-method-policy', 'identitysignins_policy_update_b2_c_authentication'
                         '_method_policy')
        g.custom_command('update-claim-mapping-policy', 'identitysignins_policy_update_claim_mapping_policy')
        g.custom_command('update-conditional-access-policy',
                         'identitysignins_policy_update_conditional_access_policy')
        g.custom_command('update-device-registration-policy', 'identitysignins_policy_update_device_registration_policy'
                         '')
        g.custom_command('update-directory-role-access-review-policy', 'identitysignins_policy_update_directory_role_ac'
                         'cess_review_policy')
        g.custom_command('update-home-realm-discovery-policy', 'identitysignins_policy_update_home_realm_discovery_poli'
                         'cy')
        g.custom_command('update-identity-security-default-enforcement-policy', 'identitysignins_policy_update_identity'
                         '_security_default_enforcement_policy')
        g.custom_command('update-permission-grant-policy', 'identitysignins_policy_update_permission_grant_policy')
        g.custom_command('update-private-link-resource-policy', 'identitysignins_policy_update_private_link_resource_po'
                         'licy')
        g.custom_command('update-token-issuance-policy', 'identitysignins_policy_update_token_issuance_policy')
        g.custom_command('update-token-lifetime-policy', 'identitysignins_policy_update_token_lifetime_policy')

    from azext_identitysignins_beta.generated._client_factory import cf_policy_permission_grant_policy
    identitysignins_beta_policy_permission_grant_policy = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._policy_permission_grant_p'
        'olicy_operations#PolicyPermissionGrantPolicyOperations.{}',
        client_factory=cf_policy_permission_grant_policy)
    with self.command_group('identitysignins policy-permission-grant-policy',
                            identitysignins_beta_policy_permission_grant_policy,
                            client_factory=cf_policy_permission_grant_policy, is_experimental=True) as g:
        g.custom_command('delete', 'identitysignins_policy_permission_grant_policy_delete', confirmation=True)
        g.custom_command('create-exclude', 'identitysignins_policy_permission_grant_policy_create_exclude')
        g.custom_command('create-include', 'identitysignins_policy_permission_grant_policy_create_include')
        g.custom_command('get-exclude', 'identitysignins_policy_permission_grant_policy_get_exclude')
        g.custom_command('get-include', 'identitysignins_policy_permission_grant_policy_get_include')
        g.custom_command('list-exclude', 'identitysignins_policy_permission_grant_policy_list_exclude')
        g.custom_command('list-include', 'identitysignins_policy_permission_grant_policy_list_include')
        g.custom_command('update-exclude', 'identitysignins_policy_permission_grant_policy_update_exclude')
        g.custom_command('update-include', 'identitysignins_policy_permission_grant_policy_update_include')

    from azext_identitysignins_beta.generated._client_factory import cf_risk_detection_risk_detection
    identitysignins_beta_risk_detection_risk_detection = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._risk_detection_risk_detec'
        'tion_operations#RiskDetectionRiskDetectionOperations.{}',
        client_factory=cf_risk_detection_risk_detection)
    with self.command_group('identitysignins risk-detection-risk-detection',
                            identitysignins_beta_risk_detection_risk_detection,
                            client_factory=cf_risk_detection_risk_detection, is_experimental=True) as g:
        g.custom_command('delete', 'identitysignins_risk_detection_risk_detection_delete', confirmation=True)
        g.custom_command('create-risk-detection',
                         'identitysignins_risk_detection_risk_detection_create_risk_detection')
        g.custom_command('get-risk-detection', 'identitysignins_risk_detection_risk_detection_get_risk_detection')
        g.custom_command('list-risk-detection', 'identitysignins_risk_detection_risk_detection_list_risk_detection')
        g.custom_command('update-risk-detection',
                         'identitysignins_risk_detection_risk_detection_update_risk_detection')

    from azext_identitysignins_beta.generated._client_factory import cf_risky_user_risky_user
    identitysignins_beta_risky_user_risky_user = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._risky_user_risky_user_ope'
        'rations#RiskyUserRiskyUserOperations.{}',
        client_factory=cf_risky_user_risky_user)
    with self.command_group('identitysignins risky-user-risky-user', identitysignins_beta_risky_user_risky_user,
                            client_factory=cf_risky_user_risky_user, is_experimental=True) as g:
        g.custom_command('delete', 'identitysignins_risky_user_risky_user_delete', confirmation=True)
        g.custom_command('create-risky-user', 'identitysignins_risky_user_risky_user_create_risky_user')
        g.custom_command('get-risky-user', 'identitysignins_risky_user_risky_user_get_risky_user')
        g.custom_command('list-risky-user', 'identitysignins_risky_user_risky_user_list_risky_user')
        g.custom_command('update-risky-user', 'identitysignins_risky_user_risky_user_update_risky_user')

    from azext_identitysignins_beta.generated._client_factory import cf_risky_user
    identitysignins_beta_risky_user = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._risky_user_operations#Ris'
        'kyUserOperations.{}',
        client_factory=cf_risky_user)
    with self.command_group('identitysignins risky-user', identitysignins_beta_risky_user,
                            client_factory=cf_risky_user, is_experimental=True) as g:
        g.custom_command('delete', 'identitysignins_risky_user_delete', confirmation=True)
        g.custom_command('confirm-compromised', 'identitysignins_risky_user_confirm_compromised')
        g.custom_command('create-history', 'identitysignins_risky_user_create_history')
        g.custom_command('dismiss', 'identitysignins_risky_user_dismiss')
        g.custom_command('get-history', 'identitysignins_risky_user_get_history')
        g.custom_command('list-history', 'identitysignins_risky_user_list_history')
        g.custom_command('update-history', 'identitysignins_risky_user_update_history')

    from azext_identitysignins_beta.generated._client_factory import cf_trust_framework_trust_framework
    identitysignins_beta_trust_framework_trust_framework = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._trust_framework_trust_fra'
        'mework_operations#TrustFrameworkTrustFrameworkOperations.{}',
        client_factory=cf_trust_framework_trust_framework)
    with self.command_group('identitysignins trust-framework-trust-framework',
                            identitysignins_beta_trust_framework_trust_framework,
                            client_factory=cf_trust_framework_trust_framework, is_experimental=True) as g:
        g.custom_command('get-trust-framework', 'identitysignins_trust_framework_trust_framework_get_trust_framework')
        g.custom_command('update-trust-framework', 'identitysignins_trust_framework_trust_framework_update_trust_framew'
                         'ork')

    from azext_identitysignins_beta.generated._client_factory import cf_trust_framework
    identitysignins_beta_trust_framework = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._trust_framework_operation'
        's#TrustFrameworkOperations.{}',
        client_factory=cf_trust_framework)
    with self.command_group('identitysignins trust-framework', identitysignins_beta_trust_framework,
                            client_factory=cf_trust_framework, is_experimental=True) as g:
        g.custom_command('delete', 'identitysignins_trust_framework_delete', confirmation=True)
        g.custom_command('create-key-set', 'identitysignins_trust_framework_create_key_set')
        g.custom_command('create-policy', 'identitysignins_trust_framework_create_policy')
        g.custom_command('get-key-set', 'identitysignins_trust_framework_get_key_set')
        g.custom_command('get-policy', 'identitysignins_trust_framework_get_policy')
        g.custom_command('get-policy-content', 'identitysignins_trust_framework_get_policy_content')
        g.custom_command('list-key-set', 'identitysignins_trust_framework_list_key_set')
        g.custom_command('list-policy', 'identitysignins_trust_framework_list_policy')
        g.custom_command('set-policy-content', 'identitysignins_trust_framework_set_policy_content')
        g.custom_command('update-key-set', 'identitysignins_trust_framework_update_key_set')
        g.custom_command('update-policy', 'identitysignins_trust_framework_update_policy')

    from azext_identitysignins_beta.generated._client_factory import cf_trust_framework_key_set
    identitysignins_beta_trust_framework_key_set = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._trust_framework_key_set_o'
        'perations#TrustFrameworkKeySetOperations.{}',
        client_factory=cf_trust_framework_key_set)
    with self.command_group('identitysignins trust-framework-key-set', identitysignins_beta_trust_framework_key_set,
                            client_factory=cf_trust_framework_key_set, is_experimental=True) as g:
        g.custom_command('generate-key', 'identitysignins_trust_framework_key_set_generate_key')
        g.custom_command('get-active-key', 'identitysignins_trust_framework_key_set_get_active_key')
        g.custom_command('upload-certificate', 'identitysignins_trust_framework_key_set_upload_certificate')
        g.custom_command('upload-pkcs12', 'identitysignins_trust_framework_key_set_upload_pkcs12')
        g.custom_command('upload-secret', 'identitysignins_trust_framework_key_set_upload_secret')

    from azext_identitysignins_beta.generated._client_factory import cf_user
    identitysignins_beta_user = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._user_operations#UserOpera'
        'tions.{}',
        client_factory=cf_user)
    with self.command_group('identitysignins user', identitysignins_beta_user, client_factory=cf_user,
                            is_experimental=True) as g:
        g.custom_command('delete', 'identitysignins_user_delete', confirmation=True)
        g.custom_command('get-authentication', 'identitysignins_user_get_authentication')
        g.custom_command('get-information-protection', 'identitysignins_user_get_information_protection')
        g.custom_command('update-authentication', 'identitysignins_user_update_authentication')
        g.custom_command('update-information-protection', 'identitysignins_user_update_information_protection')

    from azext_identitysignins_beta.generated._client_factory import cf_user_authentication
    identitysignins_beta_user_authentication = CliCommandType(
        operations_tmpl='azext_identitysignins_beta.vendored_sdks.identitysignins.operations._user_authentication_opera'
        'tions#UserAuthenticationOperations.{}',
        client_factory=cf_user_authentication)
    with self.command_group('identitysignins user-authentication', identitysignins_beta_user_authentication,
                            client_factory=cf_user_authentication, is_experimental=True) as g:
        g.custom_command('delete', 'identitysignins_user_authentication_delete', confirmation=True)
        g.custom_command('create-email-method', 'identitysignins_user_authentication_create_email_method')
        g.custom_command('create-fido2-method', 'identitysignins_user_authentication_create_fido2_method')
        g.custom_command('create-method', 'identitysignins_user_authentication_create_method')
        g.custom_command('create-microsoft-authenticator-method', 'identitysignins_user_authentication_create_microsoft'
                         '_authenticator_method')
        g.custom_command('create-oath-method', 'identitysignins_user_authentication_create_oath_method')
        g.custom_command('create-operation', 'identitysignins_user_authentication_create_operation')
        g.custom_command('create-password-method', 'identitysignins_user_authentication_create_password_method')
        g.custom_command('create-passwordless-microsoft-authenticator-method', 'identitysignins_user_authentication_cre'
                         'ate_passwordless_microsoft_authenticator_method')
        g.custom_command('create-phone-method', 'identitysignins_user_authentication_create_phone_method')
        g.custom_command('create-security-question-method', 'identitysignins_user_authentication_create_security_questi'
                         'on_method')
        g.custom_command('create-temporary-access-pass-method', 'identitysignins_user_authentication_create_temporary_a'
                         'ccess_pass_method')
        g.custom_command('get-email-method', 'identitysignins_user_authentication_get_email_method')
        g.custom_command('get-fido2-method', 'identitysignins_user_authentication_get_fido2_method')
        g.custom_command('get-method', 'identitysignins_user_authentication_get_method')
        g.custom_command('get-microsoft-authenticator-method', 'identitysignins_user_authentication_get_microsoft_authe'
                         'nticator_method')
        g.custom_command('get-oath-method', 'identitysignins_user_authentication_get_oath_method')
        g.custom_command('get-operation', 'identitysignins_user_authentication_get_operation')
        g.custom_command('get-password-method', 'identitysignins_user_authentication_get_password_method')
        g.custom_command('get-passwordless-microsoft-authenticator-method', 'identitysignins_user_authentication_get_pa'
                         'sswordless_microsoft_authenticator_method')
        g.custom_command('get-phone-method', 'identitysignins_user_authentication_get_phone_method')
        g.custom_command('get-security-question-method', 'identitysignins_user_authentication_get_security_question_met'
                         'hod')
        g.custom_command('get-temporary-access-pass-method', 'identitysignins_user_authentication_get_temporary_access_'
                         'pass_method')
        g.custom_command('list-email-method', 'identitysignins_user_authentication_list_email_method')
        g.custom_command('list-fido2-method', 'identitysignins_user_authentication_list_fido2_method')
        g.custom_command('list-method', 'identitysignins_user_authentication_list_method')
        g.custom_command('list-microsoft-authenticator-method', 'identitysignins_user_authentication_list_microsoft_aut'
                         'henticator_method')
        g.custom_command('list-oath-method', 'identitysignins_user_authentication_list_oath_method')
        g.custom_command('list-operation', 'identitysignins_user_authentication_list_operation')
        g.custom_command('list-password-method', 'identitysignins_user_authentication_list_password_method')
        g.custom_command('list-passwordless-microsoft-authenticator-method', 'identitysignins_user_authentication_list_'
                         'passwordless_microsoft_authenticator_method')
        g.custom_command('list-phone-method', 'identitysignins_user_authentication_list_phone_method')
        g.custom_command('list-security-question-method', 'identitysignins_user_authentication_list_security_question_m'
                         'ethod')
        g.custom_command('list-temporary-access-pass-method', 'identitysignins_user_authentication_list_temporary_acces'
                         's_pass_method')
        g.custom_command('update-email-method', 'identitysignins_user_authentication_update_email_method')
        g.custom_command('update-fido2-method', 'identitysignins_user_authentication_update_fido2_method')
        g.custom_command('update-method', 'identitysignins_user_authentication_update_method')
        g.custom_command('update-microsoft-authenticator-method', 'identitysignins_user_authentication_update_microsoft'
                         '_authenticator_method')
        g.custom_command('update-oath-method', 'identitysignins_user_authentication_update_oath_method')
        g.custom_command('update-operation', 'identitysignins_user_authentication_update_operation')
        g.custom_command('update-password-method', 'identitysignins_user_authentication_update_password_method')
        g.custom_command('update-passwordless-microsoft-authenticator-method', 'identitysignins_user_authentication_upd'
                         'ate_passwordless_microsoft_authenticator_method')
        g.custom_command('update-phone-method', 'identitysignins_user_authentication_update_phone_method')
        g.custom_command('update-security-question-method', 'identitysignins_user_authentication_update_security_questi'
                         'on_method')
        g.custom_command('update-temporary-access-pass-method', 'identitysignins_user_authentication_update_temporary_a'
                         'ccess_pass_method')
