# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class InformationProtectionPolicyLabelOperations(object):
    """InformationProtectionPolicyLabelOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~identity_sign_ins.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def evaluate_application(
        self,
        assignment_method=None,  # type: Optional[Union[str, "models.MicrosoftGraphAssignmentMethod"]]
        downgrade_justification=None,  # type: Optional["models.MicrosoftGraphDowngradeJustification"]
        extended_properties=None,  # type: Optional[List["models.MicrosoftGraphKeyValuePair"]]
        label_id=None,  # type: Optional[str]
        format=None,  # type: Optional[Union[str, "models.MicrosoftGraphContentFormat"]]
        identifier=None,  # type: Optional[str]
        metadata=None,  # type: Optional[List["models.MicrosoftGraphKeyValuePair"]]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphContentState"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> List[Dict[str, object]]
        """Invoke action evaluateApplication.

        Invoke action evaluateApplication.

        :param assignment_method:
        :type assignment_method: str or ~identity_sign_ins.models.MicrosoftGraphAssignmentMethod
        :param downgrade_justification: downgradeJustification.
        :type downgrade_justification: ~identity_sign_ins.models.MicrosoftGraphDowngradeJustification
        :param extended_properties:
        :type extended_properties: list[~identity_sign_ins.models.MicrosoftGraphKeyValuePair]
        :param label_id:
        :type label_id: str
        :param format:
        :type format: str or ~identity_sign_ins.models.MicrosoftGraphContentFormat
        :param identifier:
        :type identifier: str
        :param metadata:
        :type metadata: list[~identity_sign_ins.models.MicrosoftGraphKeyValuePair]
        :param state:
        :type state: str or ~identity_sign_ins.models.MicrosoftGraphContentState
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of dict mapping str to object, or the result of cls(response)
        :rtype: list[dict[str, object]]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List[Dict[str, object]]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths1Aushj1InformationprotectionPolicyLabelsMicrosoftGraphEvaluateapplicationPostRequestbodyContentApplicationJsonSchema(assignment_method=assignment_method, downgrade_justification=downgrade_justification, extended_properties=extended_properties, label_id=label_id, format=format, identifier=identifier, metadata=metadata, state=state)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.evaluate_application.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths1Aushj1InformationprotectionPolicyLabelsMicrosoftGraphEvaluateapplicationPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[{object}]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    evaluate_application.metadata = {'url': '/informationProtection/policy/labels/microsoft.graph.evaluateApplication'}  # type: ignore

    def evaluate_classification_result(
        self,
        classification_results=None,  # type: Optional[List["models.MicrosoftGraphClassificationResult"]]
        format=None,  # type: Optional[Union[str, "models.MicrosoftGraphContentFormat"]]
        identifier=None,  # type: Optional[str]
        metadata=None,  # type: Optional[List["models.MicrosoftGraphKeyValuePair"]]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphContentState"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> List[Dict[str, object]]
        """Invoke action evaluateClassificationResults.

        Invoke action evaluateClassificationResults.

        :param classification_results:
        :type classification_results: list[~identity_sign_ins.models.MicrosoftGraphClassificationResult]
        :param format:
        :type format: str or ~identity_sign_ins.models.MicrosoftGraphContentFormat
        :param identifier:
        :type identifier: str
        :param metadata:
        :type metadata: list[~identity_sign_ins.models.MicrosoftGraphKeyValuePair]
        :param state:
        :type state: str or ~identity_sign_ins.models.MicrosoftGraphContentState
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of dict mapping str to object, or the result of cls(response)
        :rtype: list[dict[str, object]]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List[Dict[str, object]]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsLeqqhcInformationprotectionPolicyLabelsMicrosoftGraphEvaluateclassificationresultsPostRequestbodyContentApplicationJsonSchema(classification_results=classification_results, format=format, identifier=identifier, metadata=metadata, state=state)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.evaluate_classification_result.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsLeqqhcInformationprotectionPolicyLabelsMicrosoftGraphEvaluateclassificationresultsPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[{object}]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    evaluate_classification_result.metadata = {'url': '/informationProtection/policy/labels/microsoft.graph.evaluateClassificationResults'}  # type: ignore

    def evaluate_removal(
        self,
        downgrade_justification=None,  # type: Optional["models.MicrosoftGraphDowngradeJustification"]
        format=None,  # type: Optional[Union[str, "models.MicrosoftGraphContentFormat"]]
        identifier=None,  # type: Optional[str]
        metadata=None,  # type: Optional[List["models.MicrosoftGraphKeyValuePair"]]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphContentState"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> List[Dict[str, object]]
        """Invoke action evaluateRemoval.

        Invoke action evaluateRemoval.

        :param downgrade_justification: downgradeJustification.
        :type downgrade_justification: ~identity_sign_ins.models.MicrosoftGraphDowngradeJustification
        :param format:
        :type format: str or ~identity_sign_ins.models.MicrosoftGraphContentFormat
        :param identifier:
        :type identifier: str
        :param metadata:
        :type metadata: list[~identity_sign_ins.models.MicrosoftGraphKeyValuePair]
        :param state:
        :type state: str or ~identity_sign_ins.models.MicrosoftGraphContentState
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of dict mapping str to object, or the result of cls(response)
        :rtype: list[dict[str, object]]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List[Dict[str, object]]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsZ22GcjInformationprotectionPolicyLabelsMicrosoftGraphEvaluateremovalPostRequestbodyContentApplicationJsonSchema(downgrade_justification=downgrade_justification, format=format, identifier=identifier, metadata=metadata, state=state)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.evaluate_removal.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsZ22GcjInformationprotectionPolicyLabelsMicrosoftGraphEvaluateremovalPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[{object}]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    evaluate_removal.metadata = {'url': '/informationProtection/policy/labels/microsoft.graph.evaluateRemoval'}  # type: ignore

    def extract_label(
        self,
        format=None,  # type: Optional[Union[str, "models.MicrosoftGraphContentFormat"]]
        identifier=None,  # type: Optional[str]
        metadata=None,  # type: Optional[List["models.MicrosoftGraphKeyValuePair"]]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphContentState"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphInformationProtectionContentLabel"
        """Invoke action extractLabel.

        Invoke action extractLabel.

        :param format:
        :type format: str or ~identity_sign_ins.models.MicrosoftGraphContentFormat
        :param identifier:
        :type identifier: str
        :param metadata:
        :type metadata: list[~identity_sign_ins.models.MicrosoftGraphKeyValuePair]
        :param state:
        :type state: str or ~identity_sign_ins.models.MicrosoftGraphContentState
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphInformationProtectionContentLabel, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.MicrosoftGraphInformationProtectionContentLabel
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphInformationProtectionContentLabel"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsBj48EsInformationprotectionPolicyLabelsMicrosoftGraphExtractlabelPostRequestbodyContentApplicationJsonSchema(format=format, identifier=identifier, metadata=metadata, state=state)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.extract_label.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsBj48EsInformationprotectionPolicyLabelsMicrosoftGraphExtractlabelPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphInformationProtectionContentLabel', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    extract_label.metadata = {'url': '/informationProtection/policy/labels/microsoft.graph.extractLabel'}  # type: ignore
