# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class InvitationInvitationOperations(object):
    """InvitationInvitationOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~identity_sign_ins.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_invitation(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum74"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum75"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum76"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfInvitation"]
        """Get entities from invitations.

        Get entities from invitations.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_sign_ins.models.Enum74]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum75]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_sign_ins.models.Enum76]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfInvitation or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~identity_sign_ins.models.CollectionOfInvitation]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfInvitation"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_invitation.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfInvitation', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_invitation.metadata = {'url': '/invitations'}  # type: ignore

    def create_invitation(
        self,
        id=None,  # type: Optional[str]
        invited_user_display_name=None,  # type: Optional[str]
        invited_user_email_address=None,  # type: Optional[str]
        invited_user_type=None,  # type: Optional[str]
        invite_redeem_url=None,  # type: Optional[str]
        invite_redirect_url=None,  # type: Optional[str]
        reset_redemption=None,  # type: Optional[bool]
        send_invitation_message=None,  # type: Optional[bool]
        status=None,  # type: Optional[str]
        invited_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        cc_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        customized_message_body=None,  # type: Optional[str]
        message_language=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphInvitation"
        """Add new entity to invitations.

        Add new entity to invitations.

        :param id: Read-only.
        :type id: str
        :param invited_user_display_name: The display name of the user being invited.
        :type invited_user_display_name: str
        :param invited_user_email_address: The email address of the user being invited. Required. The
         following special characters are not permitted in the email address:Tilde (~)Exclamation point
         (!)Number sign (#)Dollar sign ($)Percent (%)Circumflex (^)Ampersand (&)Asterisk (*)Parentheses
         (( ))Plus sign (+)Equal sign (=)Brackets ([ ])Braces ({ })Backslash (/)Slash mark (/)Pipe
         (/|)Semicolon (;)Colon (:)Quotation marks (')Angle brackets (< >)Question mark (?)Comma
         (,)However, the following exceptions apply:A period (.) or a hyphen (-) is permitted anywhere
         in the user name, except at the beginning or end of the name.An underscore (_) is permitted
         anywhere in the user name. This includes at the beginning or end of the name.
        :type invited_user_email_address: str
        :param invited_user_type: The userType of the user being invited. By default, this is Guest.
         You can invite as Member if you are a company administrator.
        :type invited_user_type: str
        :param invite_redeem_url: The URL the user can use to redeem their invitation. Read-only.
        :type invite_redeem_url: str
        :param invite_redirect_url: The URL the user should be redirected to once the invitation is
         redeemed. Required.
        :type invite_redirect_url: str
        :param reset_redemption:
        :type reset_redemption: bool
        :param send_invitation_message: Indicates whether an email should be sent to the user being
         invited or not. The default is false.
        :type send_invitation_message: bool
        :param status: The status of the invitation. Possible values: PendingAcceptance, Completed,
         InProgress, and Error.
        :type status: str
        :param invited_user: Represents an Azure Active Directory user object.
        :type invited_user: ~identity_sign_ins.models.MicrosoftGraphUser
        :param cc_recipients: Additional recipients the invitation message should be sent to. Currently
         only 1 additional recipient is supported.
        :type cc_recipients: list[~identity_sign_ins.models.MicrosoftGraphRecipient]
        :param customized_message_body: Customized message body you want to send if you don't want the
         default message.
        :type customized_message_body: str
        :param message_language: The language you want to send the default message in. If the
         customizedMessageBody is specified, this property is ignored, and the message is sent using the
         customizedMessageBody. The language format should be in ISO 639. The default is en-US.
        :type message_language: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphInvitation, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.MicrosoftGraphInvitation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphInvitation"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphInvitation(id=id, invited_user_display_name=invited_user_display_name, invited_user_email_address=invited_user_email_address, invited_user_type=invited_user_type, invite_redeem_url=invite_redeem_url, invite_redirect_url=invite_redirect_url, reset_redemption=reset_redemption, send_invitation_message=send_invitation_message, status=status, invited_user=invited_user, cc_recipients=cc_recipients, customized_message_body=customized_message_body, message_language=message_language)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_invitation.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphInvitation')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphInvitation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_invitation.metadata = {'url': '/invitations'}  # type: ignore

    def get_invitation(
        self,
        invitation_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum188"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum189"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphInvitation"
        """Get entity from invitations by key.

        Get entity from invitations by key.

        :param invitation_id: key: id of invitation.
        :type invitation_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum188]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_sign_ins.models.Enum189]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphInvitation, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.MicrosoftGraphInvitation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphInvitation"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_invitation.metadata['url']  # type: ignore
        path_format_arguments = {
            'invitation-id': self._serialize.url("invitation_id", invitation_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphInvitation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_invitation.metadata = {'url': '/invitations/{invitation-id}'}  # type: ignore

    def update_invitation(
        self,
        invitation_id,  # type: str
        id=None,  # type: Optional[str]
        invited_user_display_name=None,  # type: Optional[str]
        invited_user_email_address=None,  # type: Optional[str]
        invited_user_type=None,  # type: Optional[str]
        invite_redeem_url=None,  # type: Optional[str]
        invite_redirect_url=None,  # type: Optional[str]
        reset_redemption=None,  # type: Optional[bool]
        send_invitation_message=None,  # type: Optional[bool]
        status=None,  # type: Optional[str]
        invited_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        cc_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        customized_message_body=None,  # type: Optional[str]
        message_language=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update entity in invitations.

        Update entity in invitations.

        :param invitation_id: key: id of invitation.
        :type invitation_id: str
        :param id: Read-only.
        :type id: str
        :param invited_user_display_name: The display name of the user being invited.
        :type invited_user_display_name: str
        :param invited_user_email_address: The email address of the user being invited. Required. The
         following special characters are not permitted in the email address:Tilde (~)Exclamation point
         (!)Number sign (#)Dollar sign ($)Percent (%)Circumflex (^)Ampersand (&)Asterisk (*)Parentheses
         (( ))Plus sign (+)Equal sign (=)Brackets ([ ])Braces ({ })Backslash (/)Slash mark (/)Pipe
         (/|)Semicolon (;)Colon (:)Quotation marks (')Angle brackets (< >)Question mark (?)Comma
         (,)However, the following exceptions apply:A period (.) or a hyphen (-) is permitted anywhere
         in the user name, except at the beginning or end of the name.An underscore (_) is permitted
         anywhere in the user name. This includes at the beginning or end of the name.
        :type invited_user_email_address: str
        :param invited_user_type: The userType of the user being invited. By default, this is Guest.
         You can invite as Member if you are a company administrator.
        :type invited_user_type: str
        :param invite_redeem_url: The URL the user can use to redeem their invitation. Read-only.
        :type invite_redeem_url: str
        :param invite_redirect_url: The URL the user should be redirected to once the invitation is
         redeemed. Required.
        :type invite_redirect_url: str
        :param reset_redemption:
        :type reset_redemption: bool
        :param send_invitation_message: Indicates whether an email should be sent to the user being
         invited or not. The default is false.
        :type send_invitation_message: bool
        :param status: The status of the invitation. Possible values: PendingAcceptance, Completed,
         InProgress, and Error.
        :type status: str
        :param invited_user: Represents an Azure Active Directory user object.
        :type invited_user: ~identity_sign_ins.models.MicrosoftGraphUser
        :param cc_recipients: Additional recipients the invitation message should be sent to. Currently
         only 1 additional recipient is supported.
        :type cc_recipients: list[~identity_sign_ins.models.MicrosoftGraphRecipient]
        :param customized_message_body: Customized message body you want to send if you don't want the
         default message.
        :type customized_message_body: str
        :param message_language: The language you want to send the default message in. If the
         customizedMessageBody is specified, this property is ignored, and the message is sent using the
         customizedMessageBody. The language format should be in ISO 639. The default is en-US.
        :type message_language: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphInvitation(id=id, invited_user_display_name=invited_user_display_name, invited_user_email_address=invited_user_email_address, invited_user_type=invited_user_type, invite_redeem_url=invite_redeem_url, invite_redirect_url=invite_redirect_url, reset_redemption=reset_redemption, send_invitation_message=send_invitation_message, status=status, invited_user=invited_user, cc_recipients=cc_recipients, customized_message_body=customized_message_body, message_language=message_language)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_invitation.metadata['url']  # type: ignore
        path_format_arguments = {
            'invitation-id': self._serialize.url("invitation_id", invitation_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphInvitation')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_invitation.metadata = {'url': '/invitations/{invitation-id}'}  # type: ignore

    def delete_invitation(
        self,
        invitation_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete entity from invitations.

        Delete entity from invitations.

        :param invitation_id: key: id of invitation.
        :type invitation_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_invitation.metadata['url']  # type: ignore
        path_format_arguments = {
            'invitation-id': self._serialize.url("invitation_id", invitation_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_invitation.metadata = {'url': '/invitations/{invitation-id}'}  # type: ignore
