# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.core import AsyncPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

from ._configuration import IdentitySignInsConfiguration
from .operations import datapolicyoperationsdatapolicyoperationOperations
from .operations import identityOperations
from .operations import identityconditionalaccessOperations
from .operations import identityprovidersidentityproviderOperations
from .operations import identityprovidersOperations
from .operations import informationprotectioninformationprotectionOperations
from .operations import informationprotectionOperations
from .operations import informationprotectiondatalosspreventionpoliciesOperations
from .operations import informationprotectionpolicyOperations
from .operations import informationprotectionpolicylabelsOperations
from .operations import informationprotectionsensitivitylabelsOperations
from .operations import informationprotectionsensitivitylabelssublabelsOperations
from .operations import informationprotectionthreatassessmentrequestsOperations
from .operations import invitationsinvitationOperations
from .operations import invitationsOperations
from .operations import oauth2permissiongrantsoauth2permissiongrantOperations
from .operations import oauth2permissiongrantsOperations
from .operations import organizationOperations
from .operations import policiespolicyrootOperations
from .operations import policiesOperations
from .operations import policiespermissiongrantpoliciesOperations
from .operations import riskdetectionsriskdetectionOperations
from .operations import riskyusersriskyuserOperations
from .operations import riskyusersOperations
from .operations import trustframeworktrustframeworkOperations
from .operations import trustframeworkOperations
from .operations import trustframeworkkeysetsOperations
from .operations import usersOperations
from .operations import usersauthenticationOperations
from .. import models


class IdentitySignIns(object):
    """IdentitySignIns.

    :ivar datapolicyoperationsdatapolicyoperation: datapolicyoperationsdatapolicyoperationOperations operations
    :vartype datapolicyoperationsdatapolicyoperation: identity_sign_ins.aio.operations.datapolicyoperationsdatapolicyoperationOperations
    :ivar identity: identityOperations operations
    :vartype identity: identity_sign_ins.aio.operations.identityOperations
    :ivar identityconditionalaccess: identityconditionalaccessOperations operations
    :vartype identityconditionalaccess: identity_sign_ins.aio.operations.identityconditionalaccessOperations
    :ivar identityprovidersidentityprovider: identityprovidersidentityproviderOperations operations
    :vartype identityprovidersidentityprovider: identity_sign_ins.aio.operations.identityprovidersidentityproviderOperations
    :ivar identityproviders: identityprovidersOperations operations
    :vartype identityproviders: identity_sign_ins.aio.operations.identityprovidersOperations
    :ivar informationprotectioninformationprotection: informationprotectioninformationprotectionOperations operations
    :vartype informationprotectioninformationprotection: identity_sign_ins.aio.operations.informationprotectioninformationprotectionOperations
    :ivar informationprotection: informationprotectionOperations operations
    :vartype informationprotection: identity_sign_ins.aio.operations.informationprotectionOperations
    :ivar informationprotectiondatalosspreventionpolicies: informationprotectiondatalosspreventionpoliciesOperations operations
    :vartype informationprotectiondatalosspreventionpolicies: identity_sign_ins.aio.operations.informationprotectiondatalosspreventionpoliciesOperations
    :ivar informationprotectionpolicy: informationprotectionpolicyOperations operations
    :vartype informationprotectionpolicy: identity_sign_ins.aio.operations.informationprotectionpolicyOperations
    :ivar informationprotectionpolicylabels: informationprotectionpolicylabelsOperations operations
    :vartype informationprotectionpolicylabels: identity_sign_ins.aio.operations.informationprotectionpolicylabelsOperations
    :ivar informationprotectionsensitivitylabels: informationprotectionsensitivitylabelsOperations operations
    :vartype informationprotectionsensitivitylabels: identity_sign_ins.aio.operations.informationprotectionsensitivitylabelsOperations
    :ivar informationprotectionsensitivitylabelssublabels: informationprotectionsensitivitylabelssublabelsOperations operations
    :vartype informationprotectionsensitivitylabelssublabels: identity_sign_ins.aio.operations.informationprotectionsensitivitylabelssublabelsOperations
    :ivar informationprotectionthreatassessmentrequests: informationprotectionthreatassessmentrequestsOperations operations
    :vartype informationprotectionthreatassessmentrequests: identity_sign_ins.aio.operations.informationprotectionthreatassessmentrequestsOperations
    :ivar invitationsinvitation: invitationsinvitationOperations operations
    :vartype invitationsinvitation: identity_sign_ins.aio.operations.invitationsinvitationOperations
    :ivar invitations: invitationsOperations operations
    :vartype invitations: identity_sign_ins.aio.operations.invitationsOperations
    :ivar oauth2permissiongrantsoauth2permissiongrant: oauth2permissiongrantsoauth2permissiongrantOperations operations
    :vartype oauth2permissiongrantsoauth2permissiongrant: identity_sign_ins.aio.operations.oauth2permissiongrantsoauth2permissiongrantOperations
    :ivar oauth2permissiongrants: oauth2permissiongrantsOperations operations
    :vartype oauth2permissiongrants: identity_sign_ins.aio.operations.oauth2permissiongrantsOperations
    :ivar organization: organizationOperations operations
    :vartype organization: identity_sign_ins.aio.operations.organizationOperations
    :ivar policiespolicyroot: policiespolicyrootOperations operations
    :vartype policiespolicyroot: identity_sign_ins.aio.operations.policiespolicyrootOperations
    :ivar policies: policiesOperations operations
    :vartype policies: identity_sign_ins.aio.operations.policiesOperations
    :ivar policiespermissiongrantpolicies: policiespermissiongrantpoliciesOperations operations
    :vartype policiespermissiongrantpolicies: identity_sign_ins.aio.operations.policiespermissiongrantpoliciesOperations
    :ivar riskdetectionsriskdetection: riskdetectionsriskdetectionOperations operations
    :vartype riskdetectionsriskdetection: identity_sign_ins.aio.operations.riskdetectionsriskdetectionOperations
    :ivar riskyusersriskyuser: riskyusersriskyuserOperations operations
    :vartype riskyusersriskyuser: identity_sign_ins.aio.operations.riskyusersriskyuserOperations
    :ivar riskyusers: riskyusersOperations operations
    :vartype riskyusers: identity_sign_ins.aio.operations.riskyusersOperations
    :ivar trustframeworktrustframework: trustframeworktrustframeworkOperations operations
    :vartype trustframeworktrustframework: identity_sign_ins.aio.operations.trustframeworktrustframeworkOperations
    :ivar trustframework: trustframeworkOperations operations
    :vartype trustframework: identity_sign_ins.aio.operations.trustframeworkOperations
    :ivar trustframeworkkeysets: trustframeworkkeysetsOperations operations
    :vartype trustframeworkkeysets: identity_sign_ins.aio.operations.trustframeworkkeysetsOperations
    :ivar users: usersOperations operations
    :vartype users: identity_sign_ins.aio.operations.usersOperations
    :ivar usersauthentication: usersauthenticationOperations operations
    :vartype usersauthentication: identity_sign_ins.aio.operations.usersauthenticationOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param top: Show only the first n items.
    :type top: int
    :param skip: Skip the first n items.
    :type skip: int
    :param search: Search items by search phrases.
    :type search: str
    :param filter: Filter items by property values.
    :type filter: str
    :param count: Include count of items.
    :type count: bool
    :param str base_url: Service URL
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://graph.microsoft.com/beta'
        self._config = IdentitySignInsConfiguration(credential, top, skip, search, filter, count, **kwargs)
        self._client = AsyncPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.datapolicyoperationsdatapolicyoperation = datapolicyoperationsdatapolicyoperationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.identity = identityOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.identityconditionalaccess = identityconditionalaccessOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.identityprovidersidentityprovider = identityprovidersidentityproviderOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.identityproviders = identityprovidersOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.informationprotectioninformationprotection = informationprotectioninformationprotectionOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.informationprotection = informationprotectionOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.informationprotectiondatalosspreventionpolicies = informationprotectiondatalosspreventionpoliciesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.informationprotectionpolicy = informationprotectionpolicyOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.informationprotectionpolicylabels = informationprotectionpolicylabelsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.informationprotectionsensitivitylabels = informationprotectionsensitivitylabelsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.informationprotectionsensitivitylabelssublabels = informationprotectionsensitivitylabelssublabelsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.informationprotectionthreatassessmentrequests = informationprotectionthreatassessmentrequestsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.invitationsinvitation = invitationsinvitationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.invitations = invitationsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.oauth2permissiongrantsoauth2permissiongrant = oauth2permissiongrantsoauth2permissiongrantOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.oauth2permissiongrants = oauth2permissiongrantsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.organization = organizationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.policiespolicyroot = policiespolicyrootOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.policies = policiesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.policiespermissiongrantpolicies = policiespermissiongrantpoliciesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.riskdetectionsriskdetection = riskdetectionsriskdetectionOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.riskyusersriskyuser = riskyusersriskyuserOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.riskyusers = riskyusersOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.trustframeworktrustframework = trustframeworktrustframeworkOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.trustframework = trustframeworkOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.trustframeworkkeysets = trustframeworkkeysetsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.users = usersOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.usersauthentication = usersauthenticationOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "IdentitySignIns":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
