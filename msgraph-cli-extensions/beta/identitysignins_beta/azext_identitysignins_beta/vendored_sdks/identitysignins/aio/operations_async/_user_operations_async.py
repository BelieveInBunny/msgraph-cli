# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class UserOperations:
    """UserOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~identity_sign_ins.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def get_authentication(
        self,
        user_id: str,
        select: Optional[List[Union[str, "models.Enum277"]]] = None,
        expand: Optional[List[Union[str, "models.Enum278"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphAuthentication":
        """Get authentication from users.

        Get authentication from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum277]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_sign_ins.models.Enum278]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAuthentication, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.MicrosoftGraphAuthentication
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAuthentication"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_authentication.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAuthentication', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_authentication.metadata = {'url': '/users/{user-id}/authentication'}  # type: ignore

    async def update_authentication(
        self,
        user_id: str,
        id: Optional[str] = None,
        email_methods: Optional[List["models.MicrosoftGraphEmailAuthenticationMethod"]] = None,
        fido2_methods: Optional[List["models.MicrosoftGraphFido2AuthenticationMethod"]] = None,
        methods: Optional[List["models.MicrosoftGraphAuthenticationMethod"]] = None,
        microsoft_authenticator_methods: Optional[List["models.MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod"]] = None,
        oath_methods: Optional[List["models.MicrosoftGraphSoftwareOathAuthenticationMethod"]] = None,
        operations: Optional[List["models.MicrosoftGraphLongRunningOperation"]] = None,
        passwordless_microsoft_authenticator_methods: Optional[List["models.MicrosoftGraphPasswordlessMicrosoftAuthenticatorAuthenticationMethod"]] = None,
        password_methods: Optional[List["models.MicrosoftGraphPasswordAuthenticationMethod"]] = None,
        phone_methods: Optional[List["models.MicrosoftGraphPhoneAuthenticationMethod"]] = None,
        security_question_methods: Optional[List["models.MicrosoftGraphSecurityQuestionAuthenticationMethod"]] = None,
        temporary_access_pass_methods: Optional[List["models.MicrosoftGraphTemporaryAccessPassAuthenticationMethod"]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property authentication in users.

        Update the navigation property authentication in users.

        :param user_id: key: id of user.
        :type user_id: str
        :param id: Read-only.
        :type id: str
        :param email_methods:
        :type email_methods: list[~identity_sign_ins.models.MicrosoftGraphEmailAuthenticationMethod]
        :param fido2_methods:
        :type fido2_methods: list[~identity_sign_ins.models.MicrosoftGraphFido2AuthenticationMethod]
        :param methods:
        :type methods: list[~identity_sign_ins.models.MicrosoftGraphAuthenticationMethod]
        :param microsoft_authenticator_methods:
        :type microsoft_authenticator_methods: list[~identity_sign_ins.models.MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod]
        :param oath_methods:
        :type oath_methods: list[~identity_sign_ins.models.MicrosoftGraphSoftwareOathAuthenticationMethod]
        :param operations:
        :type operations: list[~identity_sign_ins.models.MicrosoftGraphLongRunningOperation]
        :param passwordless_microsoft_authenticator_methods:
        :type passwordless_microsoft_authenticator_methods: list[~identity_sign_ins.models.MicrosoftGraphPasswordlessMicrosoftAuthenticatorAuthenticationMethod]
        :param password_methods:
        :type password_methods: list[~identity_sign_ins.models.MicrosoftGraphPasswordAuthenticationMethod]
        :param phone_methods:
        :type phone_methods: list[~identity_sign_ins.models.MicrosoftGraphPhoneAuthenticationMethod]
        :param security_question_methods:
        :type security_question_methods: list[~identity_sign_ins.models.MicrosoftGraphSecurityQuestionAuthenticationMethod]
        :param temporary_access_pass_methods:
        :type temporary_access_pass_methods: list[~identity_sign_ins.models.MicrosoftGraphTemporaryAccessPassAuthenticationMethod]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphAuthentication(id=id, email_methods=email_methods, fido2_methods=fido2_methods, methods=methods, microsoft_authenticator_methods=microsoft_authenticator_methods, oath_methods=oath_methods, operations=operations, passwordless_microsoft_authenticator_methods=passwordless_microsoft_authenticator_methods, password_methods=password_methods, phone_methods=phone_methods, security_question_methods=security_question_methods, temporary_access_pass_methods=temporary_access_pass_methods)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_authentication.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphAuthentication')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_authentication.metadata = {'url': '/users/{user-id}/authentication'}  # type: ignore

    async def delete_authentication(
        self,
        user_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property authentication for users.

        Delete navigation property authentication for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_authentication.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_authentication.metadata = {'url': '/users/{user-id}/authentication'}  # type: ignore

    async def get_information_protection(
        self,
        user_id: str,
        select: Optional[List[Union[str, "models.Enum296"]]] = None,
        expand: Optional[List[Union[str, "models.Enum297"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphInformationProtection":
        """Get informationProtection from users.

        Get informationProtection from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum296]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_sign_ins.models.Enum297]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphInformationProtection, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.MicrosoftGraphInformationProtection
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphInformationProtection"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_information_protection.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphInformationProtection', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_information_protection.metadata = {'url': '/users/{user-id}/informationProtection'}  # type: ignore

    async def update_information_protection(
        self,
        user_id: str,
        id: Optional[str] = None,
        data_loss_prevention_policies: Optional[List["models.MicrosoftGraphDataLossPreventionPolicy"]] = None,
        sensitivity_labels: Optional[List["models.MicrosoftGraphSensitivityLabel"]] = None,
        sensitivity_policy_settings: Optional["models.MicrosoftGraphSensitivityPolicySettings"] = None,
        threat_assessment_requests: Optional[List["models.MicrosoftGraphThreatAssessmentRequest"]] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        labels: Optional[List["models.MicrosoftGraphInformationProtectionLabel"]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property informationProtection in users.

        Update the navigation property informationProtection in users.

        :param user_id: key: id of user.
        :type user_id: str
        :param id: Read-only.
        :type id: str
        :param data_loss_prevention_policies:
        :type data_loss_prevention_policies: list[~identity_sign_ins.models.MicrosoftGraphDataLossPreventionPolicy]
        :param sensitivity_labels:
        :type sensitivity_labels: list[~identity_sign_ins.models.MicrosoftGraphSensitivityLabel]
        :param sensitivity_policy_settings: sensitivityPolicySettings.
        :type sensitivity_policy_settings: ~identity_sign_ins.models.MicrosoftGraphSensitivityPolicySettings
        :param threat_assessment_requests:
        :type threat_assessment_requests: list[~identity_sign_ins.models.MicrosoftGraphThreatAssessmentRequest]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param labels:
        :type labels: list[~identity_sign_ins.models.MicrosoftGraphInformationProtectionLabel]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphInformationProtection(id=id, data_loss_prevention_policies=data_loss_prevention_policies, sensitivity_labels=sensitivity_labels, sensitivity_policy_settings=sensitivity_policy_settings, threat_assessment_requests=threat_assessment_requests, id_policy_id=microsoft_graph_entity_id, labels=labels)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_information_protection.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphInformationProtection')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_information_protection.metadata = {'url': '/users/{user-id}/informationProtection'}  # type: ignore

    async def delete_information_protection(
        self,
        user_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property informationProtection for users.

        Delete navigation property informationProtection for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_information_protection.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_information_protection.metadata = {'url': '/users/{user-id}/informationProtection'}  # type: ignore
