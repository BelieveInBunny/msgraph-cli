# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class InformationProtectionOperations:
    """InformationProtectionOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~identity_sign_ins.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_data_loss_prevention_policy(
        self,
        orderby: Optional[List[Union[str, "models.Enum37"]]] = None,
        select: Optional[List[Union[str, "models.Enum38"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfDataLossPreventionPolicy"]:
        """Get dataLossPreventionPolicies from informationProtection.

        Get dataLossPreventionPolicies from informationProtection.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_sign_ins.models.Enum37]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum38]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfDataLossPreventionPolicy or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~identity_sign_ins.models.CollectionOfDataLossPreventionPolicy]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfDataLossPreventionPolicy"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_data_loss_prevention_policy.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfDataLossPreventionPolicy', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_data_loss_prevention_policy.metadata = {'url': '/informationProtection/dataLossPreventionPolicies'}  # type: ignore

    async def create_data_loss_prevention_policy(
        self,
        id: Optional[str] = None,
        name: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphDataLossPreventionPolicy":
        """Create new navigation property to dataLossPreventionPolicies for informationProtection.

        Create new navigation property to dataLossPreventionPolicies for informationProtection.

        :param id: Read-only.
        :type id: str
        :param name:
        :type name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphDataLossPreventionPolicy, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.MicrosoftGraphDataLossPreventionPolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphDataLossPreventionPolicy"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphDataLossPreventionPolicy(id=id, name=name)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_data_loss_prevention_policy.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphDataLossPreventionPolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphDataLossPreventionPolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_data_loss_prevention_policy.metadata = {'url': '/informationProtection/dataLossPreventionPolicies'}  # type: ignore

    async def get_data_loss_prevention_policy(
        self,
        data_loss_prevention_policy_id: str,
        select: Optional[List[Union[str, "models.Enum39"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphDataLossPreventionPolicy":
        """Get dataLossPreventionPolicies from informationProtection.

        Get dataLossPreventionPolicies from informationProtection.

        :param data_loss_prevention_policy_id: key: id of dataLossPreventionPolicy.
        :type data_loss_prevention_policy_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum39]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphDataLossPreventionPolicy, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.MicrosoftGraphDataLossPreventionPolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphDataLossPreventionPolicy"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_data_loss_prevention_policy.metadata['url']  # type: ignore
        path_format_arguments = {
            'dataLossPreventionPolicy-id': self._serialize.url("data_loss_prevention_policy_id", data_loss_prevention_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphDataLossPreventionPolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_data_loss_prevention_policy.metadata = {'url': '/informationProtection/dataLossPreventionPolicies/{dataLossPreventionPolicy-id}'}  # type: ignore

    async def update_data_loss_prevention_policy(
        self,
        data_loss_prevention_policy_id: str,
        id: Optional[str] = None,
        name: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property dataLossPreventionPolicies in informationProtection.

        Update the navigation property dataLossPreventionPolicies in informationProtection.

        :param data_loss_prevention_policy_id: key: id of dataLossPreventionPolicy.
        :type data_loss_prevention_policy_id: str
        :param id: Read-only.
        :type id: str
        :param name:
        :type name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphDataLossPreventionPolicy(id=id, name=name)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_data_loss_prevention_policy.metadata['url']  # type: ignore
        path_format_arguments = {
            'dataLossPreventionPolicy-id': self._serialize.url("data_loss_prevention_policy_id", data_loss_prevention_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphDataLossPreventionPolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_data_loss_prevention_policy.metadata = {'url': '/informationProtection/dataLossPreventionPolicies/{dataLossPreventionPolicy-id}'}  # type: ignore

    async def delete_data_loss_prevention_policy(
        self,
        data_loss_prevention_policy_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property dataLossPreventionPolicies for informationProtection.

        Delete navigation property dataLossPreventionPolicies for informationProtection.

        :param data_loss_prevention_policy_id: key: id of dataLossPreventionPolicy.
        :type data_loss_prevention_policy_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_data_loss_prevention_policy.metadata['url']  # type: ignore
        path_format_arguments = {
            'dataLossPreventionPolicy-id': self._serialize.url("data_loss_prevention_policy_id", data_loss_prevention_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_data_loss_prevention_policy.metadata = {'url': '/informationProtection/dataLossPreventionPolicies/{dataLossPreventionPolicy-id}'}  # type: ignore

    async def evaluate_label_and_policy(
        self,
        classify_text: Optional["models.MicrosoftGraphTextClassificationRequest"] = None,
        evaluation_input: Optional["models.MicrosoftGraphDlpEvaluationInput"] = None,
        notification_info: Optional["models.MicrosoftGraphDlpNotification"] = None,
        target: Optional[str] = None,
        current_label: Optional["models.MicrosoftGraphCurrentLabel"] = None,
        discovered_sensitive_types: Optional[List["models.MicrosoftGraphDiscoveredSensitiveType"]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEvaluateLabelsAndPoliciesJobResponse":
        """Invoke action evaluateLabelsAndPolicies.

        Invoke action evaluateLabelsAndPolicies.

        :param classify_text: textClassificationRequest.
        :type classify_text: ~identity_sign_ins.models.MicrosoftGraphTextClassificationRequest
        :param evaluation_input: dlpEvaluationInput.
        :type evaluation_input: ~identity_sign_ins.models.MicrosoftGraphDlpEvaluationInput
        :param notification_info: dlpNotification.
        :type notification_info: ~identity_sign_ins.models.MicrosoftGraphDlpNotification
        :param target:
        :type target: str
        :param current_label: currentLabel.
        :type current_label: ~identity_sign_ins.models.MicrosoftGraphCurrentLabel
        :param discovered_sensitive_types:
        :type discovered_sensitive_types: list[~identity_sign_ins.models.MicrosoftGraphDiscoveredSensitiveType]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEvaluateLabelsAndPoliciesJobResponse, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.MicrosoftGraphEvaluateLabelsAndPoliciesJobResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEvaluateLabelsAndPoliciesJobResponse"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsU4Eih0InformationprotectionMicrosoftGraphEvaluatelabelsandpoliciesPostRequestbodyContentApplicationJsonSchema(classify_text=classify_text, evaluation_input=evaluation_input, notification_info=notification_info, target=target, current_label=current_label, discovered_sensitive_types=discovered_sensitive_types)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.evaluate_label_and_policy.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsU4Eih0InformationprotectionMicrosoftGraphEvaluatelabelsandpoliciesPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEvaluateLabelsAndPoliciesJobResponse', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    evaluate_label_and_policy.metadata = {'url': '/informationProtection/microsoft.graph.evaluateLabelsAndPolicies'}  # type: ignore

    async def get_policy(
        self,
        select: Optional[List[Union[str, "models.Enum47"]]] = None,
        expand: Optional[List[Union[str, "models.Enum48"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphInformationProtectionPolicy":
        """Get policy from informationProtection.

        Get policy from informationProtection.

        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum47]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_sign_ins.models.Enum48]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphInformationProtectionPolicy, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.MicrosoftGraphInformationProtectionPolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphInformationProtectionPolicy"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_policy.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphInformationProtectionPolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_policy.metadata = {'url': '/informationProtection/policy'}  # type: ignore

    async def update_policy(
        self,
        id: Optional[str] = None,
        labels: Optional[List["models.MicrosoftGraphInformationProtectionLabel"]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property policy in informationProtection.

        Update the navigation property policy in informationProtection.

        :param id: Read-only.
        :type id: str
        :param labels:
        :type labels: list[~identity_sign_ins.models.MicrosoftGraphInformationProtectionLabel]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphInformationProtectionPolicy(id=id, labels=labels)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_policy.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphInformationProtectionPolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_policy.metadata = {'url': '/informationProtection/policy'}  # type: ignore

    async def delete_policy(
        self,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property policy for informationProtection.

        Delete navigation property policy for informationProtection.

        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_policy.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_policy.metadata = {'url': '/informationProtection/policy'}  # type: ignore

    def list_sensitivity_label(
        self,
        orderby: Optional[List[Union[str, "models.Enum55"]]] = None,
        select: Optional[List[Union[str, "models.Enum56"]]] = None,
        expand: Optional[List[Union[str, "models.Enum57"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfSensitivityLabel"]:
        """Get sensitivityLabels from informationProtection.

        Get sensitivityLabels from informationProtection.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_sign_ins.models.Enum55]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum56]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_sign_ins.models.Enum57]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfSensitivityLabel or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~identity_sign_ins.models.CollectionOfSensitivityLabel]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfSensitivityLabel"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_sensitivity_label.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfSensitivityLabel', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_sensitivity_label.metadata = {'url': '/informationProtection/sensitivityLabels'}  # type: ignore

    async def create_sensitivity_label(
        self,
        id: Optional[str] = None,
        applicable_to: Optional[Union[str, "models.MicrosoftGraphSensitivityLabelTarget"]] = None,
        application_mode: Optional[Union[str, "models.MicrosoftGraphApplicationMode"]] = None,
        assigned_policies: Optional[List["models.MicrosoftGraphLabelPolicy"]] = None,
        auto_labeling: Optional["models.MicrosoftGraphAutoLabeling"] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        is_default: Optional[bool] = None,
        is_endpoint_protection_enabled: Optional[bool] = None,
        label_actions: Optional[List["models.MicrosoftGraphLabelActionBase"]] = None,
        name: Optional[str] = None,
        priority: Optional[int] = None,
        tool_tip: Optional[str] = None,
        sublabels: Optional[List["models.MicrosoftGraphSensitivityLabel"]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphSensitivityLabel":
        """Create new navigation property to sensitivityLabels for informationProtection.

        Create new navigation property to sensitivityLabels for informationProtection.

        :param id: Read-only.
        :type id: str
        :param applicable_to:
        :type applicable_to: str or ~identity_sign_ins.models.MicrosoftGraphSensitivityLabelTarget
        :param application_mode:
        :type application_mode: str or ~identity_sign_ins.models.MicrosoftGraphApplicationMode
        :param assigned_policies:
        :type assigned_policies: list[~identity_sign_ins.models.MicrosoftGraphLabelPolicy]
        :param auto_labeling: autoLabeling.
        :type auto_labeling: ~identity_sign_ins.models.MicrosoftGraphAutoLabeling
        :param description:
        :type description: str
        :param display_name:
        :type display_name: str
        :param is_default:
        :type is_default: bool
        :param is_endpoint_protection_enabled:
        :type is_endpoint_protection_enabled: bool
        :param label_actions:
        :type label_actions: list[~identity_sign_ins.models.MicrosoftGraphLabelActionBase]
        :param name:
        :type name: str
        :param priority:
        :type priority: int
        :param tool_tip:
        :type tool_tip: str
        :param sublabels:
        :type sublabels: list[~identity_sign_ins.models.MicrosoftGraphSensitivityLabel]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSensitivityLabel, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.MicrosoftGraphSensitivityLabel
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSensitivityLabel"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphSensitivityLabel(id=id, applicable_to=applicable_to, application_mode=application_mode, assigned_policies=assigned_policies, auto_labeling=auto_labeling, description=description, display_name=display_name, is_default=is_default, is_endpoint_protection_enabled=is_endpoint_protection_enabled, label_actions=label_actions, name=name, priority=priority, tool_tip=tool_tip, sublabels=sublabels)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_sensitivity_label.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphSensitivityLabel')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSensitivityLabel', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_sensitivity_label.metadata = {'url': '/informationProtection/sensitivityLabels'}  # type: ignore

    async def get_sensitivity_label(
        self,
        sensitivity_label_id: str,
        select: Optional[List[Union[str, "models.Enum58"]]] = None,
        expand: Optional[List[Union[str, "models.Enum59"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphSensitivityLabel":
        """Get sensitivityLabels from informationProtection.

        Get sensitivityLabels from informationProtection.

        :param sensitivity_label_id: key: id of sensitivityLabel.
        :type sensitivity_label_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum58]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_sign_ins.models.Enum59]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSensitivityLabel, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.MicrosoftGraphSensitivityLabel
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSensitivityLabel"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_sensitivity_label.metadata['url']  # type: ignore
        path_format_arguments = {
            'sensitivityLabel-id': self._serialize.url("sensitivity_label_id", sensitivity_label_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSensitivityLabel', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_sensitivity_label.metadata = {'url': '/informationProtection/sensitivityLabels/{sensitivityLabel-id}'}  # type: ignore

    async def update_sensitivity_label(
        self,
        sensitivity_label_id: str,
        id: Optional[str] = None,
        applicable_to: Optional[Union[str, "models.MicrosoftGraphSensitivityLabelTarget"]] = None,
        application_mode: Optional[Union[str, "models.MicrosoftGraphApplicationMode"]] = None,
        assigned_policies: Optional[List["models.MicrosoftGraphLabelPolicy"]] = None,
        auto_labeling: Optional["models.MicrosoftGraphAutoLabeling"] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        is_default: Optional[bool] = None,
        is_endpoint_protection_enabled: Optional[bool] = None,
        label_actions: Optional[List["models.MicrosoftGraphLabelActionBase"]] = None,
        name: Optional[str] = None,
        priority: Optional[int] = None,
        tool_tip: Optional[str] = None,
        sublabels: Optional[List["models.MicrosoftGraphSensitivityLabel"]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property sensitivityLabels in informationProtection.

        Update the navigation property sensitivityLabels in informationProtection.

        :param sensitivity_label_id: key: id of sensitivityLabel.
        :type sensitivity_label_id: str
        :param id: Read-only.
        :type id: str
        :param applicable_to:
        :type applicable_to: str or ~identity_sign_ins.models.MicrosoftGraphSensitivityLabelTarget
        :param application_mode:
        :type application_mode: str or ~identity_sign_ins.models.MicrosoftGraphApplicationMode
        :param assigned_policies:
        :type assigned_policies: list[~identity_sign_ins.models.MicrosoftGraphLabelPolicy]
        :param auto_labeling: autoLabeling.
        :type auto_labeling: ~identity_sign_ins.models.MicrosoftGraphAutoLabeling
        :param description:
        :type description: str
        :param display_name:
        :type display_name: str
        :param is_default:
        :type is_default: bool
        :param is_endpoint_protection_enabled:
        :type is_endpoint_protection_enabled: bool
        :param label_actions:
        :type label_actions: list[~identity_sign_ins.models.MicrosoftGraphLabelActionBase]
        :param name:
        :type name: str
        :param priority:
        :type priority: int
        :param tool_tip:
        :type tool_tip: str
        :param sublabels:
        :type sublabels: list[~identity_sign_ins.models.MicrosoftGraphSensitivityLabel]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphSensitivityLabel(id=id, applicable_to=applicable_to, application_mode=application_mode, assigned_policies=assigned_policies, auto_labeling=auto_labeling, description=description, display_name=display_name, is_default=is_default, is_endpoint_protection_enabled=is_endpoint_protection_enabled, label_actions=label_actions, name=name, priority=priority, tool_tip=tool_tip, sublabels=sublabels)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_sensitivity_label.metadata['url']  # type: ignore
        path_format_arguments = {
            'sensitivityLabel-id': self._serialize.url("sensitivity_label_id", sensitivity_label_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphSensitivityLabel')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_sensitivity_label.metadata = {'url': '/informationProtection/sensitivityLabels/{sensitivityLabel-id}'}  # type: ignore

    async def delete_sensitivity_label(
        self,
        sensitivity_label_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property sensitivityLabels for informationProtection.

        Delete navigation property sensitivityLabels for informationProtection.

        :param sensitivity_label_id: key: id of sensitivityLabel.
        :type sensitivity_label_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_sensitivity_label.metadata['url']  # type: ignore
        path_format_arguments = {
            'sensitivityLabel-id': self._serialize.url("sensitivity_label_id", sensitivity_label_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_sensitivity_label.metadata = {'url': '/informationProtection/sensitivityLabels/{sensitivityLabel-id}'}  # type: ignore

    async def get_sensitivity_policy_setting(
        self,
        select: Optional[List[Union[str, "models.Enum65"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphSensitivityPolicySettings":
        """Get sensitivityPolicySettings from informationProtection.

        Get sensitivityPolicySettings from informationProtection.

        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum65]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSensitivityPolicySettings, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.MicrosoftGraphSensitivityPolicySettings
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSensitivityPolicySettings"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_sensitivity_policy_setting.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSensitivityPolicySettings', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_sensitivity_policy_setting.metadata = {'url': '/informationProtection/sensitivityPolicySettings'}  # type: ignore

    async def update_sensitivity_policy_setting(
        self,
        id: Optional[str] = None,
        applicable_to: Optional[Union[str, "models.MicrosoftGraphSensitivityLabelTarget"]] = None,
        downgrade_sensitivity_requires_justification: Optional[bool] = None,
        help_web_url: Optional[str] = None,
        is_mandatory: Optional[bool] = None,
        **kwargs
    ) -> None:
        """Update the navigation property sensitivityPolicySettings in informationProtection.

        Update the navigation property sensitivityPolicySettings in informationProtection.

        :param id: Read-only.
        :type id: str
        :param applicable_to:
        :type applicable_to: str or ~identity_sign_ins.models.MicrosoftGraphSensitivityLabelTarget
        :param downgrade_sensitivity_requires_justification:
        :type downgrade_sensitivity_requires_justification: bool
        :param help_web_url:
        :type help_web_url: str
        :param is_mandatory:
        :type is_mandatory: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphSensitivityPolicySettings(id=id, applicable_to=applicable_to, downgrade_sensitivity_requires_justification=downgrade_sensitivity_requires_justification, help_web_url=help_web_url, is_mandatory=is_mandatory)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_sensitivity_policy_setting.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphSensitivityPolicySettings')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_sensitivity_policy_setting.metadata = {'url': '/informationProtection/sensitivityPolicySettings'}  # type: ignore

    async def delete_sensitivity_policy_setting(
        self,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property sensitivityPolicySettings for informationProtection.

        Delete navigation property sensitivityPolicySettings for informationProtection.

        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_sensitivity_policy_setting.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_sensitivity_policy_setting.metadata = {'url': '/informationProtection/sensitivityPolicySettings'}  # type: ignore

    def list_threat_assessment_request(
        self,
        orderby: Optional[List[Union[str, "models.Enum66"]]] = None,
        select: Optional[List[Union[str, "models.Enum67"]]] = None,
        expand: Optional[List[Union[str, "models.Enum68"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfThreatAssessmentRequest"]:
        """Get threatAssessmentRequests from informationProtection.

        Get threatAssessmentRequests from informationProtection.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_sign_ins.models.Enum66]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum67]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_sign_ins.models.Enum68]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfThreatAssessmentRequest or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~identity_sign_ins.models.CollectionOfThreatAssessmentRequest]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfThreatAssessmentRequest"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_threat_assessment_request.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfThreatAssessmentRequest', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_threat_assessment_request.metadata = {'url': '/informationProtection/threatAssessmentRequests'}  # type: ignore

    async def create_threat_assessment_request(
        self,
        id: Optional[str] = None,
        category: Optional[Union[str, "models.MicrosoftGraphThreatCategory"]] = None,
        content_type_parameter: Optional[Union[str, "models.MicrosoftGraphThreatAssessmentContentType"]] = None,
        created_date_time: Optional[datetime.datetime] = None,
        expected_assessment: Optional[Union[str, "models.MicrosoftGraphThreatExpectedAssessment"]] = None,
        request_source: Optional[Union[str, "models.MicrosoftGraphThreatAssessmentRequestSource"]] = None,
        status: Optional[Union[str, "models.MicrosoftGraphThreatAssessmentStatus"]] = None,
        results: Optional[List["models.MicrosoftGraphThreatAssessmentResult"]] = None,
        application: Optional["models.MicrosoftGraphIdentity"] = None,
        device: Optional["models.MicrosoftGraphIdentity"] = None,
        user: Optional["models.MicrosoftGraphIdentity"] = None,
        **kwargs
    ) -> "models.MicrosoftGraphThreatAssessmentRequest":
        """Create new navigation property to threatAssessmentRequests for informationProtection.

        Create new navigation property to threatAssessmentRequests for informationProtection.

        :param id: Read-only.
        :type id: str
        :param category:
        :type category: str or ~identity_sign_ins.models.MicrosoftGraphThreatCategory
        :param content_type_parameter:
        :type content_type_parameter: str or ~identity_sign_ins.models.MicrosoftGraphThreatAssessmentContentType
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param expected_assessment:
        :type expected_assessment: str or ~identity_sign_ins.models.MicrosoftGraphThreatExpectedAssessment
        :param request_source:
        :type request_source: str or ~identity_sign_ins.models.MicrosoftGraphThreatAssessmentRequestSource
        :param status:
        :type status: str or ~identity_sign_ins.models.MicrosoftGraphThreatAssessmentStatus
        :param results: A collection of threat assessment results. Read-only. By default, a GET
         /threatAssessmentRequests/{id} does not return this property unless you apply $expand on it.
        :type results: list[~identity_sign_ins.models.MicrosoftGraphThreatAssessmentResult]
        :param application: identity.
        :type application: ~identity_sign_ins.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~identity_sign_ins.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~identity_sign_ins.models.MicrosoftGraphIdentity
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphThreatAssessmentRequest, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.MicrosoftGraphThreatAssessmentRequest
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphThreatAssessmentRequest"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphThreatAssessmentRequest(id=id, category=category, content_type=content_type_parameter, created_date_time=created_date_time, expected_assessment=expected_assessment, request_source=request_source, status=status, results=results, application=application, device=device, user=user)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_threat_assessment_request.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphThreatAssessmentRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphThreatAssessmentRequest', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_threat_assessment_request.metadata = {'url': '/informationProtection/threatAssessmentRequests'}  # type: ignore

    async def get_threat_assessment_request(
        self,
        threat_assessment_request_id: str,
        select: Optional[List[Union[str, "models.Enum69"]]] = None,
        expand: Optional[List[Union[str, "models.Enum70"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphThreatAssessmentRequest":
        """Get threatAssessmentRequests from informationProtection.

        Get threatAssessmentRequests from informationProtection.

        :param threat_assessment_request_id: key: id of threatAssessmentRequest.
        :type threat_assessment_request_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum69]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_sign_ins.models.Enum70]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphThreatAssessmentRequest, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.MicrosoftGraphThreatAssessmentRequest
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphThreatAssessmentRequest"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_threat_assessment_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'threatAssessmentRequest-id': self._serialize.url("threat_assessment_request_id", threat_assessment_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphThreatAssessmentRequest', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_threat_assessment_request.metadata = {'url': '/informationProtection/threatAssessmentRequests/{threatAssessmentRequest-id}'}  # type: ignore

    async def update_threat_assessment_request(
        self,
        threat_assessment_request_id: str,
        id: Optional[str] = None,
        category: Optional[Union[str, "models.MicrosoftGraphThreatCategory"]] = None,
        content_type_parameter: Optional[Union[str, "models.MicrosoftGraphThreatAssessmentContentType"]] = None,
        created_date_time: Optional[datetime.datetime] = None,
        expected_assessment: Optional[Union[str, "models.MicrosoftGraphThreatExpectedAssessment"]] = None,
        request_source: Optional[Union[str, "models.MicrosoftGraphThreatAssessmentRequestSource"]] = None,
        status: Optional[Union[str, "models.MicrosoftGraphThreatAssessmentStatus"]] = None,
        results: Optional[List["models.MicrosoftGraphThreatAssessmentResult"]] = None,
        application: Optional["models.MicrosoftGraphIdentity"] = None,
        device: Optional["models.MicrosoftGraphIdentity"] = None,
        user: Optional["models.MicrosoftGraphIdentity"] = None,
        **kwargs
    ) -> None:
        """Update the navigation property threatAssessmentRequests in informationProtection.

        Update the navigation property threatAssessmentRequests in informationProtection.

        :param threat_assessment_request_id: key: id of threatAssessmentRequest.
        :type threat_assessment_request_id: str
        :param id: Read-only.
        :type id: str
        :param category:
        :type category: str or ~identity_sign_ins.models.MicrosoftGraphThreatCategory
        :param content_type_parameter:
        :type content_type_parameter: str or ~identity_sign_ins.models.MicrosoftGraphThreatAssessmentContentType
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param expected_assessment:
        :type expected_assessment: str or ~identity_sign_ins.models.MicrosoftGraphThreatExpectedAssessment
        :param request_source:
        :type request_source: str or ~identity_sign_ins.models.MicrosoftGraphThreatAssessmentRequestSource
        :param status:
        :type status: str or ~identity_sign_ins.models.MicrosoftGraphThreatAssessmentStatus
        :param results: A collection of threat assessment results. Read-only. By default, a GET
         /threatAssessmentRequests/{id} does not return this property unless you apply $expand on it.
        :type results: list[~identity_sign_ins.models.MicrosoftGraphThreatAssessmentResult]
        :param application: identity.
        :type application: ~identity_sign_ins.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~identity_sign_ins.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~identity_sign_ins.models.MicrosoftGraphIdentity
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphThreatAssessmentRequest(id=id, category=category, content_type=content_type_parameter, created_date_time=created_date_time, expected_assessment=expected_assessment, request_source=request_source, status=status, results=results, application=application, device=device, user=user)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_threat_assessment_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'threatAssessmentRequest-id': self._serialize.url("threat_assessment_request_id", threat_assessment_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphThreatAssessmentRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_threat_assessment_request.metadata = {'url': '/informationProtection/threatAssessmentRequests/{threatAssessmentRequest-id}'}  # type: ignore

    async def delete_threat_assessment_request(
        self,
        threat_assessment_request_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property threatAssessmentRequests for informationProtection.

        Delete navigation property threatAssessmentRequests for informationProtection.

        :param threat_assessment_request_id: key: id of threatAssessmentRequest.
        :type threat_assessment_request_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_threat_assessment_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'threatAssessmentRequest-id': self._serialize.url("threat_assessment_request_id", threat_assessment_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_threat_assessment_request.metadata = {'url': '/informationProtection/threatAssessmentRequests/{threatAssessmentRequest-id}'}  # type: ignore
