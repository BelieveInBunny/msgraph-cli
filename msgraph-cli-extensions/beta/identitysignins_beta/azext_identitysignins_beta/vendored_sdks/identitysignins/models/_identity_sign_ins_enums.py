# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class Enum14(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    MODIFIED_DATE_TIME = "modifiedDateTime"
    MODIFIED_DATE_TIME_DESC = "modifiedDateTime desc"

class Enum15(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    DISPLAY_NAME = "displayName"
    MODIFIED_DATE_TIME = "modifiedDateTime"

class Enum16(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    DISPLAY_NAME = "displayName"
    MODIFIED_DATE_TIME = "modifiedDateTime"

class Enum17(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CONDITIONS = "conditions"
    CONDITIONS_DESC = "conditions desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    GRANT_CONTROLS = "grantControls"
    GRANT_CONTROLS_DESC = "grantControls desc"
    MODIFIED_DATE_TIME = "modifiedDateTime"
    MODIFIED_DATE_TIME_DESC = "modifiedDateTime desc"
    SESSION_CONTROLS = "sessionControls"
    SESSION_CONTROLS_DESC = "sessionControls desc"
    STATE = "state"
    STATE_DESC = "state desc"

class Enum18(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONDITIONS = "conditions"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    GRANT_CONTROLS = "grantControls"
    MODIFIED_DATE_TIME = "modifiedDateTime"
    SESSION_CONTROLS = "sessionControls"
    STATE = "state"

class Enum188(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    INVITED_USER_DISPLAY_NAME = "invitedUserDisplayName"
    INVITED_USER_EMAIL_ADDRESS = "invitedUserEmailAddress"
    INVITED_USER_MESSAGE_INFO = "invitedUserMessageInfo"
    INVITED_USER_TYPE = "invitedUserType"
    INVITE_REDEEM_URL = "inviteRedeemUrl"
    INVITE_REDIRECT_URL = "inviteRedirectUrl"
    RESET_REDEMPTION = "resetRedemption"
    SEND_INVITATION_MESSAGE = "sendInvitationMessage"
    STATUS = "status"
    INVITED_USER = "invitedUser"

class Enum189(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    INVITED_USER = "invitedUser"

class Enum19(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONDITIONS = "conditions"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    GRANT_CONTROLS = "grantControls"
    MODIFIED_DATE_TIME = "modifiedDateTime"
    SESSION_CONTROLS = "sessionControls"
    STATE = "state"

class Enum190(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    SIGN_IN_ACTIVITY = "signInActivity"
    ACCOUNT_ENABLED = "accountEnabled"
    AGE_GROUP = "ageGroup"
    ASSIGNED_LICENSES = "assignedLicenses"
    ASSIGNED_PLANS = "assignedPlans"
    BUSINESS_PHONES = "businessPhones"
    CITY = "city"
    COMPANY_NAME = "companyName"
    CONSENT_PROVIDED_FOR_MINOR = "consentProvidedForMinor"
    COUNTRY = "country"
    CREATED_DATE_TIME = "createdDateTime"
    CREATION_TYPE = "creationType"
    DEPARTMENT = "department"
    DEVICE_KEYS = "deviceKeys"
    DISPLAY_NAME = "displayName"
    EMPLOYEE_HIRE_DATE = "employeeHireDate"
    EMPLOYEE_ID = "employeeId"
    EMPLOYEE_ORG_DATA = "employeeOrgData"
    EMPLOYEE_TYPE = "employeeType"
    EXTERNAL_USER_STATE = "externalUserState"
    EXTERNAL_USER_STATE_CHANGE_DATE_TIME = "externalUserStateChangeDateTime"
    FAX_NUMBER = "faxNumber"
    GIVEN_NAME = "givenName"
    IDENTITIES = "identities"
    IM_ADDRESSES = "imAddresses"
    INFO_CATALOGS = "infoCatalogs"
    IS_RESOURCE_ACCOUNT = "isResourceAccount"
    JOB_TITLE = "jobTitle"
    LAST_PASSWORD_CHANGE_DATE_TIME = "lastPasswordChangeDateTime"
    LEGAL_AGE_GROUP_CLASSIFICATION = "legalAgeGroupClassification"
    LICENSE_ASSIGNMENT_STATES = "licenseAssignmentStates"
    MAIL = "mail"
    MAIL_NICKNAME = "mailNickname"
    MOBILE_PHONE = "mobilePhone"
    OFFICE_LOCATION = "officeLocation"
    ON_PREMISES_DISTINGUISHED_NAME = "onPremisesDistinguishedName"
    ON_PREMISES_DOMAIN_NAME = "onPremisesDomainName"
    ON_PREMISES_EXTENSION_ATTRIBUTES = "onPremisesExtensionAttributes"
    ON_PREMISES_IMMUTABLE_ID = "onPremisesImmutableId"
    ON_PREMISES_LAST_SYNC_DATE_TIME = "onPremisesLastSyncDateTime"
    ON_PREMISES_PROVISIONING_ERRORS = "onPremisesProvisioningErrors"
    ON_PREMISES_SAM_ACCOUNT_NAME = "onPremisesSamAccountName"
    ON_PREMISES_SECURITY_IDENTIFIER = "onPremisesSecurityIdentifier"
    ON_PREMISES_SYNC_ENABLED = "onPremisesSyncEnabled"
    ON_PREMISES_USER_PRINCIPAL_NAME = "onPremisesUserPrincipalName"
    OTHER_MAILS = "otherMails"
    PASSWORD_POLICIES = "passwordPolicies"
    PASSWORD_PROFILE = "passwordProfile"
    POSTAL_CODE = "postalCode"
    PREFERRED_DATA_LOCATION = "preferredDataLocation"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PROVISIONED_PLANS = "provisionedPlans"
    PROXY_ADDRESSES = "proxyAddresses"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME = "refreshTokensValidFromDateTime"
    SHOW_IN_ADDRESS_LIST = "showInAddressList"
    SIGN_IN_SESSIONS_VALID_FROM_DATE_TIME = "signInSessionsValidFromDateTime"
    STATE = "state"
    STREET_ADDRESS = "streetAddress"
    SURNAME = "surname"
    USAGE_LOCATION = "usageLocation"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_TYPE = "userType"
    MAILBOX_SETTINGS = "mailboxSettings"
    DEVICE_ENROLLMENT_LIMIT = "deviceEnrollmentLimit"
    ABOUT_ME = "aboutMe"
    BIRTHDAY = "birthday"
    HIRE_DATE = "hireDate"
    INTERESTS = "interests"
    MY_SITE = "mySite"
    PAST_PROJECTS = "pastProjects"
    PREFERRED_NAME = "preferredName"
    RESPONSIBILITIES = "responsibilities"
    SCHOOLS = "schools"
    SKILLS = "skills"
    ANALYTICS = "analytics"
    INFORMATION_PROTECTION = "informationProtection"
    APP_ROLE_ASSIGNMENTS = "appRoleAssignments"
    CREATED_OBJECTS = "createdObjects"
    DIRECT_REPORTS = "directReports"
    LICENSE_DETAILS = "licenseDetails"
    MANAGER = "manager"
    MEMBER_OF = "memberOf"
    OWNED_DEVICES = "ownedDevices"
    OWNED_OBJECTS = "ownedObjects"
    REGISTERED_DEVICES = "registeredDevices"
    SCOPED_ROLE_MEMBER_OF = "scopedRoleMemberOf"
    TRANSITIVE_MEMBER_OF = "transitiveMemberOf"
    CALENDAR = "calendar"
    CALENDAR_GROUPS = "calendarGroups"
    CALENDARS = "calendars"
    CALENDAR_VIEW = "calendarView"
    CONTACT_FOLDERS = "contactFolders"
    CONTACTS = "contacts"
    EVENTS = "events"
    INFERENCE_CLASSIFICATION = "inferenceClassification"
    JOINED_GROUPS = "joinedGroups"
    MAIL_FOLDERS = "mailFolders"
    MESSAGES = "messages"
    OUTLOOK = "outlook"
    PEOPLE = "people"
    PHOTO = "photo"
    PHOTOS = "photos"
    DRIVE = "drive"
    DRIVES = "drives"
    FOLLOWED_SITES = "followedSites"
    EXTENSIONS = "extensions"
    APP_CONSENT_REQUESTS_FOR_APPROVAL = "appConsentRequestsForApproval"
    APPROVALS = "approvals"
    PENDING_ACCESS_REVIEW_INSTANCES = "pendingAccessReviewInstances"
    AGREEMENT_ACCEPTANCES = "agreementAcceptances"
    DEVICE_ENROLLMENT_CONFIGURATIONS = "deviceEnrollmentConfigurations"
    MANAGED_DEVICES = "managedDevices"
    MANAGED_APP_REGISTRATIONS = "managedAppRegistrations"
    WINDOWS_INFORMATION_PROTECTION_DEVICE_REGISTRATIONS = "windowsInformationProtectionDeviceRegistrations"
    DEVICE_MANAGEMENT_TROUBLESHOOTING_EVENTS = "deviceManagementTroubleshootingEvents"
    MOBILE_APP_INTENT_AND_STATES = "mobileAppIntentAndStates"
    MOBILE_APP_TROUBLESHOOTING_EVENTS = "mobileAppTroubleshootingEvents"
    NOTIFICATIONS = "notifications"
    PLANNER = "planner"
    INSIGHTS = "insights"
    SETTINGS = "settings"
    ONENOTE = "onenote"
    PROFILE = "profile"
    ACTIVITIES = "activities"
    DEVICES = "devices"
    ONLINE_MEETINGS = "onlineMeetings"
    PRESENCE = "presence"
    AUTHENTICATION = "authentication"
    CHATS = "chats"
    JOINED_TEAMS = "joinedTeams"
    TEAMWORK = "teamwork"
    TODO = "todo"

class Enum191(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ANALYTICS = "analytics"
    INFORMATION_PROTECTION = "informationProtection"
    APP_ROLE_ASSIGNMENTS = "appRoleAssignments"
    CREATED_OBJECTS = "createdObjects"
    DIRECT_REPORTS = "directReports"
    LICENSE_DETAILS = "licenseDetails"
    MANAGER = "manager"
    MEMBER_OF = "memberOf"
    OWNED_DEVICES = "ownedDevices"
    OWNED_OBJECTS = "ownedObjects"
    REGISTERED_DEVICES = "registeredDevices"
    SCOPED_ROLE_MEMBER_OF = "scopedRoleMemberOf"
    TRANSITIVE_MEMBER_OF = "transitiveMemberOf"
    CALENDAR = "calendar"
    CALENDAR_GROUPS = "calendarGroups"
    CALENDARS = "calendars"
    CALENDAR_VIEW = "calendarView"
    CONTACT_FOLDERS = "contactFolders"
    CONTACTS = "contacts"
    EVENTS = "events"
    INFERENCE_CLASSIFICATION = "inferenceClassification"
    JOINED_GROUPS = "joinedGroups"
    MAIL_FOLDERS = "mailFolders"
    MESSAGES = "messages"
    OUTLOOK = "outlook"
    PEOPLE = "people"
    PHOTO = "photo"
    PHOTOS = "photos"
    DRIVE = "drive"
    DRIVES = "drives"
    FOLLOWED_SITES = "followedSites"
    EXTENSIONS = "extensions"
    APP_CONSENT_REQUESTS_FOR_APPROVAL = "appConsentRequestsForApproval"
    APPROVALS = "approvals"
    PENDING_ACCESS_REVIEW_INSTANCES = "pendingAccessReviewInstances"
    AGREEMENT_ACCEPTANCES = "agreementAcceptances"
    DEVICE_ENROLLMENT_CONFIGURATIONS = "deviceEnrollmentConfigurations"
    MANAGED_DEVICES = "managedDevices"
    MANAGED_APP_REGISTRATIONS = "managedAppRegistrations"
    WINDOWS_INFORMATION_PROTECTION_DEVICE_REGISTRATIONS = "windowsInformationProtectionDeviceRegistrations"
    DEVICE_MANAGEMENT_TROUBLESHOOTING_EVENTS = "deviceManagementTroubleshootingEvents"
    MOBILE_APP_INTENT_AND_STATES = "mobileAppIntentAndStates"
    MOBILE_APP_TROUBLESHOOTING_EVENTS = "mobileAppTroubleshootingEvents"
    NOTIFICATIONS = "notifications"
    PLANNER = "planner"
    INSIGHTS = "insights"
    SETTINGS = "settings"
    ONENOTE = "onenote"
    PROFILE = "profile"
    ACTIVITIES = "activities"
    DEVICES = "devices"
    ONLINE_MEETINGS = "onlineMeetings"
    PRESENCE = "presence"
    AUTHENTICATION = "authentication"
    CHATS = "chats"
    JOINED_TEAMS = "joinedTeams"
    TEAMWORK = "teamwork"
    TODO = "todo"

class Enum192(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CLIENT_ID = "clientId"
    CLIENT_ID_DESC = "clientId desc"
    CONSENT_TYPE = "consentType"
    CONSENT_TYPE_DESC = "consentType desc"
    EXPIRY_TIME = "expiryTime"
    EXPIRY_TIME_DESC = "expiryTime desc"
    PRINCIPAL_ID = "principalId"
    PRINCIPAL_ID_DESC = "principalId desc"
    RESOURCE_ID = "resourceId"
    RESOURCE_ID_DESC = "resourceId desc"
    SCOPE = "scope"
    SCOPE_DESC = "scope desc"
    START_TIME = "startTime"
    START_TIME_DESC = "startTime desc"

class Enum193(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLIENT_ID = "clientId"
    CONSENT_TYPE = "consentType"
    EXPIRY_TIME = "expiryTime"
    PRINCIPAL_ID = "principalId"
    RESOURCE_ID = "resourceId"
    SCOPE = "scope"
    START_TIME = "startTime"

class Enum194(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLIENT_ID = "clientId"
    CONSENT_TYPE = "consentType"
    EXPIRY_TIME = "expiryTime"
    PRINCIPAL_ID = "principalId"
    RESOURCE_ID = "resourceId"
    SCOPE = "scope"
    START_TIME = "startTime"

class Enum195(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CERTIFICATE_AUTHORITIES = "certificateAuthorities"
    CERTIFICATE_AUTHORITIES_DESC = "certificateAuthorities desc"

class Enum196(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CERTIFICATE_AUTHORITIES = "certificateAuthorities"

class Enum197(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CERTIFICATE_AUTHORITIES = "certificateAuthorities"
    CERTIFICATE_AUTHORITIES_DESC = "certificateAuthorities desc"

class Enum198(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AUTHENTICATION_FLOWS_POLICY = "authenticationFlowsPolicy"
    B2_C_AUTHENTICATION_METHODS_POLICY = "b2cAuthenticationMethodsPolicy"
    DEVICE_REGISTRATION_POLICY = "deviceRegistrationPolicy"
    ACTIVITY_BASED_TIMEOUT_POLICIES = "activityBasedTimeoutPolicies"
    AUTHORIZATION_POLICY = "authorizationPolicy"
    CLAIMS_MAPPING_POLICIES = "claimsMappingPolicies"
    HOME_REALM_DISCOVERY_POLICIES = "homeRealmDiscoveryPolicies"
    PERMISSION_GRANT_POLICIES = "permissionGrantPolicies"
    PRIVATE_LINK_RESOURCE_POLICIES = "privateLinkResourcePolicies"
    TOKEN_ISSUANCE_POLICIES = "tokenIssuancePolicies"
    TOKEN_LIFETIME_POLICIES = "tokenLifetimePolicies"
    ADMIN_CONSENT_REQUEST_POLICY = "adminConsentRequestPolicy"
    DIRECTORY_ROLE_ACCESS_REVIEW_POLICY = "directoryRoleAccessReviewPolicy"
    CONDITIONAL_ACCESS_POLICIES = "conditionalAccessPolicies"
    IDENTITY_SECURITY_DEFAULTS_ENFORCEMENT_POLICY = "identitySecurityDefaultsEnforcementPolicy"

class Enum199(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    AUTHENTICATION_FLOWS_POLICY = "authenticationFlowsPolicy"
    B2_C_AUTHENTICATION_METHODS_POLICY = "b2cAuthenticationMethodsPolicy"
    DEVICE_REGISTRATION_POLICY = "deviceRegistrationPolicy"
    ACTIVITY_BASED_TIMEOUT_POLICIES = "activityBasedTimeoutPolicies"
    AUTHORIZATION_POLICY = "authorizationPolicy"
    CLAIMS_MAPPING_POLICIES = "claimsMappingPolicies"
    HOME_REALM_DISCOVERY_POLICIES = "homeRealmDiscoveryPolicies"
    PERMISSION_GRANT_POLICIES = "permissionGrantPolicies"
    PRIVATE_LINK_RESOURCE_POLICIES = "privateLinkResourcePolicies"
    TOKEN_ISSUANCE_POLICIES = "tokenIssuancePolicies"
    TOKEN_LIFETIME_POLICIES = "tokenLifetimePolicies"
    ADMIN_CONSENT_REQUEST_POLICY = "adminConsentRequestPolicy"
    DIRECTORY_ROLE_ACCESS_REVIEW_POLICY = "directoryRoleAccessReviewPolicy"
    CONDITIONAL_ACCESS_POLICIES = "conditionalAccessPolicies"
    IDENTITY_SECURITY_DEFAULTS_ENFORCEMENT_POLICY = "identitySecurityDefaultsEnforcementPolicy"

class Enum20(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    USER_FLOW_TYPE = "userFlowType"
    USER_FLOW_TYPE_DESC = "userFlowType desc"
    USER_FLOW_TYPE_VERSION = "userFlowTypeVersion"
    USER_FLOW_TYPE_VERSION_DESC = "userFlowTypeVersion desc"

class Enum202(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    DEFINITION = "definition"
    DEFINITION_DESC = "definition desc"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    IS_ORGANIZATION_DEFAULT_DESC = "isOrganizationDefault desc"

class Enum203(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    DEFINITION = "definition"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    APPLIES_TO = "appliesTo"

class Enum204(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLIES_TO = "appliesTo"

class Enum205(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    DEFINITION = "definition"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    APPLIES_TO = "appliesTo"

class Enum206(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLIES_TO = "appliesTo"

class Enum207(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IS_ENABLED = "isEnabled"
    NOTIFY_REVIEWERS = "notifyReviewers"
    REMINDERS_ENABLED = "remindersEnabled"
    REQUEST_DURATION_IN_DAYS = "requestDurationInDays"
    REVIEWERS = "reviewers"
    VERSION = "version"

class Enum208(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    SELF_SERVICE_SIGN_UP = "selfServiceSignUp"

class Enum209(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    ALLOWED_TO_SIGN_UP_EMAIL_BASED_SUBSCRIPTIONS = "allowedToSignUpEmailBasedSubscriptions"
    ALLOWED_TO_SIGN_UP_EMAIL_BASED_SUBSCRIPTIONS_DESC = "allowedToSignUpEmailBasedSubscriptions desc"
    ALLOWED_TO_USE_SSPR = "allowedToUseSSPR"
    ALLOWED_TO_USE_SSPR_DESC = "allowedToUseSSPR desc"
    ALLOW_EMAIL_VERIFIED_USERS_TO_JOIN_ORGANIZATION = "allowEmailVerifiedUsersToJoinOrganization"
    ALLOW_EMAIL_VERIFIED_USERS_TO_JOIN_ORGANIZATION_DESC = "allowEmailVerifiedUsersToJoinOrganization desc"
    ALLOW_INVITES_FROM = "allowInvitesFrom"
    ALLOW_INVITES_FROM_DESC = "allowInvitesFrom desc"
    BLOCK_MSOL_POWER_SHELL = "blockMsolPowerShell"
    BLOCK_MSOL_POWER_SHELL_DESC = "blockMsolPowerShell desc"
    DEFAULT_USER_ROLE_PERMISSIONS = "defaultUserRolePermissions"
    DEFAULT_USER_ROLE_PERMISSIONS_DESC = "defaultUserRolePermissions desc"
    ENABLED_PREVIEW_FEATURES = "enabledPreviewFeatures"
    ENABLED_PREVIEW_FEATURES_DESC = "enabledPreviewFeatures desc"
    GUEST_USER_ROLE_ID = "guestUserRoleId"
    GUEST_USER_ROLE_ID_DESC = "guestUserRoleId desc"
    PERMISSION_GRANT_POLICY_IDS_ASSIGNED_TO_DEFAULT_USER_ROLE = "permissionGrantPolicyIdsAssignedToDefaultUserRole"
    PERMISSION_GRANT_POLICY_IDS_ASSIGNED_TO_DEFAULT_USER_ROLE_DESC = "permissionGrantPolicyIdsAssignedToDefaultUserRole desc"

class Enum21(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    USER_FLOW_TYPE = "userFlowType"
    USER_FLOW_TYPE_VERSION = "userFlowTypeVersion"

class Enum210(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    ALLOWED_TO_SIGN_UP_EMAIL_BASED_SUBSCRIPTIONS = "allowedToSignUpEmailBasedSubscriptions"
    ALLOWED_TO_USE_SSPR = "allowedToUseSSPR"
    ALLOW_EMAIL_VERIFIED_USERS_TO_JOIN_ORGANIZATION = "allowEmailVerifiedUsersToJoinOrganization"
    ALLOW_INVITES_FROM = "allowInvitesFrom"
    BLOCK_MSOL_POWER_SHELL = "blockMsolPowerShell"
    DEFAULT_USER_ROLE_PERMISSIONS = "defaultUserRolePermissions"
    ENABLED_PREVIEW_FEATURES = "enabledPreviewFeatures"
    GUEST_USER_ROLE_ID = "guestUserRoleId"
    PERMISSION_GRANT_POLICY_IDS_ASSIGNED_TO_DEFAULT_USER_ROLE = "permissionGrantPolicyIdsAssignedToDefaultUserRole"

class Enum211(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    ALLOWED_TO_SIGN_UP_EMAIL_BASED_SUBSCRIPTIONS = "allowedToSignUpEmailBasedSubscriptions"
    ALLOWED_TO_USE_SSPR = "allowedToUseSSPR"
    ALLOW_EMAIL_VERIFIED_USERS_TO_JOIN_ORGANIZATION = "allowEmailVerifiedUsersToJoinOrganization"
    ALLOW_INVITES_FROM = "allowInvitesFrom"
    BLOCK_MSOL_POWER_SHELL = "blockMsolPowerShell"
    DEFAULT_USER_ROLE_PERMISSIONS = "defaultUserRolePermissions"
    ENABLED_PREVIEW_FEATURES = "enabledPreviewFeatures"
    GUEST_USER_ROLE_ID = "guestUserRoleId"
    PERMISSION_GRANT_POLICY_IDS_ASSIGNED_TO_DEFAULT_USER_ROLE = "permissionGrantPolicyIdsAssignedToDefaultUserRole"

class Enum212(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IS_EMAIL_PASSWORD_AUTHENTICATION_ENABLED = "isEmailPasswordAuthenticationEnabled"
    IS_PHONE_ONE_TIME_PASSWORD_AUTHENTICATION_ENABLED = "isPhoneOneTimePasswordAuthenticationEnabled"
    IS_USER_NAME_AUTHENTICATION_ENABLED = "isUserNameAuthenticationEnabled"

class Enum213(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    DEFINITION = "definition"
    DEFINITION_DESC = "definition desc"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    IS_ORGANIZATION_DEFAULT_DESC = "isOrganizationDefault desc"

class Enum214(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    DEFINITION = "definition"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    APPLIES_TO = "appliesTo"

class Enum215(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLIES_TO = "appliesTo"

class Enum216(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    DEFINITION = "definition"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    APPLIES_TO = "appliesTo"

class Enum217(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLIES_TO = "appliesTo"

class Enum218(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CONDITIONS = "conditions"
    CONDITIONS_DESC = "conditions desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    GRANT_CONTROLS = "grantControls"
    GRANT_CONTROLS_DESC = "grantControls desc"
    MODIFIED_DATE_TIME = "modifiedDateTime"
    MODIFIED_DATE_TIME_DESC = "modifiedDateTime desc"
    SESSION_CONTROLS = "sessionControls"
    SESSION_CONTROLS_DESC = "sessionControls desc"
    STATE = "state"
    STATE_DESC = "state desc"

class Enum219(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONDITIONS = "conditions"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    GRANT_CONTROLS = "grantControls"
    MODIFIED_DATE_TIME = "modifiedDateTime"
    SESSION_CONTROLS = "sessionControls"
    STATE = "state"

class Enum220(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONDITIONS = "conditions"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    GRANT_CONTROLS = "grantControls"
    MODIFIED_DATE_TIME = "modifiedDateTime"
    SESSION_CONTROLS = "sessionControls"
    STATE = "state"

class Enum221(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    SETTINGS = "settings"

class Enum222(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    DEFINITION = "definition"
    DEFINITION_DESC = "definition desc"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    IS_ORGANIZATION_DEFAULT_DESC = "isOrganizationDefault desc"

class Enum223(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    DEFINITION = "definition"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    APPLIES_TO = "appliesTo"

class Enum224(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLIES_TO = "appliesTo"

class Enum225(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    DEFINITION = "definition"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    APPLIES_TO = "appliesTo"

class Enum226(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLIES_TO = "appliesTo"

class Enum227(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    IS_ENABLED = "isEnabled"

class Enum228(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"

class Enum229(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    EXCLUDES = "excludes"
    INCLUDES = "includes"

class Enum23(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    USER_FLOW_TYPE = "userFlowType"
    USER_FLOW_TYPE_VERSION = "userFlowTypeVersion"

class Enum230(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    EXCLUDES = "excludes"
    INCLUDES = "includes"

class Enum231(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    EXCLUDES = "excludes"
    INCLUDES = "includes"

class Enum232(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    EXCLUDES = "excludes"
    INCLUDES = "includes"

class Enum233(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CLIENT_APPLICATION_IDS = "clientApplicationIds"
    CLIENT_APPLICATION_IDS_DESC = "clientApplicationIds desc"
    CLIENT_APPLICATION_PUBLISHER_IDS = "clientApplicationPublisherIds"
    CLIENT_APPLICATION_PUBLISHER_IDS_DESC = "clientApplicationPublisherIds desc"
    CLIENT_APPLICATIONS_FROM_VERIFIED_PUBLISHER_ONLY = "clientApplicationsFromVerifiedPublisherOnly"
    CLIENT_APPLICATIONS_FROM_VERIFIED_PUBLISHER_ONLY_DESC = "clientApplicationsFromVerifiedPublisherOnly desc"
    CLIENT_APPLICATION_TENANT_IDS = "clientApplicationTenantIds"
    CLIENT_APPLICATION_TENANT_IDS_DESC = "clientApplicationTenantIds desc"
    PERMISSION_CLASSIFICATION = "permissionClassification"
    PERMISSION_CLASSIFICATION_DESC = "permissionClassification desc"
    PERMISSIONS = "permissions"
    PERMISSIONS_DESC = "permissions desc"
    PERMISSION_TYPE = "permissionType"
    PERMISSION_TYPE_DESC = "permissionType desc"
    RESOURCE_APPLICATION = "resourceApplication"
    RESOURCE_APPLICATION_DESC = "resourceApplication desc"

class Enum234(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLIENT_APPLICATION_IDS = "clientApplicationIds"
    CLIENT_APPLICATION_PUBLISHER_IDS = "clientApplicationPublisherIds"
    CLIENT_APPLICATIONS_FROM_VERIFIED_PUBLISHER_ONLY = "clientApplicationsFromVerifiedPublisherOnly"
    CLIENT_APPLICATION_TENANT_IDS = "clientApplicationTenantIds"
    PERMISSION_CLASSIFICATION = "permissionClassification"
    PERMISSIONS = "permissions"
    PERMISSION_TYPE = "permissionType"
    RESOURCE_APPLICATION = "resourceApplication"

class Enum235(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLIENT_APPLICATION_IDS = "clientApplicationIds"
    CLIENT_APPLICATION_PUBLISHER_IDS = "clientApplicationPublisherIds"
    CLIENT_APPLICATIONS_FROM_VERIFIED_PUBLISHER_ONLY = "clientApplicationsFromVerifiedPublisherOnly"
    CLIENT_APPLICATION_TENANT_IDS = "clientApplicationTenantIds"
    PERMISSION_CLASSIFICATION = "permissionClassification"
    PERMISSIONS = "permissions"
    PERMISSION_TYPE = "permissionType"
    RESOURCE_APPLICATION = "resourceApplication"

class Enum236(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CLIENT_APPLICATION_IDS = "clientApplicationIds"
    CLIENT_APPLICATION_IDS_DESC = "clientApplicationIds desc"
    CLIENT_APPLICATION_PUBLISHER_IDS = "clientApplicationPublisherIds"
    CLIENT_APPLICATION_PUBLISHER_IDS_DESC = "clientApplicationPublisherIds desc"
    CLIENT_APPLICATIONS_FROM_VERIFIED_PUBLISHER_ONLY = "clientApplicationsFromVerifiedPublisherOnly"
    CLIENT_APPLICATIONS_FROM_VERIFIED_PUBLISHER_ONLY_DESC = "clientApplicationsFromVerifiedPublisherOnly desc"
    CLIENT_APPLICATION_TENANT_IDS = "clientApplicationTenantIds"
    CLIENT_APPLICATION_TENANT_IDS_DESC = "clientApplicationTenantIds desc"
    PERMISSION_CLASSIFICATION = "permissionClassification"
    PERMISSION_CLASSIFICATION_DESC = "permissionClassification desc"
    PERMISSIONS = "permissions"
    PERMISSIONS_DESC = "permissions desc"
    PERMISSION_TYPE = "permissionType"
    PERMISSION_TYPE_DESC = "permissionType desc"
    RESOURCE_APPLICATION = "resourceApplication"
    RESOURCE_APPLICATION_DESC = "resourceApplication desc"

class Enum237(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLIENT_APPLICATION_IDS = "clientApplicationIds"
    CLIENT_APPLICATION_PUBLISHER_IDS = "clientApplicationPublisherIds"
    CLIENT_APPLICATIONS_FROM_VERIFIED_PUBLISHER_ONLY = "clientApplicationsFromVerifiedPublisherOnly"
    CLIENT_APPLICATION_TENANT_IDS = "clientApplicationTenantIds"
    PERMISSION_CLASSIFICATION = "permissionClassification"
    PERMISSIONS = "permissions"
    PERMISSION_TYPE = "permissionType"
    RESOURCE_APPLICATION = "resourceApplication"

class Enum238(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLIENT_APPLICATION_IDS = "clientApplicationIds"
    CLIENT_APPLICATION_PUBLISHER_IDS = "clientApplicationPublisherIds"
    CLIENT_APPLICATIONS_FROM_VERIFIED_PUBLISHER_ONLY = "clientApplicationsFromVerifiedPublisherOnly"
    CLIENT_APPLICATION_TENANT_IDS = "clientApplicationTenantIds"
    PERMISSION_CLASSIFICATION = "permissionClassification"
    PERMISSIONS = "permissions"
    PERMISSION_TYPE = "permissionType"
    RESOURCE_APPLICATION = "resourceApplication"

class Enum239(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    ALLOWED_TENANT_IDS = "allowedTenantIds"
    ALLOWED_TENANT_IDS_DESC = "allowedTenantIds desc"
    ARM_RESOURCE_ID = "armResourceId"
    ARM_RESOURCE_ID_DESC = "armResourceId desc"

class Enum24(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CLIENT_ID = "clientId"
    CLIENT_ID_DESC = "clientId desc"
    CLIENT_SECRET = "clientSecret"
    CLIENT_SECRET_DESC = "clientSecret desc"
    NAME = "name"
    NAME_DESC = "name desc"
    TYPE = "type"
    TYPE_DESC = "type desc"

class Enum240(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ALLOWED_TENANT_IDS = "allowedTenantIds"
    ARM_RESOURCE_ID = "armResourceId"

class Enum241(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ALLOWED_TENANT_IDS = "allowedTenantIds"
    ARM_RESOURCE_ID = "armResourceId"

class Enum242(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    DEFINITION = "definition"
    DEFINITION_DESC = "definition desc"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    IS_ORGANIZATION_DEFAULT_DESC = "isOrganizationDefault desc"

class Enum243(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    DEFINITION = "definition"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    APPLIES_TO = "appliesTo"

class Enum244(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLIES_TO = "appliesTo"

class Enum245(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    DEFINITION = "definition"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    APPLIES_TO = "appliesTo"

class Enum246(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLIES_TO = "appliesTo"

class Enum247(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    DEFINITION = "definition"
    DEFINITION_DESC = "definition desc"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    IS_ORGANIZATION_DEFAULT_DESC = "isOrganizationDefault desc"

class Enum248(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    DEFINITION = "definition"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    APPLIES_TO = "appliesTo"

class Enum249(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLIES_TO = "appliesTo"

class Enum25(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLIENT_ID = "clientId"
    CLIENT_SECRET = "clientSecret"
    NAME = "name"
    TYPE = "type"

class Enum250(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    DEFINITION = "definition"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    APPLIES_TO = "appliesTo"

class Enum251(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLIES_TO = "appliesTo"

class Enum252(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    ACTIVITY = "activity"
    ACTIVITY_DESC = "activity desc"
    ACTIVITY_DATE_TIME = "activityDateTime"
    ACTIVITY_DATE_TIME_DESC = "activityDateTime desc"
    ADDITIONAL_INFO = "additionalInfo"
    ADDITIONAL_INFO_DESC = "additionalInfo desc"
    CORRELATION_ID = "correlationId"
    CORRELATION_ID_DESC = "correlationId desc"
    DETECTED_DATE_TIME = "detectedDateTime"
    DETECTED_DATE_TIME_DESC = "detectedDateTime desc"
    DETECTION_TIMING_TYPE = "detectionTimingType"
    DETECTION_TIMING_TYPE_DESC = "detectionTimingType desc"
    IP_ADDRESS = "ipAddress"
    IP_ADDRESS_DESC = "ipAddress desc"
    LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime"
    LAST_UPDATED_DATE_TIME_DESC = "lastUpdatedDateTime desc"
    LOCATION = "location"
    LOCATION_DESC = "location desc"
    REQUEST_ID = "requestId"
    REQUEST_ID_DESC = "requestId desc"
    RISK_DETAIL = "riskDetail"
    RISK_DETAIL_DESC = "riskDetail desc"
    RISK_EVENT_TYPE = "riskEventType"
    RISK_EVENT_TYPE_DESC = "riskEventType desc"
    RISK_LEVEL = "riskLevel"
    RISK_LEVEL_DESC = "riskLevel desc"
    RISK_STATE = "riskState"
    RISK_STATE_DESC = "riskState desc"
    RISK_TYPE = "riskType"
    RISK_TYPE_DESC = "riskType desc"
    SOURCE = "source"
    SOURCE_DESC = "source desc"
    TOKEN_ISSUER_TYPE = "tokenIssuerType"
    TOKEN_ISSUER_TYPE_DESC = "tokenIssuerType desc"
    USER_DISPLAY_NAME = "userDisplayName"
    USER_DISPLAY_NAME_DESC = "userDisplayName desc"
    USER_ID = "userId"
    USER_ID_DESC = "userId desc"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_PRINCIPAL_NAME_DESC = "userPrincipalName desc"

class Enum253(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACTIVITY = "activity"
    ACTIVITY_DATE_TIME = "activityDateTime"
    ADDITIONAL_INFO = "additionalInfo"
    CORRELATION_ID = "correlationId"
    DETECTED_DATE_TIME = "detectedDateTime"
    DETECTION_TIMING_TYPE = "detectionTimingType"
    IP_ADDRESS = "ipAddress"
    LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime"
    LOCATION = "location"
    REQUEST_ID = "requestId"
    RISK_DETAIL = "riskDetail"
    RISK_EVENT_TYPE = "riskEventType"
    RISK_LEVEL = "riskLevel"
    RISK_STATE = "riskState"
    RISK_TYPE = "riskType"
    SOURCE = "source"
    TOKEN_ISSUER_TYPE = "tokenIssuerType"
    USER_DISPLAY_NAME = "userDisplayName"
    USER_ID = "userId"
    USER_PRINCIPAL_NAME = "userPrincipalName"

class Enum26(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLIENT_ID = "clientId"
    CLIENT_SECRET = "clientSecret"
    NAME = "name"
    TYPE = "type"

class Enum260(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACTIVITY = "activity"
    ACTIVITY_DATE_TIME = "activityDateTime"
    ADDITIONAL_INFO = "additionalInfo"
    CORRELATION_ID = "correlationId"
    DETECTED_DATE_TIME = "detectedDateTime"
    DETECTION_TIMING_TYPE = "detectionTimingType"
    IP_ADDRESS = "ipAddress"
    LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime"
    LOCATION = "location"
    REQUEST_ID = "requestId"
    RISK_DETAIL = "riskDetail"
    RISK_EVENT_TYPE = "riskEventType"
    RISK_LEVEL = "riskLevel"
    RISK_STATE = "riskState"
    RISK_TYPE = "riskType"
    SOURCE = "source"
    TOKEN_ISSUER_TYPE = "tokenIssuerType"
    USER_DISPLAY_NAME = "userDisplayName"
    USER_ID = "userId"
    USER_PRINCIPAL_NAME = "userPrincipalName"

class Enum261(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    IS_DELETED = "isDeleted"
    IS_DELETED_DESC = "isDeleted desc"
    IS_PROCESSING = "isProcessing"
    IS_PROCESSING_DESC = "isProcessing desc"
    RISK_DETAIL = "riskDetail"
    RISK_DETAIL_DESC = "riskDetail desc"
    RISK_LAST_UPDATED_DATE_TIME = "riskLastUpdatedDateTime"
    RISK_LAST_UPDATED_DATE_TIME_DESC = "riskLastUpdatedDateTime desc"
    RISK_LEVEL = "riskLevel"
    RISK_LEVEL_DESC = "riskLevel desc"
    RISK_STATE = "riskState"
    RISK_STATE_DESC = "riskState desc"
    USER_DISPLAY_NAME = "userDisplayName"
    USER_DISPLAY_NAME_DESC = "userDisplayName desc"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_PRINCIPAL_NAME_DESC = "userPrincipalName desc"

class Enum262(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IS_DELETED = "isDeleted"
    IS_PROCESSING = "isProcessing"
    RISK_DETAIL = "riskDetail"
    RISK_LAST_UPDATED_DATE_TIME = "riskLastUpdatedDateTime"
    RISK_LEVEL = "riskLevel"
    RISK_STATE = "riskState"
    USER_DISPLAY_NAME = "userDisplayName"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    HISTORY = "history"

class Enum263(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HISTORY = "history"

class Enum264(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IS_DELETED = "isDeleted"
    IS_PROCESSING = "isProcessing"
    RISK_DETAIL = "riskDetail"
    RISK_LAST_UPDATED_DATE_TIME = "riskLastUpdatedDateTime"
    RISK_LEVEL = "riskLevel"
    RISK_STATE = "riskState"
    USER_DISPLAY_NAME = "userDisplayName"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    HISTORY = "history"

class Enum265(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HISTORY = "history"

class Enum266(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    IS_DELETED = "isDeleted"
    IS_DELETED_DESC = "isDeleted desc"
    IS_PROCESSING = "isProcessing"
    IS_PROCESSING_DESC = "isProcessing desc"
    RISK_DETAIL = "riskDetail"
    RISK_DETAIL_DESC = "riskDetail desc"
    RISK_LAST_UPDATED_DATE_TIME = "riskLastUpdatedDateTime"
    RISK_LAST_UPDATED_DATE_TIME_DESC = "riskLastUpdatedDateTime desc"
    RISK_LEVEL = "riskLevel"
    RISK_LEVEL_DESC = "riskLevel desc"
    RISK_STATE = "riskState"
    RISK_STATE_DESC = "riskState desc"
    USER_DISPLAY_NAME = "userDisplayName"
    USER_DISPLAY_NAME_DESC = "userDisplayName desc"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_PRINCIPAL_NAME_DESC = "userPrincipalName desc"
    ACTIVITY = "activity"
    ACTIVITY_DESC = "activity desc"
    INITIATED_BY = "initiatedBy"
    INITIATED_BY_DESC = "initiatedBy desc"
    USER_ID = "userId"
    USER_ID_DESC = "userId desc"

class Enum267(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IS_DELETED = "isDeleted"
    IS_PROCESSING = "isProcessing"
    RISK_DETAIL = "riskDetail"
    RISK_LAST_UPDATED_DATE_TIME = "riskLastUpdatedDateTime"
    RISK_LEVEL = "riskLevel"
    RISK_STATE = "riskState"
    USER_DISPLAY_NAME = "userDisplayName"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    ACTIVITY = "activity"
    INITIATED_BY = "initiatedBy"
    USER_ID = "userId"
    HISTORY = "history"

class Enum268(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HISTORY = "history"

class Enum269(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IS_DELETED = "isDeleted"
    IS_PROCESSING = "isProcessing"
    RISK_DETAIL = "riskDetail"
    RISK_LAST_UPDATED_DATE_TIME = "riskLastUpdatedDateTime"
    RISK_LEVEL = "riskLevel"
    RISK_STATE = "riskState"
    USER_DISPLAY_NAME = "userDisplayName"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    ACTIVITY = "activity"
    INITIATED_BY = "initiatedBy"
    USER_ID = "userId"
    HISTORY = "history"

class Enum27(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    POLICY = "policy"
    DATA_LOSS_PREVENTION_POLICIES = "dataLossPreventionPolicies"
    SENSITIVITY_LABELS = "sensitivityLabels"
    SENSITIVITY_POLICY_SETTINGS = "sensitivityPolicySettings"
    THREAT_ASSESSMENT_REQUESTS = "threatAssessmentRequests"

class Enum270(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HISTORY = "history"

class Enum271(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    KEY_SETS = "keySets"
    POLICIES = "policies"

class Enum272(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    KEY_SETS = "keySets"
    POLICIES = "policies"

class Enum273(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    KEYS = "keys"
    KEYS_DESC = "keys desc"

class Enum274(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    KEYS = "keys"

class Enum275(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    KEYS = "keys"

class Enum276(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"

class Enum277(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    EMAIL_METHODS = "emailMethods"
    FIDO2_METHODS = "fido2Methods"
    METHODS = "methods"
    MICROSOFT_AUTHENTICATOR_METHODS = "microsoftAuthenticatorMethods"
    OATH_METHODS = "oathMethods"
    OPERATIONS = "operations"
    PASSWORDLESS_MICROSOFT_AUTHENTICATOR_METHODS = "passwordlessMicrosoftAuthenticatorMethods"
    PASSWORD_METHODS = "passwordMethods"
    PHONE_METHODS = "phoneMethods"
    SECURITY_QUESTION_METHODS = "securityQuestionMethods"
    TEMPORARY_ACCESS_PASS_METHODS = "temporaryAccessPassMethods"

class Enum278(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    EMAIL_METHODS = "emailMethods"
    FIDO2_METHODS = "fido2Methods"
    METHODS = "methods"
    MICROSOFT_AUTHENTICATOR_METHODS = "microsoftAuthenticatorMethods"
    OATH_METHODS = "oathMethods"
    OPERATIONS = "operations"
    PASSWORDLESS_MICROSOFT_AUTHENTICATOR_METHODS = "passwordlessMicrosoftAuthenticatorMethods"
    PASSWORD_METHODS = "passwordMethods"
    PHONE_METHODS = "phoneMethods"
    SECURITY_QUESTION_METHODS = "securityQuestionMethods"
    TEMPORARY_ACCESS_PASS_METHODS = "temporaryAccessPassMethods"

class Enum279(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"

class Enum28(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    POLICY = "policy"
    DATA_LOSS_PREVENTION_POLICIES = "dataLossPreventionPolicies"
    SENSITIVITY_LABELS = "sensitivityLabels"
    SENSITIVITY_POLICY_SETTINGS = "sensitivityPolicySettings"
    THREAT_ASSESSMENT_REQUESTS = "threatAssessmentRequests"

class Enum280(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"

class Enum281(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"

class Enum282(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"

class Enum283(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"

class Enum284(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_ACTION_DATE_TIME = "lastActionDateTime"
    LAST_ACTION_DATE_TIME_DESC = "lastActionDateTime desc"
    RESOURCE_LOCATION = "resourceLocation"
    RESOURCE_LOCATION_DESC = "resourceLocation desc"
    STATUS = "status"
    STATUS_DESC = "status desc"
    STATUS_DETAIL = "statusDetail"
    STATUS_DETAIL_DESC = "statusDetail desc"

class Enum285(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_ACTION_DATE_TIME = "lastActionDateTime"
    RESOURCE_LOCATION = "resourceLocation"
    STATUS = "status"
    STATUS_DETAIL = "statusDetail"

class Enum286(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_ACTION_DATE_TIME = "lastActionDateTime"
    RESOURCE_LOCATION = "resourceLocation"
    STATUS = "status"
    STATUS_DETAIL = "statusDetail"

class Enum287(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"

class Enum288(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATION_DATE_TIME = "creationDateTime"
    CREATION_DATE_TIME_DESC = "creationDateTime desc"
    PASSWORD = "password"
    PASSWORD_DESC = "password desc"

class Enum289(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATION_DATE_TIME = "creationDateTime"
    PASSWORD = "password"

class Enum290(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATION_DATE_TIME = "creationDateTime"
    PASSWORD = "password"

class Enum291(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    PHONE_NUMBER = "phoneNumber"
    PHONE_NUMBER_DESC = "phoneNumber desc"
    PHONE_TYPE = "phoneType"
    PHONE_TYPE_DESC = "phoneType desc"
    SMS_SIGN_IN_STATE = "smsSignInState"
    SMS_SIGN_IN_STATE_DESC = "smsSignInState desc"

class Enum292(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    PHONE_NUMBER = "phoneNumber"
    PHONE_TYPE = "phoneType"
    SMS_SIGN_IN_STATE = "smsSignInState"

class Enum293(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    PHONE_NUMBER = "phoneNumber"
    PHONE_TYPE = "phoneType"
    SMS_SIGN_IN_STATE = "smsSignInState"

class Enum294(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"

class Enum295(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"

class Enum296(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    POLICY = "policy"
    DATA_LOSS_PREVENTION_POLICIES = "dataLossPreventionPolicies"
    SENSITIVITY_LABELS = "sensitivityLabels"
    SENSITIVITY_POLICY_SETTINGS = "sensitivityPolicySettings"
    THREAT_ASSESSMENT_REQUESTS = "threatAssessmentRequests"

class Enum297(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    POLICY = "policy"
    DATA_LOSS_PREVENTION_POLICIES = "dataLossPreventionPolicies"
    SENSITIVITY_LABELS = "sensitivityLabels"
    SENSITIVITY_POLICY_SETTINGS = "sensitivityPolicySettings"
    THREAT_ASSESSMENT_REQUESTS = "threatAssessmentRequests"

class Enum37(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    NAME = "name"
    NAME_DESC = "name desc"

class Enum38(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    NAME = "name"

class Enum39(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    NAME = "name"

class Enum47(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    LABELS = "labels"

class Enum48(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    LABELS = "labels"

class Enum49(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    COLOR = "color"
    COLOR_DESC = "color desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    IS_ACTIVE = "isActive"
    IS_ACTIVE_DESC = "isActive desc"
    NAME = "name"
    NAME_DESC = "name desc"
    PARENT = "parent"
    PARENT_DESC = "parent desc"
    SENSITIVITY = "sensitivity"
    SENSITIVITY_DESC = "sensitivity desc"
    TOOLTIP = "tooltip"
    TOOLTIP_DESC = "tooltip desc"

class Enum5(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    NAMED_LOCATIONS = "namedLocations"
    POLICIES = "policies"

class Enum50(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    COLOR = "color"
    DESCRIPTION = "description"
    IS_ACTIVE = "isActive"
    NAME = "name"
    PARENT = "parent"
    SENSITIVITY = "sensitivity"
    TOOLTIP = "tooltip"

class Enum51(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    COLOR = "color"
    DESCRIPTION = "description"
    IS_ACTIVE = "isActive"
    NAME = "name"
    PARENT = "parent"
    SENSITIVITY = "sensitivity"
    TOOLTIP = "tooltip"

class Enum55(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    APPLICABLE_TO = "applicableTo"
    APPLICABLE_TO_DESC = "applicableTo desc"
    APPLICATION_MODE = "applicationMode"
    APPLICATION_MODE_DESC = "applicationMode desc"
    ASSIGNED_POLICIES = "assignedPolicies"
    ASSIGNED_POLICIES_DESC = "assignedPolicies desc"
    AUTO_LABELING = "autoLabeling"
    AUTO_LABELING_DESC = "autoLabeling desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    IS_DEFAULT = "isDefault"
    IS_DEFAULT_DESC = "isDefault desc"
    IS_ENDPOINT_PROTECTION_ENABLED = "isEndpointProtectionEnabled"
    IS_ENDPOINT_PROTECTION_ENABLED_DESC = "isEndpointProtectionEnabled desc"
    LABEL_ACTIONS = "labelActions"
    LABEL_ACTIONS_DESC = "labelActions desc"
    NAME = "name"
    NAME_DESC = "name desc"
    PRIORITY = "priority"
    PRIORITY_DESC = "priority desc"
    TOOL_TIP = "toolTip"
    TOOL_TIP_DESC = "toolTip desc"

class Enum56(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    APPLICABLE_TO = "applicableTo"
    APPLICATION_MODE = "applicationMode"
    ASSIGNED_POLICIES = "assignedPolicies"
    AUTO_LABELING = "autoLabeling"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    IS_DEFAULT = "isDefault"
    IS_ENDPOINT_PROTECTION_ENABLED = "isEndpointProtectionEnabled"
    LABEL_ACTIONS = "labelActions"
    NAME = "name"
    PRIORITY = "priority"
    TOOL_TIP = "toolTip"
    SUBLABELS = "sublabels"

class Enum57(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SUBLABELS = "sublabels"

class Enum58(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    APPLICABLE_TO = "applicableTo"
    APPLICATION_MODE = "applicationMode"
    ASSIGNED_POLICIES = "assignedPolicies"
    AUTO_LABELING = "autoLabeling"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    IS_DEFAULT = "isDefault"
    IS_ENDPOINT_PROTECTION_ENABLED = "isEndpointProtectionEnabled"
    LABEL_ACTIONS = "labelActions"
    NAME = "name"
    PRIORITY = "priority"
    TOOL_TIP = "toolTip"
    SUBLABELS = "sublabels"

class Enum59(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SUBLABELS = "sublabels"

class Enum60(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    APPLICABLE_TO = "applicableTo"
    APPLICABLE_TO_DESC = "applicableTo desc"
    APPLICATION_MODE = "applicationMode"
    APPLICATION_MODE_DESC = "applicationMode desc"
    ASSIGNED_POLICIES = "assignedPolicies"
    ASSIGNED_POLICIES_DESC = "assignedPolicies desc"
    AUTO_LABELING = "autoLabeling"
    AUTO_LABELING_DESC = "autoLabeling desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    IS_DEFAULT = "isDefault"
    IS_DEFAULT_DESC = "isDefault desc"
    IS_ENDPOINT_PROTECTION_ENABLED = "isEndpointProtectionEnabled"
    IS_ENDPOINT_PROTECTION_ENABLED_DESC = "isEndpointProtectionEnabled desc"
    LABEL_ACTIONS = "labelActions"
    LABEL_ACTIONS_DESC = "labelActions desc"
    NAME = "name"
    NAME_DESC = "name desc"
    PRIORITY = "priority"
    PRIORITY_DESC = "priority desc"
    TOOL_TIP = "toolTip"
    TOOL_TIP_DESC = "toolTip desc"

class Enum61(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    APPLICABLE_TO = "applicableTo"
    APPLICATION_MODE = "applicationMode"
    ASSIGNED_POLICIES = "assignedPolicies"
    AUTO_LABELING = "autoLabeling"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    IS_DEFAULT = "isDefault"
    IS_ENDPOINT_PROTECTION_ENABLED = "isEndpointProtectionEnabled"
    LABEL_ACTIONS = "labelActions"
    NAME = "name"
    PRIORITY = "priority"
    TOOL_TIP = "toolTip"
    SUBLABELS = "sublabels"

class Enum63(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    APPLICABLE_TO = "applicableTo"
    APPLICATION_MODE = "applicationMode"
    ASSIGNED_POLICIES = "assignedPolicies"
    AUTO_LABELING = "autoLabeling"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    IS_DEFAULT = "isDefault"
    IS_ENDPOINT_PROTECTION_ENABLED = "isEndpointProtectionEnabled"
    LABEL_ACTIONS = "labelActions"
    NAME = "name"
    PRIORITY = "priority"
    TOOL_TIP = "toolTip"
    SUBLABELS = "sublabels"

class Enum65(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    APPLICABLE_TO = "applicableTo"
    DOWNGRADE_SENSITIVITY_REQUIRES_JUSTIFICATION = "downgradeSensitivityRequiresJustification"
    HELP_WEB_URL = "helpWebUrl"
    IS_MANDATORY = "isMandatory"

class Enum66(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CATEGORY = "category"
    CATEGORY_DESC = "category desc"
    CONTENT_TYPE = "contentType"
    CONTENT_TYPE_DESC = "contentType desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    EXPECTED_ASSESSMENT = "expectedAssessment"
    EXPECTED_ASSESSMENT_DESC = "expectedAssessment desc"
    REQUEST_SOURCE = "requestSource"
    REQUEST_SOURCE_DESC = "requestSource desc"
    STATUS = "status"
    STATUS_DESC = "status desc"

class Enum67(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CATEGORY = "category"
    CONTENT_TYPE = "contentType"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    EXPECTED_ASSESSMENT = "expectedAssessment"
    REQUEST_SOURCE = "requestSource"
    STATUS = "status"
    RESULTS = "results"

class Enum68(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    RESULTS = "results"

class Enum69(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CATEGORY = "category"
    CONTENT_TYPE = "contentType"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    EXPECTED_ASSESSMENT = "expectedAssessment"
    REQUEST_SOURCE = "requestSource"
    STATUS = "status"
    RESULTS = "results"

class Enum70(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    RESULTS = "results"

class Enum71(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    MESSAGE = "message"
    MESSAGE_DESC = "message desc"
    RESULT_TYPE = "resultType"
    RESULT_TYPE_DESC = "resultType desc"

class Enum72(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    MESSAGE = "message"
    RESULT_TYPE = "resultType"

class Enum73(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    MESSAGE = "message"
    RESULT_TYPE = "resultType"

class Enum74(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    INVITED_USER_DISPLAY_NAME = "invitedUserDisplayName"
    INVITED_USER_DISPLAY_NAME_DESC = "invitedUserDisplayName desc"
    INVITED_USER_EMAIL_ADDRESS = "invitedUserEmailAddress"
    INVITED_USER_EMAIL_ADDRESS_DESC = "invitedUserEmailAddress desc"
    INVITED_USER_MESSAGE_INFO = "invitedUserMessageInfo"
    INVITED_USER_MESSAGE_INFO_DESC = "invitedUserMessageInfo desc"
    INVITED_USER_TYPE = "invitedUserType"
    INVITED_USER_TYPE_DESC = "invitedUserType desc"
    INVITE_REDEEM_URL = "inviteRedeemUrl"
    INVITE_REDEEM_URL_DESC = "inviteRedeemUrl desc"
    INVITE_REDIRECT_URL = "inviteRedirectUrl"
    INVITE_REDIRECT_URL_DESC = "inviteRedirectUrl desc"
    RESET_REDEMPTION = "resetRedemption"
    RESET_REDEMPTION_DESC = "resetRedemption desc"
    SEND_INVITATION_MESSAGE = "sendInvitationMessage"
    SEND_INVITATION_MESSAGE_DESC = "sendInvitationMessage desc"
    STATUS = "status"
    STATUS_DESC = "status desc"

class Enum75(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    INVITED_USER_DISPLAY_NAME = "invitedUserDisplayName"
    INVITED_USER_EMAIL_ADDRESS = "invitedUserEmailAddress"
    INVITED_USER_MESSAGE_INFO = "invitedUserMessageInfo"
    INVITED_USER_TYPE = "invitedUserType"
    INVITE_REDEEM_URL = "inviteRedeemUrl"
    INVITE_REDIRECT_URL = "inviteRedirectUrl"
    RESET_REDEMPTION = "resetRedemption"
    SEND_INVITATION_MESSAGE = "sendInvitationMessage"
    STATUS = "status"
    INVITED_USER = "invitedUser"

class Enum76(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    INVITED_USER = "invitedUser"

class Get0ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    NAMED_LOCATIONS = "namedLocations"
    POLICIES = "policies"

class Get1ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    COMPLETED_DATE_TIME = "completedDateTime"
    PROGRESS = "progress"
    STATUS = "status"
    STORAGE_LOCATION = "storageLocation"
    SUBMITTED_DATE_TIME = "submittedDateTime"
    USER_ID = "userId"

class Get3ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SUBLABELS = "sublabels"

class Get5ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    COMPLETED_DATE_TIME = "completedDateTime"
    COMPLETED_DATE_TIME_DESC = "completedDateTime desc"
    PROGRESS = "progress"
    PROGRESS_DESC = "progress desc"
    STATUS = "status"
    STATUS_DESC = "status desc"
    STORAGE_LOCATION = "storageLocation"
    STORAGE_LOCATION_DESC = "storageLocation desc"
    SUBMITTED_DATE_TIME = "submittedDateTime"
    SUBMITTED_DATE_TIME_DESC = "submittedDateTime desc"
    USER_ID = "userId"
    USER_ID_DESC = "userId desc"

class Get6ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    COMPLETED_DATE_TIME = "completedDateTime"
    PROGRESS = "progress"
    STATUS = "status"
    STORAGE_LOCATION = "storageLocation"
    SUBMITTED_DATE_TIME = "submittedDateTime"
    USER_ID = "userId"

class Get8ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SUBLABELS = "sublabels"

class MicrosoftGraphAccessLevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EVERYONE = "everyone"
    INVITED = "invited"
    LOCKED = "locked"
    SAME_ENTERPRISE = "sameEnterprise"
    SAME_ENTERPRISE_AND_FEDERATED = "sameEnterpriseAndFederated"

class MicrosoftGraphAccessScope(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    IN_ORGANIZATION = "inOrganization"
    NOT_IN_ORGANIZATION = "notInOrganization"

class MicrosoftGraphActionState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    PENDING = "pending"
    CANCELED = "canceled"
    ACTIVE = "active"
    DONE = "done"
    FAILED = "failed"
    NOT_SUPPORTED = "notSupported"

class MicrosoftGraphActivityType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SIGNIN = "signin"
    USER = "user"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphAgreementAcceptanceState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ACCEPTED = "accepted"
    DECLINED = "declined"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphAllowedAudiences(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ME = "me"
    FAMILY = "family"
    CONTACTS = "contacts"
    GROUP_MEMBERS = "groupMembers"
    ORGANIZATION = "organization"
    FEDERATED_ORGANIZATIONS = "federatedOrganizations"
    EVERYONE = "everyone"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphAllowInvitesFrom(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ADMINS_AND_GUEST_INVITERS = "adminsAndGuestInviters"
    ADMINS_GUEST_INVITERS_AND_ALL_MEMBERS = "adminsGuestInvitersAndAllMembers"
    EVERYONE = "everyone"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphAnalyticsActivityType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EMAIL = "Email"
    MEETING = "Meeting"
    FOCUS = "Focus"
    CHAT = "Chat"
    CALL = "Call"

class MicrosoftGraphAnniversaryType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    BIRTHDAY = "birthday"
    WEDDING = "wedding"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphApplicationMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MANUAL = "manual"
    AUTOMATIC = "automatic"
    RECOMMENDED = "recommended"

class MicrosoftGraphAppLogUploadState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "pending"
    COMPLETED = "completed"
    FAILED = "failed"

class MicrosoftGraphAssignmentMethod(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STANDARD = "standard"
    PRIVILEGED = "privileged"
    AUTO = "auto"

class MicrosoftGraphAttendeeType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    REQUIRED = "required"
    OPTIONAL = "optional"
    RESOURCE = "resource"

class MicrosoftGraphAuthenticationMethodSignInState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_SUPPORTED = "notSupported"
    NOT_ALLOWED_BY_POLICY = "notAllowedByPolicy"
    NOT_ENABLED = "notEnabled"
    PHONE_NUMBER_NOT_UNIQUE = "phoneNumberNotUnique"
    READY = "ready"
    NOT_CONFIGURED = "notConfigured"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphAuthenticationPhoneType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MOBILE = "mobile"
    ALTERNATE_MOBILE = "alternateMobile"
    OFFICE = "office"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphAutomaticRepliesStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DISABLED = "disabled"
    ALWAYS_ENABLED = "alwaysEnabled"
    SCHEDULED = "scheduled"

class MicrosoftGraphBodyType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    TEXT = "text"
    HTML = "html"

class MicrosoftGraphCalendarColor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LIGHT_BLUE = "lightBlue"
    LIGHT_GREEN = "lightGreen"
    AUTO = "auto"
    LIGHT_ORANGE = "lightOrange"
    LIGHT_GRAY = "lightGray"
    LIGHT_YELLOW = "lightYellow"
    LIGHT_TEAL = "lightTeal"
    LIGHT_PINK = "lightPink"
    LIGHT_BROWN = "lightBrown"
    LIGHT_RED = "lightRed"
    MAX_COLOR = "maxColor"

class MicrosoftGraphCalendarRoleType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    FREE_BUSY_READ = "freeBusyRead"
    LIMITED_READ = "limitedRead"
    READ = "read"
    WRITE = "write"
    DELEGATE_WITHOUT_PRIVATE_EVENT_ACCESS = "delegateWithoutPrivateEventAccess"
    DELEGATE_WITH_PRIVATE_EVENT_ACCESS = "delegateWithPrivateEventAccess"
    CUSTOM = "custom"

class MicrosoftGraphCategoryColor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PRESET0 = "preset0"
    PRESET1 = "preset1"
    NONE = "none"
    PRESET2 = "preset2"
    PRESET3 = "preset3"
    PRESET4 = "preset4"
    PRESET5 = "preset5"
    PRESET6 = "preset6"
    PRESET7 = "preset7"
    PRESET8 = "preset8"
    PRESET9 = "preset9"
    PRESET10 = "preset10"
    PRESET11 = "preset11"
    PRESET12 = "preset12"
    PRESET13 = "preset13"
    PRESET14 = "preset14"
    PRESET15 = "preset15"
    PRESET16 = "preset16"
    PRESET17 = "preset17"
    PRESET18 = "preset18"
    PRESET19 = "preset19"
    PRESET20 = "preset20"
    PRESET21 = "preset21"
    PRESET22 = "preset22"
    PRESET23 = "preset23"
    PRESET24 = "preset24"

class MicrosoftGraphChannelMembershipType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STANDARD = "standard"
    PRIVATE = "private"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphChassisType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    DESKTOP = "desktop"
    LAPTOP = "laptop"
    WORKS_WORKSTATION = "worksWorkstation"
    ENTERPRISE_SERVER = "enterpriseServer"
    PHONE = "phone"
    TABLET = "tablet"
    MOBILE_OTHER = "mobileOther"
    MOBILE_UNKNOWN = "mobileUnknown"

class MicrosoftGraphChatMessageImportance(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NORMAL = "normal"
    HIGH = "high"
    URGENT = "urgent"

class MicrosoftGraphChatMessagePolicyViolationDlpActionTypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    NOTIFY_SENDER = "notifySender"
    BLOCK_ACCESS = "blockAccess"
    BLOCK_ACCESS_EXTERNAL = "blockAccessExternal"

class MicrosoftGraphChatMessagePolicyViolationUserActionTypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    OVERRIDE = "override"
    REPORT_FALSE_POSITIVE = "reportFalsePositive"

class MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ALLOW_FALSE_POSITIVE_OVERRIDE = "allowFalsePositiveOverride"
    ALLOW_OVERRIDE_WITHOUT_JUSTIFICATION = "allowOverrideWithoutJustification"
    ALLOW_OVERRIDE_WITH_JUSTIFICATION = "allowOverrideWithJustification"

class MicrosoftGraphChatMessageType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MESSAGE = "message"
    CHAT_EVENT = "chatEvent"
    TYPING = "typing"

class MicrosoftGraphClassificationMethod(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PATTERN_MATCH = "patternMatch"
    EXACT_DATA_MATCH = "exactDataMatch"
    FINGERPRINT = "fingerprint"
    MACHINE_LEARNING = "machineLearning"

class MicrosoftGraphCloudAppSecuritySessionControlType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MCAS_CONFIGURED = "mcasConfigured"
    MONITOR_ONLY = "monitorOnly"
    BLOCK_DOWNLOADS = "blockDownloads"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphComplianceState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPLIANT = "compliant"
    NONCOMPLIANT = "noncompliant"
    CONFLICT = "conflict"
    ERROR = "error"
    IN_GRACE_PERIOD = "inGracePeriod"
    CONFIG_MANAGER = "configManager"

class MicrosoftGraphComplianceStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    NOT_APPLICABLE = "notApplicable"
    COMPLIANT = "compliant"
    REMEDIATED = "remediated"
    NON_COMPLIANT = "nonCompliant"
    ERROR = "error"
    CONFLICT = "conflict"
    NOT_ASSIGNED = "notAssigned"

class MicrosoftGraphConditionalAccessClientApp(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ALL = "all"
    BROWSER = "browser"
    MOBILE_APPS_AND_DESKTOP_CLIENTS = "mobileAppsAndDesktopClients"
    EXCHANGE_ACTIVE_SYNC = "exchangeActiveSync"
    EAS_SUPPORTED = "easSupported"
    OTHER = "other"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphConditionalAccessDevicePlatform(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ANDROID = "android"
    I_OS = "iOS"
    WINDOWS = "windows"
    WINDOWS_PHONE = "windowsPhone"
    MAC_OS = "macOS"
    ALL = "all"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphConditionalAccessGrantControl(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    BLOCK = "block"
    MFA = "mfa"
    COMPLIANT_DEVICE = "compliantDevice"
    DOMAIN_JOINED_DEVICE = "domainJoinedDevice"
    APPROVED_APPLICATION = "approvedApplication"
    COMPLIANT_APPLICATION = "compliantApplication"
    PASSWORD_CHANGE = "passwordChange"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphConditionalAccessPolicyState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ENABLED = "enabled"
    DISABLED = "disabled"
    ENABLED_FOR_REPORTING_BUT_NOT_ENFORCED = "enabledForReportingButNotEnforced"

class MicrosoftGraphConfigurationManagerClientState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    INSTALLED = "installed"
    HEALTHY = "healthy"
    INSTALL_FAILED = "installFailed"
    UPDATE_FAILED = "updateFailed"
    COMMUNICATION_ERROR = "communicationError"

class MicrosoftGraphConfirmedBy(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    USER = "user"
    MANAGER = "manager"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphContentFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DEFAULT = "default"
    EMAIL = "email"

class MicrosoftGraphContentState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    REST = "rest"
    MOTION = "motion"
    USE = "use"

class MicrosoftGraphDataPolicyOperationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_STARTED = "notStarted"
    RUNNING = "running"
    COMPLETE = "complete"
    FAILED = "failed"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphDayOfWeek(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SUNDAY = "sunday"
    MONDAY = "monday"
    TUESDAY = "tuesday"
    WEDNESDAY = "wednesday"
    THURSDAY = "thursday"
    FRIDAY = "friday"
    SATURDAY = "saturday"

class MicrosoftGraphDelegateMeetingMessageDeliveryOptions(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SEND_TO_DELEGATE_AND_INFORMATION_TO_PRINCIPAL = "sendToDelegateAndInformationToPrincipal"
    SEND_TO_DELEGATE_AND_PRINCIPAL = "sendToDelegateAndPrincipal"
    SEND_TO_DELEGATE_ONLY = "sendToDelegateOnly"

class MicrosoftGraphDeviceAndAppManagementAssignmentFilterType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    INCLUDE = "include"

class MicrosoftGraphDeviceAndAppManagementAssignmentSource(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DIRECT = "direct"
    POLICY_SETS = "policySets"

class MicrosoftGraphDeviceEnrollmentType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    USER_ENROLLMENT = "userEnrollment"
    DEVICE_ENROLLMENT_MANAGER = "deviceEnrollmentManager"
    APPLE_BULK_WITH_USER = "appleBulkWithUser"
    APPLE_BULK_WITHOUT_USER = "appleBulkWithoutUser"
    WINDOWS_AZURE_AD_JOIN = "windowsAzureADJoin"
    WINDOWS_BULK_USERLESS = "windowsBulkUserless"
    WINDOWS_AUTO_ENROLLMENT = "windowsAutoEnrollment"
    WINDOWS_BULK_AZURE_DOMAIN_JOIN = "windowsBulkAzureDomainJoin"
    WINDOWS_CO_MANAGEMENT = "windowsCoManagement"
    APPLE_USER_ENROLLMENT = "appleUserEnrollment"
    APPLE_USER_ENROLLMENT_WITH_SERVICE_ACCOUNT = "appleUserEnrollmentWithServiceAccount"
    AZURE_AD_JOIN_USING_AZURE_VM_EXTENSION = "azureAdJoinUsingAzureVmExtension"
    ANDROID_ENTERPRISE_DEDICATED_DEVICE = "androidEnterpriseDedicatedDevice"
    ANDROID_ENTERPRISE_FULLY_MANAGED = "androidEnterpriseFullyManaged"
    ANDROID_ENTERPRISE_CORPORATE_WORK_PROFILE = "androidEnterpriseCorporateWorkProfile"

class MicrosoftGraphDeviceGuardLocalSystemAuthorityCredentialGuardState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    RUNNING = "running"
    REBOOT_REQUIRED = "rebootRequired"
    NOT_LICENSED = "notLicensed"
    NOT_CONFIGURED = "notConfigured"
    VIRTUALIZATION_BASED_SECURITY_NOT_RUNNING = "virtualizationBasedSecurityNotRunning"

class MicrosoftGraphDeviceGuardVirtualizationBasedSecurityHardwareRequirementState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MEET_HARDWARE_REQUIREMENTS = "meetHardwareRequirements"
    SECURE_BOOT_REQUIRED = "secureBootRequired"
    DMA_PROTECTION_REQUIRED = "dmaProtectionRequired"
    HYPER_V_NOT_SUPPORTED_FOR_GUEST_VM = "hyperVNotSupportedForGuestVM"
    HYPER_V_NOT_AVAILABLE = "hyperVNotAvailable"

class MicrosoftGraphDeviceGuardVirtualizationBasedSecurityState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    RUNNING = "running"
    REBOOT_REQUIRED = "rebootRequired"
    REQUIRE64_BIT_ARCHITECTURE = "require64BitArchitecture"
    NOT_LICENSED = "notLicensed"
    NOT_CONFIGURED = "notConfigured"
    DOES_NOT_MEET_HARDWARE_REQUIREMENTS = "doesNotMeetHardwareRequirements"
    OTHER = "other"

class MicrosoftGraphDeviceManagementExchangeAccessState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    UNKNOWN = "unknown"
    ALLOWED = "allowed"
    BLOCKED = "blocked"
    QUARANTINED = "quarantined"

class MicrosoftGraphDeviceManagementExchangeAccessStateReason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    UNKNOWN = "unknown"
    EXCHANGE_GLOBAL_RULE = "exchangeGlobalRule"
    EXCHANGE_INDIVIDUAL_RULE = "exchangeIndividualRule"
    EXCHANGE_DEVICE_RULE = "exchangeDeviceRule"
    EXCHANGE_UPGRADE = "exchangeUpgrade"
    EXCHANGE_MAILBOX_POLICY = "exchangeMailboxPolicy"
    OTHER = "other"
    COMPLIANT = "compliant"
    NOT_COMPLIANT = "notCompliant"
    NOT_ENROLLED = "notEnrolled"
    UNKNOWN_LOCATION = "unknownLocation"
    MFA_REQUIRED = "mfaRequired"
    AZURE_AD_BLOCK_DUE_TO_ACCESS_POLICY = "azureADBlockDueToAccessPolicy"
    COMPROMISED_PASSWORD = "compromisedPassword"
    DEVICE_NOT_KNOWN_WITH_MANAGED_APP = "deviceNotKnownWithManagedApp"

class MicrosoftGraphDeviceRegistrationState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_REGISTERED = "notRegistered"
    REGISTERED = "registered"
    REVOKED = "revoked"
    KEY_CONFLICT = "keyConflict"
    APPROVAL_PENDING = "approvalPending"
    CERTIFICATE_RESET = "certificateReset"
    NOT_REGISTERED_PENDING_ENROLLMENT = "notRegisteredPendingEnrollment"
    UNKNOWN = "unknown"

class MicrosoftGraphDeviceType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DESKTOP = "desktop"
    WINDOWS_RT = "windowsRT"
    WIN_MO6 = "winMO6"
    NOKIA = "nokia"
    WINDOWS_PHONE = "windowsPhone"
    MAC = "mac"
    WIN_CE = "winCE"
    WIN_EMBEDDED = "winEmbedded"
    I_PHONE = "iPhone"
    I_PAD = "iPad"
    I_POD = "iPod"
    ANDROID = "android"
    I_SOC_CONSUMER = "iSocConsumer"
    UNIX = "unix"
    MAC_MDM = "macMDM"
    HOLO_LENS = "holoLens"
    SURFACE_HUB = "surfaceHub"
    ANDROID_FOR_WORK = "androidForWork"
    ANDROID_ENTERPRISE = "androidEnterprise"
    WINDOWS10_X = "windows10x"
    ANDROIDN_GMS = "androidnGMS"
    CLOUD_PC = "cloudPC"
    BLACKBERRY = "blackberry"
    PALM = "palm"
    UNKNOWN = "unknown"

class MicrosoftGraphDlpAction(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTIFY_USER = "notifyUser"
    BLOCK_ACCESS = "blockAccess"
    DEVICE_RESTRICTION = "deviceRestriction"

class MicrosoftGraphEmailType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    WORK = "work"
    PERSONAL = "personal"
    MAIN = "main"
    OTHER = "other"

class MicrosoftGraphEventType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SINGLE_INSTANCE = "singleInstance"
    OCCURRENCE = "occurrence"
    EXCEPTION = "exception"
    SERIES_MASTER = "seriesMaster"

class MicrosoftGraphExternalAudienceScope(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    CONTACTS_ONLY = "contactsOnly"
    ALL = "all"

class MicrosoftGraphFollowupFlagStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_FLAGGED = "notFlagged"
    COMPLETE = "complete"
    FLAGGED = "flagged"

class MicrosoftGraphFreeBusyStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FREE = "free"
    TENTATIVE = "tentative"
    UNKNOWN = "unknown"
    BUSY = "busy"
    OOF = "oof"
    WORKING_ELSEWHERE = "workingElsewhere"

class MicrosoftGraphGiphyRatingType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STRICT = "strict"
    MODERATE = "moderate"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphGroupAccessType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    PRIVATE = "private"
    SECRET = "secret"
    PUBLIC = "public"

class MicrosoftGraphImportance(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LOW = "low"
    NORMAL = "normal"
    HIGH = "high"

class MicrosoftGraphInferenceClassificationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FOCUSED = "focused"
    OTHER = "other"

class MicrosoftGraphJoinType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    AZURE_AD_JOINED = "azureADJoined"
    AZURE_AD_REGISTERED = "azureADRegistered"
    HYBRID_AZURE_AD_JOINED = "hybridAzureADJoined"

class MicrosoftGraphLanguageProficiencyLevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ELEMENTARY = "elementary"
    CONVERSATIONAL = "conversational"
    LIMITED_WORKING = "limitedWorking"
    PROFESSIONAL_WORKING = "professionalWorking"
    FULL_PROFESSIONAL = "fullProfessional"
    NATIVE_OR_BILINGUAL = "nativeOrBilingual"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphLobbyBypassScope(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ORGANIZER = "organizer"
    ORGANIZATION = "organization"
    ORGANIZATION_AND_FEDERATED = "organizationAndFederated"
    EVERYONE = "everyone"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphLocationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DEFAULT = "default"
    CONFERENCE_ROOM = "conferenceRoom"
    HOME_ADDRESS = "homeAddress"
    BUSINESS_ADDRESS = "businessAddress"
    GEO_COORDINATES = "geoCoordinates"
    STREET_ADDRESS = "streetAddress"
    HOTEL = "hotel"
    RESTAURANT = "restaurant"
    LOCAL_BUSINESS = "localBusiness"
    POSTAL_ADDRESS = "postalAddress"

class MicrosoftGraphLocationUniqueIdType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    LOCATION_STORE = "locationStore"
    DIRECTORY = "directory"
    PRIVATE = "private"
    BING = "bing"

class MicrosoftGraphLongRunningOperationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTSTARTED = "notstarted"
    RUNNING = "running"
    SUCCEEDED = "succeeded"
    FAILED = "failed"

class MicrosoftGraphLostModeState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DISABLED = "disabled"
    ENABLED = "enabled"

class MicrosoftGraphMailboxRecipientType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    USER = "user"
    LINKED = "linked"
    SHARED = "shared"
    ROOM = "room"
    EQUIPMENT = "equipment"
    OTHERS = "others"

class MicrosoftGraphManagedAppFlaggedReason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ROOTED_DEVICE = "rootedDevice"
    ANDROID_BOOTLOADER_UNLOCKED = "androidBootloaderUnlocked"
    ANDROID_FACTORY_ROM_MODIFIED = "androidFactoryRomModified"

class MicrosoftGraphManagedDeviceArchitecture(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    X86 = "x86"
    X64 = "x64"
    ARM = "arm"
    AR_M64 = "arM64"

class MicrosoftGraphManagedDeviceManagementFeatures(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    MICROSOFT_MANAGED_DESKTOP = "microsoftManagedDesktop"

class MicrosoftGraphManagedDeviceOwnerType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPANY = "company"
    PERSONAL = "personal"

class MicrosoftGraphManagedDevicePartnerReportedHealthState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    ACTIVATED = "activated"
    DEACTIVATED = "deactivated"
    SECURED = "secured"
    LOW_SEVERITY = "lowSeverity"
    MEDIUM_SEVERITY = "mediumSeverity"
    HIGH_SEVERITY = "highSeverity"
    UNRESPONSIVE = "unresponsive"
    COMPROMISED = "compromised"
    MISCONFIGURED = "misconfigured"

class MicrosoftGraphManagementAgentType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EAS = "eas"
    MDM = "mdm"
    EAS_MDM = "easMdm"
    INTUNE_CLIENT = "intuneClient"
    EAS_INTUNE_CLIENT = "easIntuneClient"
    CONFIGURATION_MANAGER_CLIENT = "configurationManagerClient"
    CONFIGURATION_MANAGER_CLIENT_MDM = "configurationManagerClientMdm"
    CONFIGURATION_MANAGER_CLIENT_MDM_EAS = "configurationManagerClientMdmEas"
    UNKNOWN = "unknown"
    JAMF = "jamf"
    GOOGLE_CLOUD_DEVICE_POLICY_CONTROLLER = "googleCloudDevicePolicyController"
    MICROSOFT365_MANAGED_MDM = "microsoft365ManagedMdm"
    WINDOWS_MANAGEMENT_CLOUD_API = "windowsManagementCloudApi"

class MicrosoftGraphManagementState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MANAGED = "managed"
    RETIRE_PENDING = "retirePending"
    RETIRE_FAILED = "retireFailed"
    WIPE_PENDING = "wipePending"
    WIPE_FAILED = "wipeFailed"
    UNHEALTHY = "unhealthy"
    DELETE_PENDING = "deletePending"
    RETIRE_ISSUED = "retireIssued"
    WIPE_ISSUED = "wipeIssued"
    WIPE_CANCELED = "wipeCanceled"
    RETIRE_CANCELED = "retireCanceled"
    DISCOVERED = "discovered"

class MicrosoftGraphMeetingCapabilities(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    QUESTION_AND_ANSWER = "questionAndAnswer"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphMessageActionFlag(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ANY = "any"
    CALL = "call"
    DO_NOT_FORWARD = "doNotForward"
    FOLLOW_UP = "followUp"
    FYI = "fyi"
    FORWARD = "forward"
    NO_RESPONSE_NECESSARY = "noResponseNecessary"
    READ = "read"
    REPLY = "reply"
    REPLY_TO_ALL = "replyToAll"
    REVIEW = "review"

class MicrosoftGraphMlClassificationMatchTolerance(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EXACT = "exact"
    NEAR = "near"

class MicrosoftGraphMobileAppIntent(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AVAILABLE = "available"
    NOT_AVAILABLE = "notAvailable"
    REQUIRED_INSTALL = "requiredInstall"
    REQUIRED_UNINSTALL = "requiredUninstall"
    REQUIRED_AND_AVAILABLE_INSTALL = "requiredAndAvailableInstall"
    AVAILABLE_INSTALL_WITHOUT_ENROLLMENT = "availableInstallWithoutEnrollment"
    EXCLUDE = "exclude"

class MicrosoftGraphOnenoteUserRole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    OWNER = "Owner"
    CONTRIBUTOR = "Contributor"
    NONE = "None"
    READER = "Reader"

class MicrosoftGraphOnlineMeetingPresenters(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EVERYONE = "everyone"
    ORGANIZATION = "organization"
    ROLE_IS_PRESENTER = "roleIsPresenter"
    ORGANIZER = "organizer"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphOnlineMeetingProviderType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    SKYPE_FOR_BUSINESS = "skypeForBusiness"
    SKYPE_FOR_CONSUMER = "skypeForConsumer"
    TEAMS_FOR_BUSINESS = "teamsForBusiness"

class MicrosoftGraphOnlineMeetingRole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ATTENDEE = "attendee"
    PRESENTER = "presenter"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphOperationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_STARTED = "NotStarted"
    RUNNING = "Running"
    COMPLETED = "Completed"
    FAILED = "Failed"

class MicrosoftGraphOwnerType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPANY = "company"
    PERSONAL = "personal"

class MicrosoftGraphPermissionType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    APPLICATION = "application"
    DELEGATED = "delegated"
    DELEGATED_USER_CONSENTABLE = "delegatedUserConsentable"

class MicrosoftGraphPersistentBrowserSessionMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ALWAYS = "always"
    NEVER = "never"

class MicrosoftGraphPersonRelationship(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MANAGER = "manager"
    COLLEAGUE = "colleague"
    DIRECT_REPORT = "directReport"
    DOT_LINE_REPORT = "dotLineReport"
    ASSISTANT = "assistant"
    DOT_LINE_MANAGER = "dotLineManager"
    ALTERNATE_CONTACT = "alternateContact"
    FRIEND = "friend"
    SPOUSE = "spouse"
    SIBLING = "sibling"
    CHILD = "child"
    PARENT = "parent"
    SPONSOR = "sponsor"
    EMERGENCY_CONTACT = "emergencyContact"
    OTHER = "other"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphPhoneType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    HOME = "home"
    BUSINESS = "business"
    MOBILE = "mobile"
    OTHER = "other"
    ASSISTANT = "assistant"
    HOME_FAX = "homeFax"
    BUSINESS_FAX = "businessFax"
    OTHER_FAX = "otherFax"
    PAGER = "pager"
    RADIO = "radio"

class MicrosoftGraphPhysicalAddressType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    HOME = "home"
    BUSINESS = "business"
    OTHER = "other"

class MicrosoftGraphPlannerPreviewType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AUTOMATIC = "automatic"
    NO_PREVIEW = "noPreview"
    CHECKLIST = "checklist"
    DESCRIPTION = "description"
    REFERENCE = "reference"

class MicrosoftGraphPolicyPlatformType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ANDROID = "android"
    ANDROID_FOR_WORK = "androidForWork"
    I_OS = "iOS"
    MAC_OS = "macOS"
    WINDOWS_PHONE81 = "windowsPhone81"
    WINDOWS81_AND_LATER = "windows81AndLater"
    WINDOWS10_AND_LATER = "windows10AndLater"
    ANDROID_WORK_PROFILE = "androidWorkProfile"
    WINDOWS10_X_PROFILE = "windows10XProfile"
    ALL = "all"

class MicrosoftGraphPriority(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    HIGH = "High"
    LOW = "Low"

class MicrosoftGraphRecurrencePatternType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DAILY = "daily"
    WEEKLY = "weekly"
    ABSOLUTE_MONTHLY = "absoluteMonthly"
    RELATIVE_MONTHLY = "relativeMonthly"
    ABSOLUTE_YEARLY = "absoluteYearly"
    RELATIVE_YEARLY = "relativeYearly"

class MicrosoftGraphRecurrenceRangeType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    END_DATE = "endDate"
    NO_END = "noEnd"
    NUMBERED = "numbered"

class MicrosoftGraphReplyRestriction(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EVERYONE = "everyone"
    AUTHOR_AND_MODERATORS = "authorAndModerators"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphResponseType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ORGANIZER = "organizer"
    TENTATIVELY_ACCEPTED = "tentativelyAccepted"
    ACCEPTED = "accepted"
    DECLINED = "declined"
    NOT_RESPONDED = "notResponded"

class MicrosoftGraphResultantAppState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INSTALLED = "installed"
    NOT_APPLICABLE = "notApplicable"
    FAILED = "failed"
    NOT_INSTALLED = "notInstalled"
    UNINSTALL_FAILED = "uninstallFailed"
    PENDING_INSTALL = "pendingInstall"
    UNKNOWN = "unknown"

class MicrosoftGraphRiskDetail(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ADMIN_GENERATED_TEMPORARY_PASSWORD = "adminGeneratedTemporaryPassword"
    USER_PERFORMED_SECURED_PASSWORD_CHANGE = "userPerformedSecuredPasswordChange"
    USER_PERFORMED_SECURED_PASSWORD_RESET = "userPerformedSecuredPasswordReset"
    ADMIN_CONFIRMED_SIGNIN_SAFE = "adminConfirmedSigninSafe"
    AI_CONFIRMED_SIGNIN_SAFE = "aiConfirmedSigninSafe"
    USER_PASSED_MFA_DRIVEN_BY_RISK_BASED_POLICY = "userPassedMFADrivenByRiskBasedPolicy"
    ADMIN_DISMISSED_ALL_RISK_FOR_USER = "adminDismissedAllRiskForUser"
    ADMIN_CONFIRMED_SIGNIN_COMPROMISED = "adminConfirmedSigninCompromised"
    HIDDEN = "hidden"
    ADMIN_CONFIRMED_USER_COMPROMISED = "adminConfirmedUserCompromised"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphRiskDetectionTimingType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_DEFINED = "notDefined"
    REALTIME = "realtime"
    NEAR_REALTIME = "nearRealtime"
    OFFLINE = "offline"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphRiskEventType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNLIKELY_TRAVEL = "unlikelyTravel"
    ANONYMIZED_IP_ADDRESS = "anonymizedIPAddress"
    MALICIOUS_IP_ADDRESS = "maliciousIPAddress"
    UNFAMILIAR_FEATURES = "unfamiliarFeatures"
    MALWARE_INFECTED_IP_ADDRESS = "malwareInfectedIPAddress"
    SUSPICIOUS_IP_ADDRESS = "suspiciousIPAddress"
    LEAKED_CREDENTIALS = "leakedCredentials"
    INVESTIGATIONS_THREAT_INTELLIGENCE = "investigationsThreatIntelligence"
    GENERIC = "generic"
    ADMIN_CONFIRMED_USER_COMPROMISED = "adminConfirmedUserCompromised"
    MCAS_IMPOSSIBLE_TRAVEL = "mcasImpossibleTravel"
    MCAS_SUSPICIOUS_INBOX_MANIPULATION_RULES = "mcasSuspiciousInboxManipulationRules"
    INVESTIGATIONS_THREAT_INTELLIGENCE_SIGNIN_LINKED = "investigationsThreatIntelligenceSigninLinked"
    MALICIOUS_IP_ADDRESS_VALID_CREDENTIALS_BLOCKED_IP = "maliciousIPAddressValidCredentialsBlockedIP"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphRiskLevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    HIDDEN = "hidden"
    NONE = "none"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphRiskState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    CONFIRMED_SAFE = "confirmedSafe"
    REMEDIATED = "remediated"
    DISMISSED = "dismissed"
    AT_RISK = "atRisk"
    CONFIRMED_COMPROMISED = "confirmedCompromised"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphRuleMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AUDIT = "audit"
    AUDIT_AND_NOTIFY = "auditAndNotify"
    ENFORCE = "enforce"
    PENDING_DELETION = "pendingDeletion"
    TEST = "test"

class MicrosoftGraphScheduleChangeRequestActor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SENDER = "sender"
    RECIPIENT = "recipient"
    MANAGER = "manager"
    SYSTEM = "system"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphScheduleChangeState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "pending"
    APPROVED = "approved"
    DECLINED = "declined"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphScheduleEntityTheme(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    WHITE = "white"
    BLUE = "blue"
    GREEN = "green"
    PURPLE = "purple"
    PINK = "pink"
    YELLOW = "yellow"
    GRAY = "gray"
    DARK_BLUE = "darkBlue"
    DARK_GREEN = "darkGreen"
    DARK_PURPLE = "darkPurple"
    DARK_PINK = "darkPink"
    DARK_YELLOW = "darkYellow"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphSecurityBaselineComplianceState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    SECURE = "secure"
    NOT_APPLICABLE = "notApplicable"
    NOT_SECURE = "notSecure"
    ERROR = "error"
    CONFLICT = "conflict"

class MicrosoftGraphSecurityBaselinePolicySourceType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DEVICE_CONFIGURATION = "deviceConfiguration"
    DEVICE_INTENT = "deviceIntent"

class MicrosoftGraphSensitiveTypeScope(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FULL_DOCUMENT = "fullDocument"
    PARTIAL_DOCUMENT = "partialDocument"

class MicrosoftGraphSensitiveTypeSource(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    OUT_OF_BOX = "outOfBox"
    TENANT = "tenant"

class MicrosoftGraphSensitivity(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NORMAL = "normal"
    PERSONAL = "personal"
    PRIVATE = "private"
    CONFIDENTIAL = "confidential"

class MicrosoftGraphSensitivityLabelTarget(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EMAIL = "email"
    SITE = "site"
    UNIFIED_GROUP = "unifiedGroup"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphSettingSourceType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DEVICE_CONFIGURATION = "deviceConfiguration"
    DEVICE_INTENT = "deviceIntent"

class MicrosoftGraphSigninFrequencyType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DAYS = "days"
    HOURS = "hours"

class MicrosoftGraphSkillProficiencyLevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ELEMENTARY = "elementary"
    LIMITED_WORKING = "limitedWorking"
    GENERAL_PROFESSIONAL = "generalProfessional"
    ADVANCED_PROFESSIONAL = "advancedProfessional"
    EXPERT = "expert"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ACTIVE = "active"
    UPDATED = "updated"
    DELETED = "deleted"
    IGNORED = "ignored"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTaskStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_STARTED = "notStarted"
    IN_PROGRESS = "inProgress"
    COMPLETED = "completed"
    WAITING_ON_OTHERS = "waitingOnOthers"
    DEFERRED = "deferred"

class MicrosoftGraphTeamsAppDistributionMethod(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STORE = "store"
    ORGANIZATION = "organization"
    SIDELOADED = "sideloaded"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamsAppPublishingState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SUBMITTED = "submitted"
    REJECTED = "rejected"
    PUBLISHED = "published"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamsAsyncOperationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "invalid"
    NOT_STARTED = "notStarted"
    IN_PROGRESS = "inProgress"
    SUCCEEDED = "succeeded"
    FAILED = "failed"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamsAsyncOperationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "invalid"
    CLONE_TEAM = "cloneTeam"
    ARCHIVE_TEAM = "archiveTeam"
    UNARCHIVE_TEAM = "unarchiveTeam"
    CREATE_TEAM = "createTeam"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamSpecialization(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    EDUCATION_STANDARD = "educationStandard"
    EDUCATION_CLASS = "educationClass"
    EDUCATION_PROFESSIONAL_LEARNING_COMMUNITY = "educationProfessionalLearningCommunity"
    EDUCATION_STAFF = "educationStaff"
    HEALTHCARE_STANDARD = "healthcareStandard"
    HEALTHCARE_CARE_COORDINATION = "healthcareCareCoordination"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamVisibilityType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PRIVATE = "private"
    PUBLIC = "public"
    HIDDEN_MEMBERSHIP = "hiddenMembership"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphThreatAssessmentContentType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MAIL = "mail"
    URL = "url"
    FILE = "file"

class MicrosoftGraphThreatAssessmentRequestSource(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNDEFINED = "undefined"
    USER = "user"
    ADMINISTRATOR = "administrator"

class MicrosoftGraphThreatAssessmentResultType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CHECK_POLICY = "checkPolicy"
    RESCAN = "rescan"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphThreatAssessmentStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "pending"
    COMPLETED = "completed"

class MicrosoftGraphThreatCategory(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNDEFINED = "undefined"
    SPAM = "spam"
    PHISHING = "phishing"
    MALWARE = "malware"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphThreatExpectedAssessment(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    BLOCK = "block"
    UNBLOCK = "unblock"

class MicrosoftGraphTimeCardState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CLOCKED_IN = "clockedIn"
    ON_BREAK = "onBreak"
    CLOCKED_OUT = "clockedOut"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTimeOffReasonIconType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    CAR = "car"
    CALENDAR = "calendar"
    RUNNING = "running"
    PLANE = "plane"
    FIRST_AID = "firstAid"
    DOCTOR = "doctor"
    NOT_WORKING = "notWorking"
    CLOCK = "clock"
    JURY_DUTY = "juryDuty"
    GLOBE = "globe"
    CUP = "cup"
    PHONE = "phone"
    WEATHER = "weather"
    UMBRELLA = "umbrella"
    PIGGY_BANK = "piggyBank"
    DOG = "dog"
    CAKE = "cake"
    TRAFFIC_CONE = "trafficCone"
    PIN = "pin"
    SUNNY = "sunny"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTokenIssuerType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AZURE_AD = "AzureAD"
    AD_FEDERATION_SERVICES = "ADFederationServices"
    UNKNOWN_FUTURE_VALUE = "UnknownFutureValue"

class MicrosoftGraphUserFlowType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SIGN_UP = "signUp"
    SIGN_IN = "signIn"
    SIGN_UP_OR_SIGN_IN = "signUpOrSignIn"
    PASSWORD_RESET = "passwordReset"
    PROFILE_UPDATE = "profileUpdate"
    RESOURCE_OWNER = "resourceOwner"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphUserNewMessageRestriction(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EVERYONE = "everyone"
    EVERYONE_EXCEPT_GUESTS = "everyoneExceptGuests"
    MODERATORS = "moderators"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphWebsiteType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    OTHER = "other"
    HOME = "home"
    WORK = "work"
    BLOG = "blog"
    PROFILE = "profile"

class MicrosoftGraphWeekIndex(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FIRST = "first"
    SECOND = "second"
    THIRD = "third"
    FOURTH = "fourth"
    LAST = "last"

class MicrosoftGraphWellknownListName(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    DEFAULT_LIST = "defaultList"
    FLAGGED_EMAILS = "flaggedEmails"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphWindowsDeviceHealthState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CLEAN = "clean"
    FULL_SCAN_PENDING = "fullScanPending"
    REBOOT_PENDING = "rebootPending"
    MANUAL_STEPS_PENDING = "manualStepsPending"
    OFFLINE_SCAN_PENDING = "offlineScanPending"
    CRITICAL = "critical"

class MicrosoftGraphWindowsMalwareCategory(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "invalid"
    ADWARE = "adware"
    SPYWARE = "spyware"
    PASSWORD_STEALER = "passwordStealer"
    TROJAN_DOWNLOADER = "trojanDownloader"
    WORM = "worm"
    BACKDOOR = "backdoor"
    REMOTE_ACCESS_TROJAN = "remoteAccessTrojan"
    TROJAN = "trojan"
    EMAIL_FLOODER = "emailFlooder"
    KEYLOGGER = "keylogger"
    DIALER = "dialer"
    MONITORING_SOFTWARE = "monitoringSoftware"
    BROWSER_MODIFIER = "browserModifier"
    COOKIE = "cookie"
    BROWSER_PLUGIN = "browserPlugin"
    AOL_EXPLOIT = "aolExploit"
    NUKER = "nuker"
    SECURITY_DISABLER = "securityDisabler"
    JOKE_PROGRAM = "jokeProgram"
    HOSTILE_ACTIVE_X_CONTROL = "hostileActiveXControl"
    SOFTWARE_BUNDLER = "softwareBundler"
    STEALTH_NOTIFIER = "stealthNotifier"
    SETTINGS_MODIFIER = "settingsModifier"
    TOOL_BAR = "toolBar"
    REMOTE_CONTROL_SOFTWARE = "remoteControlSoftware"
    TROJAN_FTP = "trojanFtp"
    POTENTIAL_UNWANTED_SOFTWARE = "potentialUnwantedSoftware"
    ICQ_EXPLOIT = "icqExploit"
    TROJAN_TELNET = "trojanTelnet"
    EXPLOIT = "exploit"
    FILESHARING_PROGRAM = "filesharingProgram"
    MALWARE_CREATION_TOOL = "malwareCreationTool"
    TOOL = "tool"
    TROJAN_DENIAL_OF_SERVICE = "trojanDenialOfService"
    TROJAN_DROPPER = "trojanDropper"
    TROJAN_MASS_MAILER = "trojanMassMailer"
    TROJAN_MONITORING_SOFTWARE = "trojanMonitoringSoftware"
    TROJAN_PROXY_SERVER = "trojanProxyServer"
    VIRUS = "virus"
    KNOWN = "known"
    UNKNOWN = "unknown"
    SPP = "spp"
    BEHAVIOR = "behavior"
    VULNERABILITY = "vulnerability"
    POLICY = "policy"
    ENTERPRISE_UNWANTED_SOFTWARE = "enterpriseUnwantedSoftware"
    RANSOM = "ransom"
    HIPS_RULE = "hipsRule"

class MicrosoftGraphWindowsMalwareExecutionState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    BLOCKED = "blocked"
    ALLOWED = "allowed"
    RUNNING = "running"
    NOT_RUNNING = "notRunning"

class MicrosoftGraphWindowsMalwareSeverity(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    LOW = "low"
    MODERATE = "moderate"
    HIGH = "high"
    SEVERE = "severe"

class MicrosoftGraphWindowsMalwareState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    DETECTED = "detected"
    CLEANED = "cleaned"
    QUARANTINED = "quarantined"
    REMOVED = "removed"
    ALLOWED = "allowed"
    BLOCKED = "blocked"
    CLEAN_FAILED = "cleanFailed"
    QUARANTINE_FAILED = "quarantineFailed"
    REMOVE_FAILED = "removeFailed"
    ALLOW_FAILED = "allowFailed"
    ABANDONED = "abandoned"
    BLOCK_FAILED = "blockFailed"

class MicrosoftGraphWindowsMalwareThreatState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ACTIVE = "active"
    ACTION_FAILED = "actionFailed"
    MANUAL_STEPS_REQUIRED = "manualStepsRequired"
    FULL_SCAN_REQUIRED = "fullScanRequired"
    REBOOT_REQUIRED = "rebootRequired"
    REMEDIATED_WITH_NON_CRITICAL_FAILURES = "remediatedWithNonCriticalFailures"
    QUARANTINED = "quarantined"
    REMOVED = "removed"
    CLEANED = "cleaned"
    ALLOWED = "allowed"
    NO_STATUS_CLEARED = "noStatusCleared"

class MicrosoftGraphWorkbookOperationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_STARTED = "notStarted"
    RUNNING = "running"
    SUCCEEDED = "succeeded"
    FAILED = "failed"
