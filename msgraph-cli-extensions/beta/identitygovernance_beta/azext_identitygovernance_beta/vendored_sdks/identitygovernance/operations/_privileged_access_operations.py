# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class PrivilegedAccessOperations(object):
    """PrivilegedAccessOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~identity_governance.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_resource(
        self,
        privileged_access_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum1352"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum1353"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum1354"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfGovernanceResource"]
        """Get resources from privilegedAccess.

        Get resources from privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum1352]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1353]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1354]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfGovernanceResource or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~identity_governance.models.CollectionOfGovernanceResource]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfGovernanceResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_resource.metadata['url']  # type: ignore
                path_format_arguments = {
                    'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfGovernanceResource', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_resource.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/resources'}  # type: ignore

    def create_resource(
        self,
        privileged_access_id,  # type: str
        id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        external_id=None,  # type: Optional[str]
        registered_date_time=None,  # type: Optional[datetime.datetime]
        registered_root=None,  # type: Optional[str]
        status=None,  # type: Optional[str]
        type=None,  # type: Optional[str]
        parent=None,  # type: Optional["models.MicrosoftGraphGovernanceResource"]
        role_assignment_requests=None,  # type: Optional[List["models.MicrosoftGraphGovernanceRoleAssignmentRequest"]]
        role_assignments=None,  # type: Optional[List["models.MicrosoftGraphGovernanceRoleAssignment"]]
        role_definitions=None,  # type: Optional[List["models.MicrosoftGraphGovernanceRoleDefinition"]]
        role_settings=None,  # type: Optional[List["models.MicrosoftGraphGovernanceRoleSetting"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphGovernanceResource"
        """Create new navigation property to resources for privilegedAccess.

        Create new navigation property to resources for privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param id: Read-only.
        :type id: str
        :param display_name:
        :type display_name: str
        :param external_id:
        :type external_id: str
        :param registered_date_time:
        :type registered_date_time: ~datetime.datetime
        :param registered_root:
        :type registered_root: str
        :param status:
        :type status: str
        :param type:
        :type type: str
        :param parent: governanceResource.
        :type parent: ~identity_governance.models.MicrosoftGraphGovernanceResource
        :param role_assignment_requests:
        :type role_assignment_requests: list[~identity_governance.models.MicrosoftGraphGovernanceRoleAssignmentRequest]
        :param role_assignments:
        :type role_assignments: list[~identity_governance.models.MicrosoftGraphGovernanceRoleAssignment]
        :param role_definitions:
        :type role_definitions: list[~identity_governance.models.MicrosoftGraphGovernanceRoleDefinition]
        :param role_settings:
        :type role_settings: list[~identity_governance.models.MicrosoftGraphGovernanceRoleSetting]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphGovernanceResource, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphGovernanceResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphGovernanceResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphGovernanceResource(id=id, display_name=display_name, external_id=external_id, registered_date_time=registered_date_time, registered_root=registered_root, status=status, type=type, parent=parent, role_assignment_requests=role_assignment_requests, role_assignments=role_assignments, role_definitions=role_definitions, role_settings=role_settings)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_resource.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphGovernanceResource')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphGovernanceResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_resource.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/resources'}  # type: ignore

    def get_resource(
        self,
        privileged_access_id,  # type: str
        governance_resource_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum1355"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum1356"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphGovernanceResource"
        """Get resources from privilegedAccess.

        Get resources from privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param governance_resource_id: key: id of governanceResource.
        :type governance_resource_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1355]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1356]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphGovernanceResource, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphGovernanceResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphGovernanceResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_resource.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
            'governanceResource-id': self._serialize.url("governance_resource_id", governance_resource_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphGovernanceResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_resource.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/resources/{governanceResource-id}'}  # type: ignore

    def update_resource(
        self,
        privileged_access_id,  # type: str
        governance_resource_id,  # type: str
        id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        external_id=None,  # type: Optional[str]
        registered_date_time=None,  # type: Optional[datetime.datetime]
        registered_root=None,  # type: Optional[str]
        status=None,  # type: Optional[str]
        type=None,  # type: Optional[str]
        parent=None,  # type: Optional["models.MicrosoftGraphGovernanceResource"]
        role_assignment_requests=None,  # type: Optional[List["models.MicrosoftGraphGovernanceRoleAssignmentRequest"]]
        role_assignments=None,  # type: Optional[List["models.MicrosoftGraphGovernanceRoleAssignment"]]
        role_definitions=None,  # type: Optional[List["models.MicrosoftGraphGovernanceRoleDefinition"]]
        role_settings=None,  # type: Optional[List["models.MicrosoftGraphGovernanceRoleSetting"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property resources in privilegedAccess.

        Update the navigation property resources in privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param governance_resource_id: key: id of governanceResource.
        :type governance_resource_id: str
        :param id: Read-only.
        :type id: str
        :param display_name:
        :type display_name: str
        :param external_id:
        :type external_id: str
        :param registered_date_time:
        :type registered_date_time: ~datetime.datetime
        :param registered_root:
        :type registered_root: str
        :param status:
        :type status: str
        :param type:
        :type type: str
        :param parent: governanceResource.
        :type parent: ~identity_governance.models.MicrosoftGraphGovernanceResource
        :param role_assignment_requests:
        :type role_assignment_requests: list[~identity_governance.models.MicrosoftGraphGovernanceRoleAssignmentRequest]
        :param role_assignments:
        :type role_assignments: list[~identity_governance.models.MicrosoftGraphGovernanceRoleAssignment]
        :param role_definitions:
        :type role_definitions: list[~identity_governance.models.MicrosoftGraphGovernanceRoleDefinition]
        :param role_settings:
        :type role_settings: list[~identity_governance.models.MicrosoftGraphGovernanceRoleSetting]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphGovernanceResource(id=id, display_name=display_name, external_id=external_id, registered_date_time=registered_date_time, registered_root=registered_root, status=status, type=type, parent=parent, role_assignment_requests=role_assignment_requests, role_assignments=role_assignments, role_definitions=role_definitions, role_settings=role_settings)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_resource.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
            'governanceResource-id': self._serialize.url("governance_resource_id", governance_resource_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphGovernanceResource')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_resource.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/resources/{governanceResource-id}'}  # type: ignore

    def delete_resource(
        self,
        privileged_access_id,  # type: str
        governance_resource_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property resources for privilegedAccess.

        Delete navigation property resources for privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param governance_resource_id: key: id of governanceResource.
        :type governance_resource_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_resource.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
            'governanceResource-id': self._serialize.url("governance_resource_id", governance_resource_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_resource.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/resources/{governanceResource-id}'}  # type: ignore

    def list_role_assignment_request(
        self,
        privileged_access_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum1357"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum1358"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum1359"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfGovernanceRoleAssignmentRequest"]
        """Get roleAssignmentRequests from privilegedAccess.

        Get roleAssignmentRequests from privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum1357]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1358]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1359]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfGovernanceRoleAssignmentRequest or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~identity_governance.models.CollectionOfGovernanceRoleAssignmentRequest]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfGovernanceRoleAssignmentRequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_role_assignment_request.metadata['url']  # type: ignore
                path_format_arguments = {
                    'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfGovernanceRoleAssignmentRequest', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_role_assignment_request.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/roleAssignmentRequests'}  # type: ignore

    def create_role_assignment_request(
        self,
        privileged_access_id,  # type: str
        id=None,  # type: Optional[str]
        assignment_state=None,  # type: Optional[str]
        linked_eligible_role_assignment_id=None,  # type: Optional[str]
        reason=None,  # type: Optional[str]
        requested_date_time=None,  # type: Optional[datetime.datetime]
        resource_id=None,  # type: Optional[str]
        role_definition_id=None,  # type: Optional[str]
        schedule=None,  # type: Optional["models.MicrosoftGraphGovernanceSchedule"]
        subject_id=None,  # type: Optional[str]
        type=None,  # type: Optional[str]
        resource=None,  # type: Optional["models.MicrosoftGraphGovernanceResource"]
        role_definition=None,  # type: Optional["models.MicrosoftGraphGovernanceRoleDefinition"]
        subject=None,  # type: Optional["models.MicrosoftGraphGovernanceSubject"]
        status=None,  # type: Optional[str]
        status_details=None,  # type: Optional[List["models.MicrosoftGraphKeyValue"]]
        sub_status=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphGovernanceRoleAssignmentRequest"
        """Create new navigation property to roleAssignmentRequests for privilegedAccess.

        Create new navigation property to roleAssignmentRequests for privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param id: Read-only.
        :type id: str
        :param assignment_state:
        :type assignment_state: str
        :param linked_eligible_role_assignment_id:
        :type linked_eligible_role_assignment_id: str
        :param reason:
        :type reason: str
        :param requested_date_time:
        :type requested_date_time: ~datetime.datetime
        :param resource_id:
        :type resource_id: str
        :param role_definition_id:
        :type role_definition_id: str
        :param schedule: governanceSchedule.
        :type schedule: ~identity_governance.models.MicrosoftGraphGovernanceSchedule
        :param subject_id:
        :type subject_id: str
        :param type:
        :type type: str
        :param resource: governanceResource.
        :type resource: ~identity_governance.models.MicrosoftGraphGovernanceResource
        :param role_definition: governanceRoleDefinition.
        :type role_definition: ~identity_governance.models.MicrosoftGraphGovernanceRoleDefinition
        :param subject: governanceSubject.
        :type subject: ~identity_governance.models.MicrosoftGraphGovernanceSubject
        :param status:
        :type status: str
        :param status_details:
        :type status_details: list[~identity_governance.models.MicrosoftGraphKeyValue]
        :param sub_status:
        :type sub_status: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphGovernanceRoleAssignmentRequest, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphGovernanceRoleAssignmentRequest
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphGovernanceRoleAssignmentRequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphGovernanceRoleAssignmentRequest(id=id, assignment_state=assignment_state, linked_eligible_role_assignment_id=linked_eligible_role_assignment_id, reason=reason, requested_date_time=requested_date_time, resource_id=resource_id, role_definition_id=role_definition_id, schedule=schedule, subject_id=subject_id, type=type, resource=resource, role_definition=role_definition, subject=subject, status=status, status_details=status_details, sub_status=sub_status)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_role_assignment_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphGovernanceRoleAssignmentRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphGovernanceRoleAssignmentRequest', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_role_assignment_request.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/roleAssignmentRequests'}  # type: ignore

    def get_role_assignment_request(
        self,
        privileged_access_id,  # type: str
        governance_role_assignment_request_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum1360"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum1361"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphGovernanceRoleAssignmentRequest"
        """Get roleAssignmentRequests from privilegedAccess.

        Get roleAssignmentRequests from privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param governance_role_assignment_request_id: key: id of governanceRoleAssignmentRequest.
        :type governance_role_assignment_request_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1360]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1361]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphGovernanceRoleAssignmentRequest, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphGovernanceRoleAssignmentRequest
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphGovernanceRoleAssignmentRequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_role_assignment_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
            'governanceRoleAssignmentRequest-id': self._serialize.url("governance_role_assignment_request_id", governance_role_assignment_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphGovernanceRoleAssignmentRequest', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_role_assignment_request.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/roleAssignmentRequests/{governanceRoleAssignmentRequest-id}'}  # type: ignore

    def update_role_assignment_request(
        self,
        privileged_access_id,  # type: str
        governance_role_assignment_request_id,  # type: str
        id=None,  # type: Optional[str]
        assignment_state=None,  # type: Optional[str]
        linked_eligible_role_assignment_id=None,  # type: Optional[str]
        reason=None,  # type: Optional[str]
        requested_date_time=None,  # type: Optional[datetime.datetime]
        resource_id=None,  # type: Optional[str]
        role_definition_id=None,  # type: Optional[str]
        schedule=None,  # type: Optional["models.MicrosoftGraphGovernanceSchedule"]
        subject_id=None,  # type: Optional[str]
        type=None,  # type: Optional[str]
        resource=None,  # type: Optional["models.MicrosoftGraphGovernanceResource"]
        role_definition=None,  # type: Optional["models.MicrosoftGraphGovernanceRoleDefinition"]
        subject=None,  # type: Optional["models.MicrosoftGraphGovernanceSubject"]
        status=None,  # type: Optional[str]
        status_details=None,  # type: Optional[List["models.MicrosoftGraphKeyValue"]]
        sub_status=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property roleAssignmentRequests in privilegedAccess.

        Update the navigation property roleAssignmentRequests in privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param governance_role_assignment_request_id: key: id of governanceRoleAssignmentRequest.
        :type governance_role_assignment_request_id: str
        :param id: Read-only.
        :type id: str
        :param assignment_state:
        :type assignment_state: str
        :param linked_eligible_role_assignment_id:
        :type linked_eligible_role_assignment_id: str
        :param reason:
        :type reason: str
        :param requested_date_time:
        :type requested_date_time: ~datetime.datetime
        :param resource_id:
        :type resource_id: str
        :param role_definition_id:
        :type role_definition_id: str
        :param schedule: governanceSchedule.
        :type schedule: ~identity_governance.models.MicrosoftGraphGovernanceSchedule
        :param subject_id:
        :type subject_id: str
        :param type:
        :type type: str
        :param resource: governanceResource.
        :type resource: ~identity_governance.models.MicrosoftGraphGovernanceResource
        :param role_definition: governanceRoleDefinition.
        :type role_definition: ~identity_governance.models.MicrosoftGraphGovernanceRoleDefinition
        :param subject: governanceSubject.
        :type subject: ~identity_governance.models.MicrosoftGraphGovernanceSubject
        :param status:
        :type status: str
        :param status_details:
        :type status_details: list[~identity_governance.models.MicrosoftGraphKeyValue]
        :param sub_status:
        :type sub_status: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphGovernanceRoleAssignmentRequest(id=id, assignment_state=assignment_state, linked_eligible_role_assignment_id=linked_eligible_role_assignment_id, reason=reason, requested_date_time=requested_date_time, resource_id=resource_id, role_definition_id=role_definition_id, schedule=schedule, subject_id=subject_id, type=type, resource=resource, role_definition=role_definition, subject=subject, status=status, status_details=status_details, sub_status=sub_status)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_role_assignment_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
            'governanceRoleAssignmentRequest-id': self._serialize.url("governance_role_assignment_request_id", governance_role_assignment_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphGovernanceRoleAssignmentRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_role_assignment_request.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/roleAssignmentRequests/{governanceRoleAssignmentRequest-id}'}  # type: ignore

    def delete_role_assignment_request(
        self,
        privileged_access_id,  # type: str
        governance_role_assignment_request_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property roleAssignmentRequests for privilegedAccess.

        Delete navigation property roleAssignmentRequests for privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param governance_role_assignment_request_id: key: id of governanceRoleAssignmentRequest.
        :type governance_role_assignment_request_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_role_assignment_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
            'governanceRoleAssignmentRequest-id': self._serialize.url("governance_role_assignment_request_id", governance_role_assignment_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_role_assignment_request.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/roleAssignmentRequests/{governanceRoleAssignmentRequest-id}'}  # type: ignore

    def list_role_assignment(
        self,
        privileged_access_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum1362"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum1363"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum1364"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfGovernanceRoleAssignment"]
        """Get roleAssignments from privilegedAccess.

        Get roleAssignments from privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum1362]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1363]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1364]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfGovernanceRoleAssignment or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~identity_governance.models.CollectionOfGovernanceRoleAssignment]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfGovernanceRoleAssignment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_role_assignment.metadata['url']  # type: ignore
                path_format_arguments = {
                    'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfGovernanceRoleAssignment', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_role_assignment.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/roleAssignments'}  # type: ignore

    def create_role_assignment(
        self,
        privileged_access_id,  # type: str
        id=None,  # type: Optional[str]
        assignment_state=None,  # type: Optional[str]
        end_date_time=None,  # type: Optional[datetime.datetime]
        external_id=None,  # type: Optional[str]
        linked_eligible_role_assignment_id=None,  # type: Optional[str]
        member_type=None,  # type: Optional[str]
        resource_id=None,  # type: Optional[str]
        role_definition_id=None,  # type: Optional[str]
        start_date_time=None,  # type: Optional[datetime.datetime]
        status=None,  # type: Optional[str]
        subject_id=None,  # type: Optional[str]
        linked_eligible_role_assignment=None,  # type: Optional["models.MicrosoftGraphGovernanceRoleAssignment"]
        resource=None,  # type: Optional["models.MicrosoftGraphGovernanceResource"]
        role_definition=None,  # type: Optional["models.MicrosoftGraphGovernanceRoleDefinition"]
        subject=None,  # type: Optional["models.MicrosoftGraphGovernanceSubject"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphGovernanceRoleAssignment"
        """Create new navigation property to roleAssignments for privilegedAccess.

        Create new navigation property to roleAssignments for privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param id: Read-only.
        :type id: str
        :param assignment_state:
        :type assignment_state: str
        :param end_date_time:
        :type end_date_time: ~datetime.datetime
        :param external_id:
        :type external_id: str
        :param linked_eligible_role_assignment_id:
        :type linked_eligible_role_assignment_id: str
        :param member_type:
        :type member_type: str
        :param resource_id:
        :type resource_id: str
        :param role_definition_id:
        :type role_definition_id: str
        :param start_date_time:
        :type start_date_time: ~datetime.datetime
        :param status:
        :type status: str
        :param subject_id:
        :type subject_id: str
        :param linked_eligible_role_assignment: governanceRoleAssignment.
        :type linked_eligible_role_assignment: ~identity_governance.models.MicrosoftGraphGovernanceRoleAssignment
        :param resource: governanceResource.
        :type resource: ~identity_governance.models.MicrosoftGraphGovernanceResource
        :param role_definition: governanceRoleDefinition.
        :type role_definition: ~identity_governance.models.MicrosoftGraphGovernanceRoleDefinition
        :param subject: governanceSubject.
        :type subject: ~identity_governance.models.MicrosoftGraphGovernanceSubject
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphGovernanceRoleAssignment, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphGovernanceRoleAssignment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphGovernanceRoleAssignment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphGovernanceRoleAssignment(id=id, assignment_state=assignment_state, end_date_time=end_date_time, external_id=external_id, linked_eligible_role_assignment_id=linked_eligible_role_assignment_id, member_type=member_type, resource_id=resource_id, role_definition_id=role_definition_id, start_date_time=start_date_time, status=status, subject_id=subject_id, linked_eligible_role_assignment=linked_eligible_role_assignment, resource=resource, role_definition=role_definition, subject=subject)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_role_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphGovernanceRoleAssignment')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphGovernanceRoleAssignment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_role_assignment.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/roleAssignments'}  # type: ignore

    def get_role_assignment(
        self,
        privileged_access_id,  # type: str
        governance_role_assignment_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum1365"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum1366"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphGovernanceRoleAssignment"
        """Get roleAssignments from privilegedAccess.

        Get roleAssignments from privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param governance_role_assignment_id: key: id of governanceRoleAssignment.
        :type governance_role_assignment_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1365]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1366]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphGovernanceRoleAssignment, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphGovernanceRoleAssignment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphGovernanceRoleAssignment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_role_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
            'governanceRoleAssignment-id': self._serialize.url("governance_role_assignment_id", governance_role_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphGovernanceRoleAssignment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_role_assignment.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/roleAssignments/{governanceRoleAssignment-id}'}  # type: ignore

    def update_role_assignment(
        self,
        privileged_access_id,  # type: str
        governance_role_assignment_id,  # type: str
        id=None,  # type: Optional[str]
        assignment_state=None,  # type: Optional[str]
        end_date_time=None,  # type: Optional[datetime.datetime]
        external_id=None,  # type: Optional[str]
        linked_eligible_role_assignment_id=None,  # type: Optional[str]
        member_type=None,  # type: Optional[str]
        resource_id=None,  # type: Optional[str]
        role_definition_id=None,  # type: Optional[str]
        start_date_time=None,  # type: Optional[datetime.datetime]
        status=None,  # type: Optional[str]
        subject_id=None,  # type: Optional[str]
        linked_eligible_role_assignment=None,  # type: Optional["models.MicrosoftGraphGovernanceRoleAssignment"]
        resource=None,  # type: Optional["models.MicrosoftGraphGovernanceResource"]
        role_definition=None,  # type: Optional["models.MicrosoftGraphGovernanceRoleDefinition"]
        subject=None,  # type: Optional["models.MicrosoftGraphGovernanceSubject"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property roleAssignments in privilegedAccess.

        Update the navigation property roleAssignments in privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param governance_role_assignment_id: key: id of governanceRoleAssignment.
        :type governance_role_assignment_id: str
        :param id: Read-only.
        :type id: str
        :param assignment_state:
        :type assignment_state: str
        :param end_date_time:
        :type end_date_time: ~datetime.datetime
        :param external_id:
        :type external_id: str
        :param linked_eligible_role_assignment_id:
        :type linked_eligible_role_assignment_id: str
        :param member_type:
        :type member_type: str
        :param resource_id:
        :type resource_id: str
        :param role_definition_id:
        :type role_definition_id: str
        :param start_date_time:
        :type start_date_time: ~datetime.datetime
        :param status:
        :type status: str
        :param subject_id:
        :type subject_id: str
        :param linked_eligible_role_assignment: governanceRoleAssignment.
        :type linked_eligible_role_assignment: ~identity_governance.models.MicrosoftGraphGovernanceRoleAssignment
        :param resource: governanceResource.
        :type resource: ~identity_governance.models.MicrosoftGraphGovernanceResource
        :param role_definition: governanceRoleDefinition.
        :type role_definition: ~identity_governance.models.MicrosoftGraphGovernanceRoleDefinition
        :param subject: governanceSubject.
        :type subject: ~identity_governance.models.MicrosoftGraphGovernanceSubject
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphGovernanceRoleAssignment(id=id, assignment_state=assignment_state, end_date_time=end_date_time, external_id=external_id, linked_eligible_role_assignment_id=linked_eligible_role_assignment_id, member_type=member_type, resource_id=resource_id, role_definition_id=role_definition_id, start_date_time=start_date_time, status=status, subject_id=subject_id, linked_eligible_role_assignment=linked_eligible_role_assignment, resource=resource, role_definition=role_definition, subject=subject)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_role_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
            'governanceRoleAssignment-id': self._serialize.url("governance_role_assignment_id", governance_role_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphGovernanceRoleAssignment')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_role_assignment.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/roleAssignments/{governanceRoleAssignment-id}'}  # type: ignore

    def delete_role_assignment(
        self,
        privileged_access_id,  # type: str
        governance_role_assignment_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property roleAssignments for privilegedAccess.

        Delete navigation property roleAssignments for privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param governance_role_assignment_id: key: id of governanceRoleAssignment.
        :type governance_role_assignment_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_role_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
            'governanceRoleAssignment-id': self._serialize.url("governance_role_assignment_id", governance_role_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_role_assignment.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/roleAssignments/{governanceRoleAssignment-id}'}  # type: ignore

    def list_role_definition(
        self,
        privileged_access_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum1367"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum1368"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum1369"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfGovernanceRoleDefinition"]
        """Get roleDefinitions from privilegedAccess.

        Get roleDefinitions from privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum1367]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1368]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1369]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfGovernanceRoleDefinition or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~identity_governance.models.CollectionOfGovernanceRoleDefinition]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfGovernanceRoleDefinition"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_role_definition.metadata['url']  # type: ignore
                path_format_arguments = {
                    'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfGovernanceRoleDefinition', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_role_definition.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/roleDefinitions'}  # type: ignore

    def create_role_definition(
        self,
        privileged_access_id,  # type: str
        id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        external_id=None,  # type: Optional[str]
        resource_id=None,  # type: Optional[str]
        template_id=None,  # type: Optional[str]
        resource=None,  # type: Optional["models.MicrosoftGraphGovernanceResource"]
        role_setting=None,  # type: Optional["models.MicrosoftGraphGovernanceRoleSetting"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphGovernanceRoleDefinition"
        """Create new navigation property to roleDefinitions for privilegedAccess.

        Create new navigation property to roleDefinitions for privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param id: Read-only.
        :type id: str
        :param display_name:
        :type display_name: str
        :param external_id:
        :type external_id: str
        :param resource_id:
        :type resource_id: str
        :param template_id:
        :type template_id: str
        :param resource: governanceResource.
        :type resource: ~identity_governance.models.MicrosoftGraphGovernanceResource
        :param role_setting: governanceRoleSetting.
        :type role_setting: ~identity_governance.models.MicrosoftGraphGovernanceRoleSetting
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphGovernanceRoleDefinition, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphGovernanceRoleDefinition
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphGovernanceRoleDefinition"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphGovernanceRoleDefinition(id=id, display_name=display_name, external_id=external_id, resource_id=resource_id, template_id=template_id, resource=resource, role_setting=role_setting)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_role_definition.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphGovernanceRoleDefinition')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphGovernanceRoleDefinition', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_role_definition.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/roleDefinitions'}  # type: ignore

    def get_role_definition(
        self,
        privileged_access_id,  # type: str
        governance_role_definition_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum1370"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum1371"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphGovernanceRoleDefinition"
        """Get roleDefinitions from privilegedAccess.

        Get roleDefinitions from privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param governance_role_definition_id: key: id of governanceRoleDefinition.
        :type governance_role_definition_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1370]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1371]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphGovernanceRoleDefinition, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphGovernanceRoleDefinition
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphGovernanceRoleDefinition"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_role_definition.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
            'governanceRoleDefinition-id': self._serialize.url("governance_role_definition_id", governance_role_definition_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphGovernanceRoleDefinition', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_role_definition.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/roleDefinitions/{governanceRoleDefinition-id}'}  # type: ignore

    def update_role_definition(
        self,
        privileged_access_id,  # type: str
        governance_role_definition_id,  # type: str
        id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        external_id=None,  # type: Optional[str]
        resource_id=None,  # type: Optional[str]
        template_id=None,  # type: Optional[str]
        resource=None,  # type: Optional["models.MicrosoftGraphGovernanceResource"]
        role_setting=None,  # type: Optional["models.MicrosoftGraphGovernanceRoleSetting"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property roleDefinitions in privilegedAccess.

        Update the navigation property roleDefinitions in privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param governance_role_definition_id: key: id of governanceRoleDefinition.
        :type governance_role_definition_id: str
        :param id: Read-only.
        :type id: str
        :param display_name:
        :type display_name: str
        :param external_id:
        :type external_id: str
        :param resource_id:
        :type resource_id: str
        :param template_id:
        :type template_id: str
        :param resource: governanceResource.
        :type resource: ~identity_governance.models.MicrosoftGraphGovernanceResource
        :param role_setting: governanceRoleSetting.
        :type role_setting: ~identity_governance.models.MicrosoftGraphGovernanceRoleSetting
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphGovernanceRoleDefinition(id=id, display_name=display_name, external_id=external_id, resource_id=resource_id, template_id=template_id, resource=resource, role_setting=role_setting)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_role_definition.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
            'governanceRoleDefinition-id': self._serialize.url("governance_role_definition_id", governance_role_definition_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphGovernanceRoleDefinition')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_role_definition.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/roleDefinitions/{governanceRoleDefinition-id}'}  # type: ignore

    def delete_role_definition(
        self,
        privileged_access_id,  # type: str
        governance_role_definition_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property roleDefinitions for privilegedAccess.

        Delete navigation property roleDefinitions for privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param governance_role_definition_id: key: id of governanceRoleDefinition.
        :type governance_role_definition_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_role_definition.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
            'governanceRoleDefinition-id': self._serialize.url("governance_role_definition_id", governance_role_definition_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_role_definition.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/roleDefinitions/{governanceRoleDefinition-id}'}  # type: ignore

    def list_role_setting(
        self,
        privileged_access_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum1372"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum1373"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum1374"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfGovernanceRoleSetting"]
        """Get roleSettings from privilegedAccess.

        Get roleSettings from privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum1372]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1373]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1374]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfGovernanceRoleSetting or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~identity_governance.models.CollectionOfGovernanceRoleSetting]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfGovernanceRoleSetting"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_role_setting.metadata['url']  # type: ignore
                path_format_arguments = {
                    'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfGovernanceRoleSetting', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_role_setting.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/roleSettings'}  # type: ignore

    def create_role_setting(
        self,
        privileged_access_id,  # type: str
        id=None,  # type: Optional[str]
        admin_eligible_settings=None,  # type: Optional[List["models.MicrosoftGraphGovernanceRuleSetting"]]
        admin_member_settings=None,  # type: Optional[List["models.MicrosoftGraphGovernanceRuleSetting"]]
        is_default=None,  # type: Optional[bool]
        last_updated_by=None,  # type: Optional[str]
        last_updated_date_time=None,  # type: Optional[datetime.datetime]
        resource_id=None,  # type: Optional[str]
        role_definition_id=None,  # type: Optional[str]
        user_eligible_settings=None,  # type: Optional[List["models.MicrosoftGraphGovernanceRuleSetting"]]
        user_member_settings=None,  # type: Optional[List["models.MicrosoftGraphGovernanceRuleSetting"]]
        resource=None,  # type: Optional["models.MicrosoftGraphGovernanceResource"]
        role_definition=None,  # type: Optional["models.MicrosoftGraphGovernanceRoleDefinition"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphGovernanceRoleSetting"
        """Create new navigation property to roleSettings for privilegedAccess.

        Create new navigation property to roleSettings for privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param id: Read-only.
        :type id: str
        :param admin_eligible_settings:
        :type admin_eligible_settings: list[~identity_governance.models.MicrosoftGraphGovernanceRuleSetting]
        :param admin_member_settings:
        :type admin_member_settings: list[~identity_governance.models.MicrosoftGraphGovernanceRuleSetting]
        :param is_default:
        :type is_default: bool
        :param last_updated_by:
        :type last_updated_by: str
        :param last_updated_date_time:
        :type last_updated_date_time: ~datetime.datetime
        :param resource_id:
        :type resource_id: str
        :param role_definition_id:
        :type role_definition_id: str
        :param user_eligible_settings:
        :type user_eligible_settings: list[~identity_governance.models.MicrosoftGraphGovernanceRuleSetting]
        :param user_member_settings:
        :type user_member_settings: list[~identity_governance.models.MicrosoftGraphGovernanceRuleSetting]
        :param resource: governanceResource.
        :type resource: ~identity_governance.models.MicrosoftGraphGovernanceResource
        :param role_definition: governanceRoleDefinition.
        :type role_definition: ~identity_governance.models.MicrosoftGraphGovernanceRoleDefinition
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphGovernanceRoleSetting, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphGovernanceRoleSetting
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphGovernanceRoleSetting"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphGovernanceRoleSetting(id=id, admin_eligible_settings=admin_eligible_settings, admin_member_settings=admin_member_settings, is_default=is_default, last_updated_by=last_updated_by, last_updated_date_time=last_updated_date_time, resource_id=resource_id, role_definition_id=role_definition_id, user_eligible_settings=user_eligible_settings, user_member_settings=user_member_settings, resource=resource, role_definition=role_definition)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_role_setting.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphGovernanceRoleSetting')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphGovernanceRoleSetting', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_role_setting.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/roleSettings'}  # type: ignore

    def get_role_setting(
        self,
        privileged_access_id,  # type: str
        governance_role_setting_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum1375"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum1376"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphGovernanceRoleSetting"
        """Get roleSettings from privilegedAccess.

        Get roleSettings from privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param governance_role_setting_id: key: id of governanceRoleSetting.
        :type governance_role_setting_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1375]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1376]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphGovernanceRoleSetting, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphGovernanceRoleSetting
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphGovernanceRoleSetting"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_role_setting.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
            'governanceRoleSetting-id': self._serialize.url("governance_role_setting_id", governance_role_setting_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphGovernanceRoleSetting', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_role_setting.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/roleSettings/{governanceRoleSetting-id}'}  # type: ignore

    def update_role_setting(
        self,
        privileged_access_id,  # type: str
        governance_role_setting_id,  # type: str
        id=None,  # type: Optional[str]
        admin_eligible_settings=None,  # type: Optional[List["models.MicrosoftGraphGovernanceRuleSetting"]]
        admin_member_settings=None,  # type: Optional[List["models.MicrosoftGraphGovernanceRuleSetting"]]
        is_default=None,  # type: Optional[bool]
        last_updated_by=None,  # type: Optional[str]
        last_updated_date_time=None,  # type: Optional[datetime.datetime]
        resource_id=None,  # type: Optional[str]
        role_definition_id=None,  # type: Optional[str]
        user_eligible_settings=None,  # type: Optional[List["models.MicrosoftGraphGovernanceRuleSetting"]]
        user_member_settings=None,  # type: Optional[List["models.MicrosoftGraphGovernanceRuleSetting"]]
        resource=None,  # type: Optional["models.MicrosoftGraphGovernanceResource"]
        role_definition=None,  # type: Optional["models.MicrosoftGraphGovernanceRoleDefinition"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property roleSettings in privilegedAccess.

        Update the navigation property roleSettings in privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param governance_role_setting_id: key: id of governanceRoleSetting.
        :type governance_role_setting_id: str
        :param id: Read-only.
        :type id: str
        :param admin_eligible_settings:
        :type admin_eligible_settings: list[~identity_governance.models.MicrosoftGraphGovernanceRuleSetting]
        :param admin_member_settings:
        :type admin_member_settings: list[~identity_governance.models.MicrosoftGraphGovernanceRuleSetting]
        :param is_default:
        :type is_default: bool
        :param last_updated_by:
        :type last_updated_by: str
        :param last_updated_date_time:
        :type last_updated_date_time: ~datetime.datetime
        :param resource_id:
        :type resource_id: str
        :param role_definition_id:
        :type role_definition_id: str
        :param user_eligible_settings:
        :type user_eligible_settings: list[~identity_governance.models.MicrosoftGraphGovernanceRuleSetting]
        :param user_member_settings:
        :type user_member_settings: list[~identity_governance.models.MicrosoftGraphGovernanceRuleSetting]
        :param resource: governanceResource.
        :type resource: ~identity_governance.models.MicrosoftGraphGovernanceResource
        :param role_definition: governanceRoleDefinition.
        :type role_definition: ~identity_governance.models.MicrosoftGraphGovernanceRoleDefinition
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphGovernanceRoleSetting(id=id, admin_eligible_settings=admin_eligible_settings, admin_member_settings=admin_member_settings, is_default=is_default, last_updated_by=last_updated_by, last_updated_date_time=last_updated_date_time, resource_id=resource_id, role_definition_id=role_definition_id, user_eligible_settings=user_eligible_settings, user_member_settings=user_member_settings, resource=resource, role_definition=role_definition)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_role_setting.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
            'governanceRoleSetting-id': self._serialize.url("governance_role_setting_id", governance_role_setting_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphGovernanceRoleSetting')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_role_setting.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/roleSettings/{governanceRoleSetting-id}'}  # type: ignore

    def delete_role_setting(
        self,
        privileged_access_id,  # type: str
        governance_role_setting_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property roleSettings for privilegedAccess.

        Delete navigation property roleSettings for privilegedAccess.

        :param privileged_access_id: key: id of privilegedAccess.
        :type privileged_access_id: str
        :param governance_role_setting_id: key: id of governanceRoleSetting.
        :type governance_role_setting_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_role_setting.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedAccess-id': self._serialize.url("privileged_access_id", privileged_access_id, 'str'),
            'governanceRoleSetting-id': self._serialize.url("governance_role_setting_id", governance_role_setting_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_role_setting.metadata = {'url': '/privilegedAccess/{privilegedAccess-id}/roleSettings/{governanceRoleSetting-id}'}  # type: ignore
