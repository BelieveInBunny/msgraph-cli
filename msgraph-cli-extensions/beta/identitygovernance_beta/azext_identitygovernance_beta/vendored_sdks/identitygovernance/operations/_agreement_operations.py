# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class AgreementOperations(object):
    """AgreementOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~identity_governance.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_acceptance(
        self,
        agreement_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum25"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum26"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfAgreementAcceptance"]
        """Get acceptances from agreements.

        Get acceptances from agreements.

        :param agreement_id: key: id of agreement.
        :type agreement_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum25]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum26]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfAgreementAcceptance or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~identity_governance.models.CollectionOfAgreementAcceptance]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfAgreementAcceptance"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_acceptance.metadata['url']  # type: ignore
                path_format_arguments = {
                    'agreement-id': self._serialize.url("agreement_id", agreement_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfAgreementAcceptance', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_acceptance.metadata = {'url': '/agreements/{agreement-id}/acceptances'}  # type: ignore

    def create_acceptance(
        self,
        agreement_id,  # type: str
        id=None,  # type: Optional[str]
        agreement_file_id=None,  # type: Optional[str]
        microsoft_graph_agreement_acceptance_agreement_id=None,  # type: Optional[str]
        device_display_name=None,  # type: Optional[str]
        device_id=None,  # type: Optional[str]
        device_os_type=None,  # type: Optional[str]
        device_os_version=None,  # type: Optional[str]
        expiration_date_time=None,  # type: Optional[datetime.datetime]
        recorded_date_time=None,  # type: Optional[datetime.datetime]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphAgreementAcceptanceState"]]
        user_display_name=None,  # type: Optional[str]
        user_email=None,  # type: Optional[str]
        user_id=None,  # type: Optional[str]
        user_principal_name=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphAgreementAcceptance"
        """Create new navigation property to acceptances for agreements.

        Create new navigation property to acceptances for agreements.

        :param agreement_id: key: id of agreement.
        :type agreement_id: str
        :param id: Read-only.
        :type id: str
        :param agreement_file_id:
        :type agreement_file_id: str
        :param microsoft_graph_agreement_acceptance_agreement_id:
        :type microsoft_graph_agreement_acceptance_agreement_id: str
        :param device_display_name:
        :type device_display_name: str
        :param device_id:
        :type device_id: str
        :param device_os_type:
        :type device_os_type: str
        :param device_os_version:
        :type device_os_version: str
        :param expiration_date_time:
        :type expiration_date_time: ~datetime.datetime
        :param recorded_date_time:
        :type recorded_date_time: ~datetime.datetime
        :param state:
        :type state: str or ~identity_governance.models.MicrosoftGraphAgreementAcceptanceState
        :param user_display_name:
        :type user_display_name: str
        :param user_email:
        :type user_email: str
        :param user_id:
        :type user_id: str
        :param user_principal_name:
        :type user_principal_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAgreementAcceptance, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAgreementAcceptance
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAgreementAcceptance"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAgreementAcceptance(id=id, agreement_file_id=agreement_file_id, agreement_id=microsoft_graph_agreement_acceptance_agreement_id, device_display_name=device_display_name, device_id=device_id, device_os_type=device_os_type, device_os_version=device_os_version, expiration_date_time=expiration_date_time, recorded_date_time=recorded_date_time, state=state, user_display_name=user_display_name, user_email=user_email, user_id=user_id, user_principal_name=user_principal_name)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_acceptance.metadata['url']  # type: ignore
        path_format_arguments = {
            'agreement-id': self._serialize.url("agreement_id", agreement_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAgreementAcceptance')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAgreementAcceptance', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_acceptance.metadata = {'url': '/agreements/{agreement-id}/acceptances'}  # type: ignore

    def get_acceptance(
        self,
        agreement_id,  # type: str
        agreement_acceptance_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum27"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphAgreementAcceptance"
        """Get acceptances from agreements.

        Get acceptances from agreements.

        :param agreement_id: key: id of agreement.
        :type agreement_id: str
        :param agreement_acceptance_id: key: id of agreementAcceptance.
        :type agreement_acceptance_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum27]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAgreementAcceptance, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAgreementAcceptance
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAgreementAcceptance"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_acceptance.metadata['url']  # type: ignore
        path_format_arguments = {
            'agreement-id': self._serialize.url("agreement_id", agreement_id, 'str'),
            'agreementAcceptance-id': self._serialize.url("agreement_acceptance_id", agreement_acceptance_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAgreementAcceptance', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_acceptance.metadata = {'url': '/agreements/{agreement-id}/acceptances/{agreementAcceptance-id}'}  # type: ignore

    def update_acceptance(
        self,
        agreement_id,  # type: str
        agreement_acceptance_id,  # type: str
        id=None,  # type: Optional[str]
        agreement_file_id=None,  # type: Optional[str]
        microsoft_graph_agreement_acceptance_agreement_id=None,  # type: Optional[str]
        device_display_name=None,  # type: Optional[str]
        device_id=None,  # type: Optional[str]
        device_os_type=None,  # type: Optional[str]
        device_os_version=None,  # type: Optional[str]
        expiration_date_time=None,  # type: Optional[datetime.datetime]
        recorded_date_time=None,  # type: Optional[datetime.datetime]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphAgreementAcceptanceState"]]
        user_display_name=None,  # type: Optional[str]
        user_email=None,  # type: Optional[str]
        user_id=None,  # type: Optional[str]
        user_principal_name=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property acceptances in agreements.

        Update the navigation property acceptances in agreements.

        :param agreement_id: key: id of agreement.
        :type agreement_id: str
        :param agreement_acceptance_id: key: id of agreementAcceptance.
        :type agreement_acceptance_id: str
        :param id: Read-only.
        :type id: str
        :param agreement_file_id:
        :type agreement_file_id: str
        :param microsoft_graph_agreement_acceptance_agreement_id:
        :type microsoft_graph_agreement_acceptance_agreement_id: str
        :param device_display_name:
        :type device_display_name: str
        :param device_id:
        :type device_id: str
        :param device_os_type:
        :type device_os_type: str
        :param device_os_version:
        :type device_os_version: str
        :param expiration_date_time:
        :type expiration_date_time: ~datetime.datetime
        :param recorded_date_time:
        :type recorded_date_time: ~datetime.datetime
        :param state:
        :type state: str or ~identity_governance.models.MicrosoftGraphAgreementAcceptanceState
        :param user_display_name:
        :type user_display_name: str
        :param user_email:
        :type user_email: str
        :param user_id:
        :type user_id: str
        :param user_principal_name:
        :type user_principal_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAgreementAcceptance(id=id, agreement_file_id=agreement_file_id, agreement_id=microsoft_graph_agreement_acceptance_agreement_id, device_display_name=device_display_name, device_id=device_id, device_os_type=device_os_type, device_os_version=device_os_version, expiration_date_time=expiration_date_time, recorded_date_time=recorded_date_time, state=state, user_display_name=user_display_name, user_email=user_email, user_id=user_id, user_principal_name=user_principal_name)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_acceptance.metadata['url']  # type: ignore
        path_format_arguments = {
            'agreement-id': self._serialize.url("agreement_id", agreement_id, 'str'),
            'agreementAcceptance-id': self._serialize.url("agreement_acceptance_id", agreement_acceptance_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAgreementAcceptance')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_acceptance.metadata = {'url': '/agreements/{agreement-id}/acceptances/{agreementAcceptance-id}'}  # type: ignore

    def delete_acceptance(
        self,
        agreement_id,  # type: str
        agreement_acceptance_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property acceptances for agreements.

        Delete navigation property acceptances for agreements.

        :param agreement_id: key: id of agreement.
        :type agreement_id: str
        :param agreement_acceptance_id: key: id of agreementAcceptance.
        :type agreement_acceptance_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_acceptance.metadata['url']  # type: ignore
        path_format_arguments = {
            'agreement-id': self._serialize.url("agreement_id", agreement_id, 'str'),
            'agreementAcceptance-id': self._serialize.url("agreement_acceptance_id", agreement_acceptance_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_acceptance.metadata = {'url': '/agreements/{agreement-id}/acceptances/{agreementAcceptance-id}'}  # type: ignore

    def get_file(
        self,
        agreement_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum28"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum29"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphAgreementFile"
        """Get file from agreements.

        Get file from agreements.

        :param agreement_id: key: id of agreement.
        :type agreement_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum28]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum29]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAgreementFile, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAgreementFile
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAgreementFile"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_file.metadata['url']  # type: ignore
        path_format_arguments = {
            'agreement-id': self._serialize.url("agreement_id", agreement_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAgreementFile', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_file.metadata = {'url': '/agreements/{agreement-id}/file'}  # type: ignore

    def update_file(
        self,
        agreement_id,  # type: str
        id=None,  # type: Optional[str]
        file_name=None,  # type: Optional[str]
        is_default=None,  # type: Optional[bool]
        language=None,  # type: Optional[str]
        data=None,  # type: Optional[bytes]
        localizations=None,  # type: Optional[List["models.MicrosoftGraphAgreementFileLocalization"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property file in agreements.

        Update the navigation property file in agreements.

        :param agreement_id: key: id of agreement.
        :type agreement_id: str
        :param id: Read-only.
        :type id: str
        :param file_name:
        :type file_name: str
        :param is_default:
        :type is_default: bool
        :param language:
        :type language: str
        :param data:
        :type data: bytes
        :param localizations:
        :type localizations: list[~identity_governance.models.MicrosoftGraphAgreementFileLocalization]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAgreementFile(id=id, file_name=file_name, is_default=is_default, language=language, data=data, localizations=localizations)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_file.metadata['url']  # type: ignore
        path_format_arguments = {
            'agreement-id': self._serialize.url("agreement_id", agreement_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAgreementFile')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_file.metadata = {'url': '/agreements/{agreement-id}/file'}  # type: ignore

    def delete_file(
        self,
        agreement_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property file for agreements.

        Delete navigation property file for agreements.

        :param agreement_id: key: id of agreement.
        :type agreement_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_file.metadata['url']  # type: ignore
        path_format_arguments = {
            'agreement-id': self._serialize.url("agreement_id", agreement_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_file.metadata = {'url': '/agreements/{agreement-id}/file'}  # type: ignore

    def list_file(
        self,
        agreement_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum33"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum34"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfAgreementFileLocalization0"]
        """Get files from agreements.

        Get files from agreements.

        :param agreement_id: key: id of agreement.
        :type agreement_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum33]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum34]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfAgreementFileLocalization0 or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~identity_governance.models.CollectionOfAgreementFileLocalization0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfAgreementFileLocalization0"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_file.metadata['url']  # type: ignore
                path_format_arguments = {
                    'agreement-id': self._serialize.url("agreement_id", agreement_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfAgreementFileLocalization0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_file.metadata = {'url': '/agreements/{agreement-id}/files'}  # type: ignore

    def create_file(
        self,
        agreement_id,  # type: str
        id=None,  # type: Optional[str]
        file_name=None,  # type: Optional[str]
        is_default=None,  # type: Optional[bool]
        language=None,  # type: Optional[str]
        data=None,  # type: Optional[bytes]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphAgreementFileLocalization"
        """Create new navigation property to files for agreements.

        Create new navigation property to files for agreements.

        :param agreement_id: key: id of agreement.
        :type agreement_id: str
        :param id: Read-only.
        :type id: str
        :param file_name:
        :type file_name: str
        :param is_default:
        :type is_default: bool
        :param language:
        :type language: str
        :param data:
        :type data: bytes
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAgreementFileLocalization, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAgreementFileLocalization
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAgreementFileLocalization"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAgreementFileLocalization(id=id, file_name=file_name, is_default=is_default, language=language, data=data)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_file.metadata['url']  # type: ignore
        path_format_arguments = {
            'agreement-id': self._serialize.url("agreement_id", agreement_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAgreementFileLocalization')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAgreementFileLocalization', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_file.metadata = {'url': '/agreements/{agreement-id}/files'}  # type: ignore

    def get_file(
        self,
        agreement_id,  # type: str
        agreement_file_localization_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum35"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphAgreementFileLocalization"
        """Get files from agreements.

        Get files from agreements.

        :param agreement_id: key: id of agreement.
        :type agreement_id: str
        :param agreement_file_localization_id: key: id of agreementFileLocalization.
        :type agreement_file_localization_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum35]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAgreementFileLocalization, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAgreementFileLocalization
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAgreementFileLocalization"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_file.metadata['url']  # type: ignore
        path_format_arguments = {
            'agreement-id': self._serialize.url("agreement_id", agreement_id, 'str'),
            'agreementFileLocalization-id': self._serialize.url("agreement_file_localization_id", agreement_file_localization_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAgreementFileLocalization', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_file.metadata = {'url': '/agreements/{agreement-id}/files/{agreementFileLocalization-id}'}  # type: ignore

    def update_file(
        self,
        agreement_id,  # type: str
        agreement_file_localization_id,  # type: str
        id=None,  # type: Optional[str]
        file_name=None,  # type: Optional[str]
        is_default=None,  # type: Optional[bool]
        language=None,  # type: Optional[str]
        data=None,  # type: Optional[bytes]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property files in agreements.

        Update the navigation property files in agreements.

        :param agreement_id: key: id of agreement.
        :type agreement_id: str
        :param agreement_file_localization_id: key: id of agreementFileLocalization.
        :type agreement_file_localization_id: str
        :param id: Read-only.
        :type id: str
        :param file_name:
        :type file_name: str
        :param is_default:
        :type is_default: bool
        :param language:
        :type language: str
        :param data:
        :type data: bytes
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAgreementFileLocalization(id=id, file_name=file_name, is_default=is_default, language=language, data=data)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_file.metadata['url']  # type: ignore
        path_format_arguments = {
            'agreement-id': self._serialize.url("agreement_id", agreement_id, 'str'),
            'agreementFileLocalization-id': self._serialize.url("agreement_file_localization_id", agreement_file_localization_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAgreementFileLocalization')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_file.metadata = {'url': '/agreements/{agreement-id}/files/{agreementFileLocalization-id}'}  # type: ignore

    def delete_file(
        self,
        agreement_id,  # type: str
        agreement_file_localization_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property files for agreements.

        Delete navigation property files for agreements.

        :param agreement_id: key: id of agreement.
        :type agreement_id: str
        :param agreement_file_localization_id: key: id of agreementFileLocalization.
        :type agreement_file_localization_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_file.metadata['url']  # type: ignore
        path_format_arguments = {
            'agreement-id': self._serialize.url("agreement_id", agreement_id, 'str'),
            'agreementFileLocalization-id': self._serialize.url("agreement_file_localization_id", agreement_file_localization_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_file.metadata = {'url': '/agreements/{agreement-id}/files/{agreementFileLocalization-id}'}  # type: ignore
