# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class IdentityGovernanceEntitlementManagementAccessPackageResourceRequestOperations(object):
    """IdentityGovernanceEntitlementManagementAccessPackageResourceRequestOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~identity_governance.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def get_access_package_resource(
        self,
        access_package_resource_request_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum1158"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum1159"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphAccessPackageResource"
        """Get accessPackageResource from identityGovernance.

        Get accessPackageResource from identityGovernance.

        :param access_package_resource_request_id: key: id of accessPackageResourceRequest.
        :type access_package_resource_request_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1158]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1159]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageResource, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_access_package_resource.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageResourceRequest-id': self._serialize.url("access_package_resource_request_id", access_package_resource_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_access_package_resource.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResourceRequests/{accessPackageResourceRequest-id}/accessPackageResource'}  # type: ignore

    def get_ref_access_package_resource(
        self,
        access_package_resource_request_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> str
        """Get ref of accessPackageResource from identityGovernance.

        Get ref of accessPackageResource from identityGovernance.

        :param access_package_resource_request_id: key: id of accessPackageResourceRequest.
        :type access_package_resource_request_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str, or the result of cls(response)
        :rtype: str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[str]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_ref_access_package_resource.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageResourceRequest-id': self._serialize.url("access_package_resource_request_id", access_package_resource_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_ref_access_package_resource.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResourceRequests/{accessPackageResourceRequest-id}/accessPackageResource/$ref'}  # type: ignore

    def set_ref_access_package_resource(
        self,
        access_package_resource_request_id,  # type: str
        body,  # type: Dict[str, object]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the ref of navigation property accessPackageResource in identityGovernance.

        Update the ref of navigation property accessPackageResource in identityGovernance.

        :param access_package_resource_request_id: key: id of accessPackageResourceRequest.
        :type access_package_resource_request_id: str
        :param body: New navigation property ref values.
        :type body: dict[str, object]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.set_ref_access_package_resource.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageResourceRequest-id': self._serialize.url("access_package_resource_request_id", access_package_resource_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, '{object}')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    set_ref_access_package_resource.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResourceRequests/{accessPackageResourceRequest-id}/accessPackageResource/$ref'}  # type: ignore

    def delete_ref_access_package_resource(
        self,
        access_package_resource_request_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete ref of navigation property accessPackageResource for identityGovernance.

        Delete ref of navigation property accessPackageResource for identityGovernance.

        :param access_package_resource_request_id: key: id of accessPackageResourceRequest.
        :type access_package_resource_request_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_ref_access_package_resource.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageResourceRequest-id': self._serialize.url("access_package_resource_request_id", access_package_resource_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_ref_access_package_resource.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResourceRequests/{accessPackageResourceRequest-id}/accessPackageResource/$ref'}  # type: ignore

    def get_requestor(
        self,
        access_package_resource_request_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum1160"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum1161"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphAccessPackageSubject"
        """Get requestor from identityGovernance.

        Get requestor from identityGovernance.

        :param access_package_resource_request_id: key: id of accessPackageResourceRequest.
        :type access_package_resource_request_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1160]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1161]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageSubject, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageSubject
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageSubject"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_requestor.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageResourceRequest-id': self._serialize.url("access_package_resource_request_id", access_package_resource_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageSubject', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_requestor.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResourceRequests/{accessPackageResourceRequest-id}/requestor'}  # type: ignore

    def update_requestor(
        self,
        access_package_resource_request_id,  # type: str
        id=None,  # type: Optional[str]
        alt_sec_id=None,  # type: Optional[str]
        connected_organization_id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        email=None,  # type: Optional[str]
        object_id=None,  # type: Optional[str]
        on_premises_security_identifier=None,  # type: Optional[str]
        principal_name=None,  # type: Optional[str]
        type=None,  # type: Optional[str]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        created_by=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        description=None,  # type: Optional[str]
        microsoft_graph_connected_organization_display_name=None,  # type: Optional[str]
        identity_sources=None,  # type: Optional[List[Dict[str, object]]]
        modified_by=None,  # type: Optional[str]
        modified_date_time=None,  # type: Optional[datetime.datetime]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphConnectedOrganizationState"]]
        external_sponsors=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        internal_sponsors=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property requestor in identityGovernance.

        Update the navigation property requestor in identityGovernance.

        :param access_package_resource_request_id: key: id of accessPackageResourceRequest.
        :type access_package_resource_request_id: str
        :param id: Read-only.
        :type id: str
        :param alt_sec_id:
        :type alt_sec_id: str
        :param connected_organization_id:
        :type connected_organization_id: str
        :param display_name:
        :type display_name: str
        :param email:
        :type email: str
        :param object_id:
        :type object_id: str
        :param on_premises_security_identifier:
        :type on_premises_security_identifier: str
        :param principal_name:
        :type principal_name: str
        :param type:
        :type type: str
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param created_by:
        :type created_by: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param microsoft_graph_connected_organization_display_name:
        :type microsoft_graph_connected_organization_display_name: str
        :param identity_sources:
        :type identity_sources: list[dict[str, object]]
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param state:
        :type state: str or ~identity_governance.models.MicrosoftGraphConnectedOrganizationState
        :param external_sponsors:
        :type external_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :param internal_sponsors:
        :type internal_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageSubject(id=id, alt_sec_id=alt_sec_id, connected_organization_id=connected_organization_id, display_name=display_name, email=email, object_id=object_id, on_premises_security_identifier=on_premises_security_identifier, principal_name=principal_name, type=type, id_connected_organization_id=microsoft_graph_entity_id, created_by=created_by, created_date_time=created_date_time, description=description, display_name_connected_organization_display_name=microsoft_graph_connected_organization_display_name, identity_sources=identity_sources, modified_by=modified_by, modified_date_time=modified_date_time, state=state, external_sponsors=external_sponsors, internal_sponsors=internal_sponsors)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_requestor.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageResourceRequest-id': self._serialize.url("access_package_resource_request_id", access_package_resource_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageSubject')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_requestor.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResourceRequests/{accessPackageResourceRequest-id}/requestor'}  # type: ignore

    def delete_requestor(
        self,
        access_package_resource_request_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property requestor for identityGovernance.

        Delete navigation property requestor for identityGovernance.

        :param access_package_resource_request_id: key: id of accessPackageResourceRequest.
        :type access_package_resource_request_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_requestor.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageResourceRequest-id': self._serialize.url("access_package_resource_request_id", access_package_resource_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_requestor.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResourceRequests/{accessPackageResourceRequest-id}/requestor'}  # type: ignore
