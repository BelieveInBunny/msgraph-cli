# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class IdentityGovernanceEntitlementManagementAccessPackageAssignmentRequestAccessPackageAssignmentAccessPackageAssignmentResourceRoleOperations(object):
    """IdentityGovernanceEntitlementManagementAccessPackageAssignmentRequestAccessPackageAssignmentAccessPackageAssignmentResourceRoleOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~identity_governance.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_access_package_assignment(
        self,
        access_package_assignment_request_id,  # type: str
        access_package_assignment_resource_role_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum405"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum406"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum407"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfAccessPackageAssignment"]
        """Get accessPackageAssignments from identityGovernance.

        Get accessPackageAssignments from identityGovernance.

        :param access_package_assignment_request_id: key: id of accessPackageAssignmentRequest.
        :type access_package_assignment_request_id: str
        :param access_package_assignment_resource_role_id: key: id of
         accessPackageAssignmentResourceRole.
        :type access_package_assignment_resource_role_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum405]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum406]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum407]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfAccessPackageAssignment or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~identity_governance.models.CollectionOfAccessPackageAssignment]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfAccessPackageAssignment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_access_package_assignment.metadata['url']  # type: ignore
                path_format_arguments = {
                    'accessPackageAssignmentRequest-id': self._serialize.url("access_package_assignment_request_id", access_package_assignment_request_id, 'str'),
                    'accessPackageAssignmentResourceRole-id': self._serialize.url("access_package_assignment_resource_role_id", access_package_assignment_resource_role_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfAccessPackageAssignment', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_access_package_assignment.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentRequests/{accessPackageAssignmentRequest-id}/accessPackageAssignment/accessPackageAssignmentResourceRoles/{accessPackageAssignmentResourceRole-id}/accessPackageAssignments'}  # type: ignore

    def create_access_package_assignment(
        self,
        access_package_assignment_request_id,  # type: str
        access_package_assignment_resource_role_id,  # type: str
        id=None,  # type: Optional[str]
        access_package_id=None,  # type: Optional[str]
        assignment_policy_id=None,  # type: Optional[str]
        assignment_state=None,  # type: Optional[str]
        assignment_status=None,  # type: Optional[str]
        catalog_id=None,  # type: Optional[str]
        expired_date_time=None,  # type: Optional[datetime.datetime]
        is_extended=None,  # type: Optional[bool]
        target_id=None,  # type: Optional[str]
        access_package=None,  # type: Optional["models.MicrosoftGraphAccessPackage"]
        access_package_assignment_policy=None,  # type: Optional["models.MicrosoftGraphAccessPackageAssignmentPolicy"]
        access_package_assignment_requests=None,  # type: Optional[List["models.MicrosoftGraphAccessPackageAssignmentRequest"]]
        access_package_assignment_resource_roles=None,  # type: Optional[List["models.MicrosoftGraphAccessPackageAssignmentResourceRole"]]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        alt_sec_id=None,  # type: Optional[str]
        connected_organization_id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        email=None,  # type: Optional[str]
        object_id=None,  # type: Optional[str]
        on_premises_security_identifier=None,  # type: Optional[str]
        principal_name=None,  # type: Optional[str]
        type=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        created_by=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        description=None,  # type: Optional[str]
        microsoft_graph_connected_organization_display_name=None,  # type: Optional[str]
        identity_sources=None,  # type: Optional[List[Dict[str, object]]]
        modified_by=None,  # type: Optional[str]
        modified_date_time=None,  # type: Optional[datetime.datetime]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphConnectedOrganizationState"]]
        external_sponsors=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        internal_sponsors=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        expiration=None,  # type: Optional["models.MicrosoftGraphExpirationPattern"]
        recurrence=None,  # type: Optional["models.MicrosoftGraphPatternedRecurrence"]
        start_date_time=None,  # type: Optional[datetime.datetime]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphAccessPackageAssignment"
        """Create new navigation property to accessPackageAssignments for identityGovernance.

        Create new navigation property to accessPackageAssignments for identityGovernance.

        :param access_package_assignment_request_id: key: id of accessPackageAssignmentRequest.
        :type access_package_assignment_request_id: str
        :param access_package_assignment_resource_role_id: key: id of
         accessPackageAssignmentResourceRole.
        :type access_package_assignment_resource_role_id: str
        :param id: Read-only.
        :type id: str
        :param access_package_id:
        :type access_package_id: str
        :param assignment_policy_id:
        :type assignment_policy_id: str
        :param assignment_state:
        :type assignment_state: str
        :param assignment_status:
        :type assignment_status: str
        :param catalog_id:
        :type catalog_id: str
        :param expired_date_time:
        :type expired_date_time: ~datetime.datetime
        :param is_extended:
        :type is_extended: bool
        :param target_id:
        :type target_id: str
        :param access_package: accessPackage.
        :type access_package: ~identity_governance.models.MicrosoftGraphAccessPackage
        :param access_package_assignment_policy: accessPackageAssignmentPolicy.
        :type access_package_assignment_policy: ~identity_governance.models.MicrosoftGraphAccessPackageAssignmentPolicy
        :param access_package_assignment_requests:
        :type access_package_assignment_requests: list[~identity_governance.models.MicrosoftGraphAccessPackageAssignmentRequest]
        :param access_package_assignment_resource_roles:
        :type access_package_assignment_resource_roles: list[~identity_governance.models.MicrosoftGraphAccessPackageAssignmentResourceRole]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param alt_sec_id:
        :type alt_sec_id: str
        :param connected_organization_id:
        :type connected_organization_id: str
        :param display_name:
        :type display_name: str
        :param email:
        :type email: str
        :param object_id:
        :type object_id: str
        :param on_premises_security_identifier:
        :type on_premises_security_identifier: str
        :param principal_name:
        :type principal_name: str
        :param type:
        :type type: str
        :param id1: Read-only.
        :type id1: str
        :param created_by:
        :type created_by: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param microsoft_graph_connected_organization_display_name:
        :type microsoft_graph_connected_organization_display_name: str
        :param identity_sources:
        :type identity_sources: list[dict[str, object]]
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param state:
        :type state: str or ~identity_governance.models.MicrosoftGraphConnectedOrganizationState
        :param external_sponsors:
        :type external_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :param internal_sponsors:
        :type internal_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :param expiration: expirationPattern.
        :type expiration: ~identity_governance.models.MicrosoftGraphExpirationPattern
        :param recurrence: patternedRecurrence.
        :type recurrence: ~identity_governance.models.MicrosoftGraphPatternedRecurrence
        :param start_date_time:
        :type start_date_time: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageAssignment, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageAssignment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageAssignment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageAssignment(id=id, access_package_id=access_package_id, assignment_policy_id=assignment_policy_id, assignment_state=assignment_state, assignment_status=assignment_status, catalog_id=catalog_id, expired_date_time=expired_date_time, is_extended=is_extended, target_id=target_id, access_package=access_package, access_package_assignment_policy=access_package_assignment_policy, access_package_assignment_requests=access_package_assignment_requests, access_package_assignment_resource_roles=access_package_assignment_resource_roles, id_target_id=microsoft_graph_entity_id, alt_sec_id=alt_sec_id, connected_organization_id=connected_organization_id, display_name_target_display_name=display_name, email=email, object_id=object_id, on_premises_security_identifier=on_premises_security_identifier, principal_name=principal_name, type=type, id_target_connected_organization_id=id1, created_by=created_by, created_date_time=created_date_time, description=description, display_name_target_connected_organization_display_name=microsoft_graph_connected_organization_display_name, identity_sources=identity_sources, modified_by=modified_by, modified_date_time=modified_date_time, state=state, external_sponsors=external_sponsors, internal_sponsors=internal_sponsors, expiration=expiration, recurrence=recurrence, start_date_time=start_date_time)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_access_package_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentRequest-id': self._serialize.url("access_package_assignment_request_id", access_package_assignment_request_id, 'str'),
            'accessPackageAssignmentResourceRole-id': self._serialize.url("access_package_assignment_resource_role_id", access_package_assignment_resource_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageAssignment')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageAssignment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_access_package_assignment.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentRequests/{accessPackageAssignmentRequest-id}/accessPackageAssignment/accessPackageAssignmentResourceRoles/{accessPackageAssignmentResourceRole-id}/accessPackageAssignments'}  # type: ignore

    def get_access_package_assignment(
        self,
        access_package_assignment_request_id,  # type: str
        access_package_assignment_resource_role_id,  # type: str
        access_package_assignment_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum408"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum409"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphAccessPackageAssignment"
        """Get accessPackageAssignments from identityGovernance.

        Get accessPackageAssignments from identityGovernance.

        :param access_package_assignment_request_id: key: id of accessPackageAssignmentRequest.
        :type access_package_assignment_request_id: str
        :param access_package_assignment_resource_role_id: key: id of
         accessPackageAssignmentResourceRole.
        :type access_package_assignment_resource_role_id: str
        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum408]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum409]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageAssignment, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageAssignment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageAssignment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_access_package_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentRequest-id': self._serialize.url("access_package_assignment_request_id", access_package_assignment_request_id, 'str'),
            'accessPackageAssignmentResourceRole-id': self._serialize.url("access_package_assignment_resource_role_id", access_package_assignment_resource_role_id, 'str'),
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageAssignment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_access_package_assignment.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentRequests/{accessPackageAssignmentRequest-id}/accessPackageAssignment/accessPackageAssignmentResourceRoles/{accessPackageAssignmentResourceRole-id}/accessPackageAssignments/{accessPackageAssignment-id}'}  # type: ignore

    def update_access_package_assignment(
        self,
        access_package_assignment_request_id,  # type: str
        access_package_assignment_resource_role_id,  # type: str
        access_package_assignment_id,  # type: str
        id=None,  # type: Optional[str]
        access_package_id=None,  # type: Optional[str]
        assignment_policy_id=None,  # type: Optional[str]
        assignment_state=None,  # type: Optional[str]
        assignment_status=None,  # type: Optional[str]
        catalog_id=None,  # type: Optional[str]
        expired_date_time=None,  # type: Optional[datetime.datetime]
        is_extended=None,  # type: Optional[bool]
        target_id=None,  # type: Optional[str]
        access_package=None,  # type: Optional["models.MicrosoftGraphAccessPackage"]
        access_package_assignment_policy=None,  # type: Optional["models.MicrosoftGraphAccessPackageAssignmentPolicy"]
        access_package_assignment_requests=None,  # type: Optional[List["models.MicrosoftGraphAccessPackageAssignmentRequest"]]
        access_package_assignment_resource_roles=None,  # type: Optional[List["models.MicrosoftGraphAccessPackageAssignmentResourceRole"]]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        alt_sec_id=None,  # type: Optional[str]
        connected_organization_id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        email=None,  # type: Optional[str]
        object_id=None,  # type: Optional[str]
        on_premises_security_identifier=None,  # type: Optional[str]
        principal_name=None,  # type: Optional[str]
        type=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        created_by=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        description=None,  # type: Optional[str]
        microsoft_graph_connected_organization_display_name=None,  # type: Optional[str]
        identity_sources=None,  # type: Optional[List[Dict[str, object]]]
        modified_by=None,  # type: Optional[str]
        modified_date_time=None,  # type: Optional[datetime.datetime]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphConnectedOrganizationState"]]
        external_sponsors=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        internal_sponsors=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        expiration=None,  # type: Optional["models.MicrosoftGraphExpirationPattern"]
        recurrence=None,  # type: Optional["models.MicrosoftGraphPatternedRecurrence"]
        start_date_time=None,  # type: Optional[datetime.datetime]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property accessPackageAssignments in identityGovernance.

        Update the navigation property accessPackageAssignments in identityGovernance.

        :param access_package_assignment_request_id: key: id of accessPackageAssignmentRequest.
        :type access_package_assignment_request_id: str
        :param access_package_assignment_resource_role_id: key: id of
         accessPackageAssignmentResourceRole.
        :type access_package_assignment_resource_role_id: str
        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param id: Read-only.
        :type id: str
        :param access_package_id:
        :type access_package_id: str
        :param assignment_policy_id:
        :type assignment_policy_id: str
        :param assignment_state:
        :type assignment_state: str
        :param assignment_status:
        :type assignment_status: str
        :param catalog_id:
        :type catalog_id: str
        :param expired_date_time:
        :type expired_date_time: ~datetime.datetime
        :param is_extended:
        :type is_extended: bool
        :param target_id:
        :type target_id: str
        :param access_package: accessPackage.
        :type access_package: ~identity_governance.models.MicrosoftGraphAccessPackage
        :param access_package_assignment_policy: accessPackageAssignmentPolicy.
        :type access_package_assignment_policy: ~identity_governance.models.MicrosoftGraphAccessPackageAssignmentPolicy
        :param access_package_assignment_requests:
        :type access_package_assignment_requests: list[~identity_governance.models.MicrosoftGraphAccessPackageAssignmentRequest]
        :param access_package_assignment_resource_roles:
        :type access_package_assignment_resource_roles: list[~identity_governance.models.MicrosoftGraphAccessPackageAssignmentResourceRole]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param alt_sec_id:
        :type alt_sec_id: str
        :param connected_organization_id:
        :type connected_organization_id: str
        :param display_name:
        :type display_name: str
        :param email:
        :type email: str
        :param object_id:
        :type object_id: str
        :param on_premises_security_identifier:
        :type on_premises_security_identifier: str
        :param principal_name:
        :type principal_name: str
        :param type:
        :type type: str
        :param id1: Read-only.
        :type id1: str
        :param created_by:
        :type created_by: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param microsoft_graph_connected_organization_display_name:
        :type microsoft_graph_connected_organization_display_name: str
        :param identity_sources:
        :type identity_sources: list[dict[str, object]]
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param state:
        :type state: str or ~identity_governance.models.MicrosoftGraphConnectedOrganizationState
        :param external_sponsors:
        :type external_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :param internal_sponsors:
        :type internal_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :param expiration: expirationPattern.
        :type expiration: ~identity_governance.models.MicrosoftGraphExpirationPattern
        :param recurrence: patternedRecurrence.
        :type recurrence: ~identity_governance.models.MicrosoftGraphPatternedRecurrence
        :param start_date_time:
        :type start_date_time: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageAssignment(id=id, access_package_id=access_package_id, assignment_policy_id=assignment_policy_id, assignment_state=assignment_state, assignment_status=assignment_status, catalog_id=catalog_id, expired_date_time=expired_date_time, is_extended=is_extended, target_id=target_id, access_package=access_package, access_package_assignment_policy=access_package_assignment_policy, access_package_assignment_requests=access_package_assignment_requests, access_package_assignment_resource_roles=access_package_assignment_resource_roles, id_target_id=microsoft_graph_entity_id, alt_sec_id=alt_sec_id, connected_organization_id=connected_organization_id, display_name_target_display_name=display_name, email=email, object_id=object_id, on_premises_security_identifier=on_premises_security_identifier, principal_name=principal_name, type=type, id_target_connected_organization_id=id1, created_by=created_by, created_date_time=created_date_time, description=description, display_name_target_connected_organization_display_name=microsoft_graph_connected_organization_display_name, identity_sources=identity_sources, modified_by=modified_by, modified_date_time=modified_date_time, state=state, external_sponsors=external_sponsors, internal_sponsors=internal_sponsors, expiration=expiration, recurrence=recurrence, start_date_time=start_date_time)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_access_package_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentRequest-id': self._serialize.url("access_package_assignment_request_id", access_package_assignment_request_id, 'str'),
            'accessPackageAssignmentResourceRole-id': self._serialize.url("access_package_assignment_resource_role_id", access_package_assignment_resource_role_id, 'str'),
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageAssignment')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_access_package_assignment.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentRequests/{accessPackageAssignmentRequest-id}/accessPackageAssignment/accessPackageAssignmentResourceRoles/{accessPackageAssignmentResourceRole-id}/accessPackageAssignments/{accessPackageAssignment-id}'}  # type: ignore

    def delete_access_package_assignment(
        self,
        access_package_assignment_request_id,  # type: str
        access_package_assignment_resource_role_id,  # type: str
        access_package_assignment_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property accessPackageAssignments for identityGovernance.

        Delete navigation property accessPackageAssignments for identityGovernance.

        :param access_package_assignment_request_id: key: id of accessPackageAssignmentRequest.
        :type access_package_assignment_request_id: str
        :param access_package_assignment_resource_role_id: key: id of
         accessPackageAssignmentResourceRole.
        :type access_package_assignment_resource_role_id: str
        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_access_package_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentRequest-id': self._serialize.url("access_package_assignment_request_id", access_package_assignment_request_id, 'str'),
            'accessPackageAssignmentResourceRole-id': self._serialize.url("access_package_assignment_resource_role_id", access_package_assignment_resource_role_id, 'str'),
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_access_package_assignment.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentRequests/{accessPackageAssignmentRequest-id}/accessPackageAssignment/accessPackageAssignmentResourceRoles/{accessPackageAssignmentResourceRole-id}/accessPackageAssignments/{accessPackageAssignment-id}'}  # type: ignore

    def get_access_package_resource_role(
        self,
        access_package_assignment_request_id,  # type: str
        access_package_assignment_resource_role_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum410"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum411"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphAccessPackageResourceRole"
        """Get accessPackageResourceRole from identityGovernance.

        Get accessPackageResourceRole from identityGovernance.

        :param access_package_assignment_request_id: key: id of accessPackageAssignmentRequest.
        :type access_package_assignment_request_id: str
        :param access_package_assignment_resource_role_id: key: id of
         accessPackageAssignmentResourceRole.
        :type access_package_assignment_resource_role_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum410]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum411]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageResourceRole, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageResourceRole
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageResourceRole"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_access_package_resource_role.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentRequest-id': self._serialize.url("access_package_assignment_request_id", access_package_assignment_request_id, 'str'),
            'accessPackageAssignmentResourceRole-id': self._serialize.url("access_package_assignment_resource_role_id", access_package_assignment_resource_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageResourceRole', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_access_package_resource_role.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentRequests/{accessPackageAssignmentRequest-id}/accessPackageAssignment/accessPackageAssignmentResourceRoles/{accessPackageAssignmentResourceRole-id}/accessPackageResourceRole'}  # type: ignore

    def update_access_package_resource_role(
        self,
        access_package_assignment_request_id,  # type: str
        access_package_assignment_resource_role_id,  # type: str
        id=None,  # type: Optional[str]
        description=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        origin_id=None,  # type: Optional[str]
        origin_system=None,  # type: Optional[str]
        access_package_resource=None,  # type: Optional["models.MicrosoftGraphAccessPackageResource"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property accessPackageResourceRole in identityGovernance.

        Update the navigation property accessPackageResourceRole in identityGovernance.

        :param access_package_assignment_request_id: key: id of accessPackageAssignmentRequest.
        :type access_package_assignment_request_id: str
        :param access_package_assignment_resource_role_id: key: id of
         accessPackageAssignmentResourceRole.
        :type access_package_assignment_resource_role_id: str
        :param id: Read-only.
        :type id: str
        :param description:
        :type description: str
        :param display_name:
        :type display_name: str
        :param origin_id:
        :type origin_id: str
        :param origin_system:
        :type origin_system: str
        :param access_package_resource: accessPackageResource.
        :type access_package_resource: ~identity_governance.models.MicrosoftGraphAccessPackageResource
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageResourceRole(id=id, description=description, display_name=display_name, origin_id=origin_id, origin_system=origin_system, access_package_resource=access_package_resource)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_access_package_resource_role.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentRequest-id': self._serialize.url("access_package_assignment_request_id", access_package_assignment_request_id, 'str'),
            'accessPackageAssignmentResourceRole-id': self._serialize.url("access_package_assignment_resource_role_id", access_package_assignment_resource_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageResourceRole')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_access_package_resource_role.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentRequests/{accessPackageAssignmentRequest-id}/accessPackageAssignment/accessPackageAssignmentResourceRoles/{accessPackageAssignmentResourceRole-id}/accessPackageResourceRole'}  # type: ignore

    def delete_access_package_resource_role(
        self,
        access_package_assignment_request_id,  # type: str
        access_package_assignment_resource_role_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property accessPackageResourceRole for identityGovernance.

        Delete navigation property accessPackageResourceRole for identityGovernance.

        :param access_package_assignment_request_id: key: id of accessPackageAssignmentRequest.
        :type access_package_assignment_request_id: str
        :param access_package_assignment_resource_role_id: key: id of
         accessPackageAssignmentResourceRole.
        :type access_package_assignment_resource_role_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_access_package_resource_role.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentRequest-id': self._serialize.url("access_package_assignment_request_id", access_package_assignment_request_id, 'str'),
            'accessPackageAssignmentResourceRole-id': self._serialize.url("access_package_assignment_resource_role_id", access_package_assignment_resource_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_access_package_resource_role.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentRequests/{accessPackageAssignmentRequest-id}/accessPackageAssignment/accessPackageAssignmentResourceRoles/{accessPackageAssignmentResourceRole-id}/accessPackageResourceRole'}  # type: ignore

    def get_access_package_resource_scope(
        self,
        access_package_assignment_request_id,  # type: str
        access_package_assignment_resource_role_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum426"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum427"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphAccessPackageResourceScope"
        """Get accessPackageResourceScope from identityGovernance.

        Get accessPackageResourceScope from identityGovernance.

        :param access_package_assignment_request_id: key: id of accessPackageAssignmentRequest.
        :type access_package_assignment_request_id: str
        :param access_package_assignment_resource_role_id: key: id of
         accessPackageAssignmentResourceRole.
        :type access_package_assignment_resource_role_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum426]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum427]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageResourceScope, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageResourceScope
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageResourceScope"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_access_package_resource_scope.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentRequest-id': self._serialize.url("access_package_assignment_request_id", access_package_assignment_request_id, 'str'),
            'accessPackageAssignmentResourceRole-id': self._serialize.url("access_package_assignment_resource_role_id", access_package_assignment_resource_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageResourceScope', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_access_package_resource_scope.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentRequests/{accessPackageAssignmentRequest-id}/accessPackageAssignment/accessPackageAssignmentResourceRoles/{accessPackageAssignmentResourceRole-id}/accessPackageResourceScope'}  # type: ignore

    def update_access_package_resource_scope(
        self,
        access_package_assignment_request_id,  # type: str
        access_package_assignment_resource_role_id,  # type: str
        id=None,  # type: Optional[str]
        description=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        is_root_scope=None,  # type: Optional[bool]
        origin_id=None,  # type: Optional[str]
        origin_system=None,  # type: Optional[str]
        role_origin_id=None,  # type: Optional[str]
        url=None,  # type: Optional[str]
        access_package_resource=None,  # type: Optional["models.MicrosoftGraphAccessPackageResource"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property accessPackageResourceScope in identityGovernance.

        Update the navigation property accessPackageResourceScope in identityGovernance.

        :param access_package_assignment_request_id: key: id of accessPackageAssignmentRequest.
        :type access_package_assignment_request_id: str
        :param access_package_assignment_resource_role_id: key: id of
         accessPackageAssignmentResourceRole.
        :type access_package_assignment_resource_role_id: str
        :param id: Read-only.
        :type id: str
        :param description:
        :type description: str
        :param display_name:
        :type display_name: str
        :param is_root_scope:
        :type is_root_scope: bool
        :param origin_id:
        :type origin_id: str
        :param origin_system:
        :type origin_system: str
        :param role_origin_id:
        :type role_origin_id: str
        :param url:
        :type url: str
        :param access_package_resource: accessPackageResource.
        :type access_package_resource: ~identity_governance.models.MicrosoftGraphAccessPackageResource
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageResourceScope(id=id, description=description, display_name=display_name, is_root_scope=is_root_scope, origin_id=origin_id, origin_system=origin_system, role_origin_id=role_origin_id, url=url, access_package_resource=access_package_resource)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_access_package_resource_scope.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentRequest-id': self._serialize.url("access_package_assignment_request_id", access_package_assignment_request_id, 'str'),
            'accessPackageAssignmentResourceRole-id': self._serialize.url("access_package_assignment_resource_role_id", access_package_assignment_resource_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageResourceScope')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_access_package_resource_scope.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentRequests/{accessPackageAssignmentRequest-id}/accessPackageAssignment/accessPackageAssignmentResourceRoles/{accessPackageAssignmentResourceRole-id}/accessPackageResourceScope'}  # type: ignore

    def delete_access_package_resource_scope(
        self,
        access_package_assignment_request_id,  # type: str
        access_package_assignment_resource_role_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property accessPackageResourceScope for identityGovernance.

        Delete navigation property accessPackageResourceScope for identityGovernance.

        :param access_package_assignment_request_id: key: id of accessPackageAssignmentRequest.
        :type access_package_assignment_request_id: str
        :param access_package_assignment_resource_role_id: key: id of
         accessPackageAssignmentResourceRole.
        :type access_package_assignment_resource_role_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_access_package_resource_scope.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentRequest-id': self._serialize.url("access_package_assignment_request_id", access_package_assignment_request_id, 'str'),
            'accessPackageAssignmentResourceRole-id': self._serialize.url("access_package_assignment_resource_role_id", access_package_assignment_resource_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_access_package_resource_scope.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentRequests/{accessPackageAssignmentRequest-id}/accessPackageAssignment/accessPackageAssignmentResourceRoles/{accessPackageAssignmentResourceRole-id}/accessPackageResourceScope'}  # type: ignore

    def get_access_package_subject(
        self,
        access_package_assignment_request_id,  # type: str
        access_package_assignment_resource_role_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum442"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum443"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphAccessPackageSubject"
        """Get accessPackageSubject from identityGovernance.

        Get accessPackageSubject from identityGovernance.

        :param access_package_assignment_request_id: key: id of accessPackageAssignmentRequest.
        :type access_package_assignment_request_id: str
        :param access_package_assignment_resource_role_id: key: id of
         accessPackageAssignmentResourceRole.
        :type access_package_assignment_resource_role_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum442]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum443]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageSubject, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageSubject
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageSubject"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_access_package_subject.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentRequest-id': self._serialize.url("access_package_assignment_request_id", access_package_assignment_request_id, 'str'),
            'accessPackageAssignmentResourceRole-id': self._serialize.url("access_package_assignment_resource_role_id", access_package_assignment_resource_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageSubject', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_access_package_subject.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentRequests/{accessPackageAssignmentRequest-id}/accessPackageAssignment/accessPackageAssignmentResourceRoles/{accessPackageAssignmentResourceRole-id}/accessPackageSubject'}  # type: ignore

    def update_access_package_subject(
        self,
        access_package_assignment_request_id,  # type: str
        access_package_assignment_resource_role_id,  # type: str
        id=None,  # type: Optional[str]
        alt_sec_id=None,  # type: Optional[str]
        connected_organization_id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        email=None,  # type: Optional[str]
        object_id=None,  # type: Optional[str]
        on_premises_security_identifier=None,  # type: Optional[str]
        principal_name=None,  # type: Optional[str]
        type=None,  # type: Optional[str]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        created_by=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        description=None,  # type: Optional[str]
        microsoft_graph_connected_organization_display_name=None,  # type: Optional[str]
        identity_sources=None,  # type: Optional[List[Dict[str, object]]]
        modified_by=None,  # type: Optional[str]
        modified_date_time=None,  # type: Optional[datetime.datetime]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphConnectedOrganizationState"]]
        external_sponsors=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        internal_sponsors=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property accessPackageSubject in identityGovernance.

        Update the navigation property accessPackageSubject in identityGovernance.

        :param access_package_assignment_request_id: key: id of accessPackageAssignmentRequest.
        :type access_package_assignment_request_id: str
        :param access_package_assignment_resource_role_id: key: id of
         accessPackageAssignmentResourceRole.
        :type access_package_assignment_resource_role_id: str
        :param id: Read-only.
        :type id: str
        :param alt_sec_id:
        :type alt_sec_id: str
        :param connected_organization_id:
        :type connected_organization_id: str
        :param display_name:
        :type display_name: str
        :param email:
        :type email: str
        :param object_id:
        :type object_id: str
        :param on_premises_security_identifier:
        :type on_premises_security_identifier: str
        :param principal_name:
        :type principal_name: str
        :param type:
        :type type: str
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param created_by:
        :type created_by: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param microsoft_graph_connected_organization_display_name:
        :type microsoft_graph_connected_organization_display_name: str
        :param identity_sources:
        :type identity_sources: list[dict[str, object]]
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param state:
        :type state: str or ~identity_governance.models.MicrosoftGraphConnectedOrganizationState
        :param external_sponsors:
        :type external_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :param internal_sponsors:
        :type internal_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageSubject(id=id, alt_sec_id=alt_sec_id, connected_organization_id=connected_organization_id, display_name=display_name, email=email, object_id=object_id, on_premises_security_identifier=on_premises_security_identifier, principal_name=principal_name, type=type, id_connected_organization_id=microsoft_graph_entity_id, created_by=created_by, created_date_time=created_date_time, description=description, display_name_connected_organization_display_name=microsoft_graph_connected_organization_display_name, identity_sources=identity_sources, modified_by=modified_by, modified_date_time=modified_date_time, state=state, external_sponsors=external_sponsors, internal_sponsors=internal_sponsors)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_access_package_subject.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentRequest-id': self._serialize.url("access_package_assignment_request_id", access_package_assignment_request_id, 'str'),
            'accessPackageAssignmentResourceRole-id': self._serialize.url("access_package_assignment_resource_role_id", access_package_assignment_resource_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageSubject')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_access_package_subject.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentRequests/{accessPackageAssignmentRequest-id}/accessPackageAssignment/accessPackageAssignmentResourceRoles/{accessPackageAssignmentResourceRole-id}/accessPackageSubject'}  # type: ignore

    def delete_access_package_subject(
        self,
        access_package_assignment_request_id,  # type: str
        access_package_assignment_resource_role_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property accessPackageSubject for identityGovernance.

        Delete navigation property accessPackageSubject for identityGovernance.

        :param access_package_assignment_request_id: key: id of accessPackageAssignmentRequest.
        :type access_package_assignment_request_id: str
        :param access_package_assignment_resource_role_id: key: id of
         accessPackageAssignmentResourceRole.
        :type access_package_assignment_resource_role_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_access_package_subject.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentRequest-id': self._serialize.url("access_package_assignment_request_id", access_package_assignment_request_id, 'str'),
            'accessPackageAssignmentResourceRole-id': self._serialize.url("access_package_assignment_resource_role_id", access_package_assignment_resource_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_access_package_subject.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentRequests/{accessPackageAssignmentRequest-id}/accessPackageAssignment/accessPackageAssignmentResourceRoles/{accessPackageAssignmentResourceRole-id}/accessPackageSubject'}  # type: ignore

    def my(
        self,
        access_package_assignment_request_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> List["models.MicrosoftGraphAccessPackageAssignmentResourceRole"]
        """Invoke function My.

        Invoke function My.

        :param access_package_assignment_request_id: key: id of accessPackageAssignmentRequest.
        :type access_package_assignment_request_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MicrosoftGraphAccessPackageAssignmentResourceRole, or the result of cls(response)
        :rtype: list[~identity_governance.models.MicrosoftGraphAccessPackageAssignmentResourceRole]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.MicrosoftGraphAccessPackageAssignmentResourceRole"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.my.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentRequest-id': self._serialize.url("access_package_assignment_request_id", access_package_assignment_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[MicrosoftGraphAccessPackageAssignmentResourceRole]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    my.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentRequests/{accessPackageAssignmentRequest-id}/accessPackageAssignment/accessPackageAssignmentResourceRoles/microsoft.graph.My()'}  # type: ignore
