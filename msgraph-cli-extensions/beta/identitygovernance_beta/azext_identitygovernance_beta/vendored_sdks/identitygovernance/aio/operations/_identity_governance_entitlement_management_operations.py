# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class IdentityGovernanceEntitlementManagementOperations:
    """IdentityGovernanceEntitlementManagementOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~identity_governance.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_access_package_assignment_policy(
        self,
        orderby: Optional[List[Union[str, "models.Enum47"]]] = None,
        select: Optional[List[Union[str, "models.Enum48"]]] = None,
        expand: Optional[List[Union[str, "models.Enum49"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfAccessPackageAssignmentPolicy"]:
        """Get accessPackageAssignmentPolicies from identityGovernance.

        Get accessPackageAssignmentPolicies from identityGovernance.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum47]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum48]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum49]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfAccessPackageAssignmentPolicy or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~identity_governance.models.CollectionOfAccessPackageAssignmentPolicy]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfAccessPackageAssignmentPolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_access_package_assignment_policy.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfAccessPackageAssignmentPolicy', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_access_package_assignment_policy.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentPolicies'}  # type: ignore

    async def create_access_package_assignment_policy(
        self,
        id: Optional[str] = None,
        access_package_id: Optional[str] = None,
        can_extend: Optional[bool] = None,
        created_by: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        duration_in_days: Optional[int] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        modified_by: Optional[str] = None,
        modified_date_time: Optional[datetime.datetime] = None,
        questions: Optional[List["models.MicrosoftGraphAccessPackageQuestion"]] = None,
        access_package: Optional["models.MicrosoftGraphAccessPackage"] = None,
        access_package_catalog: Optional["models.MicrosoftGraphAccessPackageCatalog"] = None,
        accept_requests: Optional[bool] = None,
        allowed_requestors: Optional[List["models.MicrosoftGraphUserSet"]] = None,
        scope_type: Optional[str] = None,
        approval_mode: Optional[str] = None,
        approval_stages: Optional[List["models.MicrosoftGraphApprovalStage"]] = None,
        is_approval_required: Optional[bool] = None,
        is_approval_required_for_extension: Optional[bool] = None,
        is_requestor_justification_required: Optional[bool] = None,
        integer_duration_in_days: Optional[int] = None,
        is_enabled: Optional[bool] = None,
        recurrence_type: Optional[str] = None,
        reviewers: Optional[List["models.MicrosoftGraphUserSet"]] = None,
        reviewer_type: Optional[str] = None,
        start_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ) -> "models.MicrosoftGraphAccessPackageAssignmentPolicy":
        """Create new navigation property to accessPackageAssignmentPolicies for identityGovernance.

        Create new navigation property to accessPackageAssignmentPolicies for identityGovernance.

        :param id: Read-only.
        :type id: str
        :param access_package_id:
        :type access_package_id: str
        :param can_extend:
        :type can_extend: bool
        :param created_by:
        :type created_by: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param display_name:
        :type display_name: str
        :param duration_in_days:
        :type duration_in_days: int
        :param expiration_date_time:
        :type expiration_date_time: ~datetime.datetime
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param questions:
        :type questions: list[~identity_governance.models.MicrosoftGraphAccessPackageQuestion]
        :param access_package: accessPackage.
        :type access_package: ~identity_governance.models.MicrosoftGraphAccessPackage
        :param access_package_catalog: accessPackageCatalog.
        :type access_package_catalog: ~identity_governance.models.MicrosoftGraphAccessPackageCatalog
        :param accept_requests:
        :type accept_requests: bool
        :param allowed_requestors:
        :type allowed_requestors: list[~identity_governance.models.MicrosoftGraphUserSet]
        :param scope_type:
        :type scope_type: str
        :param approval_mode:
        :type approval_mode: str
        :param approval_stages:
        :type approval_stages: list[~identity_governance.models.MicrosoftGraphApprovalStage]
        :param is_approval_required:
        :type is_approval_required: bool
        :param is_approval_required_for_extension:
        :type is_approval_required_for_extension: bool
        :param is_requestor_justification_required:
        :type is_requestor_justification_required: bool
        :param integer_duration_in_days:
        :type integer_duration_in_days: int
        :param is_enabled:
        :type is_enabled: bool
        :param recurrence_type:
        :type recurrence_type: str
        :param reviewers:
        :type reviewers: list[~identity_governance.models.MicrosoftGraphUserSet]
        :param reviewer_type:
        :type reviewer_type: str
        :param start_date_time:
        :type start_date_time: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageAssignmentPolicy, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageAssignmentPolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageAssignmentPolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageAssignmentPolicy(id=id, access_package_id=access_package_id, can_extend=can_extend, created_by=created_by, created_date_time=created_date_time, description=description, display_name=display_name, duration_in_days=duration_in_days, expiration_date_time=expiration_date_time, modified_by=modified_by, modified_date_time=modified_date_time, questions=questions, access_package=access_package, access_package_catalog=access_package_catalog, accept_requests=accept_requests, allowed_requestors=allowed_requestors, scope_type=scope_type, approval_mode=approval_mode, approval_stages=approval_stages, is_approval_required=is_approval_required, is_approval_required_for_extension=is_approval_required_for_extension, is_requestor_justification_required=is_requestor_justification_required, duration_in_days_access_review_settings_duration_in_days=integer_duration_in_days, is_enabled=is_enabled, recurrence_type=recurrence_type, reviewers=reviewers, reviewer_type=reviewer_type, start_date_time=start_date_time)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_access_package_assignment_policy.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageAssignmentPolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageAssignmentPolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_access_package_assignment_policy.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentPolicies'}  # type: ignore

    async def get_access_package_assignment_policy(
        self,
        access_package_assignment_policy_id: str,
        select: Optional[List[Union[str, "models.Enum50"]]] = None,
        expand: Optional[List[Union[str, "models.Enum51"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphAccessPackageAssignmentPolicy":
        """Get accessPackageAssignmentPolicies from identityGovernance.

        Get accessPackageAssignmentPolicies from identityGovernance.

        :param access_package_assignment_policy_id: key: id of accessPackageAssignmentPolicy.
        :type access_package_assignment_policy_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum50]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum51]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageAssignmentPolicy, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageAssignmentPolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageAssignmentPolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_access_package_assignment_policy.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentPolicy-id': self._serialize.url("access_package_assignment_policy_id", access_package_assignment_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageAssignmentPolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_access_package_assignment_policy.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentPolicies/{accessPackageAssignmentPolicy-id}'}  # type: ignore

    async def update_access_package_assignment_policy(
        self,
        access_package_assignment_policy_id: str,
        id: Optional[str] = None,
        access_package_id: Optional[str] = None,
        can_extend: Optional[bool] = None,
        created_by: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        duration_in_days: Optional[int] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        modified_by: Optional[str] = None,
        modified_date_time: Optional[datetime.datetime] = None,
        questions: Optional[List["models.MicrosoftGraphAccessPackageQuestion"]] = None,
        access_package: Optional["models.MicrosoftGraphAccessPackage"] = None,
        access_package_catalog: Optional["models.MicrosoftGraphAccessPackageCatalog"] = None,
        accept_requests: Optional[bool] = None,
        allowed_requestors: Optional[List["models.MicrosoftGraphUserSet"]] = None,
        scope_type: Optional[str] = None,
        approval_mode: Optional[str] = None,
        approval_stages: Optional[List["models.MicrosoftGraphApprovalStage"]] = None,
        is_approval_required: Optional[bool] = None,
        is_approval_required_for_extension: Optional[bool] = None,
        is_requestor_justification_required: Optional[bool] = None,
        integer_duration_in_days: Optional[int] = None,
        is_enabled: Optional[bool] = None,
        recurrence_type: Optional[str] = None,
        reviewers: Optional[List["models.MicrosoftGraphUserSet"]] = None,
        reviewer_type: Optional[str] = None,
        start_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ) -> None:
        """Update the navigation property accessPackageAssignmentPolicies in identityGovernance.

        Update the navigation property accessPackageAssignmentPolicies in identityGovernance.

        :param access_package_assignment_policy_id: key: id of accessPackageAssignmentPolicy.
        :type access_package_assignment_policy_id: str
        :param id: Read-only.
        :type id: str
        :param access_package_id:
        :type access_package_id: str
        :param can_extend:
        :type can_extend: bool
        :param created_by:
        :type created_by: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param display_name:
        :type display_name: str
        :param duration_in_days:
        :type duration_in_days: int
        :param expiration_date_time:
        :type expiration_date_time: ~datetime.datetime
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param questions:
        :type questions: list[~identity_governance.models.MicrosoftGraphAccessPackageQuestion]
        :param access_package: accessPackage.
        :type access_package: ~identity_governance.models.MicrosoftGraphAccessPackage
        :param access_package_catalog: accessPackageCatalog.
        :type access_package_catalog: ~identity_governance.models.MicrosoftGraphAccessPackageCatalog
        :param accept_requests:
        :type accept_requests: bool
        :param allowed_requestors:
        :type allowed_requestors: list[~identity_governance.models.MicrosoftGraphUserSet]
        :param scope_type:
        :type scope_type: str
        :param approval_mode:
        :type approval_mode: str
        :param approval_stages:
        :type approval_stages: list[~identity_governance.models.MicrosoftGraphApprovalStage]
        :param is_approval_required:
        :type is_approval_required: bool
        :param is_approval_required_for_extension:
        :type is_approval_required_for_extension: bool
        :param is_requestor_justification_required:
        :type is_requestor_justification_required: bool
        :param integer_duration_in_days:
        :type integer_duration_in_days: int
        :param is_enabled:
        :type is_enabled: bool
        :param recurrence_type:
        :type recurrence_type: str
        :param reviewers:
        :type reviewers: list[~identity_governance.models.MicrosoftGraphUserSet]
        :param reviewer_type:
        :type reviewer_type: str
        :param start_date_time:
        :type start_date_time: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageAssignmentPolicy(id=id, access_package_id=access_package_id, can_extend=can_extend, created_by=created_by, created_date_time=created_date_time, description=description, display_name=display_name, duration_in_days=duration_in_days, expiration_date_time=expiration_date_time, modified_by=modified_by, modified_date_time=modified_date_time, questions=questions, access_package=access_package, access_package_catalog=access_package_catalog, accept_requests=accept_requests, allowed_requestors=allowed_requestors, scope_type=scope_type, approval_mode=approval_mode, approval_stages=approval_stages, is_approval_required=is_approval_required, is_approval_required_for_extension=is_approval_required_for_extension, is_requestor_justification_required=is_requestor_justification_required, duration_in_days_access_review_settings_duration_in_days=integer_duration_in_days, is_enabled=is_enabled, recurrence_type=recurrence_type, reviewers=reviewers, reviewer_type=reviewer_type, start_date_time=start_date_time)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_access_package_assignment_policy.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentPolicy-id': self._serialize.url("access_package_assignment_policy_id", access_package_assignment_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageAssignmentPolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_access_package_assignment_policy.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentPolicies/{accessPackageAssignmentPolicy-id}'}  # type: ignore

    async def delete_access_package_assignment_policy(
        self,
        access_package_assignment_policy_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property accessPackageAssignmentPolicies for identityGovernance.

        Delete navigation property accessPackageAssignmentPolicies for identityGovernance.

        :param access_package_assignment_policy_id: key: id of accessPackageAssignmentPolicy.
        :type access_package_assignment_policy_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_access_package_assignment_policy.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentPolicy-id': self._serialize.url("access_package_assignment_policy_id", access_package_assignment_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_access_package_assignment_policy.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentPolicies/{accessPackageAssignmentPolicy-id}'}  # type: ignore

    def list_access_package_assignment_request(
        self,
        orderby: Optional[List[Union[str, "models.Enum162"]]] = None,
        select: Optional[List[Union[str, "models.Enum163"]]] = None,
        expand: Optional[List[Union[str, "models.Enum164"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfAccessPackageAssignmentRequest"]:
        """Get accessPackageAssignmentRequests from identityGovernance.

        Get accessPackageAssignmentRequests from identityGovernance.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum162]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum163]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum164]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfAccessPackageAssignmentRequest or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~identity_governance.models.CollectionOfAccessPackageAssignmentRequest]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfAccessPackageAssignmentRequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_access_package_assignment_request.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfAccessPackageAssignmentRequest', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_access_package_assignment_request.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentRequests'}  # type: ignore

    async def create_access_package_assignment_request(
        self,
        id: Optional[str] = None,
        answers: Optional[List["models.MicrosoftGraphAccessPackageAnswer"]] = None,
        completed_date: Optional[datetime.datetime] = None,
        created_date_time: Optional[datetime.datetime] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        is_validation_only: Optional[bool] = None,
        justification: Optional[str] = None,
        request_state: Optional[str] = None,
        request_status: Optional[str] = None,
        request_type: Optional[str] = None,
        access_package: Optional["models.MicrosoftGraphAccessPackage"] = None,
        access_package_assignment: Optional["models.MicrosoftGraphAccessPackageAssignment"] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        alt_sec_id: Optional[str] = None,
        connected_organization_id: Optional[str] = None,
        display_name: Optional[str] = None,
        email: Optional[str] = None,
        object_id: Optional[str] = None,
        on_premises_security_identifier: Optional[str] = None,
        principal_name: Optional[str] = None,
        type: Optional[str] = None,
        id1: Optional[str] = None,
        created_by: Optional[str] = None,
        microsoft_graph_connected_organization_created_date_time_created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        microsoft_graph_connected_organization_display_name: Optional[str] = None,
        identity_sources: Optional[List[Dict[str, object]]] = None,
        modified_by: Optional[str] = None,
        modified_date_time: Optional[datetime.datetime] = None,
        state: Optional[Union[str, "models.MicrosoftGraphConnectedOrganizationState"]] = None,
        external_sponsors: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        internal_sponsors: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        expiration: Optional["models.MicrosoftGraphExpirationPattern"] = None,
        recurrence: Optional["models.MicrosoftGraphPatternedRecurrence"] = None,
        start_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ) -> "models.MicrosoftGraphAccessPackageAssignmentRequest":
        """Create new navigation property to accessPackageAssignmentRequests for identityGovernance.

        Create new navigation property to accessPackageAssignmentRequests for identityGovernance.

        :param id: Read-only.
        :type id: str
        :param answers:
        :type answers: list[~identity_governance.models.MicrosoftGraphAccessPackageAnswer]
        :param completed_date:
        :type completed_date: ~datetime.datetime
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param expiration_date_time:
        :type expiration_date_time: ~datetime.datetime
        :param is_validation_only:
        :type is_validation_only: bool
        :param justification:
        :type justification: str
        :param request_state:
        :type request_state: str
        :param request_status:
        :type request_status: str
        :param request_type:
        :type request_type: str
        :param access_package: accessPackage.
        :type access_package: ~identity_governance.models.MicrosoftGraphAccessPackage
        :param access_package_assignment: accessPackageAssignment.
        :type access_package_assignment: ~identity_governance.models.MicrosoftGraphAccessPackageAssignment
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param alt_sec_id:
        :type alt_sec_id: str
        :param connected_organization_id:
        :type connected_organization_id: str
        :param display_name:
        :type display_name: str
        :param email:
        :type email: str
        :param object_id:
        :type object_id: str
        :param on_premises_security_identifier:
        :type on_premises_security_identifier: str
        :param principal_name:
        :type principal_name: str
        :param type:
        :type type: str
        :param id1: Read-only.
        :type id1: str
        :param created_by:
        :type created_by: str
        :param microsoft_graph_connected_organization_created_date_time_created_date_time:
        :type microsoft_graph_connected_organization_created_date_time_created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param microsoft_graph_connected_organization_display_name:
        :type microsoft_graph_connected_organization_display_name: str
        :param identity_sources:
        :type identity_sources: list[dict[str, object]]
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param state:
        :type state: str or ~identity_governance.models.MicrosoftGraphConnectedOrganizationState
        :param external_sponsors:
        :type external_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :param internal_sponsors:
        :type internal_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :param expiration: expirationPattern.
        :type expiration: ~identity_governance.models.MicrosoftGraphExpirationPattern
        :param recurrence: patternedRecurrence.
        :type recurrence: ~identity_governance.models.MicrosoftGraphPatternedRecurrence
        :param start_date_time:
        :type start_date_time: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageAssignmentRequest, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageAssignmentRequest
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageAssignmentRequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageAssignmentRequest(id=id, answers=answers, completed_date=completed_date, created_date_time=created_date_time, expiration_date_time=expiration_date_time, is_validation_only=is_validation_only, justification=justification, request_state=request_state, request_status=request_status, request_type=request_type, access_package=access_package, access_package_assignment=access_package_assignment, id_requestor_id=microsoft_graph_entity_id, alt_sec_id=alt_sec_id, connected_organization_id=connected_organization_id, display_name_requestor_display_name=display_name, email=email, object_id=object_id, on_premises_security_identifier=on_premises_security_identifier, principal_name=principal_name, type=type, id_requestor_connected_organization_id=id1, created_by=created_by, created_date_time_requestor_connected_organization_created_date_time=microsoft_graph_connected_organization_created_date_time_created_date_time, description=description, display_name_requestor_connected_organization_display_name=microsoft_graph_connected_organization_display_name, identity_sources=identity_sources, modified_by=modified_by, modified_date_time=modified_date_time, state=state, external_sponsors=external_sponsors, internal_sponsors=internal_sponsors, expiration=expiration, recurrence=recurrence, start_date_time=start_date_time)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_access_package_assignment_request.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageAssignmentRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageAssignmentRequest', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_access_package_assignment_request.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentRequests'}  # type: ignore

    async def get_access_package_assignment_request(
        self,
        access_package_assignment_request_id: str,
        select: Optional[List[Union[str, "models.Enum165"]]] = None,
        expand: Optional[List[Union[str, "models.Enum166"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphAccessPackageAssignmentRequest":
        """Get accessPackageAssignmentRequests from identityGovernance.

        Get accessPackageAssignmentRequests from identityGovernance.

        :param access_package_assignment_request_id: key: id of accessPackageAssignmentRequest.
        :type access_package_assignment_request_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum165]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum166]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageAssignmentRequest, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageAssignmentRequest
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageAssignmentRequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_access_package_assignment_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentRequest-id': self._serialize.url("access_package_assignment_request_id", access_package_assignment_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageAssignmentRequest', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_access_package_assignment_request.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentRequests/{accessPackageAssignmentRequest-id}'}  # type: ignore

    async def update_access_package_assignment_request(
        self,
        access_package_assignment_request_id: str,
        id: Optional[str] = None,
        answers: Optional[List["models.MicrosoftGraphAccessPackageAnswer"]] = None,
        completed_date: Optional[datetime.datetime] = None,
        created_date_time: Optional[datetime.datetime] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        is_validation_only: Optional[bool] = None,
        justification: Optional[str] = None,
        request_state: Optional[str] = None,
        request_status: Optional[str] = None,
        request_type: Optional[str] = None,
        access_package: Optional["models.MicrosoftGraphAccessPackage"] = None,
        access_package_assignment: Optional["models.MicrosoftGraphAccessPackageAssignment"] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        alt_sec_id: Optional[str] = None,
        connected_organization_id: Optional[str] = None,
        display_name: Optional[str] = None,
        email: Optional[str] = None,
        object_id: Optional[str] = None,
        on_premises_security_identifier: Optional[str] = None,
        principal_name: Optional[str] = None,
        type: Optional[str] = None,
        id1: Optional[str] = None,
        created_by: Optional[str] = None,
        microsoft_graph_connected_organization_created_date_time_created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        microsoft_graph_connected_organization_display_name: Optional[str] = None,
        identity_sources: Optional[List[Dict[str, object]]] = None,
        modified_by: Optional[str] = None,
        modified_date_time: Optional[datetime.datetime] = None,
        state: Optional[Union[str, "models.MicrosoftGraphConnectedOrganizationState"]] = None,
        external_sponsors: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        internal_sponsors: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        expiration: Optional["models.MicrosoftGraphExpirationPattern"] = None,
        recurrence: Optional["models.MicrosoftGraphPatternedRecurrence"] = None,
        start_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ) -> None:
        """Update the navigation property accessPackageAssignmentRequests in identityGovernance.

        Update the navigation property accessPackageAssignmentRequests in identityGovernance.

        :param access_package_assignment_request_id: key: id of accessPackageAssignmentRequest.
        :type access_package_assignment_request_id: str
        :param id: Read-only.
        :type id: str
        :param answers:
        :type answers: list[~identity_governance.models.MicrosoftGraphAccessPackageAnswer]
        :param completed_date:
        :type completed_date: ~datetime.datetime
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param expiration_date_time:
        :type expiration_date_time: ~datetime.datetime
        :param is_validation_only:
        :type is_validation_only: bool
        :param justification:
        :type justification: str
        :param request_state:
        :type request_state: str
        :param request_status:
        :type request_status: str
        :param request_type:
        :type request_type: str
        :param access_package: accessPackage.
        :type access_package: ~identity_governance.models.MicrosoftGraphAccessPackage
        :param access_package_assignment: accessPackageAssignment.
        :type access_package_assignment: ~identity_governance.models.MicrosoftGraphAccessPackageAssignment
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param alt_sec_id:
        :type alt_sec_id: str
        :param connected_organization_id:
        :type connected_organization_id: str
        :param display_name:
        :type display_name: str
        :param email:
        :type email: str
        :param object_id:
        :type object_id: str
        :param on_premises_security_identifier:
        :type on_premises_security_identifier: str
        :param principal_name:
        :type principal_name: str
        :param type:
        :type type: str
        :param id1: Read-only.
        :type id1: str
        :param created_by:
        :type created_by: str
        :param microsoft_graph_connected_organization_created_date_time_created_date_time:
        :type microsoft_graph_connected_organization_created_date_time_created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param microsoft_graph_connected_organization_display_name:
        :type microsoft_graph_connected_organization_display_name: str
        :param identity_sources:
        :type identity_sources: list[dict[str, object]]
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param state:
        :type state: str or ~identity_governance.models.MicrosoftGraphConnectedOrganizationState
        :param external_sponsors:
        :type external_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :param internal_sponsors:
        :type internal_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :param expiration: expirationPattern.
        :type expiration: ~identity_governance.models.MicrosoftGraphExpirationPattern
        :param recurrence: patternedRecurrence.
        :type recurrence: ~identity_governance.models.MicrosoftGraphPatternedRecurrence
        :param start_date_time:
        :type start_date_time: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageAssignmentRequest(id=id, answers=answers, completed_date=completed_date, created_date_time=created_date_time, expiration_date_time=expiration_date_time, is_validation_only=is_validation_only, justification=justification, request_state=request_state, request_status=request_status, request_type=request_type, access_package=access_package, access_package_assignment=access_package_assignment, id_requestor_id=microsoft_graph_entity_id, alt_sec_id=alt_sec_id, connected_organization_id=connected_organization_id, display_name_requestor_display_name=display_name, email=email, object_id=object_id, on_premises_security_identifier=on_premises_security_identifier, principal_name=principal_name, type=type, id_requestor_connected_organization_id=id1, created_by=created_by, created_date_time_requestor_connected_organization_created_date_time=microsoft_graph_connected_organization_created_date_time_created_date_time, description=description, display_name_requestor_connected_organization_display_name=microsoft_graph_connected_organization_display_name, identity_sources=identity_sources, modified_by=modified_by, modified_date_time=modified_date_time, state=state, external_sponsors=external_sponsors, internal_sponsors=internal_sponsors, expiration=expiration, recurrence=recurrence, start_date_time=start_date_time)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_access_package_assignment_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentRequest-id': self._serialize.url("access_package_assignment_request_id", access_package_assignment_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageAssignmentRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_access_package_assignment_request.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentRequests/{accessPackageAssignmentRequest-id}'}  # type: ignore

    async def delete_access_package_assignment_request(
        self,
        access_package_assignment_request_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property accessPackageAssignmentRequests for identityGovernance.

        Delete navigation property accessPackageAssignmentRequests for identityGovernance.

        :param access_package_assignment_request_id: key: id of accessPackageAssignmentRequest.
        :type access_package_assignment_request_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_access_package_assignment_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentRequest-id': self._serialize.url("access_package_assignment_request_id", access_package_assignment_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_access_package_assignment_request.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentRequests/{accessPackageAssignmentRequest-id}'}  # type: ignore

    def list_access_package_assignment_resource_role(
        self,
        orderby: Optional[List[Union[str, "models.Enum454"]]] = None,
        select: Optional[List[Union[str, "models.Enum455"]]] = None,
        expand: Optional[List[Union[str, "models.Enum456"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfAccessPackageAssignmentResourceRole0"]:
        """Get accessPackageAssignmentResourceRoles from identityGovernance.

        Get accessPackageAssignmentResourceRoles from identityGovernance.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum454]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum455]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum456]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfAccessPackageAssignmentResourceRole0 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~identity_governance.models.CollectionOfAccessPackageAssignmentResourceRole0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfAccessPackageAssignmentResourceRole0"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_access_package_assignment_resource_role.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfAccessPackageAssignmentResourceRole0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_access_package_assignment_resource_role.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentResourceRoles'}  # type: ignore

    async def create_access_package_assignment_resource_role(
        self,
        id: Optional[str] = None,
        origin_id: Optional[str] = None,
        origin_system: Optional[str] = None,
        status: Optional[str] = None,
        access_package_assignments: Optional[List["models.MicrosoftGraphAccessPackageAssignment"]] = None,
        access_package_resource_role: Optional["models.MicrosoftGraphAccessPackageResourceRole"] = None,
        access_package_resource_scope: Optional["models.MicrosoftGraphAccessPackageResourceScope"] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        alt_sec_id: Optional[str] = None,
        connected_organization_id: Optional[str] = None,
        display_name: Optional[str] = None,
        email: Optional[str] = None,
        object_id: Optional[str] = None,
        on_premises_security_identifier: Optional[str] = None,
        principal_name: Optional[str] = None,
        type: Optional[str] = None,
        id1: Optional[str] = None,
        created_by: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        microsoft_graph_connected_organization_display_name: Optional[str] = None,
        identity_sources: Optional[List[Dict[str, object]]] = None,
        modified_by: Optional[str] = None,
        modified_date_time: Optional[datetime.datetime] = None,
        state: Optional[Union[str, "models.MicrosoftGraphConnectedOrganizationState"]] = None,
        external_sponsors: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        internal_sponsors: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphAccessPackageAssignmentResourceRole":
        """Create new navigation property to accessPackageAssignmentResourceRoles for identityGovernance.

        Create new navigation property to accessPackageAssignmentResourceRoles for identityGovernance.

        :param id: Read-only.
        :type id: str
        :param origin_id:
        :type origin_id: str
        :param origin_system:
        :type origin_system: str
        :param status:
        :type status: str
        :param access_package_assignments:
        :type access_package_assignments: list[~identity_governance.models.MicrosoftGraphAccessPackageAssignment]
        :param access_package_resource_role: accessPackageResourceRole.
        :type access_package_resource_role: ~identity_governance.models.MicrosoftGraphAccessPackageResourceRole
        :param access_package_resource_scope: accessPackageResourceScope.
        :type access_package_resource_scope: ~identity_governance.models.MicrosoftGraphAccessPackageResourceScope
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param alt_sec_id:
        :type alt_sec_id: str
        :param connected_organization_id:
        :type connected_organization_id: str
        :param display_name:
        :type display_name: str
        :param email:
        :type email: str
        :param object_id:
        :type object_id: str
        :param on_premises_security_identifier:
        :type on_premises_security_identifier: str
        :param principal_name:
        :type principal_name: str
        :param type:
        :type type: str
        :param id1: Read-only.
        :type id1: str
        :param created_by:
        :type created_by: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param microsoft_graph_connected_organization_display_name:
        :type microsoft_graph_connected_organization_display_name: str
        :param identity_sources:
        :type identity_sources: list[dict[str, object]]
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param state:
        :type state: str or ~identity_governance.models.MicrosoftGraphConnectedOrganizationState
        :param external_sponsors:
        :type external_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :param internal_sponsors:
        :type internal_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageAssignmentResourceRole, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageAssignmentResourceRole
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageAssignmentResourceRole"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageAssignmentResourceRole(id=id, origin_id=origin_id, origin_system=origin_system, status=status, access_package_assignments=access_package_assignments, access_package_resource_role=access_package_resource_role, access_package_resource_scope=access_package_resource_scope, id_access_package_subject_id=microsoft_graph_entity_id, alt_sec_id=alt_sec_id, connected_organization_id=connected_organization_id, display_name_access_package_subject_display_name=display_name, email=email, object_id=object_id, on_premises_security_identifier=on_premises_security_identifier, principal_name=principal_name, type=type, id_access_package_subject_connected_organization_id=id1, created_by=created_by, created_date_time=created_date_time, description=description, display_name_access_package_subject_connected_organization_display_name=microsoft_graph_connected_organization_display_name, identity_sources=identity_sources, modified_by=modified_by, modified_date_time=modified_date_time, state=state, external_sponsors=external_sponsors, internal_sponsors=internal_sponsors)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_access_package_assignment_resource_role.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageAssignmentResourceRole')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageAssignmentResourceRole', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_access_package_assignment_resource_role.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentResourceRoles'}  # type: ignore

    async def get_access_package_assignment_resource_role(
        self,
        access_package_assignment_resource_role_id: str,
        select: Optional[List[Union[str, "models.Enum457"]]] = None,
        expand: Optional[List[Union[str, "models.Enum458"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphAccessPackageAssignmentResourceRole":
        """Get accessPackageAssignmentResourceRoles from identityGovernance.

        Get accessPackageAssignmentResourceRoles from identityGovernance.

        :param access_package_assignment_resource_role_id: key: id of
         accessPackageAssignmentResourceRole.
        :type access_package_assignment_resource_role_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum457]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum458]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageAssignmentResourceRole, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageAssignmentResourceRole
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageAssignmentResourceRole"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_access_package_assignment_resource_role.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentResourceRole-id': self._serialize.url("access_package_assignment_resource_role_id", access_package_assignment_resource_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageAssignmentResourceRole', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_access_package_assignment_resource_role.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentResourceRoles/{accessPackageAssignmentResourceRole-id}'}  # type: ignore

    async def update_access_package_assignment_resource_role(
        self,
        access_package_assignment_resource_role_id: str,
        id: Optional[str] = None,
        origin_id: Optional[str] = None,
        origin_system: Optional[str] = None,
        status: Optional[str] = None,
        access_package_assignments: Optional[List["models.MicrosoftGraphAccessPackageAssignment"]] = None,
        access_package_resource_role: Optional["models.MicrosoftGraphAccessPackageResourceRole"] = None,
        access_package_resource_scope: Optional["models.MicrosoftGraphAccessPackageResourceScope"] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        alt_sec_id: Optional[str] = None,
        connected_organization_id: Optional[str] = None,
        display_name: Optional[str] = None,
        email: Optional[str] = None,
        object_id: Optional[str] = None,
        on_premises_security_identifier: Optional[str] = None,
        principal_name: Optional[str] = None,
        type: Optional[str] = None,
        id1: Optional[str] = None,
        created_by: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        microsoft_graph_connected_organization_display_name: Optional[str] = None,
        identity_sources: Optional[List[Dict[str, object]]] = None,
        modified_by: Optional[str] = None,
        modified_date_time: Optional[datetime.datetime] = None,
        state: Optional[Union[str, "models.MicrosoftGraphConnectedOrganizationState"]] = None,
        external_sponsors: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        internal_sponsors: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property accessPackageAssignmentResourceRoles in identityGovernance.

        Update the navigation property accessPackageAssignmentResourceRoles in identityGovernance.

        :param access_package_assignment_resource_role_id: key: id of
         accessPackageAssignmentResourceRole.
        :type access_package_assignment_resource_role_id: str
        :param id: Read-only.
        :type id: str
        :param origin_id:
        :type origin_id: str
        :param origin_system:
        :type origin_system: str
        :param status:
        :type status: str
        :param access_package_assignments:
        :type access_package_assignments: list[~identity_governance.models.MicrosoftGraphAccessPackageAssignment]
        :param access_package_resource_role: accessPackageResourceRole.
        :type access_package_resource_role: ~identity_governance.models.MicrosoftGraphAccessPackageResourceRole
        :param access_package_resource_scope: accessPackageResourceScope.
        :type access_package_resource_scope: ~identity_governance.models.MicrosoftGraphAccessPackageResourceScope
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param alt_sec_id:
        :type alt_sec_id: str
        :param connected_organization_id:
        :type connected_organization_id: str
        :param display_name:
        :type display_name: str
        :param email:
        :type email: str
        :param object_id:
        :type object_id: str
        :param on_premises_security_identifier:
        :type on_premises_security_identifier: str
        :param principal_name:
        :type principal_name: str
        :param type:
        :type type: str
        :param id1: Read-only.
        :type id1: str
        :param created_by:
        :type created_by: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param microsoft_graph_connected_organization_display_name:
        :type microsoft_graph_connected_organization_display_name: str
        :param identity_sources:
        :type identity_sources: list[dict[str, object]]
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param state:
        :type state: str or ~identity_governance.models.MicrosoftGraphConnectedOrganizationState
        :param external_sponsors:
        :type external_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :param internal_sponsors:
        :type internal_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageAssignmentResourceRole(id=id, origin_id=origin_id, origin_system=origin_system, status=status, access_package_assignments=access_package_assignments, access_package_resource_role=access_package_resource_role, access_package_resource_scope=access_package_resource_scope, id_access_package_subject_id=microsoft_graph_entity_id, alt_sec_id=alt_sec_id, connected_organization_id=connected_organization_id, display_name_access_package_subject_display_name=display_name, email=email, object_id=object_id, on_premises_security_identifier=on_premises_security_identifier, principal_name=principal_name, type=type, id_access_package_subject_connected_organization_id=id1, created_by=created_by, created_date_time=created_date_time, description=description, display_name_access_package_subject_connected_organization_display_name=microsoft_graph_connected_organization_display_name, identity_sources=identity_sources, modified_by=modified_by, modified_date_time=modified_date_time, state=state, external_sponsors=external_sponsors, internal_sponsors=internal_sponsors)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_access_package_assignment_resource_role.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentResourceRole-id': self._serialize.url("access_package_assignment_resource_role_id", access_package_assignment_resource_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageAssignmentResourceRole')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_access_package_assignment_resource_role.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentResourceRoles/{accessPackageAssignmentResourceRole-id}'}  # type: ignore

    async def delete_access_package_assignment_resource_role(
        self,
        access_package_assignment_resource_role_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property accessPackageAssignmentResourceRoles for identityGovernance.

        Delete navigation property accessPackageAssignmentResourceRoles for identityGovernance.

        :param access_package_assignment_resource_role_id: key: id of
         accessPackageAssignmentResourceRole.
        :type access_package_assignment_resource_role_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_access_package_assignment_resource_role.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignmentResourceRole-id': self._serialize.url("access_package_assignment_resource_role_id", access_package_assignment_resource_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_access_package_assignment_resource_role.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignmentResourceRoles/{accessPackageAssignmentResourceRole-id}'}  # type: ignore

    def list_access_package_assignment(
        self,
        orderby: Optional[List[Union[str, "models.Enum746"]]] = None,
        select: Optional[List[Union[str, "models.Enum747"]]] = None,
        expand: Optional[List[Union[str, "models.Enum748"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfAccessPackageAssignment1"]:
        """Get accessPackageAssignments from identityGovernance.

        Get accessPackageAssignments from identityGovernance.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum746]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum747]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum748]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfAccessPackageAssignment1 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~identity_governance.models.CollectionOfAccessPackageAssignment1]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfAccessPackageAssignment1"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_access_package_assignment.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfAccessPackageAssignment1', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_access_package_assignment.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments'}  # type: ignore

    async def create_access_package_assignment(
        self,
        id: Optional[str] = None,
        access_package_id: Optional[str] = None,
        assignment_policy_id: Optional[str] = None,
        assignment_state: Optional[str] = None,
        assignment_status: Optional[str] = None,
        catalog_id: Optional[str] = None,
        expired_date_time: Optional[datetime.datetime] = None,
        is_extended: Optional[bool] = None,
        target_id: Optional[str] = None,
        access_package: Optional["models.MicrosoftGraphAccessPackage"] = None,
        access_package_assignment_policy: Optional["models.MicrosoftGraphAccessPackageAssignmentPolicy"] = None,
        access_package_assignment_requests: Optional[List["models.MicrosoftGraphAccessPackageAssignmentRequest"]] = None,
        access_package_assignment_resource_roles: Optional[List["models.MicrosoftGraphAccessPackageAssignmentResourceRole"]] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        alt_sec_id: Optional[str] = None,
        connected_organization_id: Optional[str] = None,
        display_name: Optional[str] = None,
        email: Optional[str] = None,
        object_id: Optional[str] = None,
        on_premises_security_identifier: Optional[str] = None,
        principal_name: Optional[str] = None,
        type: Optional[str] = None,
        id1: Optional[str] = None,
        created_by: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        microsoft_graph_connected_organization_display_name: Optional[str] = None,
        identity_sources: Optional[List[Dict[str, object]]] = None,
        modified_by: Optional[str] = None,
        modified_date_time: Optional[datetime.datetime] = None,
        state: Optional[Union[str, "models.MicrosoftGraphConnectedOrganizationState"]] = None,
        external_sponsors: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        internal_sponsors: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        expiration: Optional["models.MicrosoftGraphExpirationPattern"] = None,
        recurrence: Optional["models.MicrosoftGraphPatternedRecurrence"] = None,
        start_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ) -> "models.MicrosoftGraphAccessPackageAssignment":
        """Create new navigation property to accessPackageAssignments for identityGovernance.

        Create new navigation property to accessPackageAssignments for identityGovernance.

        :param id: Read-only.
        :type id: str
        :param access_package_id:
        :type access_package_id: str
        :param assignment_policy_id:
        :type assignment_policy_id: str
        :param assignment_state:
        :type assignment_state: str
        :param assignment_status:
        :type assignment_status: str
        :param catalog_id:
        :type catalog_id: str
        :param expired_date_time:
        :type expired_date_time: ~datetime.datetime
        :param is_extended:
        :type is_extended: bool
        :param target_id:
        :type target_id: str
        :param access_package: accessPackage.
        :type access_package: ~identity_governance.models.MicrosoftGraphAccessPackage
        :param access_package_assignment_policy: accessPackageAssignmentPolicy.
        :type access_package_assignment_policy: ~identity_governance.models.MicrosoftGraphAccessPackageAssignmentPolicy
        :param access_package_assignment_requests:
        :type access_package_assignment_requests: list[~identity_governance.models.MicrosoftGraphAccessPackageAssignmentRequest]
        :param access_package_assignment_resource_roles:
        :type access_package_assignment_resource_roles: list[~identity_governance.models.MicrosoftGraphAccessPackageAssignmentResourceRole]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param alt_sec_id:
        :type alt_sec_id: str
        :param connected_organization_id:
        :type connected_organization_id: str
        :param display_name:
        :type display_name: str
        :param email:
        :type email: str
        :param object_id:
        :type object_id: str
        :param on_premises_security_identifier:
        :type on_premises_security_identifier: str
        :param principal_name:
        :type principal_name: str
        :param type:
        :type type: str
        :param id1: Read-only.
        :type id1: str
        :param created_by:
        :type created_by: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param microsoft_graph_connected_organization_display_name:
        :type microsoft_graph_connected_organization_display_name: str
        :param identity_sources:
        :type identity_sources: list[dict[str, object]]
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param state:
        :type state: str or ~identity_governance.models.MicrosoftGraphConnectedOrganizationState
        :param external_sponsors:
        :type external_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :param internal_sponsors:
        :type internal_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :param expiration: expirationPattern.
        :type expiration: ~identity_governance.models.MicrosoftGraphExpirationPattern
        :param recurrence: patternedRecurrence.
        :type recurrence: ~identity_governance.models.MicrosoftGraphPatternedRecurrence
        :param start_date_time:
        :type start_date_time: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageAssignment, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageAssignment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageAssignment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageAssignment(id=id, access_package_id=access_package_id, assignment_policy_id=assignment_policy_id, assignment_state=assignment_state, assignment_status=assignment_status, catalog_id=catalog_id, expired_date_time=expired_date_time, is_extended=is_extended, target_id=target_id, access_package=access_package, access_package_assignment_policy=access_package_assignment_policy, access_package_assignment_requests=access_package_assignment_requests, access_package_assignment_resource_roles=access_package_assignment_resource_roles, id_target_id=microsoft_graph_entity_id, alt_sec_id=alt_sec_id, connected_organization_id=connected_organization_id, display_name_target_display_name=display_name, email=email, object_id=object_id, on_premises_security_identifier=on_premises_security_identifier, principal_name=principal_name, type=type, id_target_connected_organization_id=id1, created_by=created_by, created_date_time=created_date_time, description=description, display_name_target_connected_organization_display_name=microsoft_graph_connected_organization_display_name, identity_sources=identity_sources, modified_by=modified_by, modified_date_time=modified_date_time, state=state, external_sponsors=external_sponsors, internal_sponsors=internal_sponsors, expiration=expiration, recurrence=recurrence, start_date_time=start_date_time)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_access_package_assignment.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageAssignment')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageAssignment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_access_package_assignment.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments'}  # type: ignore

    async def get_access_package_assignment(
        self,
        access_package_assignment_id: str,
        select: Optional[List[Union[str, "models.Enum749"]]] = None,
        expand: Optional[List[Union[str, "models.Enum750"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphAccessPackageAssignment":
        """Get accessPackageAssignments from identityGovernance.

        Get accessPackageAssignments from identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum749]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum750]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageAssignment, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageAssignment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageAssignment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_access_package_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageAssignment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_access_package_assignment.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}'}  # type: ignore

    async def update_access_package_assignment(
        self,
        access_package_assignment_id: str,
        id: Optional[str] = None,
        access_package_id: Optional[str] = None,
        assignment_policy_id: Optional[str] = None,
        assignment_state: Optional[str] = None,
        assignment_status: Optional[str] = None,
        catalog_id: Optional[str] = None,
        expired_date_time: Optional[datetime.datetime] = None,
        is_extended: Optional[bool] = None,
        target_id: Optional[str] = None,
        access_package: Optional["models.MicrosoftGraphAccessPackage"] = None,
        access_package_assignment_policy: Optional["models.MicrosoftGraphAccessPackageAssignmentPolicy"] = None,
        access_package_assignment_requests: Optional[List["models.MicrosoftGraphAccessPackageAssignmentRequest"]] = None,
        access_package_assignment_resource_roles: Optional[List["models.MicrosoftGraphAccessPackageAssignmentResourceRole"]] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        alt_sec_id: Optional[str] = None,
        connected_organization_id: Optional[str] = None,
        display_name: Optional[str] = None,
        email: Optional[str] = None,
        object_id: Optional[str] = None,
        on_premises_security_identifier: Optional[str] = None,
        principal_name: Optional[str] = None,
        type: Optional[str] = None,
        id1: Optional[str] = None,
        created_by: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        microsoft_graph_connected_organization_display_name: Optional[str] = None,
        identity_sources: Optional[List[Dict[str, object]]] = None,
        modified_by: Optional[str] = None,
        modified_date_time: Optional[datetime.datetime] = None,
        state: Optional[Union[str, "models.MicrosoftGraphConnectedOrganizationState"]] = None,
        external_sponsors: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        internal_sponsors: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        expiration: Optional["models.MicrosoftGraphExpirationPattern"] = None,
        recurrence: Optional["models.MicrosoftGraphPatternedRecurrence"] = None,
        start_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ) -> None:
        """Update the navigation property accessPackageAssignments in identityGovernance.

        Update the navigation property accessPackageAssignments in identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param id: Read-only.
        :type id: str
        :param access_package_id:
        :type access_package_id: str
        :param assignment_policy_id:
        :type assignment_policy_id: str
        :param assignment_state:
        :type assignment_state: str
        :param assignment_status:
        :type assignment_status: str
        :param catalog_id:
        :type catalog_id: str
        :param expired_date_time:
        :type expired_date_time: ~datetime.datetime
        :param is_extended:
        :type is_extended: bool
        :param target_id:
        :type target_id: str
        :param access_package: accessPackage.
        :type access_package: ~identity_governance.models.MicrosoftGraphAccessPackage
        :param access_package_assignment_policy: accessPackageAssignmentPolicy.
        :type access_package_assignment_policy: ~identity_governance.models.MicrosoftGraphAccessPackageAssignmentPolicy
        :param access_package_assignment_requests:
        :type access_package_assignment_requests: list[~identity_governance.models.MicrosoftGraphAccessPackageAssignmentRequest]
        :param access_package_assignment_resource_roles:
        :type access_package_assignment_resource_roles: list[~identity_governance.models.MicrosoftGraphAccessPackageAssignmentResourceRole]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param alt_sec_id:
        :type alt_sec_id: str
        :param connected_organization_id:
        :type connected_organization_id: str
        :param display_name:
        :type display_name: str
        :param email:
        :type email: str
        :param object_id:
        :type object_id: str
        :param on_premises_security_identifier:
        :type on_premises_security_identifier: str
        :param principal_name:
        :type principal_name: str
        :param type:
        :type type: str
        :param id1: Read-only.
        :type id1: str
        :param created_by:
        :type created_by: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param microsoft_graph_connected_organization_display_name:
        :type microsoft_graph_connected_organization_display_name: str
        :param identity_sources:
        :type identity_sources: list[dict[str, object]]
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param state:
        :type state: str or ~identity_governance.models.MicrosoftGraphConnectedOrganizationState
        :param external_sponsors:
        :type external_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :param internal_sponsors:
        :type internal_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :param expiration: expirationPattern.
        :type expiration: ~identity_governance.models.MicrosoftGraphExpirationPattern
        :param recurrence: patternedRecurrence.
        :type recurrence: ~identity_governance.models.MicrosoftGraphPatternedRecurrence
        :param start_date_time:
        :type start_date_time: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageAssignment(id=id, access_package_id=access_package_id, assignment_policy_id=assignment_policy_id, assignment_state=assignment_state, assignment_status=assignment_status, catalog_id=catalog_id, expired_date_time=expired_date_time, is_extended=is_extended, target_id=target_id, access_package=access_package, access_package_assignment_policy=access_package_assignment_policy, access_package_assignment_requests=access_package_assignment_requests, access_package_assignment_resource_roles=access_package_assignment_resource_roles, id_target_id=microsoft_graph_entity_id, alt_sec_id=alt_sec_id, connected_organization_id=connected_organization_id, display_name_target_display_name=display_name, email=email, object_id=object_id, on_premises_security_identifier=on_premises_security_identifier, principal_name=principal_name, type=type, id_target_connected_organization_id=id1, created_by=created_by, created_date_time=created_date_time, description=description, display_name_target_connected_organization_display_name=microsoft_graph_connected_organization_display_name, identity_sources=identity_sources, modified_by=modified_by, modified_date_time=modified_date_time, state=state, external_sponsors=external_sponsors, internal_sponsors=internal_sponsors, expiration=expiration, recurrence=recurrence, start_date_time=start_date_time)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_access_package_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageAssignment')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_access_package_assignment.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}'}  # type: ignore

    async def delete_access_package_assignment(
        self,
        access_package_assignment_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property accessPackageAssignments for identityGovernance.

        Delete navigation property accessPackageAssignments for identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_access_package_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_access_package_assignment.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}'}  # type: ignore

    def list_access_package_catalog(
        self,
        orderby: Optional[List[Union[str, "models.Enum1038"]]] = None,
        select: Optional[List[Union[str, "models.Enum1039"]]] = None,
        expand: Optional[List[Union[str, "models.Enum1040"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfAccessPackageCatalog"]:
        """Get accessPackageCatalogs from identityGovernance.

        Get accessPackageCatalogs from identityGovernance.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum1038]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1039]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1040]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfAccessPackageCatalog or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~identity_governance.models.CollectionOfAccessPackageCatalog]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfAccessPackageCatalog"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_access_package_catalog.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfAccessPackageCatalog', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_access_package_catalog.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageCatalogs'}  # type: ignore

    async def create_access_package_catalog(
        self,
        id: Optional[str] = None,
        catalog_status: Optional[str] = None,
        catalog_type: Optional[str] = None,
        created_by: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        is_externally_visible: Optional[bool] = None,
        modified_by: Optional[str] = None,
        modified_date_time: Optional[datetime.datetime] = None,
        access_package_resource_roles: Optional[List["models.MicrosoftGraphAccessPackageResourceRole"]] = None,
        access_package_resources: Optional[List["models.MicrosoftGraphAccessPackageResource"]] = None,
        access_package_resource_scopes: Optional[List["models.MicrosoftGraphAccessPackageResourceScope"]] = None,
        access_packages: Optional[List["models.MicrosoftGraphAccessPackage"]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphAccessPackageCatalog":
        """Create new navigation property to accessPackageCatalogs for identityGovernance.

        Create new navigation property to accessPackageCatalogs for identityGovernance.

        :param id: Read-only.
        :type id: str
        :param catalog_status:
        :type catalog_status: str
        :param catalog_type:
        :type catalog_type: str
        :param created_by:
        :type created_by: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param display_name:
        :type display_name: str
        :param is_externally_visible:
        :type is_externally_visible: bool
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param access_package_resource_roles:
        :type access_package_resource_roles: list[~identity_governance.models.MicrosoftGraphAccessPackageResourceRole]
        :param access_package_resources:
        :type access_package_resources: list[~identity_governance.models.MicrosoftGraphAccessPackageResource]
        :param access_package_resource_scopes:
        :type access_package_resource_scopes: list[~identity_governance.models.MicrosoftGraphAccessPackageResourceScope]
        :param access_packages:
        :type access_packages: list[~identity_governance.models.MicrosoftGraphAccessPackage]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageCatalog, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageCatalog
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageCatalog"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageCatalog(id=id, catalog_status=catalog_status, catalog_type=catalog_type, created_by=created_by, created_date_time=created_date_time, description=description, display_name=display_name, is_externally_visible=is_externally_visible, modified_by=modified_by, modified_date_time=modified_date_time, access_package_resource_roles=access_package_resource_roles, access_package_resources=access_package_resources, access_package_resource_scopes=access_package_resource_scopes, access_packages=access_packages)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_access_package_catalog.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageCatalog')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageCatalog', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_access_package_catalog.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageCatalogs'}  # type: ignore

    async def get_access_package_catalog(
        self,
        access_package_catalog_id: str,
        select: Optional[List[Union[str, "models.Enum1041"]]] = None,
        expand: Optional[List[Union[str, "models.Enum1042"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphAccessPackageCatalog":
        """Get accessPackageCatalogs from identityGovernance.

        Get accessPackageCatalogs from identityGovernance.

        :param access_package_catalog_id: key: id of accessPackageCatalog.
        :type access_package_catalog_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1041]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1042]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageCatalog, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageCatalog
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageCatalog"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_access_package_catalog.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageCatalog-id': self._serialize.url("access_package_catalog_id", access_package_catalog_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageCatalog', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_access_package_catalog.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageCatalogs/{accessPackageCatalog-id}'}  # type: ignore

    async def update_access_package_catalog(
        self,
        access_package_catalog_id: str,
        id: Optional[str] = None,
        catalog_status: Optional[str] = None,
        catalog_type: Optional[str] = None,
        created_by: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        is_externally_visible: Optional[bool] = None,
        modified_by: Optional[str] = None,
        modified_date_time: Optional[datetime.datetime] = None,
        access_package_resource_roles: Optional[List["models.MicrosoftGraphAccessPackageResourceRole"]] = None,
        access_package_resources: Optional[List["models.MicrosoftGraphAccessPackageResource"]] = None,
        access_package_resource_scopes: Optional[List["models.MicrosoftGraphAccessPackageResourceScope"]] = None,
        access_packages: Optional[List["models.MicrosoftGraphAccessPackage"]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property accessPackageCatalogs in identityGovernance.

        Update the navigation property accessPackageCatalogs in identityGovernance.

        :param access_package_catalog_id: key: id of accessPackageCatalog.
        :type access_package_catalog_id: str
        :param id: Read-only.
        :type id: str
        :param catalog_status:
        :type catalog_status: str
        :param catalog_type:
        :type catalog_type: str
        :param created_by:
        :type created_by: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param display_name:
        :type display_name: str
        :param is_externally_visible:
        :type is_externally_visible: bool
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param access_package_resource_roles:
        :type access_package_resource_roles: list[~identity_governance.models.MicrosoftGraphAccessPackageResourceRole]
        :param access_package_resources:
        :type access_package_resources: list[~identity_governance.models.MicrosoftGraphAccessPackageResource]
        :param access_package_resource_scopes:
        :type access_package_resource_scopes: list[~identity_governance.models.MicrosoftGraphAccessPackageResourceScope]
        :param access_packages:
        :type access_packages: list[~identity_governance.models.MicrosoftGraphAccessPackage]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageCatalog(id=id, catalog_status=catalog_status, catalog_type=catalog_type, created_by=created_by, created_date_time=created_date_time, description=description, display_name=display_name, is_externally_visible=is_externally_visible, modified_by=modified_by, modified_date_time=modified_date_time, access_package_resource_roles=access_package_resource_roles, access_package_resources=access_package_resources, access_package_resource_scopes=access_package_resource_scopes, access_packages=access_packages)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_access_package_catalog.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageCatalog-id': self._serialize.url("access_package_catalog_id", access_package_catalog_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageCatalog')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_access_package_catalog.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageCatalogs/{accessPackageCatalog-id}'}  # type: ignore

    async def delete_access_package_catalog(
        self,
        access_package_catalog_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property accessPackageCatalogs for identityGovernance.

        Delete navigation property accessPackageCatalogs for identityGovernance.

        :param access_package_catalog_id: key: id of accessPackageCatalog.
        :type access_package_catalog_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_access_package_catalog.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageCatalog-id': self._serialize.url("access_package_catalog_id", access_package_catalog_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_access_package_catalog.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageCatalogs/{accessPackageCatalog-id}'}  # type: ignore

    def list_access_package_resource_request(
        self,
        orderby: Optional[List[Union[str, "models.Enum1153"]]] = None,
        select: Optional[List[Union[str, "models.Enum1154"]]] = None,
        expand: Optional[List[Union[str, "models.Enum1155"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfAccessPackageResourceRequest"]:
        """Get accessPackageResourceRequests from identityGovernance.

        Get accessPackageResourceRequests from identityGovernance.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum1153]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1154]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1155]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfAccessPackageResourceRequest or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~identity_governance.models.CollectionOfAccessPackageResourceRequest]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfAccessPackageResourceRequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_access_package_resource_request.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfAccessPackageResourceRequest', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_access_package_resource_request.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResourceRequests'}  # type: ignore

    async def create_access_package_resource_request(
        self,
        id: Optional[str] = None,
        catalog_id: Optional[str] = None,
        execute_immediately: Optional[bool] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        is_validation_only: Optional[bool] = None,
        justification: Optional[str] = None,
        request_state: Optional[str] = None,
        request_status: Optional[str] = None,
        request_type: Optional[str] = None,
        access_package_resource: Optional["models.MicrosoftGraphAccessPackageResource"] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        alt_sec_id: Optional[str] = None,
        connected_organization_id: Optional[str] = None,
        display_name: Optional[str] = None,
        email: Optional[str] = None,
        object_id: Optional[str] = None,
        on_premises_security_identifier: Optional[str] = None,
        principal_name: Optional[str] = None,
        type: Optional[str] = None,
        id1: Optional[str] = None,
        created_by: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        microsoft_graph_connected_organization_display_name: Optional[str] = None,
        identity_sources: Optional[List[Dict[str, object]]] = None,
        modified_by: Optional[str] = None,
        modified_date_time: Optional[datetime.datetime] = None,
        state: Optional[Union[str, "models.MicrosoftGraphConnectedOrganizationState"]] = None,
        external_sponsors: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        internal_sponsors: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphAccessPackageResourceRequest":
        """Create new navigation property to accessPackageResourceRequests for identityGovernance.

        Create new navigation property to accessPackageResourceRequests for identityGovernance.

        :param id: Read-only.
        :type id: str
        :param catalog_id:
        :type catalog_id: str
        :param execute_immediately:
        :type execute_immediately: bool
        :param expiration_date_time:
        :type expiration_date_time: ~datetime.datetime
        :param is_validation_only:
        :type is_validation_only: bool
        :param justification:
        :type justification: str
        :param request_state:
        :type request_state: str
        :param request_status:
        :type request_status: str
        :param request_type:
        :type request_type: str
        :param access_package_resource: accessPackageResource.
        :type access_package_resource: ~identity_governance.models.MicrosoftGraphAccessPackageResource
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param alt_sec_id:
        :type alt_sec_id: str
        :param connected_organization_id:
        :type connected_organization_id: str
        :param display_name:
        :type display_name: str
        :param email:
        :type email: str
        :param object_id:
        :type object_id: str
        :param on_premises_security_identifier:
        :type on_premises_security_identifier: str
        :param principal_name:
        :type principal_name: str
        :param type:
        :type type: str
        :param id1: Read-only.
        :type id1: str
        :param created_by:
        :type created_by: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param microsoft_graph_connected_organization_display_name:
        :type microsoft_graph_connected_organization_display_name: str
        :param identity_sources:
        :type identity_sources: list[dict[str, object]]
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param state:
        :type state: str or ~identity_governance.models.MicrosoftGraphConnectedOrganizationState
        :param external_sponsors:
        :type external_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :param internal_sponsors:
        :type internal_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageResourceRequest, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageResourceRequest
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageResourceRequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageResourceRequest(id=id, catalog_id=catalog_id, execute_immediately=execute_immediately, expiration_date_time=expiration_date_time, is_validation_only=is_validation_only, justification=justification, request_state=request_state, request_status=request_status, request_type=request_type, access_package_resource=access_package_resource, id_requestor_id=microsoft_graph_entity_id, alt_sec_id=alt_sec_id, connected_organization_id=connected_organization_id, display_name_requestor_display_name=display_name, email=email, object_id=object_id, on_premises_security_identifier=on_premises_security_identifier, principal_name=principal_name, type=type, id_requestor_connected_organization_id=id1, created_by=created_by, created_date_time=created_date_time, description=description, display_name_requestor_connected_organization_display_name=microsoft_graph_connected_organization_display_name, identity_sources=identity_sources, modified_by=modified_by, modified_date_time=modified_date_time, state=state, external_sponsors=external_sponsors, internal_sponsors=internal_sponsors)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_access_package_resource_request.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageResourceRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageResourceRequest', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_access_package_resource_request.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResourceRequests'}  # type: ignore

    async def get_access_package_resource_request(
        self,
        access_package_resource_request_id: str,
        select: Optional[List[Union[str, "models.Enum1156"]]] = None,
        expand: Optional[List[Union[str, "models.Enum1157"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphAccessPackageResourceRequest":
        """Get accessPackageResourceRequests from identityGovernance.

        Get accessPackageResourceRequests from identityGovernance.

        :param access_package_resource_request_id: key: id of accessPackageResourceRequest.
        :type access_package_resource_request_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1156]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1157]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageResourceRequest, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageResourceRequest
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageResourceRequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_access_package_resource_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageResourceRequest-id': self._serialize.url("access_package_resource_request_id", access_package_resource_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageResourceRequest', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_access_package_resource_request.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResourceRequests/{accessPackageResourceRequest-id}'}  # type: ignore

    async def update_access_package_resource_request(
        self,
        access_package_resource_request_id: str,
        id: Optional[str] = None,
        catalog_id: Optional[str] = None,
        execute_immediately: Optional[bool] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        is_validation_only: Optional[bool] = None,
        justification: Optional[str] = None,
        request_state: Optional[str] = None,
        request_status: Optional[str] = None,
        request_type: Optional[str] = None,
        access_package_resource: Optional["models.MicrosoftGraphAccessPackageResource"] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        alt_sec_id: Optional[str] = None,
        connected_organization_id: Optional[str] = None,
        display_name: Optional[str] = None,
        email: Optional[str] = None,
        object_id: Optional[str] = None,
        on_premises_security_identifier: Optional[str] = None,
        principal_name: Optional[str] = None,
        type: Optional[str] = None,
        id1: Optional[str] = None,
        created_by: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        microsoft_graph_connected_organization_display_name: Optional[str] = None,
        identity_sources: Optional[List[Dict[str, object]]] = None,
        modified_by: Optional[str] = None,
        modified_date_time: Optional[datetime.datetime] = None,
        state: Optional[Union[str, "models.MicrosoftGraphConnectedOrganizationState"]] = None,
        external_sponsors: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        internal_sponsors: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property accessPackageResourceRequests in identityGovernance.

        Update the navigation property accessPackageResourceRequests in identityGovernance.

        :param access_package_resource_request_id: key: id of accessPackageResourceRequest.
        :type access_package_resource_request_id: str
        :param id: Read-only.
        :type id: str
        :param catalog_id:
        :type catalog_id: str
        :param execute_immediately:
        :type execute_immediately: bool
        :param expiration_date_time:
        :type expiration_date_time: ~datetime.datetime
        :param is_validation_only:
        :type is_validation_only: bool
        :param justification:
        :type justification: str
        :param request_state:
        :type request_state: str
        :param request_status:
        :type request_status: str
        :param request_type:
        :type request_type: str
        :param access_package_resource: accessPackageResource.
        :type access_package_resource: ~identity_governance.models.MicrosoftGraphAccessPackageResource
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param alt_sec_id:
        :type alt_sec_id: str
        :param connected_organization_id:
        :type connected_organization_id: str
        :param display_name:
        :type display_name: str
        :param email:
        :type email: str
        :param object_id:
        :type object_id: str
        :param on_premises_security_identifier:
        :type on_premises_security_identifier: str
        :param principal_name:
        :type principal_name: str
        :param type:
        :type type: str
        :param id1: Read-only.
        :type id1: str
        :param created_by:
        :type created_by: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param microsoft_graph_connected_organization_display_name:
        :type microsoft_graph_connected_organization_display_name: str
        :param identity_sources:
        :type identity_sources: list[dict[str, object]]
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param state:
        :type state: str or ~identity_governance.models.MicrosoftGraphConnectedOrganizationState
        :param external_sponsors:
        :type external_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :param internal_sponsors:
        :type internal_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageResourceRequest(id=id, catalog_id=catalog_id, execute_immediately=execute_immediately, expiration_date_time=expiration_date_time, is_validation_only=is_validation_only, justification=justification, request_state=request_state, request_status=request_status, request_type=request_type, access_package_resource=access_package_resource, id_requestor_id=microsoft_graph_entity_id, alt_sec_id=alt_sec_id, connected_organization_id=connected_organization_id, display_name_requestor_display_name=display_name, email=email, object_id=object_id, on_premises_security_identifier=on_premises_security_identifier, principal_name=principal_name, type=type, id_requestor_connected_organization_id=id1, created_by=created_by, created_date_time=created_date_time, description=description, display_name_requestor_connected_organization_display_name=microsoft_graph_connected_organization_display_name, identity_sources=identity_sources, modified_by=modified_by, modified_date_time=modified_date_time, state=state, external_sponsors=external_sponsors, internal_sponsors=internal_sponsors)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_access_package_resource_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageResourceRequest-id': self._serialize.url("access_package_resource_request_id", access_package_resource_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageResourceRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_access_package_resource_request.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResourceRequests/{accessPackageResourceRequest-id}'}  # type: ignore

    async def delete_access_package_resource_request(
        self,
        access_package_resource_request_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property accessPackageResourceRequests for identityGovernance.

        Delete navigation property accessPackageResourceRequests for identityGovernance.

        :param access_package_resource_request_id: key: id of accessPackageResourceRequest.
        :type access_package_resource_request_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_access_package_resource_request.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageResourceRequest-id': self._serialize.url("access_package_resource_request_id", access_package_resource_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_access_package_resource_request.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResourceRequests/{accessPackageResourceRequest-id}'}  # type: ignore

    def list_access_package_resource_role_scope(
        self,
        orderby: Optional[List[Union[str, "models.Enum1164"]]] = None,
        select: Optional[List[Union[str, "models.Enum1165"]]] = None,
        expand: Optional[List[Union[str, "models.Enum1166"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfAccessPackageResourceRoleScope7"]:
        """Get accessPackageResourceRoleScopes from identityGovernance.

        Get accessPackageResourceRoleScopes from identityGovernance.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum1164]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1165]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1166]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfAccessPackageResourceRoleScope7 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~identity_governance.models.CollectionOfAccessPackageResourceRoleScope7]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfAccessPackageResourceRoleScope7"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_access_package_resource_role_scope.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfAccessPackageResourceRoleScope7', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_access_package_resource_role_scope.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResourceRoleScopes'}  # type: ignore

    async def create_access_package_resource_role_scope(
        self,
        id: Optional[str] = None,
        created_by: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        modified_by: Optional[str] = None,
        modified_date_time: Optional[datetime.datetime] = None,
        access_package_resource_role: Optional["models.MicrosoftGraphAccessPackageResourceRole"] = None,
        access_package_resource_scope: Optional["models.MicrosoftGraphAccessPackageResourceScope"] = None,
        **kwargs
    ) -> "models.MicrosoftGraphAccessPackageResourceRoleScope":
        """Create new navigation property to accessPackageResourceRoleScopes for identityGovernance.

        Create new navigation property to accessPackageResourceRoleScopes for identityGovernance.

        :param id: Read-only.
        :type id: str
        :param created_by:
        :type created_by: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param access_package_resource_role: accessPackageResourceRole.
        :type access_package_resource_role: ~identity_governance.models.MicrosoftGraphAccessPackageResourceRole
        :param access_package_resource_scope: accessPackageResourceScope.
        :type access_package_resource_scope: ~identity_governance.models.MicrosoftGraphAccessPackageResourceScope
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageResourceRoleScope, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageResourceRoleScope
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageResourceRoleScope"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageResourceRoleScope(id=id, created_by=created_by, created_date_time=created_date_time, modified_by=modified_by, modified_date_time=modified_date_time, access_package_resource_role=access_package_resource_role, access_package_resource_scope=access_package_resource_scope)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_access_package_resource_role_scope.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageResourceRoleScope')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageResourceRoleScope', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_access_package_resource_role_scope.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResourceRoleScopes'}  # type: ignore

    async def get_access_package_resource_role_scope(
        self,
        access_package_resource_role_scope_id: str,
        select: Optional[List[Union[str, "models.Enum1167"]]] = None,
        expand: Optional[List[Union[str, "models.Enum1168"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphAccessPackageResourceRoleScope":
        """Get accessPackageResourceRoleScopes from identityGovernance.

        Get accessPackageResourceRoleScopes from identityGovernance.

        :param access_package_resource_role_scope_id: key: id of accessPackageResourceRoleScope.
        :type access_package_resource_role_scope_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1167]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1168]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageResourceRoleScope, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageResourceRoleScope
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageResourceRoleScope"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_access_package_resource_role_scope.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageResourceRoleScope-id': self._serialize.url("access_package_resource_role_scope_id", access_package_resource_role_scope_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageResourceRoleScope', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_access_package_resource_role_scope.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResourceRoleScopes/{accessPackageResourceRoleScope-id}'}  # type: ignore

    async def update_access_package_resource_role_scope(
        self,
        access_package_resource_role_scope_id: str,
        id: Optional[str] = None,
        created_by: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        modified_by: Optional[str] = None,
        modified_date_time: Optional[datetime.datetime] = None,
        access_package_resource_role: Optional["models.MicrosoftGraphAccessPackageResourceRole"] = None,
        access_package_resource_scope: Optional["models.MicrosoftGraphAccessPackageResourceScope"] = None,
        **kwargs
    ) -> None:
        """Update the navigation property accessPackageResourceRoleScopes in identityGovernance.

        Update the navigation property accessPackageResourceRoleScopes in identityGovernance.

        :param access_package_resource_role_scope_id: key: id of accessPackageResourceRoleScope.
        :type access_package_resource_role_scope_id: str
        :param id: Read-only.
        :type id: str
        :param created_by:
        :type created_by: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param access_package_resource_role: accessPackageResourceRole.
        :type access_package_resource_role: ~identity_governance.models.MicrosoftGraphAccessPackageResourceRole
        :param access_package_resource_scope: accessPackageResourceScope.
        :type access_package_resource_scope: ~identity_governance.models.MicrosoftGraphAccessPackageResourceScope
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageResourceRoleScope(id=id, created_by=created_by, created_date_time=created_date_time, modified_by=modified_by, modified_date_time=modified_date_time, access_package_resource_role=access_package_resource_role, access_package_resource_scope=access_package_resource_scope)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_access_package_resource_role_scope.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageResourceRoleScope-id': self._serialize.url("access_package_resource_role_scope_id", access_package_resource_role_scope_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageResourceRoleScope')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_access_package_resource_role_scope.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResourceRoleScopes/{accessPackageResourceRoleScope-id}'}  # type: ignore

    async def delete_access_package_resource_role_scope(
        self,
        access_package_resource_role_scope_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property accessPackageResourceRoleScopes for identityGovernance.

        Delete navigation property accessPackageResourceRoleScopes for identityGovernance.

        :param access_package_resource_role_scope_id: key: id of accessPackageResourceRoleScope.
        :type access_package_resource_role_scope_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_access_package_resource_role_scope.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageResourceRoleScope-id': self._serialize.url("access_package_resource_role_scope_id", access_package_resource_role_scope_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_access_package_resource_role_scope.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResourceRoleScopes/{accessPackageResourceRoleScope-id}'}  # type: ignore

    def list_access_package_resource(
        self,
        orderby: Optional[List[Union[str, "models.Enum1201"]]] = None,
        select: Optional[List[Union[str, "models.Enum1202"]]] = None,
        expand: Optional[List[Union[str, "models.Enum1203"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfAccessPackageResource7"]:
        """Get accessPackageResources from identityGovernance.

        Get accessPackageResources from identityGovernance.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum1201]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1202]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1203]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfAccessPackageResource7 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~identity_governance.models.CollectionOfAccessPackageResource7]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfAccessPackageResource7"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_access_package_resource.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfAccessPackageResource7', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_access_package_resource.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResources'}  # type: ignore

    async def create_access_package_resource(
        self,
        id: Optional[str] = None,
        added_by: Optional[str] = None,
        added_on: Optional[datetime.datetime] = None,
        attributes: Optional[List["models.MicrosoftGraphAccessPackageResourceAttribute"]] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        is_pending_onboarding: Optional[bool] = None,
        origin_id: Optional[str] = None,
        origin_system: Optional[str] = None,
        resource_type: Optional[str] = None,
        url: Optional[str] = None,
        access_package_resource_roles: Optional[List["models.MicrosoftGraphAccessPackageResourceRole"]] = None,
        access_package_resource_scopes: Optional[List["models.MicrosoftGraphAccessPackageResourceScope"]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphAccessPackageResource":
        """Create new navigation property to accessPackageResources for identityGovernance.

        Create new navigation property to accessPackageResources for identityGovernance.

        :param id: Read-only.
        :type id: str
        :param added_by:
        :type added_by: str
        :param added_on:
        :type added_on: ~datetime.datetime
        :param attributes:
        :type attributes: list[~identity_governance.models.MicrosoftGraphAccessPackageResourceAttribute]
        :param description:
        :type description: str
        :param display_name:
        :type display_name: str
        :param is_pending_onboarding:
        :type is_pending_onboarding: bool
        :param origin_id:
        :type origin_id: str
        :param origin_system:
        :type origin_system: str
        :param resource_type:
        :type resource_type: str
        :param url:
        :type url: str
        :param access_package_resource_roles:
        :type access_package_resource_roles: list[~identity_governance.models.MicrosoftGraphAccessPackageResourceRole]
        :param access_package_resource_scopes:
        :type access_package_resource_scopes: list[~identity_governance.models.MicrosoftGraphAccessPackageResourceScope]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageResource, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageResource(id=id, added_by=added_by, added_on=added_on, attributes=attributes, description=description, display_name=display_name, is_pending_onboarding=is_pending_onboarding, origin_id=origin_id, origin_system=origin_system, resource_type=resource_type, url=url, access_package_resource_roles=access_package_resource_roles, access_package_resource_scopes=access_package_resource_scopes)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_access_package_resource.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageResource')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_access_package_resource.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResources'}  # type: ignore

    async def get_access_package_resource(
        self,
        access_package_resource_id: str,
        select: Optional[List[Union[str, "models.Enum1204"]]] = None,
        expand: Optional[List[Union[str, "models.Enum1205"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphAccessPackageResource":
        """Get accessPackageResources from identityGovernance.

        Get accessPackageResources from identityGovernance.

        :param access_package_resource_id: key: id of accessPackageResource.
        :type access_package_resource_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1204]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1205]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackageResource, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackageResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackageResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_access_package_resource.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageResource-id': self._serialize.url("access_package_resource_id", access_package_resource_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackageResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_access_package_resource.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResources/{accessPackageResource-id}'}  # type: ignore

    async def update_access_package_resource(
        self,
        access_package_resource_id: str,
        id: Optional[str] = None,
        added_by: Optional[str] = None,
        added_on: Optional[datetime.datetime] = None,
        attributes: Optional[List["models.MicrosoftGraphAccessPackageResourceAttribute"]] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        is_pending_onboarding: Optional[bool] = None,
        origin_id: Optional[str] = None,
        origin_system: Optional[str] = None,
        resource_type: Optional[str] = None,
        url: Optional[str] = None,
        access_package_resource_roles: Optional[List["models.MicrosoftGraphAccessPackageResourceRole"]] = None,
        access_package_resource_scopes: Optional[List["models.MicrosoftGraphAccessPackageResourceScope"]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property accessPackageResources in identityGovernance.

        Update the navigation property accessPackageResources in identityGovernance.

        :param access_package_resource_id: key: id of accessPackageResource.
        :type access_package_resource_id: str
        :param id: Read-only.
        :type id: str
        :param added_by:
        :type added_by: str
        :param added_on:
        :type added_on: ~datetime.datetime
        :param attributes:
        :type attributes: list[~identity_governance.models.MicrosoftGraphAccessPackageResourceAttribute]
        :param description:
        :type description: str
        :param display_name:
        :type display_name: str
        :param is_pending_onboarding:
        :type is_pending_onboarding: bool
        :param origin_id:
        :type origin_id: str
        :param origin_system:
        :type origin_system: str
        :param resource_type:
        :type resource_type: str
        :param url:
        :type url: str
        :param access_package_resource_roles:
        :type access_package_resource_roles: list[~identity_governance.models.MicrosoftGraphAccessPackageResourceRole]
        :param access_package_resource_scopes:
        :type access_package_resource_scopes: list[~identity_governance.models.MicrosoftGraphAccessPackageResourceScope]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackageResource(id=id, added_by=added_by, added_on=added_on, attributes=attributes, description=description, display_name=display_name, is_pending_onboarding=is_pending_onboarding, origin_id=origin_id, origin_system=origin_system, resource_type=resource_type, url=url, access_package_resource_roles=access_package_resource_roles, access_package_resource_scopes=access_package_resource_scopes)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_access_package_resource.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageResource-id': self._serialize.url("access_package_resource_id", access_package_resource_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackageResource')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_access_package_resource.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResources/{accessPackageResource-id}'}  # type: ignore

    async def delete_access_package_resource(
        self,
        access_package_resource_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property accessPackageResources for identityGovernance.

        Delete navigation property accessPackageResources for identityGovernance.

        :param access_package_resource_id: key: id of accessPackageResource.
        :type access_package_resource_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_access_package_resource.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageResource-id': self._serialize.url("access_package_resource_id", access_package_resource_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_access_package_resource.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageResources/{accessPackageResource-id}'}  # type: ignore

    def list_access_package(
        self,
        orderby: Optional[List[Union[str, "models.Enum1220"]]] = None,
        select: Optional[List[Union[str, "models.Enum1221"]]] = None,
        expand: Optional[List[Union[str, "models.Enum1222"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfAccessPackage7"]:
        """Get accessPackages from identityGovernance.

        Get accessPackages from identityGovernance.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum1220]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1221]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1222]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfAccessPackage7 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~identity_governance.models.CollectionOfAccessPackage7]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfAccessPackage7"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_access_package.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfAccessPackage7', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_access_package.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackages'}  # type: ignore

    async def create_access_package(
        self,
        id: Optional[str] = None,
        catalog_id: Optional[str] = None,
        created_by: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        is_hidden: Optional[bool] = None,
        is_role_scopes_visible: Optional[bool] = None,
        modified_by: Optional[str] = None,
        modified_date_time: Optional[datetime.datetime] = None,
        access_package_assignment_policies: Optional[List["models.MicrosoftGraphAccessPackageAssignmentPolicy"]] = None,
        access_package_catalog: Optional["models.MicrosoftGraphAccessPackageCatalog"] = None,
        access_package_resource_role_scopes: Optional[List["models.MicrosoftGraphAccessPackageResourceRoleScope"]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphAccessPackage":
        """Create new navigation property to accessPackages for identityGovernance.

        Create new navigation property to accessPackages for identityGovernance.

        :param id: Read-only.
        :type id: str
        :param catalog_id:
        :type catalog_id: str
        :param created_by:
        :type created_by: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param display_name:
        :type display_name: str
        :param is_hidden:
        :type is_hidden: bool
        :param is_role_scopes_visible:
        :type is_role_scopes_visible: bool
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param access_package_assignment_policies:
        :type access_package_assignment_policies: list[~identity_governance.models.MicrosoftGraphAccessPackageAssignmentPolicy]
        :param access_package_catalog: accessPackageCatalog.
        :type access_package_catalog: ~identity_governance.models.MicrosoftGraphAccessPackageCatalog
        :param access_package_resource_role_scopes:
        :type access_package_resource_role_scopes: list[~identity_governance.models.MicrosoftGraphAccessPackageResourceRoleScope]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackage, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackage"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackage(id=id, catalog_id=catalog_id, created_by=created_by, created_date_time=created_date_time, description=description, display_name=display_name, is_hidden=is_hidden, is_role_scopes_visible=is_role_scopes_visible, modified_by=modified_by, modified_date_time=modified_date_time, access_package_assignment_policies=access_package_assignment_policies, access_package_catalog=access_package_catalog, access_package_resource_role_scopes=access_package_resource_role_scopes)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_access_package.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackage')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_access_package.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackages'}  # type: ignore

    async def get_access_package(
        self,
        access_package_id: str,
        select: Optional[List[Union[str, "models.Enum1223"]]] = None,
        expand: Optional[List[Union[str, "models.Enum1224"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphAccessPackage":
        """Get accessPackages from identityGovernance.

        Get accessPackages from identityGovernance.

        :param access_package_id: key: id of accessPackage.
        :type access_package_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1223]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1224]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAccessPackage, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphAccessPackage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAccessPackage"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_access_package.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackage-id': self._serialize.url("access_package_id", access_package_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAccessPackage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_access_package.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackages/{accessPackage-id}'}  # type: ignore

    async def update_access_package(
        self,
        access_package_id: str,
        id: Optional[str] = None,
        catalog_id: Optional[str] = None,
        created_by: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        is_hidden: Optional[bool] = None,
        is_role_scopes_visible: Optional[bool] = None,
        modified_by: Optional[str] = None,
        modified_date_time: Optional[datetime.datetime] = None,
        access_package_assignment_policies: Optional[List["models.MicrosoftGraphAccessPackageAssignmentPolicy"]] = None,
        access_package_catalog: Optional["models.MicrosoftGraphAccessPackageCatalog"] = None,
        access_package_resource_role_scopes: Optional[List["models.MicrosoftGraphAccessPackageResourceRoleScope"]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property accessPackages in identityGovernance.

        Update the navigation property accessPackages in identityGovernance.

        :param access_package_id: key: id of accessPackage.
        :type access_package_id: str
        :param id: Read-only.
        :type id: str
        :param catalog_id:
        :type catalog_id: str
        :param created_by:
        :type created_by: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param display_name:
        :type display_name: str
        :param is_hidden:
        :type is_hidden: bool
        :param is_role_scopes_visible:
        :type is_role_scopes_visible: bool
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param access_package_assignment_policies:
        :type access_package_assignment_policies: list[~identity_governance.models.MicrosoftGraphAccessPackageAssignmentPolicy]
        :param access_package_catalog: accessPackageCatalog.
        :type access_package_catalog: ~identity_governance.models.MicrosoftGraphAccessPackageCatalog
        :param access_package_resource_role_scopes:
        :type access_package_resource_role_scopes: list[~identity_governance.models.MicrosoftGraphAccessPackageResourceRoleScope]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphAccessPackage(id=id, catalog_id=catalog_id, created_by=created_by, created_date_time=created_date_time, description=description, display_name=display_name, is_hidden=is_hidden, is_role_scopes_visible=is_role_scopes_visible, modified_by=modified_by, modified_date_time=modified_date_time, access_package_assignment_policies=access_package_assignment_policies, access_package_catalog=access_package_catalog, access_package_resource_role_scopes=access_package_resource_role_scopes)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_access_package.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackage-id': self._serialize.url("access_package_id", access_package_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAccessPackage')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_access_package.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackages/{accessPackage-id}'}  # type: ignore

    async def delete_access_package(
        self,
        access_package_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property accessPackages for identityGovernance.

        Delete navigation property accessPackages for identityGovernance.

        :param access_package_id: key: id of accessPackage.
        :type access_package_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_access_package.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackage-id': self._serialize.url("access_package_id", access_package_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_access_package.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackages/{accessPackage-id}'}  # type: ignore

    def list_connected_organization(
        self,
        orderby: Optional[List[Union[str, "models.Enum1335"]]] = None,
        select: Optional[List[Union[str, "models.Enum1336"]]] = None,
        expand: Optional[List[Union[str, "models.Enum1337"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfConnectedOrganization"]:
        """Get connectedOrganizations from identityGovernance.

        Get connectedOrganizations from identityGovernance.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum1335]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1336]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1337]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfConnectedOrganization or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~identity_governance.models.CollectionOfConnectedOrganization]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfConnectedOrganization"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_connected_organization.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfConnectedOrganization', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_connected_organization.metadata = {'url': '/identityGovernance/entitlementManagement/connectedOrganizations'}  # type: ignore

    async def create_connected_organization(
        self,
        id: Optional[str] = None,
        created_by: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        identity_sources: Optional[List[Dict[str, object]]] = None,
        modified_by: Optional[str] = None,
        modified_date_time: Optional[datetime.datetime] = None,
        state: Optional[Union[str, "models.MicrosoftGraphConnectedOrganizationState"]] = None,
        external_sponsors: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        internal_sponsors: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphConnectedOrganization":
        """Create new navigation property to connectedOrganizations for identityGovernance.

        Create new navigation property to connectedOrganizations for identityGovernance.

        :param id: Read-only.
        :type id: str
        :param created_by:
        :type created_by: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param display_name:
        :type display_name: str
        :param identity_sources:
        :type identity_sources: list[dict[str, object]]
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param state:
        :type state: str or ~identity_governance.models.MicrosoftGraphConnectedOrganizationState
        :param external_sponsors:
        :type external_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :param internal_sponsors:
        :type internal_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphConnectedOrganization, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphConnectedOrganization
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphConnectedOrganization"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphConnectedOrganization(id=id, created_by=created_by, created_date_time=created_date_time, description=description, display_name=display_name, identity_sources=identity_sources, modified_by=modified_by, modified_date_time=modified_date_time, state=state, external_sponsors=external_sponsors, internal_sponsors=internal_sponsors)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_connected_organization.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphConnectedOrganization')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphConnectedOrganization', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_connected_organization.metadata = {'url': '/identityGovernance/entitlementManagement/connectedOrganizations'}  # type: ignore

    async def get_connected_organization(
        self,
        connected_organization_id: str,
        select: Optional[List[Union[str, "models.Enum1338"]]] = None,
        expand: Optional[List[Union[str, "models.Enum1339"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphConnectedOrganization":
        """Get connectedOrganizations from identityGovernance.

        Get connectedOrganizations from identityGovernance.

        :param connected_organization_id: key: id of connectedOrganization.
        :type connected_organization_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1338]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1339]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphConnectedOrganization, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphConnectedOrganization
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphConnectedOrganization"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_connected_organization.metadata['url']  # type: ignore
        path_format_arguments = {
            'connectedOrganization-id': self._serialize.url("connected_organization_id", connected_organization_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphConnectedOrganization', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_connected_organization.metadata = {'url': '/identityGovernance/entitlementManagement/connectedOrganizations/{connectedOrganization-id}'}  # type: ignore

    async def update_connected_organization(
        self,
        connected_organization_id: str,
        id: Optional[str] = None,
        created_by: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        identity_sources: Optional[List[Dict[str, object]]] = None,
        modified_by: Optional[str] = None,
        modified_date_time: Optional[datetime.datetime] = None,
        state: Optional[Union[str, "models.MicrosoftGraphConnectedOrganizationState"]] = None,
        external_sponsors: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        internal_sponsors: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property connectedOrganizations in identityGovernance.

        Update the navigation property connectedOrganizations in identityGovernance.

        :param connected_organization_id: key: id of connectedOrganization.
        :type connected_organization_id: str
        :param id: Read-only.
        :type id: str
        :param created_by:
        :type created_by: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param display_name:
        :type display_name: str
        :param identity_sources:
        :type identity_sources: list[dict[str, object]]
        :param modified_by:
        :type modified_by: str
        :param modified_date_time:
        :type modified_date_time: ~datetime.datetime
        :param state:
        :type state: str or ~identity_governance.models.MicrosoftGraphConnectedOrganizationState
        :param external_sponsors:
        :type external_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :param internal_sponsors:
        :type internal_sponsors: list[~identity_governance.models.MicrosoftGraphDirectoryObject]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphConnectedOrganization(id=id, created_by=created_by, created_date_time=created_date_time, description=description, display_name=display_name, identity_sources=identity_sources, modified_by=modified_by, modified_date_time=modified_date_time, state=state, external_sponsors=external_sponsors, internal_sponsors=internal_sponsors)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_connected_organization.metadata['url']  # type: ignore
        path_format_arguments = {
            'connectedOrganization-id': self._serialize.url("connected_organization_id", connected_organization_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphConnectedOrganization')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_connected_organization.metadata = {'url': '/identityGovernance/entitlementManagement/connectedOrganizations/{connectedOrganization-id}'}  # type: ignore

    async def delete_connected_organization(
        self,
        connected_organization_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property connectedOrganizations for identityGovernance.

        Delete navigation property connectedOrganizations for identityGovernance.

        :param connected_organization_id: key: id of connectedOrganization.
        :type connected_organization_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_connected_organization.metadata['url']  # type: ignore
        path_format_arguments = {
            'connectedOrganization-id': self._serialize.url("connected_organization_id", connected_organization_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_connected_organization.metadata = {'url': '/identityGovernance/entitlementManagement/connectedOrganizations/{connectedOrganization-id}'}  # type: ignore

    async def get_setting(
        self,
        select: Optional[List[Union[str, "models.Enum1346"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEntitlementManagementSettings":
        """Get settings from identityGovernance.

        Get settings from identityGovernance.

        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1346]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEntitlementManagementSettings, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphEntitlementManagementSettings
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEntitlementManagementSettings"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_setting.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEntitlementManagementSettings', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_setting.metadata = {'url': '/identityGovernance/entitlementManagement/settings'}  # type: ignore

    async def update_setting(
        self,
        id: Optional[str] = None,
        days_until_external_user_deleted_after_blocked: Optional[int] = None,
        external_user_lifecycle_action: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property settings in identityGovernance.

        Update the navigation property settings in identityGovernance.

        :param id: Read-only.
        :type id: str
        :param days_until_external_user_deleted_after_blocked:
        :type days_until_external_user_deleted_after_blocked: int
        :param external_user_lifecycle_action:
        :type external_user_lifecycle_action: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphEntitlementManagementSettings(id=id, days_until_external_user_deleted_after_blocked=days_until_external_user_deleted_after_blocked, external_user_lifecycle_action=external_user_lifecycle_action)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_setting.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphEntitlementManagementSettings')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_setting.metadata = {'url': '/identityGovernance/entitlementManagement/settings'}  # type: ignore

    async def delete_setting(
        self,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property settings for identityGovernance.

        Delete navigation property settings for identityGovernance.

        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_setting.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_setting.metadata = {'url': '/identityGovernance/entitlementManagement/settings'}  # type: ignore
