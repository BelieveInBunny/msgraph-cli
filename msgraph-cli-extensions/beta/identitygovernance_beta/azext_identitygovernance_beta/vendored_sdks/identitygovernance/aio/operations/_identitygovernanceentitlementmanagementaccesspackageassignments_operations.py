# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class identitygovernanceentitlementmanagementaccesspackageassignmentsOperations:
    """identitygovernanceentitlementmanagementaccesspackageassignmentsOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~identity_governance.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def get_access_package(
        self,
        access_package_assignment_id: str,
        select: Optional[List[Union[str, "models.Enum751"]]] = None,
        expand: Optional[List[Union[str, "models.Enum752"]]] = None,
        **kwargs
    ) -> "models.microsoftgraphaccesspackage":
        """Get accessPackage from identityGovernance.

        Get accessPackage from identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum751]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum752]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphaccesspackage, or the result of cls(response)
        :rtype: ~identity_governance.models.microsoftgraphaccesspackage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphaccesspackage"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_access_package.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphaccesspackage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_access_package.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}/accessPackage'}  # type: ignore

    async def update_access_package(
        self,
        access_package_assignment_id: str,
        body: "models.microsoftgraphaccesspackage",
        **kwargs
    ) -> None:
        """Update the navigation property accessPackage in identityGovernance.

        Update the navigation property accessPackage in identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param body: New navigation property values.
        :type body: ~identity_governance.models.microsoftgraphaccesspackage
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_access_package.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphaccesspackage')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_access_package.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}/accessPackage'}  # type: ignore

    async def delete_access_package(
        self,
        access_package_assignment_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property accessPackage for identityGovernance.

        Delete navigation property accessPackage for identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_access_package.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_access_package.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}/accessPackage'}  # type: ignore

    async def get_access_package_assignment_policy(
        self,
        access_package_assignment_id: str,
        select: Optional[List[Union[str, "models.Enum863"]]] = None,
        expand: Optional[List[Union[str, "models.Enum864"]]] = None,
        **kwargs
    ) -> "models.microsoftgraphaccesspackageassignmentpolicy":
        """Get accessPackageAssignmentPolicy from identityGovernance.

        Get accessPackageAssignmentPolicy from identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum863]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum864]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphaccesspackageassignmentpolicy, or the result of cls(response)
        :rtype: ~identity_governance.models.microsoftgraphaccesspackageassignmentpolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphaccesspackageassignmentpolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_access_package_assignment_policy.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphaccesspackageassignmentpolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_access_package_assignment_policy.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}/accessPackageAssignmentPolicy'}  # type: ignore

    async def update_access_package_assignment_policy(
        self,
        access_package_assignment_id: str,
        body: "models.microsoftgraphaccesspackageassignmentpolicy",
        **kwargs
    ) -> None:
        """Update the navigation property accessPackageAssignmentPolicy in identityGovernance.

        Update the navigation property accessPackageAssignmentPolicy in identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param body: New navigation property values.
        :type body: ~identity_governance.models.microsoftgraphaccesspackageassignmentpolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_access_package_assignment_policy.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphaccesspackageassignmentpolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_access_package_assignment_policy.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}/accessPackageAssignmentPolicy'}  # type: ignore

    async def delete_access_package_assignment_policy(
        self,
        access_package_assignment_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property accessPackageAssignmentPolicy for identityGovernance.

        Delete navigation property accessPackageAssignmentPolicy for identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_access_package_assignment_policy.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_access_package_assignment_policy.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}/accessPackageAssignmentPolicy'}  # type: ignore

    def list_access_package_assignment_requests(
        self,
        access_package_assignment_id: str,
        orderby: Optional[List[Union[str, "models.Enum975"]]] = None,
        select: Optional[List[Union[str, "models.Enum976"]]] = None,
        expand: Optional[List[Union[str, "models.Enum977"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.collectionofaccesspackageassignmentrequest2"]:
        """Get accessPackageAssignmentRequests from identityGovernance.

        Get accessPackageAssignmentRequests from identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum975]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum976]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum977]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofaccesspackageassignmentrequest2 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~identity_governance.models.collectionofaccesspackageassignmentrequest2]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofaccesspackageassignmentrequest2"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_access_package_assignment_requests.metadata['url']  # type: ignore
                path_format_arguments = {
                    'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofaccesspackageassignmentrequest2', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_access_package_assignment_requests.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}/accessPackageAssignmentRequests'}  # type: ignore

    async def create_access_package_assignment_requests(
        self,
        access_package_assignment_id: str,
        body: "models.microsoftgraphaccesspackageassignmentrequest",
        **kwargs
    ) -> "models.microsoftgraphaccesspackageassignmentrequest":
        """Create new navigation property to accessPackageAssignmentRequests for identityGovernance.

        Create new navigation property to accessPackageAssignmentRequests for identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param body: New navigation property.
        :type body: ~identity_governance.models.microsoftgraphaccesspackageassignmentrequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphaccesspackageassignmentrequest, or the result of cls(response)
        :rtype: ~identity_governance.models.microsoftgraphaccesspackageassignmentrequest
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphaccesspackageassignmentrequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_access_package_assignment_requests.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphaccesspackageassignmentrequest')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphaccesspackageassignmentrequest', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_access_package_assignment_requests.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}/accessPackageAssignmentRequests'}  # type: ignore

    async def get_access_package_assignment_requests(
        self,
        access_package_assignment_id: str,
        access_package_assignment_request_id: str,
        select: Optional[List[Union[str, "models.Enum978"]]] = None,
        expand: Optional[List[Union[str, "models.Enum979"]]] = None,
        **kwargs
    ) -> "models.microsoftgraphaccesspackageassignmentrequest":
        """Get accessPackageAssignmentRequests from identityGovernance.

        Get accessPackageAssignmentRequests from identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param access_package_assignment_request_id: key: id of accessPackageAssignmentRequest.
        :type access_package_assignment_request_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum978]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum979]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphaccesspackageassignmentrequest, or the result of cls(response)
        :rtype: ~identity_governance.models.microsoftgraphaccesspackageassignmentrequest
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphaccesspackageassignmentrequest"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_access_package_assignment_requests.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
            'accessPackageAssignmentRequest-id': self._serialize.url("access_package_assignment_request_id", access_package_assignment_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphaccesspackageassignmentrequest', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_access_package_assignment_requests.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}/accessPackageAssignmentRequests/{accessPackageAssignmentRequest-id}'}  # type: ignore

    async def update_access_package_assignment_requests(
        self,
        access_package_assignment_id: str,
        access_package_assignment_request_id: str,
        body: "models.microsoftgraphaccesspackageassignmentrequest",
        **kwargs
    ) -> None:
        """Update the navigation property accessPackageAssignmentRequests in identityGovernance.

        Update the navigation property accessPackageAssignmentRequests in identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param access_package_assignment_request_id: key: id of accessPackageAssignmentRequest.
        :type access_package_assignment_request_id: str
        :param body: New navigation property values.
        :type body: ~identity_governance.models.microsoftgraphaccesspackageassignmentrequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_access_package_assignment_requests.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
            'accessPackageAssignmentRequest-id': self._serialize.url("access_package_assignment_request_id", access_package_assignment_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphaccesspackageassignmentrequest')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_access_package_assignment_requests.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}/accessPackageAssignmentRequests/{accessPackageAssignmentRequest-id}'}  # type: ignore

    async def delete_access_package_assignment_requests(
        self,
        access_package_assignment_id: str,
        access_package_assignment_request_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property accessPackageAssignmentRequests for identityGovernance.

        Delete navigation property accessPackageAssignmentRequests for identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param access_package_assignment_request_id: key: id of accessPackageAssignmentRequest.
        :type access_package_assignment_request_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_access_package_assignment_requests.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
            'accessPackageAssignmentRequest-id': self._serialize.url("access_package_assignment_request_id", access_package_assignment_request_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_access_package_assignment_requests.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}/accessPackageAssignmentRequests/{accessPackageAssignmentRequest-id}'}  # type: ignore

    def list_access_package_assignment_resource_roles(
        self,
        access_package_assignment_id: str,
        orderby: Optional[List[Union[str, "models.Enum988"]]] = None,
        select: Optional[List[Union[str, "models.Enum989"]]] = None,
        expand: Optional[List[Union[str, "models.Enum990"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.collectionofaccesspackageassignmentresourcerole2"]:
        """Get accessPackageAssignmentResourceRoles from identityGovernance.

        Get accessPackageAssignmentResourceRoles from identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum988]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum989]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum990]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofaccesspackageassignmentresourcerole2 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~identity_governance.models.collectionofaccesspackageassignmentresourcerole2]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofaccesspackageassignmentresourcerole2"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_access_package_assignment_resource_roles.metadata['url']  # type: ignore
                path_format_arguments = {
                    'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofaccesspackageassignmentresourcerole2', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_access_package_assignment_resource_roles.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}/accessPackageAssignmentResourceRoles'}  # type: ignore

    async def create_access_package_assignment_resource_roles(
        self,
        access_package_assignment_id: str,
        body: "models.microsoftgraphaccesspackageassignmentresourcerole",
        **kwargs
    ) -> "models.microsoftgraphaccesspackageassignmentresourcerole":
        """Create new navigation property to accessPackageAssignmentResourceRoles for identityGovernance.

        Create new navigation property to accessPackageAssignmentResourceRoles for identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param body: New navigation property.
        :type body: ~identity_governance.models.microsoftgraphaccesspackageassignmentresourcerole
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphaccesspackageassignmentresourcerole, or the result of cls(response)
        :rtype: ~identity_governance.models.microsoftgraphaccesspackageassignmentresourcerole
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphaccesspackageassignmentresourcerole"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_access_package_assignment_resource_roles.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphaccesspackageassignmentresourcerole')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphaccesspackageassignmentresourcerole', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_access_package_assignment_resource_roles.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}/accessPackageAssignmentResourceRoles'}  # type: ignore

    async def get_access_package_assignment_resource_roles(
        self,
        access_package_assignment_id: str,
        access_package_assignment_resource_role_id: str,
        select: Optional[List[Union[str, "models.Enum991"]]] = None,
        expand: Optional[List[Union[str, "models.Enum992"]]] = None,
        **kwargs
    ) -> "models.microsoftgraphaccesspackageassignmentresourcerole":
        """Get accessPackageAssignmentResourceRoles from identityGovernance.

        Get accessPackageAssignmentResourceRoles from identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param access_package_assignment_resource_role_id: key: id of
         accessPackageAssignmentResourceRole.
        :type access_package_assignment_resource_role_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum991]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum992]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphaccesspackageassignmentresourcerole, or the result of cls(response)
        :rtype: ~identity_governance.models.microsoftgraphaccesspackageassignmentresourcerole
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphaccesspackageassignmentresourcerole"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_access_package_assignment_resource_roles.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
            'accessPackageAssignmentResourceRole-id': self._serialize.url("access_package_assignment_resource_role_id", access_package_assignment_resource_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphaccesspackageassignmentresourcerole', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_access_package_assignment_resource_roles.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}/accessPackageAssignmentResourceRoles/{accessPackageAssignmentResourceRole-id}'}  # type: ignore

    async def update_access_package_assignment_resource_roles(
        self,
        access_package_assignment_id: str,
        access_package_assignment_resource_role_id: str,
        body: "models.microsoftgraphaccesspackageassignmentresourcerole",
        **kwargs
    ) -> None:
        """Update the navigation property accessPackageAssignmentResourceRoles in identityGovernance.

        Update the navigation property accessPackageAssignmentResourceRoles in identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param access_package_assignment_resource_role_id: key: id of
         accessPackageAssignmentResourceRole.
        :type access_package_assignment_resource_role_id: str
        :param body: New navigation property values.
        :type body: ~identity_governance.models.microsoftgraphaccesspackageassignmentresourcerole
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_access_package_assignment_resource_roles.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
            'accessPackageAssignmentResourceRole-id': self._serialize.url("access_package_assignment_resource_role_id", access_package_assignment_resource_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphaccesspackageassignmentresourcerole')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_access_package_assignment_resource_roles.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}/accessPackageAssignmentResourceRoles/{accessPackageAssignmentResourceRole-id}'}  # type: ignore

    async def delete_access_package_assignment_resource_roles(
        self,
        access_package_assignment_id: str,
        access_package_assignment_resource_role_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property accessPackageAssignmentResourceRoles for identityGovernance.

        Delete navigation property accessPackageAssignmentResourceRoles for identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param access_package_assignment_resource_role_id: key: id of
         accessPackageAssignmentResourceRole.
        :type access_package_assignment_resource_role_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_access_package_assignment_resource_roles.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
            'accessPackageAssignmentResourceRole-id': self._serialize.url("access_package_assignment_resource_role_id", access_package_assignment_resource_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_access_package_assignment_resource_roles.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}/accessPackageAssignmentResourceRoles/{accessPackageAssignmentResourceRole-id}'}  # type: ignore

    async def get_target(
        self,
        access_package_assignment_id: str,
        select: Optional[List[Union[str, "models.Enum1034"]]] = None,
        expand: Optional[List[Union[str, "models.Enum1035"]]] = None,
        **kwargs
    ) -> "models.microsoftgraphaccesspackagesubject":
        """Get target from identityGovernance.

        Get target from identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1034]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1035]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphaccesspackagesubject, or the result of cls(response)
        :rtype: ~identity_governance.models.microsoftgraphaccesspackagesubject
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphaccesspackagesubject"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_target.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphaccesspackagesubject', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_target.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}/target'}  # type: ignore

    async def update_target(
        self,
        access_package_assignment_id: str,
        body: "models.microsoftgraphaccesspackagesubject",
        **kwargs
    ) -> None:
        """Update the navigation property target in identityGovernance.

        Update the navigation property target in identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param body: New navigation property values.
        :type body: ~identity_governance.models.microsoftgraphaccesspackagesubject
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_target.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphaccesspackagesubject')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_target.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}/target'}  # type: ignore

    async def delete_target(
        self,
        access_package_assignment_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property target for identityGovernance.

        Delete navigation property target for identityGovernance.

        :param access_package_assignment_id: key: id of accessPackageAssignment.
        :type access_package_assignment_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_target.metadata['url']  # type: ignore
        path_format_arguments = {
            'accessPackageAssignment-id': self._serialize.url("access_package_assignment_id", access_package_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_target.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment-id}/target'}  # type: ignore

    async def my(
        self,
        **kwargs
    ) -> List["models.microsoftgraphaccesspackageassignment"]:
        """Invoke function My.

        Invoke function My.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of microsoftgraphaccesspackageassignment, or the result of cls(response)
        :rtype: list[~identity_governance.models.microsoftgraphaccesspackageassignment]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.microsoftgraphaccesspackageassignment"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.my.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('[microsoftgraphaccesspackageassignment]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    my.metadata = {'url': '/identityGovernance/entitlementManagement/accessPackageAssignments/microsoft.graph.My()'}  # type: ignore
