# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class PrivilegedRoleOperations:
    """PrivilegedRoleOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~identity_governance.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_assignment(
        self,
        privileged_role_id: str,
        orderby: Optional[List[Union[str, "models.Enum1410"]]] = None,
        select: Optional[List[Union[str, "models.Enum1411"]]] = None,
        expand: Optional[List[Union[str, "models.Enum1412"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfPrivilegedRoleAssignment0"]:
        """Get assignments from privilegedRoles.

        Get assignments from privilegedRoles.

        :param privileged_role_id: key: id of privilegedRole.
        :type privileged_role_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum1410]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1411]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_governance.models.Enum1412]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfPrivilegedRoleAssignment0 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~identity_governance.models.CollectionOfPrivilegedRoleAssignment0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfPrivilegedRoleAssignment0"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_assignment.metadata['url']  # type: ignore
                path_format_arguments = {
                    'privilegedRole-id': self._serialize.url("privileged_role_id", privileged_role_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfPrivilegedRoleAssignment0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_assignment.metadata = {'url': '/privilegedRoles/{privilegedRole-id}/assignments'}  # type: ignore

    def list_ref_assignment(
        self,
        privileged_role_id: str,
        orderby: Optional[List[Union[str, "models.Enum1413"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfLinksOfPrivilegedRoleAssignment"]:
        """Get ref of assignments from privilegedRoles.

        Get ref of assignments from privilegedRoles.

        :param privileged_role_id: key: id of privilegedRole.
        :type privileged_role_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_governance.models.Enum1413]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfLinksOfPrivilegedRoleAssignment or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~identity_governance.models.CollectionOfLinksOfPrivilegedRoleAssignment]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfLinksOfPrivilegedRoleAssignment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_ref_assignment.metadata['url']  # type: ignore
                path_format_arguments = {
                    'privilegedRole-id': self._serialize.url("privileged_role_id", privileged_role_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfLinksOfPrivilegedRoleAssignment', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_ref_assignment.metadata = {'url': '/privilegedRoles/{privilegedRole-id}/assignments/$ref'}  # type: ignore

    async def create_ref_assignment(
        self,
        privileged_role_id: str,
        body: Dict[str, object],
        **kwargs
    ) -> Dict[str, object]:
        """Create new navigation property ref to assignments for privilegedRoles.

        Create new navigation property ref to assignments for privilegedRoles.

        :param privileged_role_id: key: id of privilegedRole.
        :type privileged_role_id: str
        :param body: New navigation property ref value.
        :type body: dict[str, object]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to object, or the result of cls(response)
        :rtype: dict[str, object]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Dict[str, object]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_ref_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedRole-id': self._serialize.url("privileged_role_id", privileged_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, '{object}')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('{object}', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_ref_assignment.metadata = {'url': '/privilegedRoles/{privilegedRole-id}/assignments/$ref'}  # type: ignore

    async def self_activate(
        self,
        privileged_role_id: str,
        reason: Optional[str] = None,
        duration: Optional[str] = None,
        ticket_number: Optional[str] = None,
        ticket_system: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphPrivilegedRoleAssignment":
        """Invoke action selfActivate.

        Invoke action selfActivate.

        :param privileged_role_id: key: id of privilegedRole.
        :type privileged_role_id: str
        :param reason:
        :type reason: str
        :param duration:
        :type duration: str
        :param ticket_number:
        :type ticket_number: str
        :param ticket_system:
        :type ticket_system: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPrivilegedRoleAssignment, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphPrivilegedRoleAssignment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPrivilegedRoleAssignment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.PathsFneytmPrivilegedrolesPrivilegedroleIdMicrosoftGraphSelfactivatePostRequestbodyContentApplicationJsonSchema(reason=reason, duration=duration, ticket_number=ticket_number, ticket_system=ticket_system)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.self_activate.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedRole-id': self._serialize.url("privileged_role_id", privileged_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'PathsFneytmPrivilegedrolesPrivilegedroleIdMicrosoftGraphSelfactivatePostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPrivilegedRoleAssignment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    self_activate.metadata = {'url': '/privilegedRoles/{privilegedRole-id}/microsoft.graph.selfActivate'}  # type: ignore

    async def self_deactivate(
        self,
        privileged_role_id: str,
        **kwargs
    ) -> "models.MicrosoftGraphPrivilegedRoleAssignment":
        """Invoke action selfDeactivate.

        Invoke action selfDeactivate.

        :param privileged_role_id: key: id of privilegedRole.
        :type privileged_role_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPrivilegedRoleAssignment, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphPrivilegedRoleAssignment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPrivilegedRoleAssignment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.self_deactivate.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedRole-id': self._serialize.url("privileged_role_id", privileged_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPrivilegedRoleAssignment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    self_deactivate.metadata = {'url': '/privilegedRoles/{privilegedRole-id}/microsoft.graph.selfDeactivate'}  # type: ignore

    async def get_setting(
        self,
        privileged_role_id: str,
        select: Optional[List[Union[str, "models.Enum1414"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphPrivilegedRoleSettings":
        """Get settings from privilegedRoles.

        Get settings from privilegedRoles.

        :param privileged_role_id: key: id of privilegedRole.
        :type privileged_role_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1414]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPrivilegedRoleSettings, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphPrivilegedRoleSettings
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPrivilegedRoleSettings"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_setting.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedRole-id': self._serialize.url("privileged_role_id", privileged_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPrivilegedRoleSettings', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_setting.metadata = {'url': '/privilegedRoles/{privilegedRole-id}/settings'}  # type: ignore

    async def update_setting(
        self,
        privileged_role_id: str,
        id: Optional[str] = None,
        approval_on_elevation: Optional[bool] = None,
        approver_ids: Optional[List[str]] = None,
        elevation_duration: Optional[datetime.timedelta] = None,
        is_mfa_on_elevation_configurable: Optional[bool] = None,
        last_global_admin: Optional[bool] = None,
        max_elavation_duration: Optional[datetime.timedelta] = None,
        mfa_on_elevation: Optional[bool] = None,
        min_elevation_duration: Optional[datetime.timedelta] = None,
        notification_to_user_on_elevation: Optional[bool] = None,
        ticketing_info_on_elevation: Optional[bool] = None,
        **kwargs
    ) -> None:
        """Update the navigation property settings in privilegedRoles.

        Update the navigation property settings in privilegedRoles.

        :param privileged_role_id: key: id of privilegedRole.
        :type privileged_role_id: str
        :param id: Read-only.
        :type id: str
        :param approval_on_elevation:
        :type approval_on_elevation: bool
        :param approver_ids:
        :type approver_ids: list[str]
        :param elevation_duration:
        :type elevation_duration: ~datetime.timedelta
        :param is_mfa_on_elevation_configurable:
        :type is_mfa_on_elevation_configurable: bool
        :param last_global_admin:
        :type last_global_admin: bool
        :param max_elavation_duration:
        :type max_elavation_duration: ~datetime.timedelta
        :param mfa_on_elevation:
        :type mfa_on_elevation: bool
        :param min_elevation_duration:
        :type min_elevation_duration: ~datetime.timedelta
        :param notification_to_user_on_elevation:
        :type notification_to_user_on_elevation: bool
        :param ticketing_info_on_elevation:
        :type ticketing_info_on_elevation: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphPrivilegedRoleSettings(id=id, approval_on_elevation=approval_on_elevation, approver_ids=approver_ids, elevation_duration=elevation_duration, is_mfa_on_elevation_configurable=is_mfa_on_elevation_configurable, last_global_admin=last_global_admin, max_elavation_duration=max_elavation_duration, mfa_on_elevation=mfa_on_elevation, min_elevation_duration=min_elevation_duration, notification_to_user_on_elevation=notification_to_user_on_elevation, ticketing_info_on_elevation=ticketing_info_on_elevation)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_setting.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedRole-id': self._serialize.url("privileged_role_id", privileged_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphPrivilegedRoleSettings')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_setting.metadata = {'url': '/privilegedRoles/{privilegedRole-id}/settings'}  # type: ignore

    async def delete_setting(
        self,
        privileged_role_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property settings for privilegedRoles.

        Delete navigation property settings for privilegedRoles.

        :param privileged_role_id: key: id of privilegedRole.
        :type privileged_role_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_setting.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedRole-id': self._serialize.url("privileged_role_id", privileged_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_setting.metadata = {'url': '/privilegedRoles/{privilegedRole-id}/settings'}  # type: ignore

    async def get_summary(
        self,
        privileged_role_id: str,
        select: Optional[List[Union[str, "models.Enum1415"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphPrivilegedRoleSummary":
        """Get summary from privilegedRoles.

        Get summary from privilegedRoles.

        :param privileged_role_id: key: id of privilegedRole.
        :type privileged_role_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_governance.models.Enum1415]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPrivilegedRoleSummary, or the result of cls(response)
        :rtype: ~identity_governance.models.MicrosoftGraphPrivilegedRoleSummary
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPrivilegedRoleSummary"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_summary.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedRole-id': self._serialize.url("privileged_role_id", privileged_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPrivilegedRoleSummary', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_summary.metadata = {'url': '/privilegedRoles/{privilegedRole-id}/summary'}  # type: ignore

    async def update_summary(
        self,
        privileged_role_id: str,
        id: Optional[str] = None,
        elevated_count: Optional[int] = None,
        managed_count: Optional[int] = None,
        mfa_enabled: Optional[bool] = None,
        status: Optional[Union[str, "models.MicrosoftGraphRoleSummaryStatus"]] = None,
        users_count: Optional[int] = None,
        **kwargs
    ) -> None:
        """Update the navigation property summary in privilegedRoles.

        Update the navigation property summary in privilegedRoles.

        :param privileged_role_id: key: id of privilegedRole.
        :type privileged_role_id: str
        :param id: Read-only.
        :type id: str
        :param elevated_count:
        :type elevated_count: int
        :param managed_count:
        :type managed_count: int
        :param mfa_enabled:
        :type mfa_enabled: bool
        :param status:
        :type status: str or ~identity_governance.models.MicrosoftGraphRoleSummaryStatus
        :param users_count:
        :type users_count: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphPrivilegedRoleSummary(id=id, elevated_count=elevated_count, managed_count=managed_count, mfa_enabled=mfa_enabled, status=status, users_count=users_count)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_summary.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedRole-id': self._serialize.url("privileged_role_id", privileged_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphPrivilegedRoleSummary')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_summary.metadata = {'url': '/privilegedRoles/{privilegedRole-id}/summary'}  # type: ignore

    async def delete_summary(
        self,
        privileged_role_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property summary for privilegedRoles.

        Delete navigation property summary for privilegedRoles.

        :param privileged_role_id: key: id of privilegedRole.
        :type privileged_role_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_summary.metadata['url']  # type: ignore
        path_format_arguments = {
            'privilegedRole-id': self._serialize.url("privileged_role_id", privileged_role_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_summary.metadata = {'url': '/privilegedRoles/{privilegedRole-id}/summary'}  # type: ignore
