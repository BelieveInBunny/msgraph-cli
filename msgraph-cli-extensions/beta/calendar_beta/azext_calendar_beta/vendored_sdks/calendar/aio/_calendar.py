# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.core import AsyncPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

from ._configuration import CalendarConfiguration
from .operations import groupsOperations
from .operations import groupscalendarOperations
from .operations import groupscalendarcalendarviewOperations
from .operations import groupscalendareventsOperations
from .operations import groupscalendarviewOperations
from .operations import groupscalendarviewcalendarOperations
from .operations import groupseventsOperations
from .operations import groupseventscalendarOperations
from .operations import placesplaceOperations
from .operations import usersOperations
from .operations import userscalendarOperations
from .operations import userscalendarcalendarviewOperations
from .operations import userscalendareventsOperations
from .operations import userscalendargroupsOperations
from .operations import userscalendargroupscalendarsOperations
from .operations import userscalendargroupscalendarscalendarviewOperations
from .operations import userscalendargroupscalendarseventsOperations
from .operations import userscalendarsOperations
from .operations import userscalendarscalendarviewOperations
from .operations import userscalendarseventsOperations
from .operations import userscalendarviewOperations
from .operations import userscalendarviewcalendarOperations
from .operations import userseventsOperations
from .operations import userseventscalendarOperations
from .. import models


class Calendar(object):
    """Calendar.

    :ivar groups: groupsOperations operations
    :vartype groups: calendar.aio.operations.groupsOperations
    :ivar groupscalendar: groupscalendarOperations operations
    :vartype groupscalendar: calendar.aio.operations.groupscalendarOperations
    :ivar groupscalendarcalendarview: groupscalendarcalendarviewOperations operations
    :vartype groupscalendarcalendarview: calendar.aio.operations.groupscalendarcalendarviewOperations
    :ivar groupscalendarevents: groupscalendareventsOperations operations
    :vartype groupscalendarevents: calendar.aio.operations.groupscalendareventsOperations
    :ivar groupscalendarview: groupscalendarviewOperations operations
    :vartype groupscalendarview: calendar.aio.operations.groupscalendarviewOperations
    :ivar groupscalendarviewcalendar: groupscalendarviewcalendarOperations operations
    :vartype groupscalendarviewcalendar: calendar.aio.operations.groupscalendarviewcalendarOperations
    :ivar groupsevents: groupseventsOperations operations
    :vartype groupsevents: calendar.aio.operations.groupseventsOperations
    :ivar groupseventscalendar: groupseventscalendarOperations operations
    :vartype groupseventscalendar: calendar.aio.operations.groupseventscalendarOperations
    :ivar placesplace: placesplaceOperations operations
    :vartype placesplace: calendar.aio.operations.placesplaceOperations
    :ivar users: usersOperations operations
    :vartype users: calendar.aio.operations.usersOperations
    :ivar userscalendar: userscalendarOperations operations
    :vartype userscalendar: calendar.aio.operations.userscalendarOperations
    :ivar userscalendarcalendarview: userscalendarcalendarviewOperations operations
    :vartype userscalendarcalendarview: calendar.aio.operations.userscalendarcalendarviewOperations
    :ivar userscalendarevents: userscalendareventsOperations operations
    :vartype userscalendarevents: calendar.aio.operations.userscalendareventsOperations
    :ivar userscalendargroups: userscalendargroupsOperations operations
    :vartype userscalendargroups: calendar.aio.operations.userscalendargroupsOperations
    :ivar userscalendargroupscalendars: userscalendargroupscalendarsOperations operations
    :vartype userscalendargroupscalendars: calendar.aio.operations.userscalendargroupscalendarsOperations
    :ivar userscalendargroupscalendarscalendarview: userscalendargroupscalendarscalendarviewOperations operations
    :vartype userscalendargroupscalendarscalendarview: calendar.aio.operations.userscalendargroupscalendarscalendarviewOperations
    :ivar userscalendargroupscalendarsevents: userscalendargroupscalendarseventsOperations operations
    :vartype userscalendargroupscalendarsevents: calendar.aio.operations.userscalendargroupscalendarseventsOperations
    :ivar userscalendars: userscalendarsOperations operations
    :vartype userscalendars: calendar.aio.operations.userscalendarsOperations
    :ivar userscalendarscalendarview: userscalendarscalendarviewOperations operations
    :vartype userscalendarscalendarview: calendar.aio.operations.userscalendarscalendarviewOperations
    :ivar userscalendarsevents: userscalendarseventsOperations operations
    :vartype userscalendarsevents: calendar.aio.operations.userscalendarseventsOperations
    :ivar userscalendarview: userscalendarviewOperations operations
    :vartype userscalendarview: calendar.aio.operations.userscalendarviewOperations
    :ivar userscalendarviewcalendar: userscalendarviewcalendarOperations operations
    :vartype userscalendarviewcalendar: calendar.aio.operations.userscalendarviewcalendarOperations
    :ivar usersevents: userseventsOperations operations
    :vartype usersevents: calendar.aio.operations.userseventsOperations
    :ivar userseventscalendar: userseventscalendarOperations operations
    :vartype userseventscalendar: calendar.aio.operations.userseventscalendarOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param top: Show only the first n items.
    :type top: int
    :param skip: Skip the first n items.
    :type skip: int
    :param search: Search items by search phrases.
    :type search: str
    :param filter: Filter items by property values.
    :type filter: str
    :param count: Include count of items.
    :type count: bool
    :param str base_url: Service URL
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://graph.microsoft.com/beta'
        self._config = CalendarConfiguration(credential, top, skip, search, filter, count, **kwargs)
        self._client = AsyncPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.groups = groupsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.groupscalendar = groupscalendarOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.groupscalendarcalendarview = groupscalendarcalendarviewOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.groupscalendarevents = groupscalendareventsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.groupscalendarview = groupscalendarviewOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.groupscalendarviewcalendar = groupscalendarviewcalendarOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.groupsevents = groupseventsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.groupseventscalendar = groupseventscalendarOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.placesplace = placesplaceOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.users = usersOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.userscalendar = userscalendarOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.userscalendarcalendarview = userscalendarcalendarviewOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.userscalendarevents = userscalendareventsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.userscalendargroups = userscalendargroupsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.userscalendargroupscalendars = userscalendargroupscalendarsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.userscalendargroupscalendarscalendarview = userscalendargroupscalendarscalendarviewOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.userscalendargroupscalendarsevents = userscalendargroupscalendarseventsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.userscalendars = userscalendarsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.userscalendarscalendarview = userscalendarscalendarviewOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.userscalendarsevents = userscalendarseventsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.userscalendarview = userscalendarviewOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.userscalendarviewcalendar = userscalendarviewcalendarOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.usersevents = userseventsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.userseventscalendar = userseventscalendarOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "Calendar":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
