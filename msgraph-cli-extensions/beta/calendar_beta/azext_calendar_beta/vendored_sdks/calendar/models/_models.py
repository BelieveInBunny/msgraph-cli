# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class collectionofattachment(msrest.serialization.Model):
    """Collection of attachment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphattachment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphattachment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofattachment, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofattachment0(msrest.serialization.Model):
    """Collection of attachment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphattachment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphattachment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofattachment0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofattachment1(msrest.serialization.Model):
    """Collection of attachment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphattachment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphattachment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofattachment1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofattachment10(msrest.serialization.Model):
    """Collection of attachment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphattachment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphattachment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofattachment10, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofattachment2(msrest.serialization.Model):
    """Collection of attachment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphattachment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphattachment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofattachment2, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofattachment3(msrest.serialization.Model):
    """Collection of attachment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphattachment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphattachment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofattachment3, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofattachment4(msrest.serialization.Model):
    """Collection of attachment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphattachment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphattachment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofattachment4, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofattachment5(msrest.serialization.Model):
    """Collection of attachment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphattachment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphattachment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofattachment5, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofattachment6(msrest.serialization.Model):
    """Collection of attachment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphattachment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphattachment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofattachment6, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofattachment7(msrest.serialization.Model):
    """Collection of attachment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphattachment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphattachment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofattachment7, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofattachment8(msrest.serialization.Model):
    """Collection of attachment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphattachment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphattachment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofattachment8, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofattachment9(msrest.serialization.Model):
    """Collection of attachment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphattachment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphattachment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofattachment9, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofcalendar(msrest.serialization.Model):
    """Collection of calendar.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphcalendar]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcalendar]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofcalendar, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofcalendar0(msrest.serialization.Model):
    """Collection of calendar.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphcalendar]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcalendar]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofcalendar0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofcalendargroup(msrest.serialization.Model):
    """Collection of calendarGroup.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphcalendargroup]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcalendargroup]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofcalendargroup, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofcalendarpermission(msrest.serialization.Model):
    """Collection of calendarPermission.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphcalendarpermission]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcalendarpermission]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofcalendarpermission, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofcalendarpermission0(msrest.serialization.Model):
    """Collection of calendarPermission.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphcalendarpermission]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcalendarpermission]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofcalendarpermission0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofcalendarpermission1(msrest.serialization.Model):
    """Collection of calendarPermission.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphcalendarpermission]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcalendarpermission]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofcalendarpermission1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofcalendarpermission2(msrest.serialization.Model):
    """Collection of calendarPermission.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphcalendarpermission]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcalendarpermission]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofcalendarpermission2, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofcalendarpermission3(msrest.serialization.Model):
    """Collection of calendarPermission.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphcalendarpermission]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcalendarpermission]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofcalendarpermission3, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofcalendarpermission4(msrest.serialization.Model):
    """Collection of calendarPermission.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphcalendarpermission]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcalendarpermission]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofcalendarpermission4, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofcalendarpermission5(msrest.serialization.Model):
    """Collection of calendarPermission.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphcalendarpermission]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcalendarpermission]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofcalendarpermission5, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofcalendarpermission6(msrest.serialization.Model):
    """Collection of calendarPermission.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphcalendarpermission]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcalendarpermission]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofcalendarpermission6, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent0(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent1(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent10(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent10, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent11(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent11, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent12(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent12, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent13(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent13, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent14(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent14, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent15(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent15, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent16(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent16, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent17(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent17, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent18(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent18, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent19(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent19, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent2(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent2, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent20(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent20, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent21(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent21, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent22(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent22, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent23(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent23, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent24(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent24, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent25(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent25, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent26(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent26, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent27(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent27, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent28(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent28, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent29(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent29, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent3(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent3, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent30(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent30, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent31(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent31, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent32(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent32, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent33(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent33, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent34(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent34, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent35(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent35, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent36(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent36, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent37(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent37, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent38(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent38, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent39(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent39, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent4(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent4, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent40(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent40, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent41(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent41, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent42(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent42, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent5(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent5, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent6(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent6, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent7(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent7, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent8(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent8, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofevent9(msrest.serialization.Model):
    """Collection of event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphevent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphevent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofevent9, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofextension(msrest.serialization.Model):
    """Collection of extension.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphextension]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphextension]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofextension, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofextension0(msrest.serialization.Model):
    """Collection of extension.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphextension]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphextension]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofextension0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofextension1(msrest.serialization.Model):
    """Collection of extension.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphextension]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphextension]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofextension1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofextension10(msrest.serialization.Model):
    """Collection of extension.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphextension]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphextension]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofextension10, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofextension2(msrest.serialization.Model):
    """Collection of extension.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphextension]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphextension]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofextension2, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofextension3(msrest.serialization.Model):
    """Collection of extension.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphextension]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphextension]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofextension3, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofextension4(msrest.serialization.Model):
    """Collection of extension.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphextension]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphextension]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofextension4, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofextension5(msrest.serialization.Model):
    """Collection of extension.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphextension]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphextension]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofextension5, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofextension6(msrest.serialization.Model):
    """Collection of extension.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphextension]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphextension]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofextension6, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofextension7(msrest.serialization.Model):
    """Collection of extension.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphextension]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphextension]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofextension7, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofextension8(msrest.serialization.Model):
    """Collection of extension.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphextension]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphextension]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofextension8, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofextension9(msrest.serialization.Model):
    """Collection of extension.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphextension]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphextension]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofextension9, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofmultivaluelegacyextendedproperty(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofmultivaluelegacyextendedproperty0(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofmultivaluelegacyextendedproperty1(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofmultivaluelegacyextendedproperty10(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty10, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofmultivaluelegacyextendedproperty11(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty11, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofmultivaluelegacyextendedproperty12(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty12, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofmultivaluelegacyextendedproperty13(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty13, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofmultivaluelegacyextendedproperty14(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty14, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofmultivaluelegacyextendedproperty15(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty15, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofmultivaluelegacyextendedproperty16(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty16, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofmultivaluelegacyextendedproperty17(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty17, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofmultivaluelegacyextendedproperty18(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty18, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofmultivaluelegacyextendedproperty2(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty2, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofmultivaluelegacyextendedproperty3(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty3, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofmultivaluelegacyextendedproperty4(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty4, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofmultivaluelegacyextendedproperty5(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty5, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofmultivaluelegacyextendedproperty6(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty6, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofmultivaluelegacyextendedproperty7(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty7, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofmultivaluelegacyextendedproperty8(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty8, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofmultivaluelegacyextendedproperty9(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty9, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofplace(msrest.serialization.Model):
    """Collection of place.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphplace]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphplace]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofplace, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofsinglevaluelegacyextendedproperty(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofsinglevaluelegacyextendedproperty0(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofsinglevaluelegacyextendedproperty1(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofsinglevaluelegacyextendedproperty10(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty10, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofsinglevaluelegacyextendedproperty11(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty11, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofsinglevaluelegacyextendedproperty12(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty12, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofsinglevaluelegacyextendedproperty13(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty13, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofsinglevaluelegacyextendedproperty14(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty14, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofsinglevaluelegacyextendedproperty15(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty15, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofsinglevaluelegacyextendedproperty16(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty16, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofsinglevaluelegacyextendedproperty17(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty17, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofsinglevaluelegacyextendedproperty18(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty18, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofsinglevaluelegacyextendedproperty2(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty2, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofsinglevaluelegacyextendedproperty3(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty3, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofsinglevaluelegacyextendedproperty4(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty4, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofsinglevaluelegacyextendedproperty5(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty5, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofsinglevaluelegacyextendedproperty6(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty6, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofsinglevaluelegacyextendedproperty7(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty7, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofsinglevaluelegacyextendedproperty8(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty8, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofsinglevaluelegacyextendedproperty9(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty9, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class microsoftgraphentity(msrest.serialization.Model):
    """entity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphentity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.id = kwargs.get('id', None)


class microsoftgraphattachment(microsoftgraphentity):
    """attachment.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content_type: The MIME type.
    :type content_type: str
    :param is_inline: true if the attachment is an inline attachment; otherwise, false.
    :type is_inline: bool
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param name: The attachment's file name.
    :type name: str
    :param size: The length of the attachment in bytes.
    :type size: int
    """

    _validation = {
        'size': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'is_inline': {'key': 'isInline', 'type': 'bool'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'size': {'key': 'size', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphattachment, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.content_type = kwargs.get('content_type', None)
        self.is_inline = kwargs.get('is_inline', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.name = kwargs.get('name', None)
        self.size = kwargs.get('size', None)


class microsoftgraphrecipient(msrest.serialization.Model):
    """recipient.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param email_address: emailAddress.
    :type email_address: ~calendar.models.microsoftgraphemailaddress
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'email_address': {'key': 'emailAddress', 'type': 'microsoftgraphemailaddress'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphrecipient, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.email_address = kwargs.get('email_address', None)


class microsoftgraphattendeebase(microsoftgraphrecipient):
    """attendeeBase.

    :param email_address: emailAddress.
    :type email_address: ~calendar.models.microsoftgraphemailaddress
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type:  Possible values include: "required", "optional", "resource".
    :type type: str or ~calendar.models.Microsoftgraphattendeetype
    """

    _attribute_map = {
        'email_address': {'key': 'emailAddress', 'type': 'microsoftgraphemailaddress'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphattendeebase, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.type = kwargs.get('type', None)


class microsoftgraphattendee(microsoftgraphattendeebase):
    """attendee.

    :param email_address: emailAddress.
    :type email_address: ~calendar.models.microsoftgraphemailaddress
    :param type:  Possible values include: "required", "optional", "resource".
    :type type: str or ~calendar.models.Microsoftgraphattendeetype
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param proposed_new_time: timeSlot.
    :type proposed_new_time: ~calendar.models.microsoftgraphtimeslot
    :param status: responseStatus.
    :type status: ~calendar.models.microsoftgraphresponsestatus
    """

    _attribute_map = {
        'email_address': {'key': 'emailAddress', 'type': 'microsoftgraphemailaddress'},
        'type': {'key': 'type', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'proposed_new_time': {'key': 'proposedNewTime', 'type': 'microsoftgraphtimeslot'},
        'status': {'key': 'status', 'type': 'microsoftgraphresponsestatus'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphattendee, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.proposed_new_time = kwargs.get('proposed_new_time', None)
        self.status = kwargs.get('status', None)


class microsoftgraphcalendar(microsoftgraphentity):
    """calendar.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allowed_online_meeting_providers: Represent the online meeting service providers that
     can be used to create online meetings in this calendar. Possible values are: unknown,
     skypeForBusiness, skypeForConsumer, teamsForBusiness.
    :type allowed_online_meeting_providers: list[str or
     ~calendar.models.Microsoftgraphonlinemeetingprovidertype]
    :param calendar_group_id:
    :type calendar_group_id: str
    :param can_edit: True if the user can write to the calendar, false otherwise. This property is
     true for the user who created the calendar. This property is also true for a user who has been
     shared a calendar and granted write access.
    :type can_edit: bool
    :param can_share: True if the user has the permission to share the calendar, false otherwise.
     Only the user who created the calendar can share it.
    :type can_share: bool
    :param can_view_private_items: True if the user can read calendar items that have been marked
     private, false otherwise.
    :type can_view_private_items: bool
    :param change_key: Identifies the version of the calendar object. Every time the calendar is
     changed, changeKey changes as well. This allows Exchange to apply changes to the correct
     version of the object. Read-only.
    :type change_key: str
    :param color:  Possible values include: "lightBlue", "lightGreen", "auto", "lightOrange",
     "lightGray", "lightYellow", "lightTeal", "lightPink", "lightBrown", "lightRed", "maxColor".
    :type color: str or ~calendar.models.Microsoftgraphcalendarcolor
    :param default_online_meeting_provider:  Possible values include: "unknown",
     "skypeForBusiness", "skypeForConsumer", "teamsForBusiness".
    :type default_online_meeting_provider: str or
     ~calendar.models.Microsoftgraphonlinemeetingprovidertype
    :param hex_color:
    :type hex_color: str
    :param is_default_calendar:
    :type is_default_calendar: bool
    :param is_removable: Indicates whether this user calendar can be deleted from the user mailbox.
    :type is_removable: bool
    :param is_shared:
    :type is_shared: bool
    :param is_shared_with_me:
    :type is_shared_with_me: bool
    :param is_tallying_responses: Indicates whether this user calendar supports tracking of meeting
     responses. Only meeting invites sent from users' primary calendars support tracking of meeting
     responses.
    :type is_tallying_responses: bool
    :param name: The calendar name.
    :type name: str
    :param owner: emailAddress.
    :type owner: ~calendar.models.microsoftgraphemailaddress
    :param calendar_permissions: The permissions of the users with whom the calendar is shared.
    :type calendar_permissions: list[~calendar.models.microsoftgraphcalendarpermission]
    :param calendar_view: The calendar view for the calendar. Navigation property. Read-only.
    :type calendar_view: list[~calendar.models.microsoftgraphevent]
    :param events: The events in the calendar. Navigation property. Read-only.
    :type events: list[~calendar.models.microsoftgraphevent]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the calendar. Read-only. Nullable.
    :type multi_value_extended_properties:
     list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the calendar. Read-only. Nullable.
    :type single_value_extended_properties:
     list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'allowed_online_meeting_providers': {'key': 'allowedOnlineMeetingProviders', 'type': '[str]'},
        'calendar_group_id': {'key': 'calendarGroupId', 'type': 'str'},
        'can_edit': {'key': 'canEdit', 'type': 'bool'},
        'can_share': {'key': 'canShare', 'type': 'bool'},
        'can_view_private_items': {'key': 'canViewPrivateItems', 'type': 'bool'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'color': {'key': 'color', 'type': 'str'},
        'default_online_meeting_provider': {'key': 'defaultOnlineMeetingProvider', 'type': 'str'},
        'hex_color': {'key': 'hexColor', 'type': 'str'},
        'is_default_calendar': {'key': 'isDefaultCalendar', 'type': 'bool'},
        'is_removable': {'key': 'isRemovable', 'type': 'bool'},
        'is_shared': {'key': 'isShared', 'type': 'bool'},
        'is_shared_with_me': {'key': 'isSharedWithMe', 'type': 'bool'},
        'is_tallying_responses': {'key': 'isTallyingResponses', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'owner': {'key': 'owner', 'type': 'microsoftgraphemailaddress'},
        'calendar_permissions': {'key': 'calendarPermissions', 'type': '[microsoftgraphcalendarpermission]'},
        'calendar_view': {'key': 'calendarView', 'type': '[microsoftgraphevent]'},
        'events': {'key': 'events', 'type': '[microsoftgraphevent]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphcalendar, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.allowed_online_meeting_providers = kwargs.get('allowed_online_meeting_providers', None)
        self.calendar_group_id = kwargs.get('calendar_group_id', None)
        self.can_edit = kwargs.get('can_edit', None)
        self.can_share = kwargs.get('can_share', None)
        self.can_view_private_items = kwargs.get('can_view_private_items', None)
        self.change_key = kwargs.get('change_key', None)
        self.color = kwargs.get('color', None)
        self.default_online_meeting_provider = kwargs.get('default_online_meeting_provider', None)
        self.hex_color = kwargs.get('hex_color', None)
        self.is_default_calendar = kwargs.get('is_default_calendar', None)
        self.is_removable = kwargs.get('is_removable', None)
        self.is_shared = kwargs.get('is_shared', None)
        self.is_shared_with_me = kwargs.get('is_shared_with_me', None)
        self.is_tallying_responses = kwargs.get('is_tallying_responses', None)
        self.name = kwargs.get('name', None)
        self.owner = kwargs.get('owner', None)
        self.calendar_permissions = kwargs.get('calendar_permissions', None)
        self.calendar_view = kwargs.get('calendar_view', None)
        self.events = kwargs.get('events', None)
        self.multi_value_extended_properties = kwargs.get('multi_value_extended_properties', None)
        self.single_value_extended_properties = kwargs.get('single_value_extended_properties', None)


class microsoftgraphcalendargroup(microsoftgraphentity):
    """calendarGroup.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param change_key: Identifies the version of the calendar group. Every time the calendar group
     is changed, ChangeKey changes as well. This allows Exchange to apply changes to the correct
     version of the object. Read-only.
    :type change_key: str
    :param class_id: The class identifier. Read-only.
    :type class_id: str
    :param name: The group name.
    :type name: str
    :param calendars: The calendars in the calendar group. Navigation property. Read-only.
     Nullable.
    :type calendars: list[~calendar.models.microsoftgraphcalendar]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'class_id': {'key': 'classId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'calendars': {'key': 'calendars', 'type': '[microsoftgraphcalendar]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphcalendargroup, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.change_key = kwargs.get('change_key', None)
        self.class_id = kwargs.get('class_id', None)
        self.name = kwargs.get('name', None)
        self.calendars = kwargs.get('calendars', None)


class microsoftgraphcalendarpermission(microsoftgraphentity):
    """calendarPermission.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allowed_roles: List of allowed sharing or delegating permission levels for the calendar.
     Possible values are: none, freeBusyRead, limitedRead, read, write,
     delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.
    :type allowed_roles: list[str or ~calendar.models.Microsoftgraphcalendarroletype]
    :param email_address: emailAddress.
    :type email_address: ~calendar.models.microsoftgraphemailaddress
    :param is_inside_organization: True if the user in context (sharee or delegate) is inside the
     same organization as the calendar owner.
    :type is_inside_organization: bool
    :param is_removable: True if the user can be removed from the list of sharees or delegates for
     the specified calendar, false otherwise. The 'My organization' user determines the permissions
     other people within your organization have to the given calendar. You cannot remove 'My
     organization' as a sharee to a calendar.
    :type is_removable: bool
    :param role:  Possible values include: "none", "freeBusyRead", "limitedRead", "read", "write",
     "delegateWithoutPrivateEventAccess", "delegateWithPrivateEventAccess", "custom".
    :type role: str or ~calendar.models.Microsoftgraphcalendarroletype
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'allowed_roles': {'key': 'allowedRoles', 'type': '[str]'},
        'email_address': {'key': 'emailAddress', 'type': 'microsoftgraphemailaddress'},
        'is_inside_organization': {'key': 'isInsideOrganization', 'type': 'bool'},
        'is_removable': {'key': 'isRemovable', 'type': 'bool'},
        'role': {'key': 'role', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphcalendarpermission, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.allowed_roles = kwargs.get('allowed_roles', None)
        self.email_address = kwargs.get('email_address', None)
        self.is_inside_organization = kwargs.get('is_inside_organization', None)
        self.is_removable = kwargs.get('is_removable', None)
        self.role = kwargs.get('role', None)


class microsoftgraphdatetimezone(msrest.serialization.Model):
    """dateTimeTimeZone.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param date_time: A single point of time in a combined date and time representation
     ({date}T{time}; for example, 2017-08-29T04:00:00.0000000).
    :type date_time: str
    :param time_zone: Represents a time zone, for example, 'Pacific Standard Time'. See below for
     more possible values.
    :type time_zone: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'date_time': {'key': 'dateTime', 'type': 'str'},
        'time_zone': {'key': 'timeZone', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphdatetimezone, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.date_time = kwargs.get('date_time', None)
        self.time_zone = kwargs.get('time_zone', None)


class microsoftgraphemailaddress(msrest.serialization.Model):
    """emailAddress.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: The email address of the person or entity.
    :type address: str
    :param name: The display name of the person or entity.
    :type name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphemailaddress, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.address = kwargs.get('address', None)
        self.name = kwargs.get('name', None)


class microsoftgraphoutlookitem(microsoftgraphentity):
    """outlookItem.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param categories: The categories associated with the item.
    :type categories: list[str]
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphoutlookitem, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.categories = kwargs.get('categories', None)
        self.change_key = kwargs.get('change_key', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)


class microsoftgraphevent(microsoftgraphoutlookitem):
    """event.

    :param id: Read-only.
    :type id: str
    :param categories: The categories associated with the item.
    :type categories: list[str]
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allow_new_time_proposals: True if the meeting organizer allows invitees to propose a new
     time when responding, false otherwise. Optional. Default is true.
    :type allow_new_time_proposals: bool
    :param attendees: The collection of attendees for the event.
    :type attendees: list[~calendar.models.microsoftgraphattendee]
    :param body: itemBody.
    :type body: ~calendar.models.microsoftgraphitembody
    :param body_preview: The preview of the message associated with the event. It is in text
     format.
    :type body_preview: str
    :param cancelled_occurrences:
    :type cancelled_occurrences: list[str]
    :param end: dateTimeTimeZone.
    :type end: ~calendar.models.microsoftgraphdatetimezone
    :param has_attachments: Set to true if the event has attachments.
    :type has_attachments: bool
    :param hide_attendees:
    :type hide_attendees: bool
    :param importance:  Possible values include: "low", "normal", "high".
    :type importance: str or ~calendar.models.Microsoftgraphimportance
    :param is_all_day: Set to true if the event lasts all day.
    :type is_all_day: bool
    :param is_cancelled: Set to true if the event has been canceled.
    :type is_cancelled: bool
    :param is_draft:
    :type is_draft: bool
    :param is_online_meeting: True if this event has online meeting information, false otherwise.
     Default is false. Optional.
    :type is_online_meeting: bool
    :param is_organizer: Set to true if the calendar owner (specified by the owner property of the
     calendar) is the organizer of the event (specified by the organizer property of the event).
     This also applies if a delegate organized the event on behalf of the owner.
    :type is_organizer: bool
    :param is_reminder_on: Set to true if an alert is set to remind the user of the event.
    :type is_reminder_on: bool
    :param location: location.
    :type location: ~calendar.models.microsoftgraphlocation
    :param locations: The locations where the event is held or attended from. The location and
     locations properties always correspond with each other. If you update the location property,
     any prior locations in the locations collection would be removed and replaced by the new
     location value.
    :type locations: list[~calendar.models.microsoftgraphlocation]
    :param occurrence_id:
    :type occurrence_id: str
    :param online_meeting: onlineMeetingInfo.
    :type online_meeting: ~calendar.models.microsoftgraphonlinemeetinginfo
    :param online_meeting_provider:  Possible values include: "unknown", "skypeForBusiness",
     "skypeForConsumer", "teamsForBusiness".
    :type online_meeting_provider: str or ~calendar.models.Microsoftgraphonlinemeetingprovidertype
    :param online_meeting_url: A URL for an online meeting. The property is set only when an
     organizer specifies an event as an online meeting such as a Skype meeting. Read-only.
    :type online_meeting_url: str
    :param organizer: recipient.
    :type organizer: ~calendar.models.microsoftgraphrecipient
    :param original_end_time_zone: The end time zone that was set when the event was created. A
     value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop
     Outlook.
    :type original_end_time_zone: str
    :param original_start: The Timestamp type represents date and time information using ISO 8601
     format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type original_start: ~datetime.datetime
    :param original_start_time_zone: The start time zone that was set when the event was created. A
     value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop
     Outlook.
    :type original_start_time_zone: str
    :param recurrence: patternedRecurrence.
    :type recurrence: ~calendar.models.microsoftgraphpatternedrecurrence
    :param reminder_minutes_before_start: The number of minutes before the event start time that
     the reminder alert occurs.
    :type reminder_minutes_before_start: int
    :param response_requested: Default is true, which represents the organizer would like an
     invitee to send a response to the event.
    :type response_requested: bool
    :param response_status: responseStatus.
    :type response_status: ~calendar.models.microsoftgraphresponsestatus
    :param sensitivity:  Possible values include: "normal", "personal", "private", "confidential".
    :type sensitivity: str or ~calendar.models.Microsoftgraphsensitivity
    :param series_master_id: The ID for the recurring series master item, if this event is part of
     a recurring series.
    :type series_master_id: str
    :param show_as:  Possible values include: "free", "tentative", "unknown", "busy", "oof",
     "workingElsewhere".
    :type show_as: str or ~calendar.models.Microsoftgraphfreebusystatus
    :param start: dateTimeTimeZone.
    :type start: ~calendar.models.microsoftgraphdatetimezone
    :param subject: The text of the event's subject line.
    :type subject: str
    :param transaction_id: A custom identifier specified by a client app for the server to avoid
     redundant POST operations in case of client retries to create the same event. This is useful
     when low network connectivity causes the client to time out before receiving a response from
     the server for the client's prior create-event request. After you set transactionId when
     creating an event, you cannot change transactionId in a subsequent update. This property is
     only returned in a response payload if an app has set it. Optional.
    :type transaction_id: str
    :param type:  Possible values include: "singleInstance", "occurrence", "exception",
     "seriesMaster".
    :type type: str or ~calendar.models.Microsoftgrapheventtype
    :param uid:
    :type uid: str
    :param web_link: The URL to open the event in Outlook on the web.Outlook on the web opens the
     event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web
     prompts you to sign in.This URL can be accessed from within an iFrame.
    :type web_link: str
    :param attachments: The collection of fileAttachment and itemAttachment attachments for the
     event. Navigation property. Read-only. Nullable.
    :type attachments: list[~calendar.models.microsoftgraphattachment]
    :param calendar: calendar.
    :type calendar: ~calendar.models.microsoftgraphcalendar
    :param exception_occurrences:
    :type exception_occurrences: list[~calendar.models.microsoftgraphevent]
    :param extensions: The collection of open extensions defined for the event. Read-only.
     Nullable.
    :type extensions: list[~calendar.models.microsoftgraphextension]
    :param instances: The instances of the event. Navigation property. Read-only. Nullable.
    :type instances: list[~calendar.models.microsoftgraphevent]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the event. Read-only. Nullable.
    :type multi_value_extended_properties:
     list[~calendar.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the event. Read-only. Nullable.
    :type single_value_extended_properties:
     list[~calendar.models.microsoftgraphsinglevaluelegacyextendedproperty]
    """

    _validation = {
        'reminder_minutes_before_start': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'allow_new_time_proposals': {'key': 'allowNewTimeProposals', 'type': 'bool'},
        'attendees': {'key': 'attendees', 'type': '[microsoftgraphattendee]'},
        'body': {'key': 'body', 'type': 'microsoftgraphitembody'},
        'body_preview': {'key': 'bodyPreview', 'type': 'str'},
        'cancelled_occurrences': {'key': 'cancelledOccurrences', 'type': '[str]'},
        'end': {'key': 'end', 'type': 'microsoftgraphdatetimezone'},
        'has_attachments': {'key': 'hasAttachments', 'type': 'bool'},
        'hide_attendees': {'key': 'hideAttendees', 'type': 'bool'},
        'importance': {'key': 'importance', 'type': 'str'},
        'is_all_day': {'key': 'isAllDay', 'type': 'bool'},
        'is_cancelled': {'key': 'isCancelled', 'type': 'bool'},
        'is_draft': {'key': 'isDraft', 'type': 'bool'},
        'is_online_meeting': {'key': 'isOnlineMeeting', 'type': 'bool'},
        'is_organizer': {'key': 'isOrganizer', 'type': 'bool'},
        'is_reminder_on': {'key': 'isReminderOn', 'type': 'bool'},
        'location': {'key': 'location', 'type': 'microsoftgraphlocation'},
        'locations': {'key': 'locations', 'type': '[microsoftgraphlocation]'},
        'occurrence_id': {'key': 'occurrenceId', 'type': 'str'},
        'online_meeting': {'key': 'onlineMeeting', 'type': 'microsoftgraphonlinemeetinginfo'},
        'online_meeting_provider': {'key': 'onlineMeetingProvider', 'type': 'str'},
        'online_meeting_url': {'key': 'onlineMeetingUrl', 'type': 'str'},
        'organizer': {'key': 'organizer', 'type': 'microsoftgraphrecipient'},
        'original_end_time_zone': {'key': 'originalEndTimeZone', 'type': 'str'},
        'original_start': {'key': 'originalStart', 'type': 'iso-8601'},
        'original_start_time_zone': {'key': 'originalStartTimeZone', 'type': 'str'},
        'recurrence': {'key': 'recurrence', 'type': 'microsoftgraphpatternedrecurrence'},
        'reminder_minutes_before_start': {'key': 'reminderMinutesBeforeStart', 'type': 'int'},
        'response_requested': {'key': 'responseRequested', 'type': 'bool'},
        'response_status': {'key': 'responseStatus', 'type': 'microsoftgraphresponsestatus'},
        'sensitivity': {'key': 'sensitivity', 'type': 'str'},
        'series_master_id': {'key': 'seriesMasterId', 'type': 'str'},
        'show_as': {'key': 'showAs', 'type': 'str'},
        'start': {'key': 'start', 'type': 'microsoftgraphdatetimezone'},
        'subject': {'key': 'subject', 'type': 'str'},
        'transaction_id': {'key': 'transactionId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'uid': {'key': 'uid', 'type': 'str'},
        'web_link': {'key': 'webLink', 'type': 'str'},
        'attachments': {'key': 'attachments', 'type': '[microsoftgraphattachment]'},
        'calendar': {'key': 'calendar', 'type': 'microsoftgraphcalendar'},
        'exception_occurrences': {'key': 'exceptionOccurrences', 'type': '[microsoftgraphevent]'},
        'extensions': {'key': 'extensions', 'type': '[microsoftgraphextension]'},
        'instances': {'key': 'instances', 'type': '[microsoftgraphevent]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphevent, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.allow_new_time_proposals = kwargs.get('allow_new_time_proposals', None)
        self.attendees = kwargs.get('attendees', None)
        self.body = kwargs.get('body', None)
        self.body_preview = kwargs.get('body_preview', None)
        self.cancelled_occurrences = kwargs.get('cancelled_occurrences', None)
        self.end = kwargs.get('end', None)
        self.has_attachments = kwargs.get('has_attachments', None)
        self.hide_attendees = kwargs.get('hide_attendees', None)
        self.importance = kwargs.get('importance', None)
        self.is_all_day = kwargs.get('is_all_day', None)
        self.is_cancelled = kwargs.get('is_cancelled', None)
        self.is_draft = kwargs.get('is_draft', None)
        self.is_online_meeting = kwargs.get('is_online_meeting', None)
        self.is_organizer = kwargs.get('is_organizer', None)
        self.is_reminder_on = kwargs.get('is_reminder_on', None)
        self.location = kwargs.get('location', None)
        self.locations = kwargs.get('locations', None)
        self.occurrence_id = kwargs.get('occurrence_id', None)
        self.online_meeting = kwargs.get('online_meeting', None)
        self.online_meeting_provider = kwargs.get('online_meeting_provider', None)
        self.online_meeting_url = kwargs.get('online_meeting_url', None)
        self.organizer = kwargs.get('organizer', None)
        self.original_end_time_zone = kwargs.get('original_end_time_zone', None)
        self.original_start = kwargs.get('original_start', None)
        self.original_start_time_zone = kwargs.get('original_start_time_zone', None)
        self.recurrence = kwargs.get('recurrence', None)
        self.reminder_minutes_before_start = kwargs.get('reminder_minutes_before_start', None)
        self.response_requested = kwargs.get('response_requested', None)
        self.response_status = kwargs.get('response_status', None)
        self.sensitivity = kwargs.get('sensitivity', None)
        self.series_master_id = kwargs.get('series_master_id', None)
        self.show_as = kwargs.get('show_as', None)
        self.start = kwargs.get('start', None)
        self.subject = kwargs.get('subject', None)
        self.transaction_id = kwargs.get('transaction_id', None)
        self.type = kwargs.get('type', None)
        self.uid = kwargs.get('uid', None)
        self.web_link = kwargs.get('web_link', None)
        self.attachments = kwargs.get('attachments', None)
        self.calendar = kwargs.get('calendar', None)
        self.exception_occurrences = kwargs.get('exception_occurrences', None)
        self.extensions = kwargs.get('extensions', None)
        self.instances = kwargs.get('instances', None)
        self.multi_value_extended_properties = kwargs.get('multi_value_extended_properties', None)
        self.single_value_extended_properties = kwargs.get('single_value_extended_properties', None)


class microsoftgraphextension(microsoftgraphentity):
    """extension.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphextension, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class microsoftgraphitembody(msrest.serialization.Model):
    """itemBody.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content: The content of the item.
    :type content: str
    :param content_type:  Possible values include: "text", "html".
    :type content_type: str or ~calendar.models.Microsoftgraphbodytype
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'content': {'key': 'content', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphitembody, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.content = kwargs.get('content', None)
        self.content_type = kwargs.get('content_type', None)


class microsoftgraphlocation(msrest.serialization.Model):
    """location.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: physicalAddress.
    :type address: ~calendar.models.microsoftgraphphysicaladdress
    :param coordinates: outlookGeoCoordinates.
    :type coordinates: ~calendar.models.microsoftgraphoutlookgeocoordinates
    :param display_name: The name associated with the location.
    :type display_name: str
    :param location_email_address: Optional email address of the location.
    :type location_email_address: str
    :param location_type:  Possible values include: "default", "conferenceRoom", "homeAddress",
     "businessAddress", "geoCoordinates", "streetAddress", "hotel", "restaurant", "localBusiness",
     "postalAddress".
    :type location_type: str or ~calendar.models.Microsoftgraphlocationtype
    :param location_uri: Optional URI representing the location.
    :type location_uri: str
    :param unique_id: For internal use only.
    :type unique_id: str
    :param unique_id_type:  Possible values include: "unknown", "locationStore", "directory",
     "private", "bing".
    :type unique_id_type: str or ~calendar.models.Microsoftgraphlocationuniqueidtype
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'microsoftgraphphysicaladdress'},
        'coordinates': {'key': 'coordinates', 'type': 'microsoftgraphoutlookgeocoordinates'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'location_email_address': {'key': 'locationEmailAddress', 'type': 'str'},
        'location_type': {'key': 'locationType', 'type': 'str'},
        'location_uri': {'key': 'locationUri', 'type': 'str'},
        'unique_id': {'key': 'uniqueId', 'type': 'str'},
        'unique_id_type': {'key': 'uniqueIdType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphlocation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.address = kwargs.get('address', None)
        self.coordinates = kwargs.get('coordinates', None)
        self.display_name = kwargs.get('display_name', None)
        self.location_email_address = kwargs.get('location_email_address', None)
        self.location_type = kwargs.get('location_type', None)
        self.location_uri = kwargs.get('location_uri', None)
        self.unique_id = kwargs.get('unique_id', None)
        self.unique_id_type = kwargs.get('unique_id_type', None)


class microsoftgraphmultivaluelegacyextendedproperty(microsoftgraphentity):
    """multiValueLegacyExtendedProperty.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value: A collection of property values.
    :type value: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphmultivaluelegacyextendedproperty, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)


class microsoftgraphonlinemeetinginfo(msrest.serialization.Model):
    """onlineMeetingInfo.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param conference_id: The ID of the conference.
    :type conference_id: str
    :param join_url: The external link that launches the online meeting. This is a URL that clients
     will launch into a browser and will redirect the user to join the meeting.
    :type join_url: str
    :param phones: All of the phone numbers associated with this conference.
    :type phones: list[~calendar.models.microsoftgraphphone]
    :param quick_dial: The pre-formatted quickdial for this call.
    :type quick_dial: str
    :param toll_free_numbers: The toll free numbers that can be used to join the conference.
    :type toll_free_numbers: list[str]
    :param toll_number: The toll number that can be used to join the conference.
    :type toll_number: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'conference_id': {'key': 'conferenceId', 'type': 'str'},
        'join_url': {'key': 'joinUrl', 'type': 'str'},
        'phones': {'key': 'phones', 'type': '[microsoftgraphphone]'},
        'quick_dial': {'key': 'quickDial', 'type': 'str'},
        'toll_free_numbers': {'key': 'tollFreeNumbers', 'type': '[str]'},
        'toll_number': {'key': 'tollNumber', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphonlinemeetinginfo, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.conference_id = kwargs.get('conference_id', None)
        self.join_url = kwargs.get('join_url', None)
        self.phones = kwargs.get('phones', None)
        self.quick_dial = kwargs.get('quick_dial', None)
        self.toll_free_numbers = kwargs.get('toll_free_numbers', None)
        self.toll_number = kwargs.get('toll_number', None)


class microsoftgraphoutlookgeocoordinates(msrest.serialization.Model):
    """outlookGeoCoordinates.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param accuracy: The accuracy of the latitude and longitude. As an example, the accuracy can be
     measured in meters, such as the latitude and longitude are accurate to within 50 meters.
    :type accuracy: float
    :param altitude: The altitude of the location.
    :type altitude: float
    :param altitude_accuracy: The accuracy of the altitude.
    :type altitude_accuracy: float
    :param latitude: The latitude of the location.
    :type latitude: float
    :param longitude: The longitude of the location.
    :type longitude: float
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'accuracy': {'key': 'accuracy', 'type': 'float'},
        'altitude': {'key': 'altitude', 'type': 'float'},
        'altitude_accuracy': {'key': 'altitudeAccuracy', 'type': 'float'},
        'latitude': {'key': 'latitude', 'type': 'float'},
        'longitude': {'key': 'longitude', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphoutlookgeocoordinates, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.accuracy = kwargs.get('accuracy', None)
        self.altitude = kwargs.get('altitude', None)
        self.altitude_accuracy = kwargs.get('altitude_accuracy', None)
        self.latitude = kwargs.get('latitude', None)
        self.longitude = kwargs.get('longitude', None)


class microsoftgraphpatternedrecurrence(msrest.serialization.Model):
    """patternedRecurrence.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param pattern: recurrencePattern.
    :type pattern: ~calendar.models.microsoftgraphrecurrencepattern
    :param range: recurrenceRange.
    :type range: ~calendar.models.microsoftgraphrecurrencerange
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'pattern': {'key': 'pattern', 'type': 'microsoftgraphrecurrencepattern'},
        'range': {'key': 'range', 'type': 'microsoftgraphrecurrencerange'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphpatternedrecurrence, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.pattern = kwargs.get('pattern', None)
        self.range = kwargs.get('range', None)


class microsoftgraphphone(msrest.serialization.Model):
    """phone.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param number: The phone number.
    :type number: str
    :param type:  Possible values include: "home", "business", "mobile", "other", "assistant",
     "homeFax", "businessFax", "otherFax", "pager", "radio".
    :type type: str or ~calendar.models.Microsoftgraphphonetype
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'number': {'key': 'number', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphphone, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.number = kwargs.get('number', None)
        self.type = kwargs.get('type', None)


class microsoftgraphphysicaladdress(msrest.serialization.Model):
    """physicalAddress.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param city: The city.
    :type city: str
    :param country_or_region: The country or region. It's a free-format string value, for example,
     'United States'.
    :type country_or_region: str
    :param postal_code: The postal code.
    :type postal_code: str
    :param post_office_box:
    :type post_office_box: str
    :param state: The state.
    :type state: str
    :param street: The street.
    :type street: str
    :param type:  Possible values include: "unknown", "home", "business", "other".
    :type type: str or ~calendar.models.Microsoftgraphphysicaladdresstype
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'city': {'key': 'city', 'type': 'str'},
        'country_or_region': {'key': 'countryOrRegion', 'type': 'str'},
        'postal_code': {'key': 'postalCode', 'type': 'str'},
        'post_office_box': {'key': 'postOfficeBox', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'street': {'key': 'street', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphphysicaladdress, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.city = kwargs.get('city', None)
        self.country_or_region = kwargs.get('country_or_region', None)
        self.postal_code = kwargs.get('postal_code', None)
        self.post_office_box = kwargs.get('post_office_box', None)
        self.state = kwargs.get('state', None)
        self.street = kwargs.get('street', None)
        self.type = kwargs.get('type', None)


class microsoftgraphplace(microsoftgraphentity):
    """place.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: physicalAddress.
    :type address: ~calendar.models.microsoftgraphphysicaladdress
    :param display_name: The name associated with the place.
    :type display_name: str
    :param geo_coordinates: outlookGeoCoordinates.
    :type geo_coordinates: ~calendar.models.microsoftgraphoutlookgeocoordinates
    :param phone: The phone number of the place.
    :type phone: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'microsoftgraphphysicaladdress'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'geo_coordinates': {'key': 'geoCoordinates', 'type': 'microsoftgraphoutlookgeocoordinates'},
        'phone': {'key': 'phone', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphplace, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.address = kwargs.get('address', None)
        self.display_name = kwargs.get('display_name', None)
        self.geo_coordinates = kwargs.get('geo_coordinates', None)
        self.phone = kwargs.get('phone', None)


class microsoftgraphrecurrencepattern(msrest.serialization.Model):
    """recurrencePattern.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param day_of_month: The day of the month on which the event occurs. Required if type is
     absoluteMonthly or absoluteYearly.
    :type day_of_month: int
    :param days_of_week: A collection of the days of the week on which the event occurs. The
     possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday. If type is
     relativeMonthly or relativeYearly, and daysOfWeek specifies more than one day, the event falls
     on the first day that satisfies the pattern.  Required if type is weekly, relativeMonthly, or
     relativeYearly.
    :type days_of_week: list[str or ~calendar.models.Microsoftgraphdayofweek]
    :param first_day_of_week:  Possible values include: "sunday", "monday", "tuesday", "wednesday",
     "thursday", "friday", "saturday".
    :type first_day_of_week: str or ~calendar.models.Microsoftgraphdayofweek
    :param index:  Possible values include: "first", "second", "third", "fourth", "last".
    :type index: str or ~calendar.models.Microsoftgraphweekindex
    :param interval: The number of units between occurrences, where units can be in days, weeks,
     months, or years, depending on the type. Required.
    :type interval: int
    :param month: The month in which the event occurs.  This is a number from 1 to 12.
    :type month: int
    :param type:  Possible values include: "daily", "weekly", "absoluteMonthly", "relativeMonthly",
     "absoluteYearly", "relativeYearly".
    :type type: str or ~calendar.models.Microsoftgraphrecurrencepatterntype
    """

    _validation = {
        'day_of_month': {'maximum': 2147483647, 'minimum': -2147483648},
        'interval': {'maximum': 2147483647, 'minimum': -2147483648},
        'month': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'day_of_month': {'key': 'dayOfMonth', 'type': 'int'},
        'days_of_week': {'key': 'daysOfWeek', 'type': '[str]'},
        'first_day_of_week': {'key': 'firstDayOfWeek', 'type': 'str'},
        'index': {'key': 'index', 'type': 'str'},
        'interval': {'key': 'interval', 'type': 'int'},
        'month': {'key': 'month', 'type': 'int'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphrecurrencepattern, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.day_of_month = kwargs.get('day_of_month', None)
        self.days_of_week = kwargs.get('days_of_week', None)
        self.first_day_of_week = kwargs.get('first_day_of_week', None)
        self.index = kwargs.get('index', None)
        self.interval = kwargs.get('interval', None)
        self.month = kwargs.get('month', None)
        self.type = kwargs.get('type', None)


class microsoftgraphrecurrencerange(msrest.serialization.Model):
    """recurrenceRange.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param end_date: The date to stop applying the recurrence pattern. Depending on the recurrence
     pattern of the event, the last occurrence of the meeting may not be this date. Required if type
     is endDate.
    :type end_date: ~datetime.date
    :param number_of_occurrences: The number of times to repeat the event. Required and must be
     positive if type is numbered.
    :type number_of_occurrences: int
    :param recurrence_time_zone: Time zone for the startDate and endDate properties. Optional. If
     not specified, the time zone of the event is used.
    :type recurrence_time_zone: str
    :param start_date: The date to start applying the recurrence pattern. The first occurrence of
     the meeting may be this date or later, depending on the recurrence pattern of the event. Must
     be the same value as the start property of the recurring event. Required.
    :type start_date: ~datetime.date
    :param type:  Possible values include: "endDate", "noEnd", "numbered".
    :type type: str or ~calendar.models.Microsoftgraphrecurrencerangetype
    """

    _validation = {
        'number_of_occurrences': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'end_date': {'key': 'endDate', 'type': 'date'},
        'number_of_occurrences': {'key': 'numberOfOccurrences', 'type': 'int'},
        'recurrence_time_zone': {'key': 'recurrenceTimeZone', 'type': 'str'},
        'start_date': {'key': 'startDate', 'type': 'date'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphrecurrencerange, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.end_date = kwargs.get('end_date', None)
        self.number_of_occurrences = kwargs.get('number_of_occurrences', None)
        self.recurrence_time_zone = kwargs.get('recurrence_time_zone', None)
        self.start_date = kwargs.get('start_date', None)
        self.type = kwargs.get('type', None)


class microsoftgraphresponsestatus(msrest.serialization.Model):
    """responseStatus.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param response:  Possible values include: "none", "organizer", "tentativelyAccepted",
     "accepted", "declined", "notResponded".
    :type response: str or ~calendar.models.Microsoftgraphresponsetype
    :param time: The date and time that the response was returned. It uses ISO 8601 format and is
     always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this:
     '2014-01-01T00:00:00Z'.
    :type time: ~datetime.datetime
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'response': {'key': 'response', 'type': 'str'},
        'time': {'key': 'time', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphresponsestatus, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.response = kwargs.get('response', None)
        self.time = kwargs.get('time', None)


class microsoftgraphsinglevaluelegacyextendedproperty(microsoftgraphentity):
    """singleValueLegacyExtendedProperty.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value: A property value.
    :type value: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphsinglevaluelegacyextendedproperty, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)


class microsoftgraphtimeslot(msrest.serialization.Model):
    """timeSlot.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param end: dateTimeTimeZone.
    :type end: ~calendar.models.microsoftgraphdatetimezone
    :param start: dateTimeTimeZone.
    :type start: ~calendar.models.microsoftgraphdatetimezone
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'end': {'key': 'end', 'type': 'microsoftgraphdatetimezone'},
        'start': {'key': 'start', 'type': 'microsoftgraphdatetimezone'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphtimeslot, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.end = kwargs.get('end', None)
        self.start = kwargs.get('start', None)


class odataerror(msrest.serialization.Model):
    """odataerror.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error: Required.
    :type error: ~calendar.models.odataerrormain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'error': {'key': 'error', 'type': 'odataerrormain'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(odataerror, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.error = kwargs['error']


class odataerrordetail(msrest.serialization.Model):
    """odataerrordetail.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(odataerrordetail, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)


class odataerrormain(msrest.serialization.Model):
    """odataerrormain.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~calendar.models.odataerrordetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: dict[str, object]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[odataerrordetail]'},
        'innererror': {'key': 'innererror', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(odataerrormain, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)
