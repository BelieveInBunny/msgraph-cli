# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type
)
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_calendar_beta.action import (
    AddBody,
    AddEnd,
    AddResponseStatus,
    AddAttachments,
    AddExtensions,
    AddCalendarGroupCreaterViewMultiValueExtendedProperties,
    AddCalendarGroupCreaterViewSingleValueExtendedProperties,
    AddRecurrencePattern,
    AddRecurrenceRange,
    AddOwner,
    AddOnlineMeetingPhones,
    AddLocationAddress,
    AddLocationCoordinates,
    AddCalendarGroupUpdaterMultiValueExtendedProperties,
    AddCalendarGroupUpdaterSingleValueExtendedProperties
)


def load_arguments(self, _):

    with self.argument_context('calendar group delete') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar group create-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group creater-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group get-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group getr') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group getr-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group list-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group listr-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group update-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group updater') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('calendar_group_id', type=str, help='')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('hex_color', type=str, help='')
        c.argument('is_default_calendar', arg_type=get_three_state_flag(), help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='')
        c.argument('is_shared_with_me', arg_type=get_three_state_flag(), help='')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupUpdaterMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupUpdaterSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')

    with self.argument_context('calendar group updater-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-calendar delete') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar group-calendar create-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-calendar create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar group-calendar create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar group-calendar creater-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar group-calendar creater-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-calendar get-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar get-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar get-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar getr-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar getr-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar list-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar listr-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar listr-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar update-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-calendar update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar group-calendar update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar group-calendar updater-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar group-calendar updater-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-calendar-calendar-view delete') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar group-calendar-calendar-view create-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar group-calendar-calendar-view create-exception-occurrence') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-calendar-calendar-view create-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar group-calendar-calendar-view create-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-calendar-calendar-view create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar group-calendar-calendar-view create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar group-calendar-calendar-view get-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-calendar-view get-exception-occurrence') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-calendar-view get-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-calendar-view get-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-calendar-view get-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-calendar-view get-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-calendar-view getr') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-calendar-view list-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-calendar-view list-exception-occurrence') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-calendar-view list-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-calendar-view list-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-calendar-view list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-calendar-view list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-calendar-view update-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar group-calendar-calendar-view update-exception-occurrence') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-calendar-calendar-view update-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar group-calendar-calendar-view update-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-calendar-calendar-view update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar group-calendar-calendar-view update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar group-calendar-calendar-view updater') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('calendar_group_id', type=str, help='')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('hex_color', type=str, help='')
        c.argument('is_default_calendar', arg_type=get_three_state_flag(), help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='')
        c.argument('is_shared_with_me', arg_type=get_three_state_flag(), help='')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupUpdaterMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupUpdaterSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')

    with self.argument_context('calendar group-calendar-event delete') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar group-calendar-event create-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar group-calendar-event create-exception-occurrence') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-calendar-event create-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar group-calendar-event create-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-calendar-event create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar group-calendar-event create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar group-calendar-event get-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-event get-exception-occurrence') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-event get-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-event get-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-event get-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-event get-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-event getr') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-event list-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-event list-exception-occurrence') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-event list-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-event list-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-event list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-event list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-event update-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar group-calendar-event update-exception-occurrence') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-calendar-event update-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar group-calendar-event update-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-calendar-event update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar group-calendar-event update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar group-calendar-event updater') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('calendar_group_id', type=str, help='')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('hex_color', type=str, help='')
        c.argument('is_default_calendar', arg_type=get_three_state_flag(), help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='')
        c.argument('is_shared_with_me', arg_type=get_three_state_flag(), help='')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupUpdaterMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupUpdaterSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')

    with self.argument_context('calendar group-calendar-view delete') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar group-calendar-view create-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar group-calendar-view create-exception-occurrence') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-calendar-view create-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar group-calendar-view create-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-calendar-view create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar group-calendar-view create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar group-calendar-view get-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view get-exception-occurrence') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view get-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view get-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view get-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view get-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view getr') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view list-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view list-exception-occurrence') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view list-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view list-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view update-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar group-calendar-view update-exception-occurrence') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-calendar-view update-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar group-calendar-view update-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-calendar-view update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar group-calendar-view update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar group-calendar-view updater') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('calendar_group_id', type=str, help='')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('hex_color', type=str, help='')
        c.argument('is_default_calendar', arg_type=get_three_state_flag(), help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='')
        c.argument('is_shared_with_me', arg_type=get_three_state_flag(), help='')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupUpdaterMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupUpdaterSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')

    with self.argument_context('calendar group-calendar-view-calendar delete') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar group-calendar-view-calendar create-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-calendar-view-calendar create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar group-calendar-view-calendar create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar group-calendar-view-calendar creater-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar group-calendar-view-calendar creater-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-calendar-view-calendar get-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view-calendar get-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view-calendar get-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view-calendar getr-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view-calendar getr-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view-calendar list-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view-calendar list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view-calendar list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view-calendar listr-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view-calendar listr-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-calendar-view-calendar update-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-calendar-view-calendar update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar group-calendar-view-calendar update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar group-calendar-view-calendar updater-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar group-calendar-view-calendar updater-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-event delete') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar group-event create-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar group-event create-exception-occurrence') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-event create-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar group-event create-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-event create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar group-event create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar group-event get-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event get-exception-occurrence') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event get-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event get-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event get-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event get-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event getr') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event list-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event list-exception-occurrence') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event list-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event list-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event update-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar group-event update-exception-occurrence') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-event update-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar group-event update-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-event update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar group-event update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar group-event updater') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('calendar_group_id', type=str, help='')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('hex_color', type=str, help='')
        c.argument('is_default_calendar', arg_type=get_three_state_flag(), help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='')
        c.argument('is_shared_with_me', arg_type=get_three_state_flag(), help='')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupUpdaterMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupUpdaterSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')

    with self.argument_context('calendar group-event-calendar delete') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar group-event-calendar create-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-event-calendar create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar group-event-calendar create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar group-event-calendar creater-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar group-event-calendar creater-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-event-calendar get-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event-calendar get-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event-calendar get-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event-calendar getr-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event-calendar getr-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event-calendar list-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event-calendar list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event-calendar list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event-calendar listr-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event-calendar listr-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar group-event-calendar update-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar group-event-calendar update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar group-event-calendar update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar group-event-calendar updater-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar group-event-calendar updater-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar place-place delete') as c:
        c.argument('place_id', type=str, help='key: id of place')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar place-place create-place') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('display_name', type=str, help='The name associated with the place.')
        c.argument('geo_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('phone', type=str, help='The phone number of the place.')

    with self.argument_context('calendar place-place get-place') as c:
        c.argument('place_id', type=str, help='key: id of place')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar place-place list-place') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar place-place update-place') as c:
        c.argument('place_id', type=str, help='key: id of place')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('display_name', type=str, help='The name associated with the place.')
        c.argument('geo_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('phone', type=str, help='The phone number of the place.')

    with self.argument_context('calendar user delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('if_match', type=str, help='ETag')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('calendar user create-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user creater') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('calendar_group_id', type=str, help='')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('hex_color', type=str, help='')
        c.argument('is_default_calendar', arg_type=get_three_state_flag(), help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='')
        c.argument('is_shared_with_me', arg_type=get_three_state_flag(), help='')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupUpdaterMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupUpdaterSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')

    with self.argument_context('calendar user creater-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar group. Every time the calendar '
                   'group is changed, ChangeKey changes as well. This allows Exchange to apply changes to the correct '
                   'version of the object. Read-only.')
        c.argument('class_id', help='The class identifier. Read-only.')
        c.argument('name', type=str, help='The group name.')
        c.argument('calendars', type=validate_file_or_dict, help='The calendars in the calendar group. Navigation '
                   'property. Read-only. Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('calendar user creater-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user get-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user getr') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user getr-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user getr-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user list-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user listr') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user listr-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user listr-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user update-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user updater') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('calendar_group_id', type=str, help='')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('hex_color', type=str, help='')
        c.argument('is_default_calendar', arg_type=get_three_state_flag(), help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='')
        c.argument('is_shared_with_me', arg_type=get_three_state_flag(), help='')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupUpdaterMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupUpdaterSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')

    with self.argument_context('calendar user updater-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar group. Every time the calendar '
                   'group is changed, ChangeKey changes as well. This allows Exchange to apply changes to the correct '
                   'version of the object. Read-only.')
        c.argument('class_id', help='The class identifier. Read-only.')
        c.argument('name', type=str, help='The group name.')
        c.argument('calendars', type=validate_file_or_dict, help='The calendars in the calendar group. Navigation '
                   'property. Read-only. Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('calendar user updater-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar user-calendar create-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar creater-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar user-calendar creater-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar get-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar getr-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar getr-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar list-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar listr-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar listr-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar update-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar updater-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar user-calendar updater-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-calendar-view delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar user-calendar-calendar-view create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar user-calendar-calendar-view create-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-calendar-view create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar user-calendar-calendar-view create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-calendar-view create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar-calendar-view create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar-calendar-view get-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view get-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view get-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view get-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view getr') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view list-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar user-calendar-calendar-view update-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-calendar-view update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar user-calendar-calendar-view update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-calendar-view update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar-calendar-view update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar-calendar-view updater') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('calendar_group_id', type=str, help='')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('hex_color', type=str, help='')
        c.argument('is_default_calendar', arg_type=get_three_state_flag(), help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='')
        c.argument('is_shared_with_me', arg_type=get_three_state_flag(), help='')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupUpdaterMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupUpdaterSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')

    with self.argument_context('calendar user-calendar-event delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar user-calendar-event create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar user-calendar-event create-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-event create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar user-calendar-event create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-event create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar-event create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar-event get-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event get-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event get-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event get-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event getr') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event list-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar user-calendar-event update-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-event update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar user-calendar-event update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-event update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar-event update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar-event updater') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('calendar_group_id', type=str, help='')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('hex_color', type=str, help='')
        c.argument('is_default_calendar', arg_type=get_three_state_flag(), help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='')
        c.argument('is_shared_with_me', arg_type=get_three_state_flag(), help='')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupUpdaterMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupUpdaterSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')

    with self.argument_context('calendar user-calendar-group delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar user-calendar-group creater') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('microsoft_graph_calendar_group_id_calendar_group_id', type=str, help='')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('hex_color', type=str, help='')
        c.argument('is_default_calendar', arg_type=get_three_state_flag(), help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='')
        c.argument('is_shared_with_me', arg_type=get_three_state_flag(), help='')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupUpdaterMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupUpdaterSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')

    with self.argument_context('calendar user-calendar-group getr') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group listr') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group updater') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('microsoft_graph_calendar_group_id_calendar_group_id', type=str, help='')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('hex_color', type=str, help='')
        c.argument('is_default_calendar', arg_type=get_three_state_flag(), help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='')
        c.argument('is_shared_with_me', arg_type=get_three_state_flag(), help='')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupUpdaterMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupUpdaterSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')

    with self.argument_context('calendar user-calendar-group-calendar delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar user-calendar-group-calendar create-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-group-calendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar-group-calendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar-group-calendar creater-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar user-calendar-group-calendar creater-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-group-calendar get-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar getr-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar getr-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar list-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar listr-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar listr-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar update-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-group-calendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar-group-calendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar-group-calendar updater-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar user-calendar-group-calendar updater-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view create-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view get-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view get-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view get-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view get-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view getr') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view list-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view update-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar-group-calendar-calendar-view updater') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('microsoft_graph_calendar_group_id_calendar_group_id', type=str, help='')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('hex_color', type=str, help='')
        c.argument('is_default_calendar', arg_type=get_three_state_flag(), help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='')
        c.argument('is_shared_with_me', arg_type=get_three_state_flag(), help='')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupUpdaterMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupUpdaterSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')

    with self.argument_context('calendar user-calendar-group-calendar-event delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar user-calendar-group-calendar-event create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar user-calendar-group-calendar-event create-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-group-calendar-event create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar user-calendar-group-calendar-event create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-group-calendar-event create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar-group-calendar-event create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar-group-calendar-event get-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-event get-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-event get-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-event get-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-event get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-event get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-event getr') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-event list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-event list-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-event list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-event list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-event list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-event list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-group-calendar-event update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar user-calendar-group-calendar-event update-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-group-calendar-event update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar user-calendar-group-calendar-event update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-group-calendar-event update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar-group-calendar-event update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar-group-calendar-event updater') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('microsoft_graph_calendar_group_id_calendar_group_id', type=str, help='')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('hex_color', type=str, help='')
        c.argument('is_default_calendar', arg_type=get_three_state_flag(), help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='')
        c.argument('is_shared_with_me', arg_type=get_three_state_flag(), help='')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupUpdaterMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupUpdaterSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')

    with self.argument_context('calendar user-calendar delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar user-calendar create-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar creater-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar user-calendar creater-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar get-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar getr-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar getr-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar list-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar listr-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar listr-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar update-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar updater-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar user-calendar updater-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-calendar-view delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar user-calendar-calendar-view create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar user-calendar-calendar-view create-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-calendar-view create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar user-calendar-calendar-view create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-calendar-view create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar-calendar-view create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar-calendar-view get-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view get-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view get-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view get-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view getr') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view list-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-calendar-view update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar user-calendar-calendar-view update-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-calendar-view update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar user-calendar-calendar-view update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-calendar-view update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar-calendar-view update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar-calendar-view updater') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('calendar_group_id', type=str, help='')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('hex_color', type=str, help='')
        c.argument('is_default_calendar', arg_type=get_three_state_flag(), help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='')
        c.argument('is_shared_with_me', arg_type=get_three_state_flag(), help='')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupUpdaterMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupUpdaterSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')

    with self.argument_context('calendar user-calendar-event delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar user-calendar-event create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar user-calendar-event create-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-event create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar user-calendar-event create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-event create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar-event create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar-event get-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event get-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event get-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event get-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event getr') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event list-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-event update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar user-calendar-event update-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-event update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar user-calendar-event update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-event update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar-event update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar-event updater') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('calendar_group_id', type=str, help='')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('hex_color', type=str, help='')
        c.argument('is_default_calendar', arg_type=get_three_state_flag(), help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='')
        c.argument('is_shared_with_me', arg_type=get_three_state_flag(), help='')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupUpdaterMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupUpdaterSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')

    with self.argument_context('calendar user-calendar-view delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar user-calendar-view create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar user-calendar-view create-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-view create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar user-calendar-view create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-view create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar-view create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar-view get-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view get-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view get-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view get-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view getr') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view list-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar user-calendar-view update-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-view update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar user-calendar-view update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-view update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar-view update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar-view updater') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('calendar_group_id', type=str, help='')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('hex_color', type=str, help='')
        c.argument('is_default_calendar', arg_type=get_three_state_flag(), help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='')
        c.argument('is_shared_with_me', arg_type=get_three_state_flag(), help='')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupUpdaterMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupUpdaterSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')

    with self.argument_context('calendar user-calendar-view-calendar delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar user-calendar-view-calendar create-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-view-calendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar-view-calendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar-view-calendar creater-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar user-calendar-view-calendar creater-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-view-calendar get-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view-calendar get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view-calendar get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view-calendar getr-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view-calendar getr-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view-calendar list-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view-calendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view-calendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view-calendar listr-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view-calendar listr-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-calendar-view-calendar update-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-calendar-view-calendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-calendar-view-calendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-calendar-view-calendar updater-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar user-calendar-view-calendar updater-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-event delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar user-event create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar user-event create-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-event create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar user-event create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-event create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-event create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-event get-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event get-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event get-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event get-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event getr') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event list-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar user-event update-exception-occurrence') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-event update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar user-event update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-event update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-event update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-event updater') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('calendar_group_id', type=str, help='')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('hex_color', type=str, help='')
        c.argument('is_default_calendar', arg_type=get_three_state_flag(), help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='')
        c.argument('is_shared_with_me', arg_type=get_three_state_flag(), help='')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupUpdaterMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupUpdaterSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the calendar. '
                   'Read-only. Nullable.')

    with self.argument_context('calendar user-event-calendar delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar user-event-calendar create-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-event-calendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-event-calendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-event-calendar creater-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar user-event-calendar creater-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-event-calendar get-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event-calendar get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event-calendar get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event-calendar getr-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event-calendar getr-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event-calendar list-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event-calendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event-calendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event-calendar listr-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event-calendar listr-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar user-event-calendar update-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')

    with self.argument_context('calendar user-event-calendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar user-event-calendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar user-event-calendar updater-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar user-event-calendar updater-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('allow_new_time_proposals', arg_type=get_three_state_flag(), help='True if the meeting organizer '
                   'allows invitees to propose a new time when responding, false otherwise. Optional. Default is true.')
        c.argument('attendees', type=validate_file_or_dict, help='The collection of attendees for the event. Expected '
                   'value: json-string/@json-file.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str, help='The preview of the message associated with the event. It is in text '
                   'format.')
        c.argument('cancelled_occurrences', nargs='*', help='')
        c.argument('end', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(),
                   help='Set to true if the event has attachments.')
        c.argument('hide_attendees', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_all_day', arg_type=get_three_state_flag(), help='Set to true if the event lasts all day.')
        c.argument('is_cancelled', arg_type=get_three_state_flag(),
                   help='Set to true if the event has been canceled.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='')
        c.argument('is_online_meeting', arg_type=get_three_state_flag(), help='True if this event has online meeting '
                   'information, false otherwise. Default is false. Optional.')
        c.argument('is_organizer', arg_type=get_three_state_flag(), help='Set to true if the calendar owner (specified '
                   'by the owner property of the calendar) is the organizer of the event (specified by the organizer '
                   'property of the event). This also applies if a delegate organized the event on behalf of the '
                   'owner.')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='Set to true if an alert is set to remind '
                   'the user of the event.')
        c.argument('locations', type=validate_file_or_dict, help='The locations where the event is held or attended '
                   'from. The location and locations properties always correspond with each other. If you update the '
                   'location property, any prior locations in the locations collection would be removed and replaced '
                   'by the new location value. Expected value: json-string/@json-file.')
        c.argument('occurrence_id', type=str, help='')
        c.argument('online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                      'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('online_meeting_url', type=str, help='A URL for an online meeting. The property is set only when an '
                   'organizer specifies an event as an online meeting such as a Skype meeting. Read-only.')
        c.argument('original_end_time_zone', type=str, help='The end time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('original_start', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('original_start_time_zone', type=str, help='The start time zone that was set when the event was '
                   'created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in '
                   'desktop Outlook.')
        c.argument('reminder_minutes_before_start', type=int, help='The number of minutes before the event start time '
                   'that the reminder alert occurs.')
        c.argument('response_requested', arg_type=get_three_state_flag(), help='Default is true, which represents the '
                   'organizer would like an invitee to send a response to the event.')
        c.argument('response_status', action=AddResponseStatus, nargs='*', help='responseStatus')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('series_master_id', type=str, help='The ID for the recurring series master item, if this event is '
                   'part of a recurring series.')
        c.argument('show_as', arg_type=get_enum_type(['free', 'tentative', 'unknown', 'busy', 'oof',
                                                      'workingElsewhere']), help='')
        c.argument('start', action=AddEnd, nargs='*', help='dateTimeTimeZone')
        c.argument('subject', type=str, help='The text of the event\'s subject line.')
        c.argument('transaction_id', type=str, help='A custom identifier specified by a client app for the server to '
                   'avoid redundant POST operations in case of client retries to create the same event. This is useful '
                   'when low network connectivity causes the client to time out before receiving a response from the '
                   'server for the client\'s prior create-event request. After you set transactionId when creating an '
                   'event, you cannot change transactionId in a subsequent update. This property is only returned in a '
                   'response payload if an app has set it. Optional.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['singleInstance', 'occurrence', ''
                                                                             'exception', 'seriesMaster']), help='')
        c.argument('uid', type=str, help='')
        c.argument('web_link', type=str, help='The URL to open the event in Outlook on the web.Outlook on the web '
                   'opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web '
                   'prompts you to sign in.This URL can be accessed from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The collection of fileAttachment and '
                   'itemAttachment attachments for the event. Navigation property. Read-only. Nullable.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.')
        c.argument('exception_occurrences', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the event. Read-only. Nullable.')
        c.argument('instances', type=validate_file_or_dict, help='The instances of the event. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddCalendarGroupCreaterViewMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddCalendarGroupCreaterViewSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the event. '
                   'Read-only. Nullable.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')
        c.argument('organizer_email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('online_meeting_conference_id', type=str, help='The ID of the conference.')
        c.argument('online_meeting_join_url', type=str, help='The external link that launches the online meeting. This '
                   'is a URL that clients will launch into a browser and will redirect the user to join the meeting.')
        c.argument('online_meeting_phones', action=AddOnlineMeetingPhones, nargs='*', help='All of the phone numbers '
                   'associated with this conference.')
        c.argument('online_meeting_quick_dial', type=str, help='The pre-formatted quickdial for this call.')
        c.argument('online_meeting_toll_free_numbers', nargs='*', help='The toll free numbers that can be used to join '
                   'the conference.')
        c.argument('online_meeting_toll_number', type=str, help='The toll number that can be used to join the '
                   'conference.')
        c.argument('location_address', action=AddLocationAddress, nargs='*', help='physicalAddress')
        c.argument('location_coordinates', action=AddLocationCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('location_display_name', type=str, help='The name associated with the location.')
        c.argument('location_location_email_address', type=str, help='Optional email address of the location.')
        c.argument('location_location_type', arg_type=get_enum_type(['default', 'conferenceRoom', 'homeAddress', ''
                                                                     'businessAddress', 'geoCoordinates', ''
                                                                     'streetAddress', 'hotel', 'restaurant', ''
                                                                     'localBusiness', 'postalAddress']), help='')
        c.argument('location_location_uri', type=str, help='Optional URI representing the location.')
        c.argument('location_unique_id', type=str, help='For internal use only.')
        c.argument('location_unique_id_type', arg_type=get_enum_type(['unknown', 'locationStore', 'directory', ''
                                                                      'private', 'bing']), help='')
