# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class CommunicationOnlineMeetingOperations(object):
    """CommunicationOnlineMeetingOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~cloud_communications.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def create_or_get(
        self,
        chat_info=None,  # type: Optional["models.MicrosoftGraphChatInfo"]
        end_date_time=None,  # type: Optional[datetime.datetime]
        external_id=None,  # type: Optional[str]
        start_date_time=None,  # type: Optional[datetime.datetime]
        subject=None,  # type: Optional[str]
        attendees=None,  # type: Optional[List["models.MicrosoftGraphMeetingParticipantInfo"]]
        contributors=None,  # type: Optional[List["models.MicrosoftGraphMeetingParticipantInfo"]]
        organizer=None,  # type: Optional["models.MicrosoftGraphMeetingParticipantInfo"]
        producers=None,  # type: Optional[List["models.MicrosoftGraphMeetingParticipantInfo"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphOnlineMeeting"
        """Invoke action createOrGet.

        Invoke action createOrGet.

        :param chat_info: chatInfo.
        :type chat_info: ~cloud_communications.models.MicrosoftGraphChatInfo
        :param end_date_time:
        :type end_date_time: ~datetime.datetime
        :param external_id:
        :type external_id: str
        :param start_date_time:
        :type start_date_time: ~datetime.datetime
        :param subject:
        :type subject: str
        :param attendees:
        :type attendees: list[~cloud_communications.models.MicrosoftGraphMeetingParticipantInfo]
        :param contributors:
        :type contributors: list[~cloud_communications.models.MicrosoftGraphMeetingParticipantInfo]
        :param organizer: meetingParticipantInfo.
        :type organizer: ~cloud_communications.models.MicrosoftGraphMeetingParticipantInfo
        :param producers:
        :type producers: list[~cloud_communications.models.MicrosoftGraphMeetingParticipantInfo]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphOnlineMeeting, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphOnlineMeeting
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphOnlineMeeting"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.Paths1Pc6SxrCommunicationsOnlinemeetingsMicrosoftGraphCreateorgetPostRequestbodyContentApplicationJsonSchema(chat_info=chat_info, end_date_time=end_date_time, external_id=external_id, start_date_time=start_date_time, subject=subject, attendees=attendees, contributors=contributors, organizer=organizer, producers=producers)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_or_get.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'Paths1Pc6SxrCommunicationsOnlinemeetingsMicrosoftGraphCreateorgetPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphOnlineMeeting', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_or_get.metadata = {'url': '/communications/onlineMeetings/microsoft.graph.createOrGet'}  # type: ignore
