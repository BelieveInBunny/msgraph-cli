# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class CommunicationCallOperations(object):
    """CommunicationCallOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~cloud_communications.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_audio_routing_group(
        self,
        call_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum42"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum43"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.CollectionOfAudioRoutingGroup"
        """Get audioRoutingGroups from communications.

        Get audioRoutingGroups from communications.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~cloud_communications.models.Enum42]
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum43]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CollectionOfAudioRoutingGroup, or the result of cls(response)
        :rtype: ~cloud_communications.models.CollectionOfAudioRoutingGroup
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfAudioRoutingGroup"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.list_audio_routing_group.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if self._config.top is not None:
            query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
        if self._config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
        if self._config.search is not None:
            query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
        if self._config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
        if self._config.count is not None:
            query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
        if orderby is not None:
            query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('CollectionOfAudioRoutingGroup', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    list_audio_routing_group.metadata = {'url': '/communications/calls/{call-id}/audioRoutingGroups'}  # type: ignore

    def create_audio_routing_group(
        self,
        call_id,  # type: str
        id=None,  # type: Optional[str]
        routing_mode=None,  # type: Optional[Union[str, "models.MicrosoftGraphRoutingMode"]]
        sources=None,  # type: Optional[List[str]]
        receivers=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphAudioRoutingGroup"
        """Create new navigation property to audioRoutingGroups for communications.

        Create new navigation property to audioRoutingGroups for communications.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param id: Read-only.
        :type id: str
        :param routing_mode:
        :type routing_mode: str or ~cloud_communications.models.MicrosoftGraphRoutingMode
        :param sources:
        :type sources: list[str]
        :param receivers:
        :type receivers: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAudioRoutingGroup, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphAudioRoutingGroup
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAudioRoutingGroup"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphAudioRoutingGroup(id=id, routing_mode=routing_mode, sources=sources, receivers=receivers)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_audio_routing_group.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphAudioRoutingGroup')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAudioRoutingGroup', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_audio_routing_group.metadata = {'url': '/communications/calls/{call-id}/audioRoutingGroups'}  # type: ignore

    def get_audio_routing_group(
        self,
        call_id,  # type: str
        audio_routing_group_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum44"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphAudioRoutingGroup"
        """Get audioRoutingGroups from communications.

        Get audioRoutingGroups from communications.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param audio_routing_group_id: key: audioRoutingGroup-id of audioRoutingGroup.
        :type audio_routing_group_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum44]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAudioRoutingGroup, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphAudioRoutingGroup
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAudioRoutingGroup"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_audio_routing_group.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
            'audioRoutingGroup-id': self._serialize.url("audio_routing_group_id", audio_routing_group_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAudioRoutingGroup', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_audio_routing_group.metadata = {'url': '/communications/calls/{call-id}/audioRoutingGroups/{audioRoutingGroup-id}'}  # type: ignore

    def update_audio_routing_group(
        self,
        call_id,  # type: str
        audio_routing_group_id,  # type: str
        id=None,  # type: Optional[str]
        routing_mode=None,  # type: Optional[Union[str, "models.MicrosoftGraphRoutingMode"]]
        sources=None,  # type: Optional[List[str]]
        receivers=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property audioRoutingGroups in communications.

        Update the navigation property audioRoutingGroups in communications.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param audio_routing_group_id: key: audioRoutingGroup-id of audioRoutingGroup.
        :type audio_routing_group_id: str
        :param id: Read-only.
        :type id: str
        :param routing_mode:
        :type routing_mode: str or ~cloud_communications.models.MicrosoftGraphRoutingMode
        :param sources:
        :type sources: list[str]
        :param receivers:
        :type receivers: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphAudioRoutingGroup(id=id, routing_mode=routing_mode, sources=sources, receivers=receivers)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_audio_routing_group.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
            'audioRoutingGroup-id': self._serialize.url("audio_routing_group_id", audio_routing_group_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphAudioRoutingGroup')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_audio_routing_group.metadata = {'url': '/communications/calls/{call-id}/audioRoutingGroups/{audioRoutingGroup-id}'}  # type: ignore

    def answer(
        self,
        call_id,  # type: str
        callback_uri=None,  # type: Optional[str]
        accepted_modalities=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphModality"]]]
        remove_from_default_audio_group=None,  # type: Optional[bool]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action answer.

        Invoke action answer.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param callback_uri:
        :type callback_uri: str
        :param accepted_modalities:
        :type accepted_modalities: list[str or ~cloud_communications.models.MicrosoftGraphModality]
        :param remove_from_default_audio_group:
        :type remove_from_default_audio_group: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsQvpqn4CommunicationsCallsCallIdMicrosoftGraphAnswerPostRequestbodyContentApplicationJsonSchema(callback_uri=callback_uri, accepted_modalities=accepted_modalities, remove_from_default_audio_group=remove_from_default_audio_group)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.answer.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsQvpqn4CommunicationsCallsCallIdMicrosoftGraphAnswerPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    answer.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.answer'}  # type: ignore

    def cancel_media_processing(
        self,
        call_id,  # type: str
        client_context=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphCommsOperation"
        """Invoke action cancelMediaProcessing.

        Invoke action cancelMediaProcessing.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param client_context:
        :type client_context: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCommsOperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphCommsOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCommsOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsYp37FjCommunicationsCallsCallIdMicrosoftGraphCancelmediaprocessingPostRequestbodyContentApplicationJsonSchema(client_context=client_context)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.cancel_media_processing.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsYp37FjCommunicationsCallsCallIdMicrosoftGraphCancelmediaprocessingPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCommsOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    cancel_media_processing.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.cancelMediaProcessing'}  # type: ignore

    def change_screen_sharing_role(
        self,
        call_id,  # type: str
        role=None,  # type: Optional[Union[str, "models.MicrosoftGraphScreenSharingRole"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action changeScreenSharingRole.

        Invoke action changeScreenSharingRole.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param role:
        :type role: str or ~cloud_communications.models.MicrosoftGraphScreenSharingRole
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsOj95ZpCommunicationsCallsCallIdMicrosoftGraphChangescreensharingrolePostRequestbodyContentApplicationJsonSchema(role=role)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.change_screen_sharing_role.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsOj95ZpCommunicationsCallsCallIdMicrosoftGraphChangescreensharingrolePostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    change_screen_sharing_role.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.changeScreenSharingRole'}  # type: ignore

    def keep_alive(
        self,
        call_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action keepAlive.

        Invoke action keepAlive.

        :param call_id: key: call-id of call.
        :type call_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.keep_alive.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    keep_alive.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.keepAlive'}  # type: ignore

    def mute(
        self,
        call_id,  # type: str
        client_context=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphCommsOperation"
        """Invoke action mute.

        Invoke action mute.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param client_context:
        :type client_context: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCommsOperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphCommsOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCommsOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths13Zt223CommunicationsCallsCallIdMicrosoftGraphMutePostRequestbodyContentApplicationJsonSchema(client_context=client_context)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.mute.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths13Zt223CommunicationsCallsCallIdMicrosoftGraphMutePostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCommsOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    mute.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.mute'}  # type: ignore

    def play_prompt(
        self,
        call_id,  # type: str
        prompts=None,  # type: Optional[List[object]]
        loop=False,  # type: Optional[bool]
        client_context=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphPlayPromptOperation"
        """Invoke action playPrompt.

        Invoke action playPrompt.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param prompts:
        :type prompts: list[object]
        :param loop:
        :type loop: bool
        :param client_context:
        :type client_context: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPlayPromptOperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphPlayPromptOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPlayPromptOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths1Gzqcv2CommunicationsCallsCallIdMicrosoftGraphPlaypromptPostRequestbodyContentApplicationJsonSchema(prompts=prompts, loop=loop, client_context=client_context)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.play_prompt.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths1Gzqcv2CommunicationsCallsCallIdMicrosoftGraphPlaypromptPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPlayPromptOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    play_prompt.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.playPrompt'}  # type: ignore

    def record(
        self,
        call_id,  # type: str
        prompts=None,  # type: Optional[List[object]]
        barge_in_allowed=False,  # type: Optional[bool]
        initial_silence_timeout_in_seconds=None,  # type: Optional[int]
        max_silence_timeout_in_seconds=None,  # type: Optional[int]
        max_record_duration_in_seconds=None,  # type: Optional[int]
        play_beep=False,  # type: Optional[bool]
        stream_while_recording=False,  # type: Optional[bool]
        stop_tones=None,  # type: Optional[List[str]]
        client_context=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphRecordOperation"
        """Invoke action record.

        Invoke action record.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param prompts:
        :type prompts: list[object]
        :param barge_in_allowed:
        :type barge_in_allowed: bool
        :param initial_silence_timeout_in_seconds:
        :type initial_silence_timeout_in_seconds: int
        :param max_silence_timeout_in_seconds:
        :type max_silence_timeout_in_seconds: int
        :param max_record_duration_in_seconds:
        :type max_record_duration_in_seconds: int
        :param play_beep:
        :type play_beep: bool
        :param stream_while_recording:
        :type stream_while_recording: bool
        :param stop_tones:
        :type stop_tones: list[str]
        :param client_context:
        :type client_context: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphRecordOperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphRecordOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphRecordOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths1Mdqe66CommunicationsCallsCallIdMicrosoftGraphRecordPostRequestbodyContentApplicationJsonSchema(prompts=prompts, barge_in_allowed=barge_in_allowed, initial_silence_timeout_in_seconds=initial_silence_timeout_in_seconds, max_silence_timeout_in_seconds=max_silence_timeout_in_seconds, max_record_duration_in_seconds=max_record_duration_in_seconds, play_beep=play_beep, stream_while_recording=stream_while_recording, stop_tones=stop_tones, client_context=client_context)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.record.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths1Mdqe66CommunicationsCallsCallIdMicrosoftGraphRecordPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphRecordOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    record.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.record'}  # type: ignore

    def record_response(
        self,
        call_id,  # type: str
        prompts=None,  # type: Optional[List[object]]
        barge_in_allowed=False,  # type: Optional[bool]
        initial_silence_timeout_in_seconds=None,  # type: Optional[int]
        max_silence_timeout_in_seconds=None,  # type: Optional[int]
        max_record_duration_in_seconds=None,  # type: Optional[int]
        play_beep=False,  # type: Optional[bool]
        stream_while_recording=False,  # type: Optional[bool]
        stop_tones=None,  # type: Optional[List[str]]
        client_context=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphRecordOperation"
        """Invoke action recordResponse.

        Invoke action recordResponse.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param prompts:
        :type prompts: list[object]
        :param barge_in_allowed:
        :type barge_in_allowed: bool
        :param initial_silence_timeout_in_seconds:
        :type initial_silence_timeout_in_seconds: int
        :param max_silence_timeout_in_seconds:
        :type max_silence_timeout_in_seconds: int
        :param max_record_duration_in_seconds:
        :type max_record_duration_in_seconds: int
        :param play_beep:
        :type play_beep: bool
        :param stream_while_recording:
        :type stream_while_recording: bool
        :param stop_tones:
        :type stop_tones: list[str]
        :param client_context:
        :type client_context: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphRecordOperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphRecordOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphRecordOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths14Wb7KqCommunicationsCallsCallIdMicrosoftGraphRecordresponsePostRequestbodyContentApplicationJsonSchema(prompts=prompts, barge_in_allowed=barge_in_allowed, initial_silence_timeout_in_seconds=initial_silence_timeout_in_seconds, max_silence_timeout_in_seconds=max_silence_timeout_in_seconds, max_record_duration_in_seconds=max_record_duration_in_seconds, play_beep=play_beep, stream_while_recording=stream_while_recording, stop_tones=stop_tones, client_context=client_context)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.record_response.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths14Wb7KqCommunicationsCallsCallIdMicrosoftGraphRecordresponsePostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphRecordOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    record_response.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.recordResponse'}  # type: ignore

    def redirect(
        self,
        call_id,  # type: str
        targets=None,  # type: Optional[List["models.MicrosoftGraphInvitationParticipantInfo"]]
        target_disposition=None,  # type: Optional[Union[str, "models.MicrosoftGraphCallDisposition"]]
        timeout=None,  # type: Optional[int]
        mask_callee=False,  # type: Optional[bool]
        mask_caller=False,  # type: Optional[bool]
        callback_uri=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action redirect.

        Invoke action redirect.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param targets:
        :type targets: list[~cloud_communications.models.MicrosoftGraphInvitationParticipantInfo]
        :param target_disposition:
        :type target_disposition: str or ~cloud_communications.models.MicrosoftGraphCallDisposition
        :param timeout:
        :type timeout: int
        :param mask_callee:
        :type mask_callee: bool
        :param mask_caller:
        :type mask_caller: bool
        :param callback_uri:
        :type callback_uri: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths183Gi8UCommunicationsCallsCallIdMicrosoftGraphRedirectPostRequestbodyContentApplicationJsonSchema(targets=targets, target_disposition=target_disposition, timeout=timeout, mask_callee=mask_callee, mask_caller=mask_caller, callback_uri=callback_uri)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.redirect.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths183Gi8UCommunicationsCallsCallIdMicrosoftGraphRedirectPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    redirect.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.redirect'}  # type: ignore

    def reject(
        self,
        call_id,  # type: str
        reason=None,  # type: Optional[Union[str, "models.MicrosoftGraphRejectReason"]]
        callback_uri=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action reject.

        Invoke action reject.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param reason:
        :type reason: str or ~cloud_communications.models.MicrosoftGraphRejectReason
        :param callback_uri:
        :type callback_uri: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths4QrghdCommunicationsCallsCallIdMicrosoftGraphRejectPostRequestbodyContentApplicationJsonSchema(reason=reason, callback_uri=callback_uri)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.reject.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths4QrghdCommunicationsCallsCallIdMicrosoftGraphRejectPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    reject.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.reject'}  # type: ignore

    def subscribe_to_tone(
        self,
        call_id,  # type: str
        client_context=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphCommsOperation"
        """Invoke action subscribeToTone.

        Invoke action subscribeToTone.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param client_context:
        :type client_context: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCommsOperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphCommsOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCommsOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsXyl6WiCommunicationsCallsCallIdMicrosoftGraphSubscribetotonePostRequestbodyContentApplicationJsonSchema(client_context=client_context)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.subscribe_to_tone.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsXyl6WiCommunicationsCallsCallIdMicrosoftGraphSubscribetotonePostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCommsOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    subscribe_to_tone.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.subscribeToTone'}  # type: ignore

    def transfer(
        self,
        call_id,  # type: str
        endpoint_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphEndpointType"]]
        replaces_call_id=None,  # type: Optional[str]
        id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        microsoft_graph_identity_id=None,  # type: Optional[str]
        microsoft_graph_identity_display_name=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        display_name1=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action transfer.

        Invoke action transfer.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param endpoint_type:
        :type endpoint_type: str or ~cloud_communications.models.MicrosoftGraphEndpointType
        :param replaces_call_id: Optional. The call which the target identity is currently a part of.
         This call will be dropped once the participant is added.
        :type replaces_call_id: str
        :param id: Unique identifier for the identity.
        :type id: str
        :param display_name: The identity's display name. Note that this may not always be available or
         up to date. For example, if a user changes their display name, the API may show the new value
         in a future response, but the items associated with the user won't show up as having changed
         when using delta.
        :type display_name: str
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths4Zbm7LCommunicationsCallsCallIdMicrosoftGraphTransferPostRequestbodyContentApplicationJsonSchema(endpoint_type=endpoint_type, replaces_call_id=replaces_call_id, id_transfer_target_identity_user_id=id, display_name_transfer_target_identity_user_display_name=display_name, id_transfer_target_identity_device_id=microsoft_graph_identity_id, display_name_transfer_target_identity_device_display_name=microsoft_graph_identity_display_name, id_transfer_target_identity_application_id=id1, display_name_transfer_target_identity_application_display_name=display_name1)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.transfer.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths4Zbm7LCommunicationsCallsCallIdMicrosoftGraphTransferPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    transfer.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.transfer'}  # type: ignore

    def unmute(
        self,
        call_id,  # type: str
        client_context=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphCommsOperation"
        """Invoke action unmute.

        Invoke action unmute.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param client_context:
        :type client_context: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCommsOperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphCommsOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCommsOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths1X7BvttCommunicationsCallsCallIdMicrosoftGraphUnmutePostRequestbodyContentApplicationJsonSchema(client_context=client_context)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.unmute.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths1X7BvttCommunicationsCallsCallIdMicrosoftGraphUnmutePostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCommsOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    unmute.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.unmute'}  # type: ignore

    def update_recording_status(
        self,
        call_id,  # type: str
        status=None,  # type: Optional[Union[str, "models.MicrosoftGraphRecordingStatus"]]
        client_context=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphCommsOperation"
        """Invoke action updateRecordingStatus.

        Invoke action updateRecordingStatus.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param status:
        :type status: str or ~cloud_communications.models.MicrosoftGraphRecordingStatus
        :param client_context:
        :type client_context: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCommsOperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphCommsOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCommsOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsEipedyCommunicationsCallsCallIdMicrosoftGraphUpdaterecordingstatusPostRequestbodyContentApplicationJsonSchema(status=status, client_context=client_context)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_recording_status.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsEipedyCommunicationsCallsCallIdMicrosoftGraphUpdaterecordingstatusPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCommsOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    update_recording_status.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.updateRecordingStatus'}  # type: ignore

    def list_operation(
        self,
        call_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum50"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum51"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.CollectionOfCommsOperation"
        """Get operations from communications.

        Get operations from communications.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~cloud_communications.models.Enum50]
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum51]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CollectionOfCommsOperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.CollectionOfCommsOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfCommsOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.list_operation.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if self._config.top is not None:
            query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
        if self._config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
        if self._config.search is not None:
            query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
        if self._config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
        if self._config.count is not None:
            query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
        if orderby is not None:
            query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('CollectionOfCommsOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    list_operation.metadata = {'url': '/communications/calls/{call-id}/operations'}  # type: ignore

    def create_operation(
        self,
        call_id,  # type: str
        id=None,  # type: Optional[str]
        status=None,  # type: Optional[Union[str, "models.MicrosoftGraphOperationStatus"]]
        client_context=None,  # type: Optional[str]
        code=None,  # type: Optional[int]
        subcode=None,  # type: Optional[int]
        message=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphCommsOperation"
        """Create new navigation property to operations for communications.

        Create new navigation property to operations for communications.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param id: Read-only.
        :type id: str
        :param status:
        :type status: str or ~cloud_communications.models.MicrosoftGraphOperationStatus
        :param client_context: Unique Client Context string. Max limit is 256 chars.
        :type client_context: str
        :param code:
        :type code: int
        :param subcode:
        :type subcode: int
        :param message:
        :type message: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCommsOperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphCommsOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCommsOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphCommsOperation(id=id, status=status, client_context=client_context, code=code, subcode=subcode, message=message)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_operation.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphCommsOperation')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCommsOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_operation.metadata = {'url': '/communications/calls/{call-id}/operations'}  # type: ignore

    def get_operation(
        self,
        call_id,  # type: str
        comms_operation_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum52"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphCommsOperation"
        """Get operations from communications.

        Get operations from communications.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param comms_operation_id: key: commsOperation-id of commsOperation.
        :type comms_operation_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum52]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCommsOperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphCommsOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCommsOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_operation.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
            'commsOperation-id': self._serialize.url("comms_operation_id", comms_operation_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCommsOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_operation.metadata = {'url': '/communications/calls/{call-id}/operations/{commsOperation-id}'}  # type: ignore

    def update_operation(
        self,
        call_id,  # type: str
        comms_operation_id,  # type: str
        id=None,  # type: Optional[str]
        status=None,  # type: Optional[Union[str, "models.MicrosoftGraphOperationStatus"]]
        client_context=None,  # type: Optional[str]
        code=None,  # type: Optional[int]
        subcode=None,  # type: Optional[int]
        message=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property operations in communications.

        Update the navigation property operations in communications.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param comms_operation_id: key: commsOperation-id of commsOperation.
        :type comms_operation_id: str
        :param id: Read-only.
        :type id: str
        :param status:
        :type status: str or ~cloud_communications.models.MicrosoftGraphOperationStatus
        :param client_context: Unique Client Context string. Max limit is 256 chars.
        :type client_context: str
        :param code:
        :type code: int
        :param subcode:
        :type subcode: int
        :param message:
        :type message: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphCommsOperation(id=id, status=status, client_context=client_context, code=code, subcode=subcode, message=message)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_operation.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
            'commsOperation-id': self._serialize.url("comms_operation_id", comms_operation_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphCommsOperation')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_operation.metadata = {'url': '/communications/calls/{call-id}/operations/{commsOperation-id}'}  # type: ignore

    def list_participant(
        self,
        call_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum53"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum54"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.CollectionOfParticipant"
        """Get participants from communications.

        Get participants from communications.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~cloud_communications.models.Enum53]
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum54]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CollectionOfParticipant, or the result of cls(response)
        :rtype: ~cloud_communications.models.CollectionOfParticipant
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfParticipant"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.list_participant.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if self._config.top is not None:
            query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
        if self._config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
        if self._config.search is not None:
            query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
        if self._config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
        if self._config.count is not None:
            query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
        if orderby is not None:
            query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('CollectionOfParticipant', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    list_participant.metadata = {'url': '/communications/calls/{call-id}/participants'}  # type: ignore

    def create_participant(
        self,
        call_id,  # type: str
        id=None,  # type: Optional[str]
        media_streams=None,  # type: Optional[List["models.MicrosoftGraphMediaStream"]]
        metadata=None,  # type: Optional[str]
        is_muted=None,  # type: Optional[bool]
        is_in_lobby=None,  # type: Optional[bool]
        recording_status=None,  # type: Optional[Union[str, "models.MicrosoftGraphRecordingStatus"]]
        initiated_by=None,  # type: Optional["models.MicrosoftGraphParticipantInfo"]
        initiator=None,  # type: Optional["models.MicrosoftGraphIdentitySet"]
        identity=None,  # type: Optional["models.MicrosoftGraphIdentitySet"]
        endpoint_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphEndpointType"]]
        region=None,  # type: Optional[str]
        language_id=None,  # type: Optional[str]
        country_code=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphParticipant"
        """Create new navigation property to participants for communications.

        Create new navigation property to participants for communications.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param id: Read-only.
        :type id: str
        :param media_streams: The list of media streams.
        :type media_streams: list[~cloud_communications.models.MicrosoftGraphMediaStream]
        :param metadata:
        :type metadata: str
        :param is_muted: true if the participant is muted (client or server muted).
        :type is_muted: bool
        :param is_in_lobby: true if the participant is in lobby.
        :type is_in_lobby: bool
        :param recording_status:
        :type recording_status: str or ~cloud_communications.models.MicrosoftGraphRecordingStatus
        :param initiated_by: participantInfo.
        :type initiated_by: ~cloud_communications.models.MicrosoftGraphParticipantInfo
        :param initiator: identitySet.
        :type initiator: ~cloud_communications.models.MicrosoftGraphIdentitySet
        :param identity: identitySet.
        :type identity: ~cloud_communications.models.MicrosoftGraphIdentitySet
        :param endpoint_type:
        :type endpoint_type: str or ~cloud_communications.models.MicrosoftGraphEndpointType
        :param region: The home region of the participant. This can be a country, a continent, or a
         larger geographic region. This does not change based on the participant's current physical
         location. Read-only.
        :type region: str
        :param language_id: The language culture string. Read-only.
        :type language_id: str
        :param country_code:
        :type country_code: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphParticipant, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphParticipant
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphParticipant"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphParticipant(id=id, media_streams=media_streams, metadata=metadata, is_muted=is_muted, is_in_lobby=is_in_lobby, recording_status=recording_status, initiated_by=initiated_by, initiator=initiator, identity=identity, endpoint_type=endpoint_type, region=region, language_id=language_id, country_code=country_code)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_participant.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphParticipant')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphParticipant', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_participant.metadata = {'url': '/communications/calls/{call-id}/participants'}  # type: ignore

    def get_participant(
        self,
        call_id,  # type: str
        participant_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum55"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphParticipant"
        """Get participants from communications.

        Get participants from communications.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param participant_id: key: participant-id of participant.
        :type participant_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum55]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphParticipant, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphParticipant
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphParticipant"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_participant.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
            'participant-id': self._serialize.url("participant_id", participant_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphParticipant', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_participant.metadata = {'url': '/communications/calls/{call-id}/participants/{participant-id}'}  # type: ignore

    def update_participant(
        self,
        call_id,  # type: str
        participant_id,  # type: str
        id=None,  # type: Optional[str]
        media_streams=None,  # type: Optional[List["models.MicrosoftGraphMediaStream"]]
        metadata=None,  # type: Optional[str]
        is_muted=None,  # type: Optional[bool]
        is_in_lobby=None,  # type: Optional[bool]
        recording_status=None,  # type: Optional[Union[str, "models.MicrosoftGraphRecordingStatus"]]
        initiated_by=None,  # type: Optional["models.MicrosoftGraphParticipantInfo"]
        initiator=None,  # type: Optional["models.MicrosoftGraphIdentitySet"]
        identity=None,  # type: Optional["models.MicrosoftGraphIdentitySet"]
        endpoint_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphEndpointType"]]
        region=None,  # type: Optional[str]
        language_id=None,  # type: Optional[str]
        country_code=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property participants in communications.

        Update the navigation property participants in communications.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param participant_id: key: participant-id of participant.
        :type participant_id: str
        :param id: Read-only.
        :type id: str
        :param media_streams: The list of media streams.
        :type media_streams: list[~cloud_communications.models.MicrosoftGraphMediaStream]
        :param metadata:
        :type metadata: str
        :param is_muted: true if the participant is muted (client or server muted).
        :type is_muted: bool
        :param is_in_lobby: true if the participant is in lobby.
        :type is_in_lobby: bool
        :param recording_status:
        :type recording_status: str or ~cloud_communications.models.MicrosoftGraphRecordingStatus
        :param initiated_by: participantInfo.
        :type initiated_by: ~cloud_communications.models.MicrosoftGraphParticipantInfo
        :param initiator: identitySet.
        :type initiator: ~cloud_communications.models.MicrosoftGraphIdentitySet
        :param identity: identitySet.
        :type identity: ~cloud_communications.models.MicrosoftGraphIdentitySet
        :param endpoint_type:
        :type endpoint_type: str or ~cloud_communications.models.MicrosoftGraphEndpointType
        :param region: The home region of the participant. This can be a country, a continent, or a
         larger geographic region. This does not change based on the participant's current physical
         location. Read-only.
        :type region: str
        :param language_id: The language culture string. Read-only.
        :type language_id: str
        :param country_code:
        :type country_code: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphParticipant(id=id, media_streams=media_streams, metadata=metadata, is_muted=is_muted, is_in_lobby=is_in_lobby, recording_status=recording_status, initiated_by=initiated_by, initiator=initiator, identity=identity, endpoint_type=endpoint_type, region=region, language_id=language_id, country_code=country_code)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_participant.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
            'participant-id': self._serialize.url("participant_id", participant_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphParticipant')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_participant.metadata = {'url': '/communications/calls/{call-id}/participants/{participant-id}'}  # type: ignore
