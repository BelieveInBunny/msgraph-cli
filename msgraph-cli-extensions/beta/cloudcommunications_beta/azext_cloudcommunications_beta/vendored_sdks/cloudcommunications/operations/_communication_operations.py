# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class CommunicationOperations(object):
    """CommunicationOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~cloud_communications.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_call_record(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Get5ItemsItem"]]]
        select=None,  # type: Optional[List[Union[str, "models.Get6ItemsItem"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get7ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.CollectionOfCallRecord"
        """Get callRecords from communications.

        Get callRecords from communications.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~cloud_communications.models.Get5ItemsItem]
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Get6ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str or ~cloud_communications.models.Get7ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CollectionOfCallRecord, or the result of cls(response)
        :rtype: ~cloud_communications.models.CollectionOfCallRecord
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfCallRecord"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.list_call_record.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if self._config.top is not None:
            query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
        if self._config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
        if self._config.search is not None:
            query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
        if self._config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
        if self._config.count is not None:
            query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
        if orderby is not None:
            query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('CollectionOfCallRecord', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    list_call_record.metadata = {'url': '/communications/callRecords'}  # type: ignore

    def create_call_record(
        self,
        id=None,  # type: Optional[str]
        version=None,  # type: Optional[int]
        type=None,  # type: Optional[Union[str, "models.MicrosoftGraphCallRecordsCallType"]]
        modalities=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphCallRecordsModality"]]]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        start_date_time=None,  # type: Optional[datetime.datetime]
        end_date_time=None,  # type: Optional[datetime.datetime]
        participants=None,  # type: Optional[List["models.MicrosoftGraphIdentitySet"]]
        join_web_url=None,  # type: Optional[str]
        sessions=None,  # type: Optional[List["models.MicrosoftGraphCallRecordsSession"]]
        microsoft_graph_identity_id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        microsoft_graph_identity_display_name=None,  # type: Optional[str]
        id2=None,  # type: Optional[str]
        display_name1=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphCallRecordsCallRecord"
        """Create new navigation property to callRecords for communications.

        Create new navigation property to callRecords for communications.

        :param id: Read-only.
        :type id: str
        :param version:
        :type version: long
        :param type:
        :type type: str or ~cloud_communications.models.MicrosoftGraphCallRecordsCallType
        :param modalities:
        :type modalities: list[str or ~cloud_communications.models.MicrosoftGraphCallRecordsModality]
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param start_date_time:
        :type start_date_time: ~datetime.datetime
        :param end_date_time:
        :type end_date_time: ~datetime.datetime
        :param participants:
        :type participants: list[~cloud_communications.models.MicrosoftGraphIdentitySet]
        :param join_web_url:
        :type join_web_url: str
        :param sessions:
        :type sessions: list[~cloud_communications.models.MicrosoftGraphCallRecordsSession]
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param display_name: The identity's display name. Note that this may not always be available or
         up to date. For example, if a user changes their display name, the API may show the new value
         in a future response, but the items associated with the user won't show up as having changed
         when using delta.
        :type display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCallRecordsCallRecord, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphCallRecordsCallRecord
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCallRecordsCallRecord"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphCallRecordsCallRecord(id=id, version=version, type=type, modalities=modalities, last_modified_date_time=last_modified_date_time, start_date_time=start_date_time, end_date_time=end_date_time, participants=participants, join_web_url=join_web_url, sessions=sessions, id_organizer_user_id=microsoft_graph_identity_id, display_name_organizer_user_display_name=display_name, id_organizer_device_id=id1, display_name_organizer_device_display_name=microsoft_graph_identity_display_name, id_organizer_application_id=id2, display_name_organizer_application_display_name=display_name1)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_call_record.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphCallRecordsCallRecord')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCallRecordsCallRecord', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_call_record.metadata = {'url': '/communications/callRecords'}  # type: ignore

    def get_call_record(
        self,
        call_record_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum27"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get2ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphCallRecordsCallRecord"
        """Get callRecords from communications.

        Get callRecords from communications.

        :param call_record_id: key: callRecord-id of callRecord.
        :type call_record_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum27]
        :param expand: Expand related entities.
        :type expand: list[str or ~cloud_communications.models.Get2ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCallRecordsCallRecord, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphCallRecordsCallRecord
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCallRecordsCallRecord"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_call_record.metadata['url']  # type: ignore
        path_format_arguments = {
            'callRecord-id': self._serialize.url("call_record_id", call_record_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCallRecordsCallRecord', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_call_record.metadata = {'url': '/communications/callRecords/{callRecord-id}'}  # type: ignore

    def update_call_record(
        self,
        call_record_id,  # type: str
        id=None,  # type: Optional[str]
        version=None,  # type: Optional[int]
        type=None,  # type: Optional[Union[str, "models.MicrosoftGraphCallRecordsCallType"]]
        modalities=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphCallRecordsModality"]]]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        start_date_time=None,  # type: Optional[datetime.datetime]
        end_date_time=None,  # type: Optional[datetime.datetime]
        participants=None,  # type: Optional[List["models.MicrosoftGraphIdentitySet"]]
        join_web_url=None,  # type: Optional[str]
        sessions=None,  # type: Optional[List["models.MicrosoftGraphCallRecordsSession"]]
        microsoft_graph_identity_id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        microsoft_graph_identity_display_name=None,  # type: Optional[str]
        id2=None,  # type: Optional[str]
        display_name1=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property callRecords in communications.

        Update the navigation property callRecords in communications.

        :param call_record_id: key: callRecord-id of callRecord.
        :type call_record_id: str
        :param id: Read-only.
        :type id: str
        :param version:
        :type version: long
        :param type:
        :type type: str or ~cloud_communications.models.MicrosoftGraphCallRecordsCallType
        :param modalities:
        :type modalities: list[str or ~cloud_communications.models.MicrosoftGraphCallRecordsModality]
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param start_date_time:
        :type start_date_time: ~datetime.datetime
        :param end_date_time:
        :type end_date_time: ~datetime.datetime
        :param participants:
        :type participants: list[~cloud_communications.models.MicrosoftGraphIdentitySet]
        :param join_web_url:
        :type join_web_url: str
        :param sessions:
        :type sessions: list[~cloud_communications.models.MicrosoftGraphCallRecordsSession]
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param display_name: The identity's display name. Note that this may not always be available or
         up to date. For example, if a user changes their display name, the API may show the new value
         in a future response, but the items associated with the user won't show up as having changed
         when using delta.
        :type display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphCallRecordsCallRecord(id=id, version=version, type=type, modalities=modalities, last_modified_date_time=last_modified_date_time, start_date_time=start_date_time, end_date_time=end_date_time, participants=participants, join_web_url=join_web_url, sessions=sessions, id_organizer_user_id=microsoft_graph_identity_id, display_name_organizer_user_display_name=display_name, id_organizer_device_id=id1, display_name_organizer_device_display_name=microsoft_graph_identity_display_name, id_organizer_application_id=id2, display_name_organizer_application_display_name=display_name1)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_call_record.metadata['url']  # type: ignore
        path_format_arguments = {
            'callRecord-id': self._serialize.url("call_record_id", call_record_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphCallRecordsCallRecord')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_call_record.metadata = {'url': '/communications/callRecords/{callRecord-id}'}  # type: ignore

    def list_call(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum37"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum38"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum39"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.CollectionOfCall"
        """Get calls from communications.

        Get calls from communications.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~cloud_communications.models.Enum37]
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum38]
        :param expand: Expand related entities.
        :type expand: list[str or ~cloud_communications.models.Enum39]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CollectionOfCall, or the result of cls(response)
        :rtype: ~cloud_communications.models.CollectionOfCall
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfCall"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.list_call.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if self._config.top is not None:
            query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
        if self._config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
        if self._config.search is not None:
            query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
        if self._config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
        if self._config.count is not None:
            query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
        if orderby is not None:
            query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('CollectionOfCall', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    list_call.metadata = {'url': '/communications/calls'}  # type: ignore

    def create_call(
        self,
        id=None,  # type: Optional[str]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphCallState"]]
        result_info=None,  # type: Optional["models.MicrosoftGraphResultInfo"]
        termination_reason=None,  # type: Optional[str]
        direction=None,  # type: Optional[Union[str, "models.MicrosoftGraphCallDirection"]]
        ringing_timeout_in_seconds=None,  # type: Optional[int]
        subject=None,  # type: Optional[str]
        callback_uri=None,  # type: Optional[str]
        call_routes=None,  # type: Optional[List["models.MicrosoftGraphCallRoute"]]
        targets=None,  # type: Optional[List["models.MicrosoftGraphInvitationParticipantInfo"]]
        requested_modalities=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphModality"]]]
        active_modalities=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphModality"]]]
        chat_info=None,  # type: Optional["models.MicrosoftGraphChatInfo"]
        call_options=None,  # type: Optional[object]
        meeting_capability=None,  # type: Optional["models.MicrosoftGraphMeetingCapability"]
        routing_policies=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphRoutingPolicy"]]]
        tenant_id=None,  # type: Optional[str]
        my_participant_id=None,  # type: Optional[str]
        tone_info=None,  # type: Optional["models.MicrosoftGraphToneInfo"]
        participants=None,  # type: Optional[List["models.MicrosoftGraphParticipant"]]
        audio_routing_groups=None,  # type: Optional[List["models.MicrosoftGraphAudioRoutingGroup"]]
        operations=None,  # type: Optional[List["models.MicrosoftGraphCommsOperation"]]
        source_participant_id=None,  # type: Optional[str]
        observed_participant_id=None,  # type: Optional[str]
        on_behalf_of=None,  # type: Optional["models.MicrosoftGraphIdentitySet"]
        transferor=None,  # type: Optional["models.MicrosoftGraphIdentitySet"]
        allow_conversation_without_host=None,  # type: Optional[bool]
        remove_from_default_audio_group=None,  # type: Optional[bool]
        identity=None,  # type: Optional["models.MicrosoftGraphIdentitySet"]
        endpoint_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphEndpointType"]]
        region=None,  # type: Optional[str]
        language_id=None,  # type: Optional[str]
        country_code=None,  # type: Optional[str]
        microsoft_graph_identity_set_identity=None,  # type: Optional["models.MicrosoftGraphIdentitySet"]
        microsoft_graph_endpoint_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphEndpointType"]]
        microsoft_graph_participant_info_region=None,  # type: Optional[str]
        microsoft_graph_participant_info_language_id=None,  # type: Optional[str]
        microsoft_graph_participant_info_country_code=None,  # type: Optional[str]
        audio=None,  # type: Optional[Union[str, "models.MicrosoftGraphMediaState"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphCall"
        """Create new navigation property to calls for communications.

        Create new navigation property to calls for communications.

        :param id: Read-only.
        :type id: str
        :param state:
        :type state: str or ~cloud_communications.models.MicrosoftGraphCallState
        :param result_info: ResultInfo.
        :type result_info: ~cloud_communications.models.MicrosoftGraphResultInfo
        :param termination_reason:
        :type termination_reason: str
        :param direction:
        :type direction: str or ~cloud_communications.models.MicrosoftGraphCallDirection
        :param ringing_timeout_in_seconds:
        :type ringing_timeout_in_seconds: int
        :param subject: The subject of the conversation.
        :type subject: str
        :param callback_uri: The callback URL on which callbacks will be delivered. Must be https.
        :type callback_uri: str
        :param call_routes:
        :type call_routes: list[~cloud_communications.models.MicrosoftGraphCallRoute]
        :param targets: The targets of the call. Required information for creating peer to peer call.
        :type targets: list[~cloud_communications.models.MicrosoftGraphInvitationParticipantInfo]
        :param requested_modalities: The list of requested modalities.
        :type requested_modalities: list[str or ~cloud_communications.models.MicrosoftGraphModality]
        :param active_modalities:
        :type active_modalities: list[str or ~cloud_communications.models.MicrosoftGraphModality]
        :param chat_info: chatInfo.
        :type chat_info: ~cloud_communications.models.MicrosoftGraphChatInfo
        :param call_options: Any object.
        :type call_options: object
        :param meeting_capability: meetingCapability.
        :type meeting_capability: ~cloud_communications.models.MicrosoftGraphMeetingCapability
        :param routing_policies:
        :type routing_policies: list[str or ~cloud_communications.models.MicrosoftGraphRoutingPolicy]
        :param tenant_id:
        :type tenant_id: str
        :param my_participant_id: Read-only.
        :type my_participant_id: str
        :param tone_info: toneInfo.
        :type tone_info: ~cloud_communications.models.MicrosoftGraphToneInfo
        :param participants: Read-only. Nullable.
        :type participants: list[~cloud_communications.models.MicrosoftGraphParticipant]
        :param audio_routing_groups:
        :type audio_routing_groups: list[~cloud_communications.models.MicrosoftGraphAudioRoutingGroup]
        :param operations: Read-only. Nullable.
        :type operations: list[~cloud_communications.models.MicrosoftGraphCommsOperation]
        :param source_participant_id:
        :type source_participant_id: str
        :param observed_participant_id:
        :type observed_participant_id: str
        :param on_behalf_of: identitySet.
        :type on_behalf_of: ~cloud_communications.models.MicrosoftGraphIdentitySet
        :param transferor: identitySet.
        :type transferor: ~cloud_communications.models.MicrosoftGraphIdentitySet
        :param allow_conversation_without_host:
        :type allow_conversation_without_host: bool
        :param remove_from_default_audio_group:
        :type remove_from_default_audio_group: bool
        :param identity: identitySet.
        :type identity: ~cloud_communications.models.MicrosoftGraphIdentitySet
        :param endpoint_type:
        :type endpoint_type: str or ~cloud_communications.models.MicrosoftGraphEndpointType
        :param region: The home region of the participant. This can be a country, a continent, or a
         larger geographic region. This does not change based on the participant's current physical
         location. Read-only.
        :type region: str
        :param language_id: The language culture string. Read-only.
        :type language_id: str
        :param country_code:
        :type country_code: str
        :param microsoft_graph_identity_set_identity: identitySet.
        :type microsoft_graph_identity_set_identity: ~cloud_communications.models.MicrosoftGraphIdentitySet
        :param microsoft_graph_endpoint_type:
        :type microsoft_graph_endpoint_type: str or ~cloud_communications.models.MicrosoftGraphEndpointType
        :param microsoft_graph_participant_info_region: The home region of the participant. This can be
         a country, a continent, or a larger geographic region. This does not change based on the
         participant's current physical location. Read-only.
        :type microsoft_graph_participant_info_region: str
        :param microsoft_graph_participant_info_language_id: The language culture string. Read-only.
        :type microsoft_graph_participant_info_language_id: str
        :param microsoft_graph_participant_info_country_code:
        :type microsoft_graph_participant_info_country_code: str
        :param audio:
        :type audio: str or ~cloud_communications.models.MicrosoftGraphMediaState
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCall, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphCall
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCall"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphCall(id=id, state=state, result_info=result_info, termination_reason=termination_reason, direction=direction, ringing_timeout_in_seconds=ringing_timeout_in_seconds, subject=subject, callback_uri=callback_uri, call_routes=call_routes, targets=targets, requested_modalities=requested_modalities, active_modalities=active_modalities, chat_info=chat_info, call_options=call_options, meeting_capability=meeting_capability, routing_policies=routing_policies, tenant_id=tenant_id, my_participant_id=my_participant_id, tone_info=tone_info, participants=participants, audio_routing_groups=audio_routing_groups, operations=operations, source_participant_id=source_participant_id, observed_participant_id=observed_participant_id, on_behalf_of=on_behalf_of, transferor=transferor, allow_conversation_without_host=allow_conversation_without_host, remove_from_default_audio_group=remove_from_default_audio_group, identity_answered_by_identity=identity, endpoint_type_answered_by_endpoint_type=endpoint_type, region_answered_by_region=region, language_id_answered_by_language_id=language_id, country_code_answered_by_country_code=country_code, identity_source_identity=microsoft_graph_identity_set_identity, endpoint_type_source_endpoint_type=microsoft_graph_endpoint_type, region_source_region=microsoft_graph_participant_info_region, language_id_source_language_id=microsoft_graph_participant_info_language_id, country_code_source_country_code=microsoft_graph_participant_info_country_code, audio=audio)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_call.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphCall')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCall', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_call.metadata = {'url': '/communications/calls'}  # type: ignore

    def get_call(
        self,
        call_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum40"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum41"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphCall"
        """Get calls from communications.

        Get calls from communications.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum40]
        :param expand: Expand related entities.
        :type expand: list[str or ~cloud_communications.models.Enum41]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCall, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphCall
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCall"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_call.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCall', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_call.metadata = {'url': '/communications/calls/{call-id}'}  # type: ignore

    def update_call(
        self,
        call_id,  # type: str
        id=None,  # type: Optional[str]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphCallState"]]
        result_info=None,  # type: Optional["models.MicrosoftGraphResultInfo"]
        termination_reason=None,  # type: Optional[str]
        direction=None,  # type: Optional[Union[str, "models.MicrosoftGraphCallDirection"]]
        ringing_timeout_in_seconds=None,  # type: Optional[int]
        subject=None,  # type: Optional[str]
        callback_uri=None,  # type: Optional[str]
        call_routes=None,  # type: Optional[List["models.MicrosoftGraphCallRoute"]]
        targets=None,  # type: Optional[List["models.MicrosoftGraphInvitationParticipantInfo"]]
        requested_modalities=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphModality"]]]
        active_modalities=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphModality"]]]
        chat_info=None,  # type: Optional["models.MicrosoftGraphChatInfo"]
        call_options=None,  # type: Optional[object]
        meeting_capability=None,  # type: Optional["models.MicrosoftGraphMeetingCapability"]
        routing_policies=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphRoutingPolicy"]]]
        tenant_id=None,  # type: Optional[str]
        my_participant_id=None,  # type: Optional[str]
        tone_info=None,  # type: Optional["models.MicrosoftGraphToneInfo"]
        participants=None,  # type: Optional[List["models.MicrosoftGraphParticipant"]]
        audio_routing_groups=None,  # type: Optional[List["models.MicrosoftGraphAudioRoutingGroup"]]
        operations=None,  # type: Optional[List["models.MicrosoftGraphCommsOperation"]]
        source_participant_id=None,  # type: Optional[str]
        observed_participant_id=None,  # type: Optional[str]
        on_behalf_of=None,  # type: Optional["models.MicrosoftGraphIdentitySet"]
        transferor=None,  # type: Optional["models.MicrosoftGraphIdentitySet"]
        allow_conversation_without_host=None,  # type: Optional[bool]
        remove_from_default_audio_group=None,  # type: Optional[bool]
        identity=None,  # type: Optional["models.MicrosoftGraphIdentitySet"]
        endpoint_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphEndpointType"]]
        region=None,  # type: Optional[str]
        language_id=None,  # type: Optional[str]
        country_code=None,  # type: Optional[str]
        microsoft_graph_identity_set_identity=None,  # type: Optional["models.MicrosoftGraphIdentitySet"]
        microsoft_graph_endpoint_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphEndpointType"]]
        microsoft_graph_participant_info_region=None,  # type: Optional[str]
        microsoft_graph_participant_info_language_id=None,  # type: Optional[str]
        microsoft_graph_participant_info_country_code=None,  # type: Optional[str]
        audio=None,  # type: Optional[Union[str, "models.MicrosoftGraphMediaState"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property calls in communications.

        Update the navigation property calls in communications.

        :param call_id: key: call-id of call.
        :type call_id: str
        :param id: Read-only.
        :type id: str
        :param state:
        :type state: str or ~cloud_communications.models.MicrosoftGraphCallState
        :param result_info: ResultInfo.
        :type result_info: ~cloud_communications.models.MicrosoftGraphResultInfo
        :param termination_reason:
        :type termination_reason: str
        :param direction:
        :type direction: str or ~cloud_communications.models.MicrosoftGraphCallDirection
        :param ringing_timeout_in_seconds:
        :type ringing_timeout_in_seconds: int
        :param subject: The subject of the conversation.
        :type subject: str
        :param callback_uri: The callback URL on which callbacks will be delivered. Must be https.
        :type callback_uri: str
        :param call_routes:
        :type call_routes: list[~cloud_communications.models.MicrosoftGraphCallRoute]
        :param targets: The targets of the call. Required information for creating peer to peer call.
        :type targets: list[~cloud_communications.models.MicrosoftGraphInvitationParticipantInfo]
        :param requested_modalities: The list of requested modalities.
        :type requested_modalities: list[str or ~cloud_communications.models.MicrosoftGraphModality]
        :param active_modalities:
        :type active_modalities: list[str or ~cloud_communications.models.MicrosoftGraphModality]
        :param chat_info: chatInfo.
        :type chat_info: ~cloud_communications.models.MicrosoftGraphChatInfo
        :param call_options: Any object.
        :type call_options: object
        :param meeting_capability: meetingCapability.
        :type meeting_capability: ~cloud_communications.models.MicrosoftGraphMeetingCapability
        :param routing_policies:
        :type routing_policies: list[str or ~cloud_communications.models.MicrosoftGraphRoutingPolicy]
        :param tenant_id:
        :type tenant_id: str
        :param my_participant_id: Read-only.
        :type my_participant_id: str
        :param tone_info: toneInfo.
        :type tone_info: ~cloud_communications.models.MicrosoftGraphToneInfo
        :param participants: Read-only. Nullable.
        :type participants: list[~cloud_communications.models.MicrosoftGraphParticipant]
        :param audio_routing_groups:
        :type audio_routing_groups: list[~cloud_communications.models.MicrosoftGraphAudioRoutingGroup]
        :param operations: Read-only. Nullable.
        :type operations: list[~cloud_communications.models.MicrosoftGraphCommsOperation]
        :param source_participant_id:
        :type source_participant_id: str
        :param observed_participant_id:
        :type observed_participant_id: str
        :param on_behalf_of: identitySet.
        :type on_behalf_of: ~cloud_communications.models.MicrosoftGraphIdentitySet
        :param transferor: identitySet.
        :type transferor: ~cloud_communications.models.MicrosoftGraphIdentitySet
        :param allow_conversation_without_host:
        :type allow_conversation_without_host: bool
        :param remove_from_default_audio_group:
        :type remove_from_default_audio_group: bool
        :param identity: identitySet.
        :type identity: ~cloud_communications.models.MicrosoftGraphIdentitySet
        :param endpoint_type:
        :type endpoint_type: str or ~cloud_communications.models.MicrosoftGraphEndpointType
        :param region: The home region of the participant. This can be a country, a continent, or a
         larger geographic region. This does not change based on the participant's current physical
         location. Read-only.
        :type region: str
        :param language_id: The language culture string. Read-only.
        :type language_id: str
        :param country_code:
        :type country_code: str
        :param microsoft_graph_identity_set_identity: identitySet.
        :type microsoft_graph_identity_set_identity: ~cloud_communications.models.MicrosoftGraphIdentitySet
        :param microsoft_graph_endpoint_type:
        :type microsoft_graph_endpoint_type: str or ~cloud_communications.models.MicrosoftGraphEndpointType
        :param microsoft_graph_participant_info_region: The home region of the participant. This can be
         a country, a continent, or a larger geographic region. This does not change based on the
         participant's current physical location. Read-only.
        :type microsoft_graph_participant_info_region: str
        :param microsoft_graph_participant_info_language_id: The language culture string. Read-only.
        :type microsoft_graph_participant_info_language_id: str
        :param microsoft_graph_participant_info_country_code:
        :type microsoft_graph_participant_info_country_code: str
        :param audio:
        :type audio: str or ~cloud_communications.models.MicrosoftGraphMediaState
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphCall(id=id, state=state, result_info=result_info, termination_reason=termination_reason, direction=direction, ringing_timeout_in_seconds=ringing_timeout_in_seconds, subject=subject, callback_uri=callback_uri, call_routes=call_routes, targets=targets, requested_modalities=requested_modalities, active_modalities=active_modalities, chat_info=chat_info, call_options=call_options, meeting_capability=meeting_capability, routing_policies=routing_policies, tenant_id=tenant_id, my_participant_id=my_participant_id, tone_info=tone_info, participants=participants, audio_routing_groups=audio_routing_groups, operations=operations, source_participant_id=source_participant_id, observed_participant_id=observed_participant_id, on_behalf_of=on_behalf_of, transferor=transferor, allow_conversation_without_host=allow_conversation_without_host, remove_from_default_audio_group=remove_from_default_audio_group, identity_answered_by_identity=identity, endpoint_type_answered_by_endpoint_type=endpoint_type, region_answered_by_region=region, language_id_answered_by_language_id=language_id, country_code_answered_by_country_code=country_code, identity_source_identity=microsoft_graph_identity_set_identity, endpoint_type_source_endpoint_type=microsoft_graph_endpoint_type, region_source_region=microsoft_graph_participant_info_region, language_id_source_language_id=microsoft_graph_participant_info_language_id, country_code_source_country_code=microsoft_graph_participant_info_country_code, audio=audio)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_call.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphCall')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_call.metadata = {'url': '/communications/calls/{call-id}'}  # type: ignore

    def get_presence_by_user_id(
        self,
        ids=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> List["models.MicrosoftGraphPresence"]
        """Invoke action getPresencesByUserId.

        Invoke action getPresencesByUserId.

        :param ids:
        :type ids: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MicrosoftGraphPresence, or the result of cls(response)
        :rtype: list[~cloud_communications.models.MicrosoftGraphPresence]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.MicrosoftGraphPresence"]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths10WpgkzCommunicationsMicrosoftGraphGetpresencesbyuseridPostRequestbodyContentApplicationJsonSchema(ids=ids)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.get_presence_by_user_id.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths10WpgkzCommunicationsMicrosoftGraphGetpresencesbyuseridPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[MicrosoftGraphPresence]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_presence_by_user_id.metadata = {'url': '/communications/microsoft.graph.getPresencesByUserId'}  # type: ignore

    def list_online_meeting(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum56"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum57"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.CollectionOfOnlineMeeting"
        """Get onlineMeetings from communications.

        Get onlineMeetings from communications.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~cloud_communications.models.Enum56]
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum57]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CollectionOfOnlineMeeting, or the result of cls(response)
        :rtype: ~cloud_communications.models.CollectionOfOnlineMeeting
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfOnlineMeeting"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.list_online_meeting.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if self._config.top is not None:
            query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
        if self._config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
        if self._config.search is not None:
            query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
        if self._config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
        if self._config.count is not None:
            query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
        if orderby is not None:
            query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('CollectionOfOnlineMeeting', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    list_online_meeting.metadata = {'url': '/communications/onlineMeetings'}  # type: ignore

    def create_online_meeting(
        self,
        id=None,  # type: Optional[str]
        creation_date_time=None,  # type: Optional[datetime.datetime]
        start_date_time=None,  # type: Optional[datetime.datetime]
        end_date_time=None,  # type: Optional[datetime.datetime]
        canceled_date_time=None,  # type: Optional[datetime.datetime]
        expiration_date_time=None,  # type: Optional[datetime.datetime]
        entry_exit_announcement=None,  # type: Optional[bool]
        join_url=None,  # type: Optional[str]
        subject=None,  # type: Optional[str]
        is_cancelled=None,  # type: Optional[bool]
        is_broadcast=None,  # type: Optional[bool]
        access_level=None,  # type: Optional[Union[str, "models.MicrosoftGraphAccessLevel"]]
        capabilities=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphMeetingCapabilities"]]]
        audio_conferencing=None,  # type: Optional["models.MicrosoftGraphAudioConferencing"]
        chat_info=None,  # type: Optional["models.MicrosoftGraphChatInfo"]
        video_teleconference_id=None,  # type: Optional[str]
        organizer=None,  # type: Optional["models.MicrosoftGraphMeetingParticipantInfo"]
        attendees=None,  # type: Optional[List["models.MicrosoftGraphMeetingParticipantInfo"]]
        producers=None,  # type: Optional[List["models.MicrosoftGraphMeetingParticipantInfo"]]
        contributors=None,  # type: Optional[List["models.MicrosoftGraphMeetingParticipantInfo"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphOnlineMeeting"
        """Create new navigation property to onlineMeetings for communications.

        Create new navigation property to onlineMeetings for communications.

        :param id: Read-only.
        :type id: str
        :param creation_date_time: The meeting creation time in UTC. Read-only.
        :type creation_date_time: ~datetime.datetime
        :param start_date_time: The meeting start time in UTC.
        :type start_date_time: ~datetime.datetime
        :param end_date_time: The meeting end time in UTC.
        :type end_date_time: ~datetime.datetime
        :param canceled_date_time:
        :type canceled_date_time: ~datetime.datetime
        :param expiration_date_time:
        :type expiration_date_time: ~datetime.datetime
        :param entry_exit_announcement:
        :type entry_exit_announcement: bool
        :param join_url:
        :type join_url: str
        :param subject: The subject of the online meeting.
        :type subject: str
        :param is_cancelled:
        :type is_cancelled: bool
        :param is_broadcast:
        :type is_broadcast: bool
        :param access_level:
        :type access_level: str or ~cloud_communications.models.MicrosoftGraphAccessLevel
        :param capabilities:
        :type capabilities: list[str or ~cloud_communications.models.MicrosoftGraphMeetingCapabilities]
        :param audio_conferencing: audioConferencing.
        :type audio_conferencing: ~cloud_communications.models.MicrosoftGraphAudioConferencing
        :param chat_info: chatInfo.
        :type chat_info: ~cloud_communications.models.MicrosoftGraphChatInfo
        :param video_teleconference_id: The video teleconferencing ID. Read-only.
        :type video_teleconference_id: str
        :param organizer: meetingParticipantInfo.
        :type organizer: ~cloud_communications.models.MicrosoftGraphMeetingParticipantInfo
        :param attendees:
        :type attendees: list[~cloud_communications.models.MicrosoftGraphMeetingParticipantInfo]
        :param producers:
        :type producers: list[~cloud_communications.models.MicrosoftGraphMeetingParticipantInfo]
        :param contributors:
        :type contributors: list[~cloud_communications.models.MicrosoftGraphMeetingParticipantInfo]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphOnlineMeeting, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphOnlineMeeting
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphOnlineMeeting"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphOnlineMeeting(id=id, creation_date_time=creation_date_time, start_date_time=start_date_time, end_date_time=end_date_time, canceled_date_time=canceled_date_time, expiration_date_time=expiration_date_time, entry_exit_announcement=entry_exit_announcement, join_url=join_url, subject=subject, is_cancelled=is_cancelled, is_broadcast=is_broadcast, access_level=access_level, capabilities=capabilities, audio_conferencing=audio_conferencing, chat_info=chat_info, video_teleconference_id=video_teleconference_id, organizer=organizer, attendees=attendees, producers=producers, contributors=contributors)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_online_meeting.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphOnlineMeeting')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphOnlineMeeting', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_online_meeting.metadata = {'url': '/communications/onlineMeetings'}  # type: ignore

    def get_online_meeting(
        self,
        online_meeting_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum58"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphOnlineMeeting"
        """Get onlineMeetings from communications.

        Get onlineMeetings from communications.

        :param online_meeting_id: key: onlineMeeting-id of onlineMeeting.
        :type online_meeting_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum58]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphOnlineMeeting, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphOnlineMeeting
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphOnlineMeeting"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_online_meeting.metadata['url']  # type: ignore
        path_format_arguments = {
            'onlineMeeting-id': self._serialize.url("online_meeting_id", online_meeting_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphOnlineMeeting', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_online_meeting.metadata = {'url': '/communications/onlineMeetings/{onlineMeeting-id}'}  # type: ignore

    def update_online_meeting(
        self,
        online_meeting_id,  # type: str
        id=None,  # type: Optional[str]
        creation_date_time=None,  # type: Optional[datetime.datetime]
        start_date_time=None,  # type: Optional[datetime.datetime]
        end_date_time=None,  # type: Optional[datetime.datetime]
        canceled_date_time=None,  # type: Optional[datetime.datetime]
        expiration_date_time=None,  # type: Optional[datetime.datetime]
        entry_exit_announcement=None,  # type: Optional[bool]
        join_url=None,  # type: Optional[str]
        subject=None,  # type: Optional[str]
        is_cancelled=None,  # type: Optional[bool]
        is_broadcast=None,  # type: Optional[bool]
        access_level=None,  # type: Optional[Union[str, "models.MicrosoftGraphAccessLevel"]]
        capabilities=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphMeetingCapabilities"]]]
        audio_conferencing=None,  # type: Optional["models.MicrosoftGraphAudioConferencing"]
        chat_info=None,  # type: Optional["models.MicrosoftGraphChatInfo"]
        video_teleconference_id=None,  # type: Optional[str]
        organizer=None,  # type: Optional["models.MicrosoftGraphMeetingParticipantInfo"]
        attendees=None,  # type: Optional[List["models.MicrosoftGraphMeetingParticipantInfo"]]
        producers=None,  # type: Optional[List["models.MicrosoftGraphMeetingParticipantInfo"]]
        contributors=None,  # type: Optional[List["models.MicrosoftGraphMeetingParticipantInfo"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property onlineMeetings in communications.

        Update the navigation property onlineMeetings in communications.

        :param online_meeting_id: key: onlineMeeting-id of onlineMeeting.
        :type online_meeting_id: str
        :param id: Read-only.
        :type id: str
        :param creation_date_time: The meeting creation time in UTC. Read-only.
        :type creation_date_time: ~datetime.datetime
        :param start_date_time: The meeting start time in UTC.
        :type start_date_time: ~datetime.datetime
        :param end_date_time: The meeting end time in UTC.
        :type end_date_time: ~datetime.datetime
        :param canceled_date_time:
        :type canceled_date_time: ~datetime.datetime
        :param expiration_date_time:
        :type expiration_date_time: ~datetime.datetime
        :param entry_exit_announcement:
        :type entry_exit_announcement: bool
        :param join_url:
        :type join_url: str
        :param subject: The subject of the online meeting.
        :type subject: str
        :param is_cancelled:
        :type is_cancelled: bool
        :param is_broadcast:
        :type is_broadcast: bool
        :param access_level:
        :type access_level: str or ~cloud_communications.models.MicrosoftGraphAccessLevel
        :param capabilities:
        :type capabilities: list[str or ~cloud_communications.models.MicrosoftGraphMeetingCapabilities]
        :param audio_conferencing: audioConferencing.
        :type audio_conferencing: ~cloud_communications.models.MicrosoftGraphAudioConferencing
        :param chat_info: chatInfo.
        :type chat_info: ~cloud_communications.models.MicrosoftGraphChatInfo
        :param video_teleconference_id: The video teleconferencing ID. Read-only.
        :type video_teleconference_id: str
        :param organizer: meetingParticipantInfo.
        :type organizer: ~cloud_communications.models.MicrosoftGraphMeetingParticipantInfo
        :param attendees:
        :type attendees: list[~cloud_communications.models.MicrosoftGraphMeetingParticipantInfo]
        :param producers:
        :type producers: list[~cloud_communications.models.MicrosoftGraphMeetingParticipantInfo]
        :param contributors:
        :type contributors: list[~cloud_communications.models.MicrosoftGraphMeetingParticipantInfo]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphOnlineMeeting(id=id, creation_date_time=creation_date_time, start_date_time=start_date_time, end_date_time=end_date_time, canceled_date_time=canceled_date_time, expiration_date_time=expiration_date_time, entry_exit_announcement=entry_exit_announcement, join_url=join_url, subject=subject, is_cancelled=is_cancelled, is_broadcast=is_broadcast, access_level=access_level, capabilities=capabilities, audio_conferencing=audio_conferencing, chat_info=chat_info, video_teleconference_id=video_teleconference_id, organizer=organizer, attendees=attendees, producers=producers, contributors=contributors)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_online_meeting.metadata['url']  # type: ignore
        path_format_arguments = {
            'onlineMeeting-id': self._serialize.url("online_meeting_id", online_meeting_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphOnlineMeeting')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_online_meeting.metadata = {'url': '/communications/onlineMeetings/{onlineMeeting-id}'}  # type: ignore
