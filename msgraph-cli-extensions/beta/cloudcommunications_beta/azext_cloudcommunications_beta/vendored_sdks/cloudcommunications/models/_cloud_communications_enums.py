# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class Enum27(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    VERSION = "version"
    TYPE = "type"
    MODALITIES = "modalities"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    START_DATE_TIME = "startDateTime"
    END_DATE_TIME = "endDateTime"
    ORGANIZER = "organizer"
    PARTICIPANTS = "participants"
    JOIN_WEB_URL = "joinWebUrl"
    SESSIONS = "sessions"

class Enum29(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    MODALITIES = "modalities"
    MODALITIES_DESC = "modalities desc"
    START_DATE_TIME = "startDateTime"
    START_DATE_TIME_DESC = "startDateTime desc"
    END_DATE_TIME = "endDateTime"
    END_DATE_TIME_DESC = "endDateTime desc"
    CALLER = "caller"
    CALLER_DESC = "caller desc"
    CALLEE = "callee"
    CALLEE_DESC = "callee desc"
    FAILURE_INFO = "failureInfo"
    FAILURE_INFO_DESC = "failureInfo desc"

class Enum30(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    MODALITIES = "modalities"
    START_DATE_TIME = "startDateTime"
    END_DATE_TIME = "endDateTime"
    CALLER = "caller"
    CALLEE = "callee"
    FAILURE_INFO = "failureInfo"
    SEGMENTS = "segments"

class Enum32(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    MODALITIES = "modalities"
    START_DATE_TIME = "startDateTime"
    END_DATE_TIME = "endDateTime"
    CALLER = "caller"
    CALLEE = "callee"
    FAILURE_INFO = "failureInfo"
    SEGMENTS = "segments"

class Enum34(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    START_DATE_TIME = "startDateTime"
    START_DATE_TIME_DESC = "startDateTime desc"
    END_DATE_TIME = "endDateTime"
    END_DATE_TIME_DESC = "endDateTime desc"
    CALLER = "caller"
    CALLER_DESC = "caller desc"
    CALLEE = "callee"
    CALLEE_DESC = "callee desc"
    FAILURE_INFO = "failureInfo"
    FAILURE_INFO_DESC = "failureInfo desc"
    MEDIA = "media"
    MEDIA_DESC = "media desc"

class Enum35(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    START_DATE_TIME = "startDateTime"
    END_DATE_TIME = "endDateTime"
    CALLER = "caller"
    CALLEE = "callee"
    FAILURE_INFO = "failureInfo"
    MEDIA = "media"

class Enum36(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    START_DATE_TIME = "startDateTime"
    END_DATE_TIME = "endDateTime"
    CALLER = "caller"
    CALLEE = "callee"
    FAILURE_INFO = "failureInfo"
    MEDIA = "media"

class Enum37(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    STATE = "state"
    STATE_DESC = "state desc"
    MEDIA_STATE = "mediaState"
    MEDIA_STATE_DESC = "mediaState desc"
    RESULT_INFO = "resultInfo"
    RESULT_INFO_DESC = "resultInfo desc"
    TERMINATION_REASON = "terminationReason"
    TERMINATION_REASON_DESC = "terminationReason desc"
    DIRECTION = "direction"
    DIRECTION_DESC = "direction desc"
    RINGING_TIMEOUT_IN_SECONDS = "ringingTimeoutInSeconds"
    RINGING_TIMEOUT_IN_SECONDS_DESC = "ringingTimeoutInSeconds desc"
    SUBJECT = "subject"
    SUBJECT_DESC = "subject desc"
    CALLBACK_URI = "callbackUri"
    CALLBACK_URI_DESC = "callbackUri desc"
    CALL_ROUTES = "callRoutes"
    CALL_ROUTES_DESC = "callRoutes desc"
    SOURCE = "source"
    SOURCE_DESC = "source desc"
    TARGETS = "targets"
    TARGETS_DESC = "targets desc"
    ANSWERED_BY = "answeredBy"
    ANSWERED_BY_DESC = "answeredBy desc"
    REQUESTED_MODALITIES = "requestedModalities"
    REQUESTED_MODALITIES_DESC = "requestedModalities desc"
    ACTIVE_MODALITIES = "activeModalities"
    ACTIVE_MODALITIES_DESC = "activeModalities desc"
    MEDIA_CONFIG = "mediaConfig"
    MEDIA_CONFIG_DESC = "mediaConfig desc"
    CHAT_INFO = "chatInfo"
    CHAT_INFO_DESC = "chatInfo desc"
    CALL_OPTIONS = "callOptions"
    CALL_OPTIONS_DESC = "callOptions desc"
    MEETING_INFO = "meetingInfo"
    MEETING_INFO_DESC = "meetingInfo desc"
    MEETING_CAPABILITY = "meetingCapability"
    MEETING_CAPABILITY_DESC = "meetingCapability desc"
    ROUTING_POLICIES = "routingPolicies"
    ROUTING_POLICIES_DESC = "routingPolicies desc"
    TENANT_ID = "tenantId"
    TENANT_ID_DESC = "tenantId desc"
    MY_PARTICIPANT_ID = "myParticipantId"
    MY_PARTICIPANT_ID_DESC = "myParticipantId desc"
    TONE_INFO = "toneInfo"
    TONE_INFO_DESC = "toneInfo desc"
    INCOMING_CONTEXT = "incomingContext"
    INCOMING_CONTEXT_DESC = "incomingContext desc"

class Enum38(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    STATE = "state"
    MEDIA_STATE = "mediaState"
    RESULT_INFO = "resultInfo"
    TERMINATION_REASON = "terminationReason"
    DIRECTION = "direction"
    RINGING_TIMEOUT_IN_SECONDS = "ringingTimeoutInSeconds"
    SUBJECT = "subject"
    CALLBACK_URI = "callbackUri"
    CALL_ROUTES = "callRoutes"
    SOURCE = "source"
    TARGETS = "targets"
    ANSWERED_BY = "answeredBy"
    REQUESTED_MODALITIES = "requestedModalities"
    ACTIVE_MODALITIES = "activeModalities"
    MEDIA_CONFIG = "mediaConfig"
    CHAT_INFO = "chatInfo"
    CALL_OPTIONS = "callOptions"
    MEETING_INFO = "meetingInfo"
    MEETING_CAPABILITY = "meetingCapability"
    ROUTING_POLICIES = "routingPolicies"
    TENANT_ID = "tenantId"
    MY_PARTICIPANT_ID = "myParticipantId"
    TONE_INFO = "toneInfo"
    INCOMING_CONTEXT = "incomingContext"
    PARTICIPANTS = "participants"
    AUDIO_ROUTING_GROUPS = "audioRoutingGroups"
    OPERATIONS = "operations"

class Enum39(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    PARTICIPANTS = "participants"
    AUDIO_ROUTING_GROUPS = "audioRoutingGroups"
    OPERATIONS = "operations"

class Enum40(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    STATE = "state"
    MEDIA_STATE = "mediaState"
    RESULT_INFO = "resultInfo"
    TERMINATION_REASON = "terminationReason"
    DIRECTION = "direction"
    RINGING_TIMEOUT_IN_SECONDS = "ringingTimeoutInSeconds"
    SUBJECT = "subject"
    CALLBACK_URI = "callbackUri"
    CALL_ROUTES = "callRoutes"
    SOURCE = "source"
    TARGETS = "targets"
    ANSWERED_BY = "answeredBy"
    REQUESTED_MODALITIES = "requestedModalities"
    ACTIVE_MODALITIES = "activeModalities"
    MEDIA_CONFIG = "mediaConfig"
    CHAT_INFO = "chatInfo"
    CALL_OPTIONS = "callOptions"
    MEETING_INFO = "meetingInfo"
    MEETING_CAPABILITY = "meetingCapability"
    ROUTING_POLICIES = "routingPolicies"
    TENANT_ID = "tenantId"
    MY_PARTICIPANT_ID = "myParticipantId"
    TONE_INFO = "toneInfo"
    INCOMING_CONTEXT = "incomingContext"
    PARTICIPANTS = "participants"
    AUDIO_ROUTING_GROUPS = "audioRoutingGroups"
    OPERATIONS = "operations"

class Enum41(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    PARTICIPANTS = "participants"
    AUDIO_ROUTING_GROUPS = "audioRoutingGroups"
    OPERATIONS = "operations"

class Enum42(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    ROUTING_MODE = "routingMode"
    ROUTING_MODE_DESC = "routingMode desc"
    SOURCES = "sources"
    SOURCES_DESC = "sources desc"
    RECEIVERS = "receivers"
    RECEIVERS_DESC = "receivers desc"

class Enum43(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ROUTING_MODE = "routingMode"
    SOURCES = "sources"
    RECEIVERS = "receivers"

class Enum44(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ROUTING_MODE = "routingMode"
    SOURCES = "sources"
    RECEIVERS = "receivers"

class Enum50(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    STATUS = "status"
    STATUS_DESC = "status desc"
    CLIENT_CONTEXT = "clientContext"
    CLIENT_CONTEXT_DESC = "clientContext desc"
    RESULT_INFO = "resultInfo"
    RESULT_INFO_DESC = "resultInfo desc"

class Enum51(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    STATUS = "status"
    CLIENT_CONTEXT = "clientContext"
    RESULT_INFO = "resultInfo"

class Enum52(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    STATUS = "status"
    CLIENT_CONTEXT = "clientContext"
    RESULT_INFO = "resultInfo"

class Enum53(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    INFO = "info"
    INFO_DESC = "info desc"
    RECORDING_INFO = "recordingInfo"
    RECORDING_INFO_DESC = "recordingInfo desc"
    MEDIA_STREAMS = "mediaStreams"
    MEDIA_STREAMS_DESC = "mediaStreams desc"
    METADATA = "metadata"
    METADATA_DESC = "metadata desc"
    IS_MUTED = "isMuted"
    IS_MUTED_DESC = "isMuted desc"
    IS_IN_LOBBY = "isInLobby"
    IS_IN_LOBBY_DESC = "isInLobby desc"

class Enum54(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    INFO = "info"
    RECORDING_INFO = "recordingInfo"
    MEDIA_STREAMS = "mediaStreams"
    METADATA = "metadata"
    IS_MUTED = "isMuted"
    IS_IN_LOBBY = "isInLobby"

class Enum55(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    INFO = "info"
    RECORDING_INFO = "recordingInfo"
    MEDIA_STREAMS = "mediaStreams"
    METADATA = "metadata"
    IS_MUTED = "isMuted"
    IS_IN_LOBBY = "isInLobby"

class Enum56(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATION_DATE_TIME = "creationDateTime"
    CREATION_DATE_TIME_DESC = "creationDateTime desc"
    START_DATE_TIME = "startDateTime"
    START_DATE_TIME_DESC = "startDateTime desc"
    END_DATE_TIME = "endDateTime"
    END_DATE_TIME_DESC = "endDateTime desc"
    CANCELED_DATE_TIME = "canceledDateTime"
    CANCELED_DATE_TIME_DESC = "canceledDateTime desc"
    EXPIRATION_DATE_TIME = "expirationDateTime"
    EXPIRATION_DATE_TIME_DESC = "expirationDateTime desc"
    ENTRY_EXIT_ANNOUNCEMENT = "entryExitAnnouncement"
    ENTRY_EXIT_ANNOUNCEMENT_DESC = "entryExitAnnouncement desc"
    JOIN_URL = "joinUrl"
    JOIN_URL_DESC = "joinUrl desc"
    SUBJECT = "subject"
    SUBJECT_DESC = "subject desc"
    IS_CANCELLED = "isCancelled"
    IS_CANCELLED_DESC = "isCancelled desc"
    PARTICIPANTS = "participants"
    PARTICIPANTS_DESC = "participants desc"
    IS_BROADCAST = "isBroadcast"
    IS_BROADCAST_DESC = "isBroadcast desc"
    ACCESS_LEVEL = "accessLevel"
    ACCESS_LEVEL_DESC = "accessLevel desc"
    CAPABILITIES = "capabilities"
    CAPABILITIES_DESC = "capabilities desc"
    AUDIO_CONFERENCING = "audioConferencing"
    AUDIO_CONFERENCING_DESC = "audioConferencing desc"
    CHAT_INFO = "chatInfo"
    CHAT_INFO_DESC = "chatInfo desc"
    VIDEO_TELECONFERENCE_ID = "videoTeleconferenceId"
    VIDEO_TELECONFERENCE_ID_DESC = "videoTeleconferenceId desc"

class Enum57(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATION_DATE_TIME = "creationDateTime"
    START_DATE_TIME = "startDateTime"
    END_DATE_TIME = "endDateTime"
    CANCELED_DATE_TIME = "canceledDateTime"
    EXPIRATION_DATE_TIME = "expirationDateTime"
    ENTRY_EXIT_ANNOUNCEMENT = "entryExitAnnouncement"
    JOIN_URL = "joinUrl"
    SUBJECT = "subject"
    IS_CANCELLED = "isCancelled"
    PARTICIPANTS = "participants"
    IS_BROADCAST = "isBroadcast"
    ACCESS_LEVEL = "accessLevel"
    CAPABILITIES = "capabilities"
    AUDIO_CONFERENCING = "audioConferencing"
    CHAT_INFO = "chatInfo"
    VIDEO_TELECONFERENCE_ID = "videoTeleconferenceId"

class Enum58(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATION_DATE_TIME = "creationDateTime"
    START_DATE_TIME = "startDateTime"
    END_DATE_TIME = "endDateTime"
    CANCELED_DATE_TIME = "canceledDateTime"
    EXPIRATION_DATE_TIME = "expirationDateTime"
    ENTRY_EXIT_ANNOUNCEMENT = "entryExitAnnouncement"
    JOIN_URL = "joinUrl"
    SUBJECT = "subject"
    IS_CANCELLED = "isCancelled"
    PARTICIPANTS = "participants"
    IS_BROADCAST = "isBroadcast"
    ACCESS_LEVEL = "accessLevel"
    CAPABILITIES = "capabilities"
    AUDIO_CONFERENCING = "audioConferencing"
    CHAT_INFO = "chatInfo"
    VIDEO_TELECONFERENCE_ID = "videoTeleconferenceId"

class Get0ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CALLS = "calls"
    CALL_RECORDS = "callRecords"
    ONLINE_MEETINGS = "onlineMeetings"

class Get1ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CALLS = "calls"
    CALL_RECORDS = "callRecords"
    ONLINE_MEETINGS = "onlineMeetings"

class Get2ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SESSIONS = "sessions"

class Get3ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SEGMENTS = "segments"

class Get5ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    VERSION = "version"
    VERSION_DESC = "version desc"
    TYPE = "type"
    TYPE_DESC = "type desc"
    MODALITIES = "modalities"
    MODALITIES_DESC = "modalities desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    START_DATE_TIME = "startDateTime"
    START_DATE_TIME_DESC = "startDateTime desc"
    END_DATE_TIME = "endDateTime"
    END_DATE_TIME_DESC = "endDateTime desc"
    ORGANIZER = "organizer"
    ORGANIZER_DESC = "organizer desc"
    PARTICIPANTS = "participants"
    PARTICIPANTS_DESC = "participants desc"
    JOIN_WEB_URL = "joinWebUrl"
    JOIN_WEB_URL_DESC = "joinWebUrl desc"

class Get6ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    VERSION = "version"
    TYPE = "type"
    MODALITIES = "modalities"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    START_DATE_TIME = "startDateTime"
    END_DATE_TIME = "endDateTime"
    ORGANIZER = "organizer"
    PARTICIPANTS = "participants"
    JOIN_WEB_URL = "joinWebUrl"
    SESSIONS = "sessions"

class Get7ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SESSIONS = "sessions"

class Get8ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SEGMENTS = "segments"

class MicrosoftGraphAccessLevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EVERYONE = "everyone"
    INVITED = "invited"
    LOCKED = "locked"
    SAME_ENTERPRISE = "sameEnterprise"
    SAME_ENTERPRISE_AND_FEDERATED = "sameEnterpriseAndFederated"

class MicrosoftGraphAutoAdmittedUsersType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EVERYONE_IN_COMPANY = "everyoneInCompany"
    EVERYONE = "everyone"

class MicrosoftGraphCallDirection(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INCOMING = "incoming"
    OUTGOING = "outgoing"

class MicrosoftGraphCallDisposition(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DEFAULT = "default"
    SIMULTANEOUS_RING = "simultaneousRing"
    FORWARD = "forward"

class MicrosoftGraphCallRecordsCallType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    GROUP_CALL = "groupCall"
    PEER_TO_PEER = "peerToPeer"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphCallRecordsFailureStage(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    CALL_SETUP = "callSetup"
    MIDCALL = "midcall"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphCallRecordsMediaStreamDirection(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CALLER_TO_CALLEE = "callerToCallee"
    CALLEE_TO_CALLER = "calleeToCaller"

class MicrosoftGraphCallRecordsModality(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AUDIO = "audio"
    VIDEO = "video"
    VIDEO_BASED_SCREEN_SHARING = "videoBasedScreenSharing"
    DATA = "data"
    SCREEN_SHARING = "screenSharing"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphCallRecordsNetworkConnectionType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    WIRED = "wired"
    WIFI = "wifi"
    MOBILE = "mobile"
    TUNNEL = "tunnel"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphCallRecordsWifiBand(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    FREQUENCY24_G_HZ = "frequency24GHz"
    FREQUENCY50_G_HZ = "frequency50GHz"

class MicrosoftGraphCallRecordsWifiRadioType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    WIFI80211_A = "wifi80211a"
    WIFI80211_B = "wifi80211b"
    WIFI80211_G = "wifi80211g"
    WIFI80211_N = "wifi80211n"
    WIFI80211_AC = "wifi80211ac"
    WIFI80211_AX = "wifi80211ax"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphCallState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INCOMING = "incoming"
    ESTABLISHING = "establishing"
    RINGING = "ringing"
    ESTABLISHED = "established"
    HOLD = "hold"
    TRANSFERRING = "transferring"
    TRANSFER_ACCEPTED = "transferAccepted"
    REDIRECTING = "redirecting"
    TERMINATING = "terminating"
    TERMINATED = "terminated"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphEndpointType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DEFAULT = "default"
    VOICEMAIL = "voicemail"
    SKYPE_FOR_BUSINESS = "skypeForBusiness"
    SKYPE_FOR_BUSINESS_VOIP_PHONE = "skypeForBusinessVoipPhone"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphMediaDirection(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INACTIVE = "inactive"
    SEND_ONLY = "sendOnly"
    RECEIVE_ONLY = "receiveOnly"
    SEND_RECEIVE = "sendReceive"

class MicrosoftGraphMediaState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ACTIVE = "active"
    INACTIVE = "inactive"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphMeetingCapabilities(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    QUESTION_AND_ANSWER = "questionAndAnswer"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphModality(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    AUDIO = "audio"
    VIDEO = "video"
    VIDEO_BASED_SCREEN_SHARING = "videoBasedScreenSharing"
    DATA = "data"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphOperationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_STARTED = "NotStarted"
    RUNNING = "Running"
    COMPLETED = "Completed"
    FAILED = "Failed"

class MicrosoftGraphPlayPromptCompletionReason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPLETED_SUCCESSFULLY = "completedSuccessfully"
    MEDIA_OPERATION_CANCELED = "mediaOperationCanceled"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphRecordCompletionReason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    OPERATION_CANCELED = "operationCanceled"
    STOP_TONE_DETECTED = "stopToneDetected"
    MAX_RECORD_DURATION_REACHED = "maxRecordDurationReached"
    INITIAL_SILENCE_TIMEOUT = "initialSilenceTimeout"
    MAX_SILENCE_TIMEOUT = "maxSilenceTimeout"
    PLAY_PROMPT_FAILED = "playPromptFailed"
    PLAY_BEEP_FAILED = "playBeepFailed"
    MEDIA_RECEIVE_TIMEOUT = "mediaReceiveTimeout"
    UNSPECIFIED_ERROR = "unspecifiedError"

class MicrosoftGraphRecordingStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    NOT_RECORDING = "notRecording"
    RECORDING = "recording"
    FAILED = "failed"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphRejectReason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    BUSY = "busy"
    FORBIDDEN = "forbidden"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphRoutingMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ONE_TO_ONE = "oneToOne"
    MULTICAST = "multicast"

class MicrosoftGraphRoutingPolicy(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    NO_MISSED_CALL = "noMissedCall"
    DISABLE_FORWARDING_EXCEPT_PHONE = "disableForwardingExceptPhone"
    DISABLE_FORWARDING = "disableForwarding"
    PREFER_SKYPE_FOR_BUSINESS = "preferSkypeForBusiness"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphRoutingType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FORWARDED = "forwarded"
    LOOKUP = "lookup"
    SELF_FORK = "selfFork"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphScreenSharingRole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    VIEWER = "viewer"
    SHARER = "sharer"

class MicrosoftGraphTone(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    TONE0 = "tone0"
    TONE1 = "tone1"
    TONE2 = "tone2"
    TONE3 = "tone3"
    TONE4 = "tone4"
    TONE5 = "tone5"
    TONE6 = "tone6"
    TONE7 = "tone7"
    TONE8 = "tone8"
    TONE9 = "tone9"
    STAR = "star"
    POUND = "pound"
    A = "a"
    B = "b"
    C = "c"
    D = "d"
    FLASH = "flash"
