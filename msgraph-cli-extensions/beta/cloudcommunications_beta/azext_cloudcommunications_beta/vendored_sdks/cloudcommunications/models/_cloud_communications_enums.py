# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class Enum32(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ENDDATETIME = "endDateTime"
    JOINWEBURL = "joinWebUrl"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    MODALITIES = "modalities"
    ORGANIZER = "organizer"
    PARTICIPANTS = "participants"
    STARTDATETIME = "startDateTime"
    TYPE = "type"
    VERSION = "version"
    SESSIONS = "sessions"

class Enum34(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CALLEE = "callee"
    CALLEEDESC = "callee desc"
    CALLER = "caller"
    CALLERDESC = "caller desc"
    ENDDATETIME = "endDateTime"
    ENDDATETIMEDESC = "endDateTime desc"
    FAILUREINFO = "failureInfo"
    FAILUREINFODESC = "failureInfo desc"
    MODALITIES = "modalities"
    MODALITIESDESC = "modalities desc"
    STARTDATETIME = "startDateTime"
    STARTDATETIMEDESC = "startDateTime desc"

class Enum35(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CALLEE = "callee"
    CALLER = "caller"
    ENDDATETIME = "endDateTime"
    FAILUREINFO = "failureInfo"
    MODALITIES = "modalities"
    STARTDATETIME = "startDateTime"
    SEGMENTS = "segments"

class Enum37(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CALLEE = "callee"
    CALLER = "caller"
    ENDDATETIME = "endDateTime"
    FAILUREINFO = "failureInfo"
    MODALITIES = "modalities"
    STARTDATETIME = "startDateTime"
    SEGMENTS = "segments"

class Enum39(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CALLEE = "callee"
    CALLEEDESC = "callee desc"
    CALLER = "caller"
    CALLERDESC = "caller desc"
    ENDDATETIME = "endDateTime"
    ENDDATETIMEDESC = "endDateTime desc"
    FAILUREINFO = "failureInfo"
    FAILUREINFODESC = "failureInfo desc"
    MEDIA = "media"
    MEDIADESC = "media desc"
    STARTDATETIME = "startDateTime"
    STARTDATETIMEDESC = "startDateTime desc"

class Enum40(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CALLEE = "callee"
    CALLER = "caller"
    ENDDATETIME = "endDateTime"
    FAILUREINFO = "failureInfo"
    MEDIA = "media"
    STARTDATETIME = "startDateTime"

class Enum41(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CALLEE = "callee"
    CALLER = "caller"
    ENDDATETIME = "endDateTime"
    FAILUREINFO = "failureInfo"
    MEDIA = "media"
    STARTDATETIME = "startDateTime"

class Enum42(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ACTIVEMODALITIES = "activeModalities"
    ACTIVEMODALITIESDESC = "activeModalities desc"
    ANSWEREDBY = "answeredBy"
    ANSWEREDBYDESC = "answeredBy desc"
    CALLBACKURI = "callbackUri"
    CALLBACKURIDESC = "callbackUri desc"
    CALLCHAINID = "callChainId"
    CALLCHAINIDDESC = "callChainId desc"
    CALLOPTIONS = "callOptions"
    CALLOPTIONSDESC = "callOptions desc"
    CALLROUTES = "callRoutes"
    CALLROUTESDESC = "callRoutes desc"
    CHATINFO = "chatInfo"
    CHATINFODESC = "chatInfo desc"
    DIRECTION = "direction"
    DIRECTIONDESC = "direction desc"
    INCOMINGCONTEXT = "incomingContext"
    INCOMINGCONTEXTDESC = "incomingContext desc"
    MEDIACONFIG = "mediaConfig"
    MEDIACONFIGDESC = "mediaConfig desc"
    MEDIASTATE = "mediaState"
    MEDIASTATEDESC = "mediaState desc"
    MEETINGCAPABILITY = "meetingCapability"
    MEETINGCAPABILITYDESC = "meetingCapability desc"
    MEETINGINFO = "meetingInfo"
    MEETINGINFODESC = "meetingInfo desc"
    MYPARTICIPANTID = "myParticipantId"
    MYPARTICIPANTIDDESC = "myParticipantId desc"
    REQUESTEDMODALITIES = "requestedModalities"
    REQUESTEDMODALITIESDESC = "requestedModalities desc"
    RESULTINFO = "resultInfo"
    RESULTINFODESC = "resultInfo desc"
    RINGINGTIMEOUTINSECONDS = "ringingTimeoutInSeconds"
    RINGINGTIMEOUTINSECONDSDESC = "ringingTimeoutInSeconds desc"
    ROUTINGPOLICIES = "routingPolicies"
    ROUTINGPOLICIESDESC = "routingPolicies desc"
    SOURCE = "source"
    SOURCEDESC = "source desc"
    STATE = "state"
    STATEDESC = "state desc"
    SUBJECT = "subject"
    SUBJECTDESC = "subject desc"
    TARGETS = "targets"
    TARGETSDESC = "targets desc"
    TENANTID = "tenantId"
    TENANTIDDESC = "tenantId desc"
    TERMINATIONREASON = "terminationReason"
    TERMINATIONREASONDESC = "terminationReason desc"
    TONEINFO = "toneInfo"
    TONEINFODESC = "toneInfo desc"
    TRANSCRIPTION = "transcription"
    TRANSCRIPTIONDESC = "transcription desc"

class Enum43(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACTIVEMODALITIES = "activeModalities"
    ANSWEREDBY = "answeredBy"
    CALLBACKURI = "callbackUri"
    CALLCHAINID = "callChainId"
    CALLOPTIONS = "callOptions"
    CALLROUTES = "callRoutes"
    CHATINFO = "chatInfo"
    DIRECTION = "direction"
    INCOMINGCONTEXT = "incomingContext"
    MEDIACONFIG = "mediaConfig"
    MEDIASTATE = "mediaState"
    MEETINGCAPABILITY = "meetingCapability"
    MEETINGINFO = "meetingInfo"
    MYPARTICIPANTID = "myParticipantId"
    REQUESTEDMODALITIES = "requestedModalities"
    RESULTINFO = "resultInfo"
    RINGINGTIMEOUTINSECONDS = "ringingTimeoutInSeconds"
    ROUTINGPOLICIES = "routingPolicies"
    SOURCE = "source"
    STATE = "state"
    SUBJECT = "subject"
    TARGETS = "targets"
    TENANTID = "tenantId"
    TERMINATIONREASON = "terminationReason"
    TONEINFO = "toneInfo"
    TRANSCRIPTION = "transcription"
    AUDIOROUTINGGROUPS = "audioRoutingGroups"
    OPERATIONS = "operations"
    PARTICIPANTS = "participants"

class Enum44(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    AUDIOROUTINGGROUPS = "audioRoutingGroups"
    OPERATIONS = "operations"
    PARTICIPANTS = "participants"

class Enum45(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACTIVEMODALITIES = "activeModalities"
    ANSWEREDBY = "answeredBy"
    CALLBACKURI = "callbackUri"
    CALLCHAINID = "callChainId"
    CALLOPTIONS = "callOptions"
    CALLROUTES = "callRoutes"
    CHATINFO = "chatInfo"
    DIRECTION = "direction"
    INCOMINGCONTEXT = "incomingContext"
    MEDIACONFIG = "mediaConfig"
    MEDIASTATE = "mediaState"
    MEETINGCAPABILITY = "meetingCapability"
    MEETINGINFO = "meetingInfo"
    MYPARTICIPANTID = "myParticipantId"
    REQUESTEDMODALITIES = "requestedModalities"
    RESULTINFO = "resultInfo"
    RINGINGTIMEOUTINSECONDS = "ringingTimeoutInSeconds"
    ROUTINGPOLICIES = "routingPolicies"
    SOURCE = "source"
    STATE = "state"
    SUBJECT = "subject"
    TARGETS = "targets"
    TENANTID = "tenantId"
    TERMINATIONREASON = "terminationReason"
    TONEINFO = "toneInfo"
    TRANSCRIPTION = "transcription"
    AUDIOROUTINGGROUPS = "audioRoutingGroups"
    OPERATIONS = "operations"
    PARTICIPANTS = "participants"

class Enum46(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    AUDIOROUTINGGROUPS = "audioRoutingGroups"
    OPERATIONS = "operations"
    PARTICIPANTS = "participants"

class Enum47(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    RECEIVERS = "receivers"
    RECEIVERSDESC = "receivers desc"
    ROUTINGMODE = "routingMode"
    ROUTINGMODEDESC = "routingMode desc"
    SOURCES = "sources"
    SOURCESDESC = "sources desc"

class Enum48(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RECEIVERS = "receivers"
    ROUTINGMODE = "routingMode"
    SOURCES = "sources"

class Enum49(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RECEIVERS = "receivers"
    ROUTINGMODE = "routingMode"
    SOURCES = "sources"

class Enum55(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CLIENTCONTEXT = "clientContext"
    CLIENTCONTEXTDESC = "clientContext desc"
    RESULTINFO = "resultInfo"
    RESULTINFODESC = "resultInfo desc"
    STATUS = "status"
    STATUSDESC = "status desc"

class Enum56(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLIENTCONTEXT = "clientContext"
    RESULTINFO = "resultInfo"
    STATUS = "status"

class Enum57(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLIENTCONTEXT = "clientContext"
    RESULTINFO = "resultInfo"
    STATUS = "status"

class Enum58(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    INFO = "info"
    INFODESC = "info desc"
    ISINLOBBY = "isInLobby"
    ISINLOBBYDESC = "isInLobby desc"
    ISMUTED = "isMuted"
    ISMUTEDDESC = "isMuted desc"
    MEDIASTREAMS = "mediaStreams"
    MEDIASTREAMSDESC = "mediaStreams desc"
    METADATA = "metadata"
    METADATADESC = "metadata desc"
    RECORDINGINFO = "recordingInfo"
    RECORDINGINFODESC = "recordingInfo desc"

class Enum59(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    INFO = "info"
    ISINLOBBY = "isInLobby"
    ISMUTED = "isMuted"
    MEDIASTREAMS = "mediaStreams"
    METADATA = "metadata"
    RECORDINGINFO = "recordingInfo"

class Enum60(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    INFO = "info"
    ISINLOBBY = "isInLobby"
    ISMUTED = "isMuted"
    MEDIASTREAMS = "mediaStreams"
    METADATA = "metadata"
    RECORDINGINFO = "recordingInfo"

class Enum61(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ACCESSLEVEL = "accessLevel"
    ACCESSLEVELDESC = "accessLevel desc"
    ALLOWEDPRESENTERS = "allowedPresenters"
    ALLOWEDPRESENTERSDESC = "allowedPresenters desc"
    AUDIOCONFERENCING = "audioConferencing"
    AUDIOCONFERENCINGDESC = "audioConferencing desc"
    CANCELEDDATETIME = "canceledDateTime"
    CANCELEDDATETIMEDESC = "canceledDateTime desc"
    CAPABILITIES = "capabilities"
    CAPABILITIESDESC = "capabilities desc"
    CHATINFO = "chatInfo"
    CHATINFODESC = "chatInfo desc"
    CREATIONDATETIME = "creationDateTime"
    CREATIONDATETIMEDESC = "creationDateTime desc"
    ENDDATETIME = "endDateTime"
    ENDDATETIMEDESC = "endDateTime desc"
    ENTRYEXITANNOUNCEMENT = "entryExitAnnouncement"
    ENTRYEXITANNOUNCEMENTDESC = "entryExitAnnouncement desc"
    EXPIRATIONDATETIME = "expirationDateTime"
    EXPIRATIONDATETIMEDESC = "expirationDateTime desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    ISBROADCAST = "isBroadcast"
    ISBROADCASTDESC = "isBroadcast desc"
    ISCANCELLED = "isCancelled"
    ISCANCELLEDDESC = "isCancelled desc"
    ISENTRYEXITANNOUNCED = "isEntryExitAnnounced"
    ISENTRYEXITANNOUNCEDDESC = "isEntryExitAnnounced desc"
    JOININFORMATION = "joinInformation"
    JOININFORMATIONDESC = "joinInformation desc"
    JOINURL = "joinUrl"
    JOINURLDESC = "joinUrl desc"
    LOBBYBYPASSSETTINGS = "lobbyBypassSettings"
    LOBBYBYPASSSETTINGSDESC = "lobbyBypassSettings desc"
    PARTICIPANTS = "participants"
    PARTICIPANTSDESC = "participants desc"
    STARTDATETIME = "startDateTime"
    STARTDATETIMEDESC = "startDateTime desc"
    SUBJECT = "subject"
    SUBJECTDESC = "subject desc"
    VIDEOTELECONFERENCEID = "videoTeleconferenceId"
    VIDEOTELECONFERENCEIDDESC = "videoTeleconferenceId desc"

class Enum62(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACCESSLEVEL = "accessLevel"
    ALLOWEDPRESENTERS = "allowedPresenters"
    AUDIOCONFERENCING = "audioConferencing"
    CANCELEDDATETIME = "canceledDateTime"
    CAPABILITIES = "capabilities"
    CHATINFO = "chatInfo"
    CREATIONDATETIME = "creationDateTime"
    ENDDATETIME = "endDateTime"
    ENTRYEXITANNOUNCEMENT = "entryExitAnnouncement"
    EXPIRATIONDATETIME = "expirationDateTime"
    EXTERNALID = "externalId"
    ISBROADCAST = "isBroadcast"
    ISCANCELLED = "isCancelled"
    ISENTRYEXITANNOUNCED = "isEntryExitAnnounced"
    JOININFORMATION = "joinInformation"
    JOINURL = "joinUrl"
    LOBBYBYPASSSETTINGS = "lobbyBypassSettings"
    PARTICIPANTS = "participants"
    STARTDATETIME = "startDateTime"
    SUBJECT = "subject"
    VIDEOTELECONFERENCEID = "videoTeleconferenceId"

class Enum63(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACCESSLEVEL = "accessLevel"
    ALLOWEDPRESENTERS = "allowedPresenters"
    AUDIOCONFERENCING = "audioConferencing"
    CANCELEDDATETIME = "canceledDateTime"
    CAPABILITIES = "capabilities"
    CHATINFO = "chatInfo"
    CREATIONDATETIME = "creationDateTime"
    ENDDATETIME = "endDateTime"
    ENTRYEXITANNOUNCEMENT = "entryExitAnnouncement"
    EXPIRATIONDATETIME = "expirationDateTime"
    EXTERNALID = "externalId"
    ISBROADCAST = "isBroadcast"
    ISCANCELLED = "isCancelled"
    ISENTRYEXITANNOUNCED = "isEntryExitAnnounced"
    JOININFORMATION = "joinInformation"
    JOINURL = "joinUrl"
    LOBBYBYPASSSETTINGS = "lobbyBypassSettings"
    PARTICIPANTS = "participants"
    STARTDATETIME = "startDateTime"
    SUBJECT = "subject"
    VIDEOTELECONFERENCEID = "videoTeleconferenceId"

class Enum64(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ACTIVITY = "activity"
    ACTIVITYDESC = "activity desc"
    AVAILABILITY = "availability"
    AVAILABILITYDESC = "availability desc"

class Enum65(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACTIVITY = "activity"
    AVAILABILITY = "availability"

class Enum66(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACTIVITY = "activity"
    AVAILABILITY = "availability"

class Enum67(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ACCESSLEVEL = "accessLevel"
    ACCESSLEVELDESC = "accessLevel desc"
    ALLOWEDPRESENTERS = "allowedPresenters"
    ALLOWEDPRESENTERSDESC = "allowedPresenters desc"
    AUDIOCONFERENCING = "audioConferencing"
    AUDIOCONFERENCINGDESC = "audioConferencing desc"
    CANCELEDDATETIME = "canceledDateTime"
    CANCELEDDATETIMEDESC = "canceledDateTime desc"
    CAPABILITIES = "capabilities"
    CAPABILITIESDESC = "capabilities desc"
    CHATINFO = "chatInfo"
    CHATINFODESC = "chatInfo desc"
    CREATIONDATETIME = "creationDateTime"
    CREATIONDATETIMEDESC = "creationDateTime desc"
    ENDDATETIME = "endDateTime"
    ENDDATETIMEDESC = "endDateTime desc"
    ENTRYEXITANNOUNCEMENT = "entryExitAnnouncement"
    ENTRYEXITANNOUNCEMENTDESC = "entryExitAnnouncement desc"
    EXPIRATIONDATETIME = "expirationDateTime"
    EXPIRATIONDATETIMEDESC = "expirationDateTime desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    ISBROADCAST = "isBroadcast"
    ISBROADCASTDESC = "isBroadcast desc"
    ISCANCELLED = "isCancelled"
    ISCANCELLEDDESC = "isCancelled desc"
    ISENTRYEXITANNOUNCED = "isEntryExitAnnounced"
    ISENTRYEXITANNOUNCEDDESC = "isEntryExitAnnounced desc"
    JOININFORMATION = "joinInformation"
    JOININFORMATIONDESC = "joinInformation desc"
    JOINURL = "joinUrl"
    JOINURLDESC = "joinUrl desc"
    LOBBYBYPASSSETTINGS = "lobbyBypassSettings"
    LOBBYBYPASSSETTINGSDESC = "lobbyBypassSettings desc"
    PARTICIPANTS = "participants"
    PARTICIPANTSDESC = "participants desc"
    STARTDATETIME = "startDateTime"
    STARTDATETIMEDESC = "startDateTime desc"
    SUBJECT = "subject"
    SUBJECTDESC = "subject desc"
    VIDEOTELECONFERENCEID = "videoTeleconferenceId"
    VIDEOTELECONFERENCEIDDESC = "videoTeleconferenceId desc"

class Enum68(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACCESSLEVEL = "accessLevel"
    ALLOWEDPRESENTERS = "allowedPresenters"
    AUDIOCONFERENCING = "audioConferencing"
    CANCELEDDATETIME = "canceledDateTime"
    CAPABILITIES = "capabilities"
    CHATINFO = "chatInfo"
    CREATIONDATETIME = "creationDateTime"
    ENDDATETIME = "endDateTime"
    ENTRYEXITANNOUNCEMENT = "entryExitAnnouncement"
    EXPIRATIONDATETIME = "expirationDateTime"
    EXTERNALID = "externalId"
    ISBROADCAST = "isBroadcast"
    ISCANCELLED = "isCancelled"
    ISENTRYEXITANNOUNCED = "isEntryExitAnnounced"
    JOININFORMATION = "joinInformation"
    JOINURL = "joinUrl"
    LOBBYBYPASSSETTINGS = "lobbyBypassSettings"
    PARTICIPANTS = "participants"
    STARTDATETIME = "startDateTime"
    SUBJECT = "subject"
    VIDEOTELECONFERENCEID = "videoTeleconferenceId"

class Enum69(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACCESSLEVEL = "accessLevel"
    ALLOWEDPRESENTERS = "allowedPresenters"
    AUDIOCONFERENCING = "audioConferencing"
    CANCELEDDATETIME = "canceledDateTime"
    CAPABILITIES = "capabilities"
    CHATINFO = "chatInfo"
    CREATIONDATETIME = "creationDateTime"
    ENDDATETIME = "endDateTime"
    ENTRYEXITANNOUNCEMENT = "entryExitAnnouncement"
    EXPIRATIONDATETIME = "expirationDateTime"
    EXTERNALID = "externalId"
    ISBROADCAST = "isBroadcast"
    ISCANCELLED = "isCancelled"
    ISENTRYEXITANNOUNCED = "isEntryExitAnnounced"
    JOININFORMATION = "joinInformation"
    JOINURL = "joinUrl"
    LOBBYBYPASSSETTINGS = "lobbyBypassSettings"
    PARTICIPANTS = "participants"
    STARTDATETIME = "startDateTime"
    SUBJECT = "subject"
    VIDEOTELECONFERENCEID = "videoTeleconferenceId"

class Enum70(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACTIVITY = "activity"
    AVAILABILITY = "availability"

class Get0itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CALLS = "calls"
    CALLRECORDS = "callRecords"
    ONLINEMEETINGS = "onlineMeetings"
    PRESENCES = "presences"

class Get1itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CALLS = "calls"
    CALLRECORDS = "callRecords"
    ONLINEMEETINGS = "onlineMeetings"
    PRESENCES = "presences"

class Get2itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SESSIONS = "sessions"

class Get3itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SEGMENTS = "segments"

class Get5itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ENDDATETIME = "endDateTime"
    ENDDATETIMEDESC = "endDateTime desc"
    JOINWEBURL = "joinWebUrl"
    JOINWEBURLDESC = "joinWebUrl desc"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LASTMODIFIEDDATETIMEDESC = "lastModifiedDateTime desc"
    MODALITIES = "modalities"
    MODALITIESDESC = "modalities desc"
    ORGANIZER = "organizer"
    ORGANIZERDESC = "organizer desc"
    PARTICIPANTS = "participants"
    PARTICIPANTSDESC = "participants desc"
    STARTDATETIME = "startDateTime"
    STARTDATETIMEDESC = "startDateTime desc"
    TYPE = "type"
    TYPEDESC = "type desc"
    VERSION = "version"
    VERSIONDESC = "version desc"

class Get6itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ENDDATETIME = "endDateTime"
    JOINWEBURL = "joinWebUrl"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    MODALITIES = "modalities"
    ORGANIZER = "organizer"
    PARTICIPANTS = "participants"
    STARTDATETIME = "startDateTime"
    TYPE = "type"
    VERSION = "version"
    SESSIONS = "sessions"

class Get7itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SESSIONS = "sessions"

class Get8itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SEGMENTS = "segments"

class Microsoftgraphaccesslevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EVERYONE = "everyone"
    INVITED = "invited"
    LOCKED = "locked"
    SAMEENTERPRISE = "sameEnterprise"
    SAMEENTERPRISEANDFEDERATED = "sameEnterpriseAndFederated"

class Microsoftgraphautoadmitteduserstype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EVERYONEINCOMPANY = "everyoneInCompany"
    EVERYONE = "everyone"

class Microsoftgraphbodytype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    TEXT = "text"
    HTML = "html"

class Microsoftgraphcalldirection(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INCOMING = "incoming"
    OUTGOING = "outgoing"

class Microsoftgraphcalldisposition(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DEFAULT = "default"
    SIMULTANEOUSRING = "simultaneousRing"
    FORWARD = "forward"

class Microsoftgraphcallrecordscalltype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    GROUPCALL = "groupCall"
    PEERTOPEER = "peerToPeer"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphcallrecordsfailurestage(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    CALLSETUP = "callSetup"
    MIDCALL = "midcall"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphcallrecordsmediastreamdirection(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CALLERTOCALLEE = "callerToCallee"
    CALLEETOCALLER = "calleeToCaller"

class Microsoftgraphcallrecordsmodality(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AUDIO = "audio"
    VIDEO = "video"
    VIDEOBASEDSCREENSHARING = "videoBasedScreenSharing"
    DATA = "data"
    SCREENSHARING = "screenSharing"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphcallrecordsnetworkconnectiontype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    WIRED = "wired"
    WIFI = "wifi"
    MOBILE = "mobile"
    TUNNEL = "tunnel"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphcallrecordswifiband(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    FREQUENCY24GHZ = "frequency24GHz"
    FREQUENCY50GHZ = "frequency50GHz"
    FREQUENCY60GHZ = "frequency60GHz"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphcallrecordswifiradiotype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    WIFI80211A = "wifi80211a"
    WIFI80211B = "wifi80211b"
    WIFI80211G = "wifi80211g"
    WIFI80211N = "wifi80211n"
    WIFI80211AC = "wifi80211ac"
    WIFI80211AX = "wifi80211ax"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphcallstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INCOMING = "incoming"
    ESTABLISHING = "establishing"
    RINGING = "ringing"
    ESTABLISHED = "established"
    HOLD = "hold"
    TRANSFERRING = "transferring"
    TRANSFERACCEPTED = "transferAccepted"
    REDIRECTING = "redirecting"
    TERMINATING = "terminating"
    TERMINATED = "terminated"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphcalltranscriptionstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTSTARTED = "notStarted"
    ACTIVE = "active"
    INACTIVE = "inactive"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphendpointtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DEFAULT = "default"
    VOICEMAIL = "voicemail"
    SKYPEFORBUSINESS = "skypeForBusiness"
    SKYPEFORBUSINESSVOIPPHONE = "skypeForBusinessVoipPhone"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphlobbybypassscope(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ORGANIZER = "organizer"
    ORGANIZATION = "organization"
    ORGANIZATIONANDFEDERATED = "organizationAndFederated"
    EVERYONE = "everyone"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphmediadirection(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INACTIVE = "inactive"
    SENDONLY = "sendOnly"
    RECEIVEONLY = "receiveOnly"
    SENDRECEIVE = "sendReceive"

class Microsoftgraphmediastate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ACTIVE = "active"
    INACTIVE = "inactive"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphmeetingcapabilities(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    QUESTIONANDANSWER = "questionAndAnswer"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphmodality(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    AUDIO = "audio"
    VIDEO = "video"
    VIDEOBASEDSCREENSHARING = "videoBasedScreenSharing"
    DATA = "data"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphonlinemeetingpresenters(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EVERYONE = "everyone"
    ORGANIZATION = "organization"
    ROLEISPRESENTER = "roleIsPresenter"
    ORGANIZER = "organizer"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphonlinemeetingrole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ATTENDEE = "attendee"
    PRESENTER = "presenter"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphoperationstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTSTARTED = "NotStarted"
    RUNNING = "Running"
    COMPLETED = "Completed"
    FAILED = "Failed"

class Microsoftgraphplaypromptcompletionreason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPLETEDSUCCESSFULLY = "completedSuccessfully"
    MEDIAOPERATIONCANCELED = "mediaOperationCanceled"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphrecordcompletionreason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    OPERATIONCANCELED = "operationCanceled"
    STOPTONEDETECTED = "stopToneDetected"
    MAXRECORDDURATIONREACHED = "maxRecordDurationReached"
    INITIALSILENCETIMEOUT = "initialSilenceTimeout"
    MAXSILENCETIMEOUT = "maxSilenceTimeout"
    PLAYPROMPTFAILED = "playPromptFailed"
    PLAYBEEPFAILED = "playBeepFailed"
    MEDIARECEIVETIMEOUT = "mediaReceiveTimeout"
    UNSPECIFIEDERROR = "unspecifiedError"

class Microsoftgraphrecordingstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    NOTRECORDING = "notRecording"
    RECORDING = "recording"
    FAILED = "failed"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphrejectreason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    BUSY = "busy"
    FORBIDDEN = "forbidden"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphroutingmode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ONETOONE = "oneToOne"
    MULTICAST = "multicast"

class Microsoftgraphroutingpolicy(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    NOMISSEDCALL = "noMissedCall"
    DISABLEFORWARDINGEXCEPTPHONE = "disableForwardingExceptPhone"
    DISABLEFORWARDING = "disableForwarding"
    PREFERSKYPEFORBUSINESS = "preferSkypeForBusiness"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphroutingtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FORWARDED = "forwarded"
    LOOKUP = "lookup"
    SELFFORK = "selfFork"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphscreensharingrole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    VIEWER = "viewer"
    SHARER = "sharer"

class Microsoftgraphtone(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    TONE0 = "tone0"
    TONE1 = "tone1"
    TONE2 = "tone2"
    TONE3 = "tone3"
    TONE4 = "tone4"
    TONE5 = "tone5"
    TONE6 = "tone6"
    TONE7 = "tone7"
    TONE8 = "tone8"
    TONE9 = "tone9"
    STAR = "star"
    POUND = "pound"
    A = "a"
    B = "b"
    C = "c"
    D = "d"
    FLASH = "flash"
