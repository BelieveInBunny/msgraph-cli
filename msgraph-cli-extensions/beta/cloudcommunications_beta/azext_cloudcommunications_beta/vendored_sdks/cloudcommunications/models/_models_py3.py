# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._cloud_communications_enums import *


class CollectionOfAudioRoutingGroup(msrest.serialization.Model):
    """Collection of audioRoutingGroup.

    :param value:
    :type value: list[~cloud_communications.models.MicrosoftGraphAudioRoutingGroup]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphAudioRoutingGroup]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphAudioRoutingGroup"]] = None,
        **kwargs
    ):
        super(CollectionOfAudioRoutingGroup, self).__init__(**kwargs)
        self.value = value


class CollectionOfCall(msrest.serialization.Model):
    """Collection of call.

    :param value:
    :type value: list[~cloud_communications.models.MicrosoftGraphCall]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphCall]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphCall"]] = None,
        **kwargs
    ):
        super(CollectionOfCall, self).__init__(**kwargs)
        self.value = value


class CollectionOfCallRecord(msrest.serialization.Model):
    """Collection of callRecord.

    :param value:
    :type value: list[~cloud_communications.models.MicrosoftGraphCallRecordsCallRecord]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphCallRecordsCallRecord]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphCallRecordsCallRecord"]] = None,
        **kwargs
    ):
        super(CollectionOfCallRecord, self).__init__(**kwargs)
        self.value = value


class CollectionOfCommsOperation(msrest.serialization.Model):
    """Collection of commsOperation.

    :param value:
    :type value: list[~cloud_communications.models.MicrosoftGraphCommsOperation]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphCommsOperation]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphCommsOperation"]] = None,
        **kwargs
    ):
        super(CollectionOfCommsOperation, self).__init__(**kwargs)
        self.value = value


class CollectionOfOnlineMeeting(msrest.serialization.Model):
    """Collection of onlineMeeting.

    :param value:
    :type value: list[~cloud_communications.models.MicrosoftGraphOnlineMeeting]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphOnlineMeeting]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphOnlineMeeting"]] = None,
        **kwargs
    ):
        super(CollectionOfOnlineMeeting, self).__init__(**kwargs)
        self.value = value


class CollectionOfParticipant(msrest.serialization.Model):
    """Collection of participant.

    :param value:
    :type value: list[~cloud_communications.models.MicrosoftGraphParticipant]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphParticipant]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphParticipant"]] = None,
        **kwargs
    ):
        super(CollectionOfParticipant, self).__init__(**kwargs)
        self.value = value


class CollectionOfSegment(msrest.serialization.Model):
    """Collection of segment.

    :param value:
    :type value: list[~cloud_communications.models.MicrosoftGraphCallRecordsSegment]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphCallRecordsSegment]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphCallRecordsSegment"]] = None,
        **kwargs
    ):
        super(CollectionOfSegment, self).__init__(**kwargs)
        self.value = value


class CollectionOfSession(msrest.serialization.Model):
    """Collection of session.

    :param value:
    :type value: list[~cloud_communications.models.MicrosoftGraphCallRecordsSession]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphCallRecordsSession]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphCallRecordsSession"]] = None,
        **kwargs
    ):
        super(CollectionOfSession, self).__init__(**kwargs)
        self.value = value


class MicrosoftGraphAudioConferencing(msrest.serialization.Model):
    """audioConferencing.

    :param conference_id:
    :type conference_id: str
    :param toll_number: The toll number that connects to the Audio Conference Provider.
    :type toll_number: str
    :param toll_free_number: The toll-free number that connects to the Audio Conference Provider.
    :type toll_free_number: str
    :param dialin_url: A URL to the externally-accessible web page that contains dial-in
     information.
    :type dialin_url: str
    """

    _attribute_map = {
        'conference_id': {'key': 'conferenceId', 'type': 'str'},
        'toll_number': {'key': 'tollNumber', 'type': 'str'},
        'toll_free_number': {'key': 'tollFreeNumber', 'type': 'str'},
        'dialin_url': {'key': 'dialinUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        conference_id: Optional[str] = None,
        toll_number: Optional[str] = None,
        toll_free_number: Optional[str] = None,
        dialin_url: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphAudioConferencing, self).__init__(**kwargs)
        self.conference_id = conference_id
        self.toll_number = toll_number
        self.toll_free_number = toll_free_number
        self.dialin_url = dialin_url


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.id = id


class MicrosoftGraphAudioRoutingGroup(MicrosoftGraphEntity):
    """audioRoutingGroup.

    :param id: Read-only.
    :type id: str
    :param routing_mode:  Possible values include: "oneToOne", "multicast".
    :type routing_mode: str or ~cloud_communications.models.MicrosoftGraphRoutingMode
    :param sources:
    :type sources: list[str]
    :param receivers:
    :type receivers: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'routing_mode': {'key': 'routingMode', 'type': 'str'},
        'sources': {'key': 'sources', 'type': '[str]'},
        'receivers': {'key': 'receivers', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        routing_mode: Optional[Union[str, "MicrosoftGraphRoutingMode"]] = None,
        sources: Optional[List[str]] = None,
        receivers: Optional[List[str]] = None,
        **kwargs
    ):
        super(MicrosoftGraphAudioRoutingGroup, self).__init__(id=id, **kwargs)
        self.routing_mode = routing_mode
        self.sources = sources
        self.receivers = receivers


class MicrosoftGraphCall(MicrosoftGraphEntity):
    """call.

    :param id: Read-only.
    :type id: str
    :param state:  Possible values include: "incoming", "establishing", "ringing", "established",
     "hold", "transferring", "transferAccepted", "redirecting", "terminating", "terminated",
     "unknownFutureValue".
    :type state: str or ~cloud_communications.models.MicrosoftGraphCallState
    :param result_info: ResultInfo.
    :type result_info: ~cloud_communications.models.MicrosoftGraphResultInfo
    :param termination_reason:
    :type termination_reason: str
    :param direction:  Possible values include: "incoming", "outgoing".
    :type direction: str or ~cloud_communications.models.MicrosoftGraphCallDirection
    :param ringing_timeout_in_seconds:
    :type ringing_timeout_in_seconds: int
    :param subject: The subject of the conversation.
    :type subject: str
    :param callback_uri: The callback URL on which callbacks will be delivered. Must be https.
    :type callback_uri: str
    :param call_routes:
    :type call_routes: list[~cloud_communications.models.MicrosoftGraphCallRoute]
    :param targets: The targets of the call. Required information for creating peer to peer call.
    :type targets: list[~cloud_communications.models.MicrosoftGraphInvitationParticipantInfo]
    :param requested_modalities: The list of requested modalities.
    :type requested_modalities: list[str or ~cloud_communications.models.MicrosoftGraphModality]
    :param active_modalities:
    :type active_modalities: list[str or ~cloud_communications.models.MicrosoftGraphModality]
    :param chat_info: chatInfo.
    :type chat_info: ~cloud_communications.models.MicrosoftGraphChatInfo
    :param call_options: Any object.
    :type call_options: object
    :param meeting_capability: meetingCapability.
    :type meeting_capability: ~cloud_communications.models.MicrosoftGraphMeetingCapability
    :param routing_policies:
    :type routing_policies: list[str or ~cloud_communications.models.MicrosoftGraphRoutingPolicy]
    :param tenant_id:
    :type tenant_id: str
    :param my_participant_id: Read-only.
    :type my_participant_id: str
    :param tone_info: toneInfo.
    :type tone_info: ~cloud_communications.models.MicrosoftGraphToneInfo
    :param participants: Read-only. Nullable.
    :type participants: list[~cloud_communications.models.MicrosoftGraphParticipant]
    :param audio_routing_groups:
    :type audio_routing_groups: list[~cloud_communications.models.MicrosoftGraphAudioRoutingGroup]
    :param operations: Read-only. Nullable.
    :type operations: list[~cloud_communications.models.MicrosoftGraphCommsOperation]
    :param source_participant_id:
    :type source_participant_id: str
    :param observed_participant_id:
    :type observed_participant_id: str
    :param on_behalf_of: identitySet.
    :type on_behalf_of: ~cloud_communications.models.MicrosoftGraphIdentitySet
    :param transferor: identitySet.
    :type transferor: ~cloud_communications.models.MicrosoftGraphIdentitySet
    :param allow_conversation_without_host:
    :type allow_conversation_without_host: bool
    :param remove_from_default_audio_group:
    :type remove_from_default_audio_group: bool
    :param identity_answered_by_identity: identitySet.
    :type identity_answered_by_identity: ~cloud_communications.models.MicrosoftGraphIdentitySet
    :param endpoint_type_answered_by_endpoint_type:  Possible values include: "default",
     "voicemail", "skypeForBusiness", "skypeForBusinessVoipPhone", "unknownFutureValue".
    :type endpoint_type_answered_by_endpoint_type: str or
     ~cloud_communications.models.MicrosoftGraphEndpointType
    :param region_answered_by_region: The home region of the participant. This can be a country, a
     continent, or a larger geographic region. This does not change based on the participant's
     current physical location. Read-only.
    :type region_answered_by_region: str
    :param language_id_answered_by_language_id: The language culture string. Read-only.
    :type language_id_answered_by_language_id: str
    :param country_code_answered_by_country_code:
    :type country_code_answered_by_country_code: str
    :param identity_source_identity: identitySet.
    :type identity_source_identity: ~cloud_communications.models.MicrosoftGraphIdentitySet
    :param endpoint_type_source_endpoint_type:  Possible values include: "default", "voicemail",
     "skypeForBusiness", "skypeForBusinessVoipPhone", "unknownFutureValue".
    :type endpoint_type_source_endpoint_type: str or
     ~cloud_communications.models.MicrosoftGraphEndpointType
    :param region_source_region: The home region of the participant. This can be a country, a
     continent, or a larger geographic region. This does not change based on the participant's
     current physical location. Read-only.
    :type region_source_region: str
    :param language_id_source_language_id: The language culture string. Read-only.
    :type language_id_source_language_id: str
    :param country_code_source_country_code:
    :type country_code_source_country_code: str
    :param audio:  Possible values include: "active", "inactive", "unknownFutureValue".
    :type audio: str or ~cloud_communications.models.MicrosoftGraphMediaState
    """

    _validation = {
        'ringing_timeout_in_seconds': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'result_info': {'key': 'resultInfo', 'type': 'MicrosoftGraphResultInfo'},
        'termination_reason': {'key': 'terminationReason', 'type': 'str'},
        'direction': {'key': 'direction', 'type': 'str'},
        'ringing_timeout_in_seconds': {'key': 'ringingTimeoutInSeconds', 'type': 'int'},
        'subject': {'key': 'subject', 'type': 'str'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
        'call_routes': {'key': 'callRoutes', 'type': '[MicrosoftGraphCallRoute]'},
        'targets': {'key': 'targets', 'type': '[MicrosoftGraphInvitationParticipantInfo]'},
        'requested_modalities': {'key': 'requestedModalities', 'type': '[str]'},
        'active_modalities': {'key': 'activeModalities', 'type': '[str]'},
        'chat_info': {'key': 'chatInfo', 'type': 'MicrosoftGraphChatInfo'},
        'call_options': {'key': 'callOptions', 'type': 'object'},
        'meeting_capability': {'key': 'meetingCapability', 'type': 'MicrosoftGraphMeetingCapability'},
        'routing_policies': {'key': 'routingPolicies', 'type': '[str]'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'my_participant_id': {'key': 'myParticipantId', 'type': 'str'},
        'tone_info': {'key': 'toneInfo', 'type': 'MicrosoftGraphToneInfo'},
        'participants': {'key': 'participants', 'type': '[MicrosoftGraphParticipant]'},
        'audio_routing_groups': {'key': 'audioRoutingGroups', 'type': '[MicrosoftGraphAudioRoutingGroup]'},
        'operations': {'key': 'operations', 'type': '[MicrosoftGraphCommsOperation]'},
        'source_participant_id': {'key': 'incomingContext.sourceParticipantId', 'type': 'str'},
        'observed_participant_id': {'key': 'incomingContext.observedParticipantId', 'type': 'str'},
        'on_behalf_of': {'key': 'incomingContext.onBehalfOf', 'type': 'MicrosoftGraphIdentitySet'},
        'transferor': {'key': 'incomingContext.transferor', 'type': 'MicrosoftGraphIdentitySet'},
        'allow_conversation_without_host': {'key': 'meetingInfo.allowConversationWithoutHost', 'type': 'bool'},
        'remove_from_default_audio_group': {'key': 'mediaConfig.removeFromDefaultAudioGroup', 'type': 'bool'},
        'identity_answered_by_identity': {'key': 'answeredBy.identity', 'type': 'MicrosoftGraphIdentitySet'},
        'endpoint_type_answered_by_endpoint_type': {'key': 'answeredBy.endpointType', 'type': 'str'},
        'region_answered_by_region': {'key': 'answeredBy.region', 'type': 'str'},
        'language_id_answered_by_language_id': {'key': 'answeredBy.languageId', 'type': 'str'},
        'country_code_answered_by_country_code': {'key': 'answeredBy.countryCode', 'type': 'str'},
        'identity_source_identity': {'key': 'source.identity', 'type': 'MicrosoftGraphIdentitySet'},
        'endpoint_type_source_endpoint_type': {'key': 'source.endpointType', 'type': 'str'},
        'region_source_region': {'key': 'source.region', 'type': 'str'},
        'language_id_source_language_id': {'key': 'source.languageId', 'type': 'str'},
        'country_code_source_country_code': {'key': 'source.countryCode', 'type': 'str'},
        'audio': {'key': 'mediaState.audio', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        state: Optional[Union[str, "MicrosoftGraphCallState"]] = None,
        result_info: Optional["MicrosoftGraphResultInfo"] = None,
        termination_reason: Optional[str] = None,
        direction: Optional[Union[str, "MicrosoftGraphCallDirection"]] = None,
        ringing_timeout_in_seconds: Optional[int] = None,
        subject: Optional[str] = None,
        callback_uri: Optional[str] = None,
        call_routes: Optional[List["MicrosoftGraphCallRoute"]] = None,
        targets: Optional[List["MicrosoftGraphInvitationParticipantInfo"]] = None,
        requested_modalities: Optional[List[Union[str, "MicrosoftGraphModality"]]] = None,
        active_modalities: Optional[List[Union[str, "MicrosoftGraphModality"]]] = None,
        chat_info: Optional["MicrosoftGraphChatInfo"] = None,
        call_options: Optional[object] = None,
        meeting_capability: Optional["MicrosoftGraphMeetingCapability"] = None,
        routing_policies: Optional[List[Union[str, "MicrosoftGraphRoutingPolicy"]]] = None,
        tenant_id: Optional[str] = None,
        my_participant_id: Optional[str] = None,
        tone_info: Optional["MicrosoftGraphToneInfo"] = None,
        participants: Optional[List["MicrosoftGraphParticipant"]] = None,
        audio_routing_groups: Optional[List["MicrosoftGraphAudioRoutingGroup"]] = None,
        operations: Optional[List["MicrosoftGraphCommsOperation"]] = None,
        source_participant_id: Optional[str] = None,
        observed_participant_id: Optional[str] = None,
        on_behalf_of: Optional["MicrosoftGraphIdentitySet"] = None,
        transferor: Optional["MicrosoftGraphIdentitySet"] = None,
        allow_conversation_without_host: Optional[bool] = None,
        remove_from_default_audio_group: Optional[bool] = None,
        identity_answered_by_identity: Optional["MicrosoftGraphIdentitySet"] = None,
        endpoint_type_answered_by_endpoint_type: Optional[Union[str, "MicrosoftGraphEndpointType"]] = None,
        region_answered_by_region: Optional[str] = None,
        language_id_answered_by_language_id: Optional[str] = None,
        country_code_answered_by_country_code: Optional[str] = None,
        identity_source_identity: Optional["MicrosoftGraphIdentitySet"] = None,
        endpoint_type_source_endpoint_type: Optional[Union[str, "MicrosoftGraphEndpointType"]] = None,
        region_source_region: Optional[str] = None,
        language_id_source_language_id: Optional[str] = None,
        country_code_source_country_code: Optional[str] = None,
        audio: Optional[Union[str, "MicrosoftGraphMediaState"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphCall, self).__init__(id=id, **kwargs)
        self.state = state
        self.result_info = result_info
        self.termination_reason = termination_reason
        self.direction = direction
        self.ringing_timeout_in_seconds = ringing_timeout_in_seconds
        self.subject = subject
        self.callback_uri = callback_uri
        self.call_routes = call_routes
        self.targets = targets
        self.requested_modalities = requested_modalities
        self.active_modalities = active_modalities
        self.chat_info = chat_info
        self.call_options = call_options
        self.meeting_capability = meeting_capability
        self.routing_policies = routing_policies
        self.tenant_id = tenant_id
        self.my_participant_id = my_participant_id
        self.tone_info = tone_info
        self.participants = participants
        self.audio_routing_groups = audio_routing_groups
        self.operations = operations
        self.source_participant_id = source_participant_id
        self.observed_participant_id = observed_participant_id
        self.on_behalf_of = on_behalf_of
        self.transferor = transferor
        self.allow_conversation_without_host = allow_conversation_without_host
        self.remove_from_default_audio_group = remove_from_default_audio_group
        self.identity_answered_by_identity = identity_answered_by_identity
        self.endpoint_type_answered_by_endpoint_type = endpoint_type_answered_by_endpoint_type
        self.region_answered_by_region = region_answered_by_region
        self.language_id_answered_by_language_id = language_id_answered_by_language_id
        self.country_code_answered_by_country_code = country_code_answered_by_country_code
        self.identity_source_identity = identity_source_identity
        self.endpoint_type_source_endpoint_type = endpoint_type_source_endpoint_type
        self.region_source_region = region_source_region
        self.language_id_source_language_id = language_id_source_language_id
        self.country_code_source_country_code = country_code_source_country_code
        self.audio = audio


class MicrosoftGraphCallRecordsCallRecord(MicrosoftGraphEntity):
    """callRecord.

    :param id: Read-only.
    :type id: str
    :param version:
    :type version: long
    :param type:  Possible values include: "unknown", "groupCall", "peerToPeer",
     "unknownFutureValue".
    :type type: str or ~cloud_communications.models.MicrosoftGraphCallRecordsCallType
    :param modalities:
    :type modalities: list[str or ~cloud_communications.models.MicrosoftGraphCallRecordsModality]
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param start_date_time:
    :type start_date_time: ~datetime.datetime
    :param end_date_time:
    :type end_date_time: ~datetime.datetime
    :param participants:
    :type participants: list[~cloud_communications.models.MicrosoftGraphIdentitySet]
    :param join_web_url:
    :type join_web_url: str
    :param sessions:
    :type sessions: list[~cloud_communications.models.MicrosoftGraphCallRecordsSession]
    :param id_organizer_user_id: Unique identifier for the identity.
    :type id_organizer_user_id: str
    :param display_name_organizer_user_display_name: The identity's display name. Note that this
     may not always be available or up to date. For example, if a user changes their display name,
     the API may show the new value in a future response, but the items associated with the user
     won't show up as having changed when using delta.
    :type display_name_organizer_user_display_name: str
    :param id_organizer_device_id: Unique identifier for the identity.
    :type id_organizer_device_id: str
    :param display_name_organizer_device_display_name: The identity's display name. Note that this
     may not always be available or up to date. For example, if a user changes their display name,
     the API may show the new value in a future response, but the items associated with the user
     won't show up as having changed when using delta.
    :type display_name_organizer_device_display_name: str
    :param id_organizer_application_id: Unique identifier for the identity.
    :type id_organizer_application_id: str
    :param display_name_organizer_application_display_name: The identity's display name. Note that
     this may not always be available or up to date. For example, if a user changes their display
     name, the API may show the new value in a future response, but the items associated with the
     user won't show up as having changed when using delta.
    :type display_name_organizer_application_display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'version': {'key': 'version', 'type': 'long'},
        'type': {'key': 'type', 'type': 'str'},
        'modalities': {'key': 'modalities', 'type': '[str]'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'participants': {'key': 'participants', 'type': '[MicrosoftGraphIdentitySet]'},
        'join_web_url': {'key': 'joinWebUrl', 'type': 'str'},
        'sessions': {'key': 'sessions', 'type': '[MicrosoftGraphCallRecordsSession]'},
        'id_organizer_user_id': {'key': 'organizer.user.id', 'type': 'str'},
        'display_name_organizer_user_display_name': {'key': 'organizer.user.displayName', 'type': 'str'},
        'id_organizer_device_id': {'key': 'organizer.device.id', 'type': 'str'},
        'display_name_organizer_device_display_name': {'key': 'organizer.device.displayName', 'type': 'str'},
        'id_organizer_application_id': {'key': 'organizer.application.id', 'type': 'str'},
        'display_name_organizer_application_display_name': {'key': 'organizer.application.displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        version: Optional[int] = None,
        type: Optional[Union[str, "MicrosoftGraphCallRecordsCallType"]] = None,
        modalities: Optional[List[Union[str, "MicrosoftGraphCallRecordsModality"]]] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        start_date_time: Optional[datetime.datetime] = None,
        end_date_time: Optional[datetime.datetime] = None,
        participants: Optional[List["MicrosoftGraphIdentitySet"]] = None,
        join_web_url: Optional[str] = None,
        sessions: Optional[List["MicrosoftGraphCallRecordsSession"]] = None,
        id_organizer_user_id: Optional[str] = None,
        display_name_organizer_user_display_name: Optional[str] = None,
        id_organizer_device_id: Optional[str] = None,
        display_name_organizer_device_display_name: Optional[str] = None,
        id_organizer_application_id: Optional[str] = None,
        display_name_organizer_application_display_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphCallRecordsCallRecord, self).__init__(id=id, **kwargs)
        self.version = version
        self.type = type
        self.modalities = modalities
        self.last_modified_date_time = last_modified_date_time
        self.start_date_time = start_date_time
        self.end_date_time = end_date_time
        self.participants = participants
        self.join_web_url = join_web_url
        self.sessions = sessions
        self.id_organizer_user_id = id_organizer_user_id
        self.display_name_organizer_user_display_name = display_name_organizer_user_display_name
        self.id_organizer_device_id = id_organizer_device_id
        self.display_name_organizer_device_display_name = display_name_organizer_device_display_name
        self.id_organizer_application_id = id_organizer_application_id
        self.display_name_organizer_application_display_name = display_name_organizer_application_display_name


class MicrosoftGraphCallRecordsDeviceInfo(msrest.serialization.Model):
    """deviceInfo.

    :param capture_device_name:
    :type capture_device_name: str
    :param capture_device_driver:
    :type capture_device_driver: str
    :param render_device_name:
    :type render_device_name: str
    :param render_device_driver:
    :type render_device_driver: str
    :param sent_signal_level:
    :type sent_signal_level: int
    :param received_signal_level:
    :type received_signal_level: int
    :param sent_noise_level:
    :type sent_noise_level: int
    :param received_noise_level:
    :type received_noise_level: int
    :param initial_signal_level_root_mean_square:
    :type initial_signal_level_root_mean_square: float
    :param cpu_insufficent_event_ratio:
    :type cpu_insufficent_event_ratio: float
    :param render_not_functioning_event_ratio:
    :type render_not_functioning_event_ratio: float
    :param capture_not_functioning_event_ratio:
    :type capture_not_functioning_event_ratio: float
    :param device_glitch_event_ratio:
    :type device_glitch_event_ratio: float
    :param low_speech_to_noise_event_ratio:
    :type low_speech_to_noise_event_ratio: float
    :param low_speech_level_event_ratio:
    :type low_speech_level_event_ratio: float
    :param device_clipping_event_ratio:
    :type device_clipping_event_ratio: float
    :param howling_event_count:
    :type howling_event_count: int
    :param render_zero_volume_event_ratio:
    :type render_zero_volume_event_ratio: float
    :param render_mute_event_ratio:
    :type render_mute_event_ratio: float
    :param mic_glitch_rate:
    :type mic_glitch_rate: float
    :param speaker_glitch_rate:
    :type speaker_glitch_rate: float
    """

    _validation = {
        'sent_signal_level': {'maximum': 2147483647, 'minimum': -2147483648},
        'received_signal_level': {'maximum': 2147483647, 'minimum': -2147483648},
        'sent_noise_level': {'maximum': 2147483647, 'minimum': -2147483648},
        'received_noise_level': {'maximum': 2147483647, 'minimum': -2147483648},
        'howling_event_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'capture_device_name': {'key': 'captureDeviceName', 'type': 'str'},
        'capture_device_driver': {'key': 'captureDeviceDriver', 'type': 'str'},
        'render_device_name': {'key': 'renderDeviceName', 'type': 'str'},
        'render_device_driver': {'key': 'renderDeviceDriver', 'type': 'str'},
        'sent_signal_level': {'key': 'sentSignalLevel', 'type': 'int'},
        'received_signal_level': {'key': 'receivedSignalLevel', 'type': 'int'},
        'sent_noise_level': {'key': 'sentNoiseLevel', 'type': 'int'},
        'received_noise_level': {'key': 'receivedNoiseLevel', 'type': 'int'},
        'initial_signal_level_root_mean_square': {'key': 'initialSignalLevelRootMeanSquare', 'type': 'float'},
        'cpu_insufficent_event_ratio': {'key': 'cpuInsufficentEventRatio', 'type': 'float'},
        'render_not_functioning_event_ratio': {'key': 'renderNotFunctioningEventRatio', 'type': 'float'},
        'capture_not_functioning_event_ratio': {'key': 'captureNotFunctioningEventRatio', 'type': 'float'},
        'device_glitch_event_ratio': {'key': 'deviceGlitchEventRatio', 'type': 'float'},
        'low_speech_to_noise_event_ratio': {'key': 'lowSpeechToNoiseEventRatio', 'type': 'float'},
        'low_speech_level_event_ratio': {'key': 'lowSpeechLevelEventRatio', 'type': 'float'},
        'device_clipping_event_ratio': {'key': 'deviceClippingEventRatio', 'type': 'float'},
        'howling_event_count': {'key': 'howlingEventCount', 'type': 'int'},
        'render_zero_volume_event_ratio': {'key': 'renderZeroVolumeEventRatio', 'type': 'float'},
        'render_mute_event_ratio': {'key': 'renderMuteEventRatio', 'type': 'float'},
        'mic_glitch_rate': {'key': 'micGlitchRate', 'type': 'float'},
        'speaker_glitch_rate': {'key': 'speakerGlitchRate', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        capture_device_name: Optional[str] = None,
        capture_device_driver: Optional[str] = None,
        render_device_name: Optional[str] = None,
        render_device_driver: Optional[str] = None,
        sent_signal_level: Optional[int] = None,
        received_signal_level: Optional[int] = None,
        sent_noise_level: Optional[int] = None,
        received_noise_level: Optional[int] = None,
        initial_signal_level_root_mean_square: Optional[float] = None,
        cpu_insufficent_event_ratio: Optional[float] = None,
        render_not_functioning_event_ratio: Optional[float] = None,
        capture_not_functioning_event_ratio: Optional[float] = None,
        device_glitch_event_ratio: Optional[float] = None,
        low_speech_to_noise_event_ratio: Optional[float] = None,
        low_speech_level_event_ratio: Optional[float] = None,
        device_clipping_event_ratio: Optional[float] = None,
        howling_event_count: Optional[int] = None,
        render_zero_volume_event_ratio: Optional[float] = None,
        render_mute_event_ratio: Optional[float] = None,
        mic_glitch_rate: Optional[float] = None,
        speaker_glitch_rate: Optional[float] = None,
        **kwargs
    ):
        super(MicrosoftGraphCallRecordsDeviceInfo, self).__init__(**kwargs)
        self.capture_device_name = capture_device_name
        self.capture_device_driver = capture_device_driver
        self.render_device_name = render_device_name
        self.render_device_driver = render_device_driver
        self.sent_signal_level = sent_signal_level
        self.received_signal_level = received_signal_level
        self.sent_noise_level = sent_noise_level
        self.received_noise_level = received_noise_level
        self.initial_signal_level_root_mean_square = initial_signal_level_root_mean_square
        self.cpu_insufficent_event_ratio = cpu_insufficent_event_ratio
        self.render_not_functioning_event_ratio = render_not_functioning_event_ratio
        self.capture_not_functioning_event_ratio = capture_not_functioning_event_ratio
        self.device_glitch_event_ratio = device_glitch_event_ratio
        self.low_speech_to_noise_event_ratio = low_speech_to_noise_event_ratio
        self.low_speech_level_event_ratio = low_speech_level_event_ratio
        self.device_clipping_event_ratio = device_clipping_event_ratio
        self.howling_event_count = howling_event_count
        self.render_zero_volume_event_ratio = render_zero_volume_event_ratio
        self.render_mute_event_ratio = render_mute_event_ratio
        self.mic_glitch_rate = mic_glitch_rate
        self.speaker_glitch_rate = speaker_glitch_rate


class MicrosoftGraphCallRecordsFailureInfo(msrest.serialization.Model):
    """failureInfo.

    :param stage:  Possible values include: "unknown", "callSetup", "midcall",
     "unknownFutureValue".
    :type stage: str or ~cloud_communications.models.MicrosoftGraphCallRecordsFailureStage
    :param reason:
    :type reason: str
    """

    _attribute_map = {
        'stage': {'key': 'stage', 'type': 'str'},
        'reason': {'key': 'reason', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        stage: Optional[Union[str, "MicrosoftGraphCallRecordsFailureStage"]] = None,
        reason: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphCallRecordsFailureInfo, self).__init__(**kwargs)
        self.stage = stage
        self.reason = reason


class MicrosoftGraphCallRecordsMedia(msrest.serialization.Model):
    """media.

    :param label:
    :type label: str
    :param caller_network: networkInfo.
    :type caller_network: ~cloud_communications.models.MicrosoftGraphCallRecordsNetworkInfo
    :param callee_network: networkInfo.
    :type callee_network: ~cloud_communications.models.MicrosoftGraphCallRecordsNetworkInfo
    :param caller_device: deviceInfo.
    :type caller_device: ~cloud_communications.models.MicrosoftGraphCallRecordsDeviceInfo
    :param callee_device: deviceInfo.
    :type callee_device: ~cloud_communications.models.MicrosoftGraphCallRecordsDeviceInfo
    :param streams:
    :type streams: list[~cloud_communications.models.MicrosoftGraphCallRecordsMediaStream]
    """

    _attribute_map = {
        'label': {'key': 'label', 'type': 'str'},
        'caller_network': {'key': 'callerNetwork', 'type': 'MicrosoftGraphCallRecordsNetworkInfo'},
        'callee_network': {'key': 'calleeNetwork', 'type': 'MicrosoftGraphCallRecordsNetworkInfo'},
        'caller_device': {'key': 'callerDevice', 'type': 'MicrosoftGraphCallRecordsDeviceInfo'},
        'callee_device': {'key': 'calleeDevice', 'type': 'MicrosoftGraphCallRecordsDeviceInfo'},
        'streams': {'key': 'streams', 'type': '[MicrosoftGraphCallRecordsMediaStream]'},
    }

    def __init__(
        self,
        *,
        label: Optional[str] = None,
        caller_network: Optional["MicrosoftGraphCallRecordsNetworkInfo"] = None,
        callee_network: Optional["MicrosoftGraphCallRecordsNetworkInfo"] = None,
        caller_device: Optional["MicrosoftGraphCallRecordsDeviceInfo"] = None,
        callee_device: Optional["MicrosoftGraphCallRecordsDeviceInfo"] = None,
        streams: Optional[List["MicrosoftGraphCallRecordsMediaStream"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphCallRecordsMedia, self).__init__(**kwargs)
        self.label = label
        self.caller_network = caller_network
        self.callee_network = callee_network
        self.caller_device = caller_device
        self.callee_device = callee_device
        self.streams = streams


class MicrosoftGraphCallRecordsMediaStream(msrest.serialization.Model):
    """mediaStream.

    :param stream_id:
    :type stream_id: str
    :param start_date_time:
    :type start_date_time: ~datetime.datetime
    :param end_date_time:
    :type end_date_time: ~datetime.datetime
    :param stream_direction:  Possible values include: "callerToCallee", "calleeToCaller".
    :type stream_direction: str or
     ~cloud_communications.models.MicrosoftGraphCallRecordsMediaStreamDirection
    :param average_audio_degradation:
    :type average_audio_degradation: float
    :param average_jitter:
    :type average_jitter: ~datetime.timedelta
    :param max_jitter:
    :type max_jitter: ~datetime.timedelta
    :param average_packet_loss_rate:
    :type average_packet_loss_rate: float
    :param max_packet_loss_rate:
    :type max_packet_loss_rate: float
    :param average_ratio_of_concealed_samples:
    :type average_ratio_of_concealed_samples: float
    :param max_ratio_of_concealed_samples:
    :type max_ratio_of_concealed_samples: float
    :param average_round_trip_time:
    :type average_round_trip_time: ~datetime.timedelta
    :param max_round_trip_time:
    :type max_round_trip_time: ~datetime.timedelta
    :param packet_utilization:
    :type packet_utilization: long
    :param average_bandwidth_estimate:
    :type average_bandwidth_estimate: long
    :param was_media_bypassed:
    :type was_media_bypassed: bool
    :param post_forward_error_correction_packet_loss_rate:
    :type post_forward_error_correction_packet_loss_rate: float
    :param average_video_frame_loss_percentage:
    :type average_video_frame_loss_percentage: float
    :param average_received_frame_rate:
    :type average_received_frame_rate: float
    :param low_frame_rate_ratio:
    :type low_frame_rate_ratio: float
    :param average_video_packet_loss_rate:
    :type average_video_packet_loss_rate: float
    :param average_video_frame_rate:
    :type average_video_frame_rate: float
    :param low_video_processing_capability_ratio:
    :type low_video_processing_capability_ratio: float
    :param average_audio_network_jitter:
    :type average_audio_network_jitter: ~datetime.timedelta
    :param max_audio_network_jitter:
    :type max_audio_network_jitter: ~datetime.timedelta
    """

    _attribute_map = {
        'stream_id': {'key': 'streamId', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'stream_direction': {'key': 'streamDirection', 'type': 'str'},
        'average_audio_degradation': {'key': 'averageAudioDegradation', 'type': 'float'},
        'average_jitter': {'key': 'averageJitter', 'type': 'duration'},
        'max_jitter': {'key': 'maxJitter', 'type': 'duration'},
        'average_packet_loss_rate': {'key': 'averagePacketLossRate', 'type': 'float'},
        'max_packet_loss_rate': {'key': 'maxPacketLossRate', 'type': 'float'},
        'average_ratio_of_concealed_samples': {'key': 'averageRatioOfConcealedSamples', 'type': 'float'},
        'max_ratio_of_concealed_samples': {'key': 'maxRatioOfConcealedSamples', 'type': 'float'},
        'average_round_trip_time': {'key': 'averageRoundTripTime', 'type': 'duration'},
        'max_round_trip_time': {'key': 'maxRoundTripTime', 'type': 'duration'},
        'packet_utilization': {'key': 'packetUtilization', 'type': 'long'},
        'average_bandwidth_estimate': {'key': 'averageBandwidthEstimate', 'type': 'long'},
        'was_media_bypassed': {'key': 'wasMediaBypassed', 'type': 'bool'},
        'post_forward_error_correction_packet_loss_rate': {'key': 'postForwardErrorCorrectionPacketLossRate', 'type': 'float'},
        'average_video_frame_loss_percentage': {'key': 'averageVideoFrameLossPercentage', 'type': 'float'},
        'average_received_frame_rate': {'key': 'averageReceivedFrameRate', 'type': 'float'},
        'low_frame_rate_ratio': {'key': 'lowFrameRateRatio', 'type': 'float'},
        'average_video_packet_loss_rate': {'key': 'averageVideoPacketLossRate', 'type': 'float'},
        'average_video_frame_rate': {'key': 'averageVideoFrameRate', 'type': 'float'},
        'low_video_processing_capability_ratio': {'key': 'lowVideoProcessingCapabilityRatio', 'type': 'float'},
        'average_audio_network_jitter': {'key': 'averageAudioNetworkJitter', 'type': 'duration'},
        'max_audio_network_jitter': {'key': 'maxAudioNetworkJitter', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        stream_id: Optional[str] = None,
        start_date_time: Optional[datetime.datetime] = None,
        end_date_time: Optional[datetime.datetime] = None,
        stream_direction: Optional[Union[str, "MicrosoftGraphCallRecordsMediaStreamDirection"]] = None,
        average_audio_degradation: Optional[float] = None,
        average_jitter: Optional[datetime.timedelta] = None,
        max_jitter: Optional[datetime.timedelta] = None,
        average_packet_loss_rate: Optional[float] = None,
        max_packet_loss_rate: Optional[float] = None,
        average_ratio_of_concealed_samples: Optional[float] = None,
        max_ratio_of_concealed_samples: Optional[float] = None,
        average_round_trip_time: Optional[datetime.timedelta] = None,
        max_round_trip_time: Optional[datetime.timedelta] = None,
        packet_utilization: Optional[int] = None,
        average_bandwidth_estimate: Optional[int] = None,
        was_media_bypassed: Optional[bool] = None,
        post_forward_error_correction_packet_loss_rate: Optional[float] = None,
        average_video_frame_loss_percentage: Optional[float] = None,
        average_received_frame_rate: Optional[float] = None,
        low_frame_rate_ratio: Optional[float] = None,
        average_video_packet_loss_rate: Optional[float] = None,
        average_video_frame_rate: Optional[float] = None,
        low_video_processing_capability_ratio: Optional[float] = None,
        average_audio_network_jitter: Optional[datetime.timedelta] = None,
        max_audio_network_jitter: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        super(MicrosoftGraphCallRecordsMediaStream, self).__init__(**kwargs)
        self.stream_id = stream_id
        self.start_date_time = start_date_time
        self.end_date_time = end_date_time
        self.stream_direction = stream_direction
        self.average_audio_degradation = average_audio_degradation
        self.average_jitter = average_jitter
        self.max_jitter = max_jitter
        self.average_packet_loss_rate = average_packet_loss_rate
        self.max_packet_loss_rate = max_packet_loss_rate
        self.average_ratio_of_concealed_samples = average_ratio_of_concealed_samples
        self.max_ratio_of_concealed_samples = max_ratio_of_concealed_samples
        self.average_round_trip_time = average_round_trip_time
        self.max_round_trip_time = max_round_trip_time
        self.packet_utilization = packet_utilization
        self.average_bandwidth_estimate = average_bandwidth_estimate
        self.was_media_bypassed = was_media_bypassed
        self.post_forward_error_correction_packet_loss_rate = post_forward_error_correction_packet_loss_rate
        self.average_video_frame_loss_percentage = average_video_frame_loss_percentage
        self.average_received_frame_rate = average_received_frame_rate
        self.low_frame_rate_ratio = low_frame_rate_ratio
        self.average_video_packet_loss_rate = average_video_packet_loss_rate
        self.average_video_frame_rate = average_video_frame_rate
        self.low_video_processing_capability_ratio = low_video_processing_capability_ratio
        self.average_audio_network_jitter = average_audio_network_jitter
        self.max_audio_network_jitter = max_audio_network_jitter


class MicrosoftGraphCallRecordsNetworkInfo(msrest.serialization.Model):
    """networkInfo.

    :param ip_address:
    :type ip_address: str
    :param subnet:
    :type subnet: str
    :param link_speed:
    :type link_speed: long
    :param connection_type:  Possible values include: "unknown", "wired", "wifi", "mobile",
     "tunnel", "unknownFutureValue".
    :type connection_type: str or
     ~cloud_communications.models.MicrosoftGraphCallRecordsNetworkConnectionType
    :param port:
    :type port: int
    :param reflexive_ip_address:
    :type reflexive_ip_address: str
    :param relay_ip_address:
    :type relay_ip_address: str
    :param relay_port:
    :type relay_port: int
    :param mac_address:
    :type mac_address: str
    :param wifi_microsoft_driver:
    :type wifi_microsoft_driver: str
    :param wifi_microsoft_driver_version:
    :type wifi_microsoft_driver_version: str
    :param wifi_vendor_driver:
    :type wifi_vendor_driver: str
    :param wifi_vendor_driver_version:
    :type wifi_vendor_driver_version: str
    :param wifi_channel:
    :type wifi_channel: int
    :param wifi_band:  Possible values include: "unknown", "frequency24GHz", "frequency50GHz".
    :type wifi_band: str or ~cloud_communications.models.MicrosoftGraphCallRecordsWifiBand
    :param basic_service_set_identifier:
    :type basic_service_set_identifier: str
    :param wifi_radio_type:  Possible values include: "unknown", "wifi80211a", "wifi80211b",
     "wifi80211g", "wifi80211n", "wifi80211ac", "wifi80211ax", "unknownFutureValue".
    :type wifi_radio_type: str or
     ~cloud_communications.models.MicrosoftGraphCallRecordsWifiRadioType
    :param wifi_signal_strength:
    :type wifi_signal_strength: int
    :param wifi_battery_charge:
    :type wifi_battery_charge: int
    :param dns_suffix:
    :type dns_suffix: str
    :param sent_quality_event_ratio:
    :type sent_quality_event_ratio: float
    :param received_quality_event_ratio:
    :type received_quality_event_ratio: float
    :param delay_event_ratio:
    :type delay_event_ratio: float
    :param bandwidth_low_event_ratio:
    :type bandwidth_low_event_ratio: float
    """

    _validation = {
        'port': {'maximum': 2147483647, 'minimum': -2147483648},
        'relay_port': {'maximum': 2147483647, 'minimum': -2147483648},
        'wifi_channel': {'maximum': 2147483647, 'minimum': -2147483648},
        'wifi_signal_strength': {'maximum': 2147483647, 'minimum': -2147483648},
        'wifi_battery_charge': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'subnet': {'key': 'subnet', 'type': 'str'},
        'link_speed': {'key': 'linkSpeed', 'type': 'long'},
        'connection_type': {'key': 'connectionType', 'type': 'str'},
        'port': {'key': 'port', 'type': 'int'},
        'reflexive_ip_address': {'key': 'reflexiveIPAddress', 'type': 'str'},
        'relay_ip_address': {'key': 'relayIPAddress', 'type': 'str'},
        'relay_port': {'key': 'relayPort', 'type': 'int'},
        'mac_address': {'key': 'macAddress', 'type': 'str'},
        'wifi_microsoft_driver': {'key': 'wifiMicrosoftDriver', 'type': 'str'},
        'wifi_microsoft_driver_version': {'key': 'wifiMicrosoftDriverVersion', 'type': 'str'},
        'wifi_vendor_driver': {'key': 'wifiVendorDriver', 'type': 'str'},
        'wifi_vendor_driver_version': {'key': 'wifiVendorDriverVersion', 'type': 'str'},
        'wifi_channel': {'key': 'wifiChannel', 'type': 'int'},
        'wifi_band': {'key': 'wifiBand', 'type': 'str'},
        'basic_service_set_identifier': {'key': 'basicServiceSetIdentifier', 'type': 'str'},
        'wifi_radio_type': {'key': 'wifiRadioType', 'type': 'str'},
        'wifi_signal_strength': {'key': 'wifiSignalStrength', 'type': 'int'},
        'wifi_battery_charge': {'key': 'wifiBatteryCharge', 'type': 'int'},
        'dns_suffix': {'key': 'dnsSuffix', 'type': 'str'},
        'sent_quality_event_ratio': {'key': 'sentQualityEventRatio', 'type': 'float'},
        'received_quality_event_ratio': {'key': 'receivedQualityEventRatio', 'type': 'float'},
        'delay_event_ratio': {'key': 'delayEventRatio', 'type': 'float'},
        'bandwidth_low_event_ratio': {'key': 'bandwidthLowEventRatio', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        ip_address: Optional[str] = None,
        subnet: Optional[str] = None,
        link_speed: Optional[int] = None,
        connection_type: Optional[Union[str, "MicrosoftGraphCallRecordsNetworkConnectionType"]] = None,
        port: Optional[int] = None,
        reflexive_ip_address: Optional[str] = None,
        relay_ip_address: Optional[str] = None,
        relay_port: Optional[int] = None,
        mac_address: Optional[str] = None,
        wifi_microsoft_driver: Optional[str] = None,
        wifi_microsoft_driver_version: Optional[str] = None,
        wifi_vendor_driver: Optional[str] = None,
        wifi_vendor_driver_version: Optional[str] = None,
        wifi_channel: Optional[int] = None,
        wifi_band: Optional[Union[str, "MicrosoftGraphCallRecordsWifiBand"]] = None,
        basic_service_set_identifier: Optional[str] = None,
        wifi_radio_type: Optional[Union[str, "MicrosoftGraphCallRecordsWifiRadioType"]] = None,
        wifi_signal_strength: Optional[int] = None,
        wifi_battery_charge: Optional[int] = None,
        dns_suffix: Optional[str] = None,
        sent_quality_event_ratio: Optional[float] = None,
        received_quality_event_ratio: Optional[float] = None,
        delay_event_ratio: Optional[float] = None,
        bandwidth_low_event_ratio: Optional[float] = None,
        **kwargs
    ):
        super(MicrosoftGraphCallRecordsNetworkInfo, self).__init__(**kwargs)
        self.ip_address = ip_address
        self.subnet = subnet
        self.link_speed = link_speed
        self.connection_type = connection_type
        self.port = port
        self.reflexive_ip_address = reflexive_ip_address
        self.relay_ip_address = relay_ip_address
        self.relay_port = relay_port
        self.mac_address = mac_address
        self.wifi_microsoft_driver = wifi_microsoft_driver
        self.wifi_microsoft_driver_version = wifi_microsoft_driver_version
        self.wifi_vendor_driver = wifi_vendor_driver
        self.wifi_vendor_driver_version = wifi_vendor_driver_version
        self.wifi_channel = wifi_channel
        self.wifi_band = wifi_band
        self.basic_service_set_identifier = basic_service_set_identifier
        self.wifi_radio_type = wifi_radio_type
        self.wifi_signal_strength = wifi_signal_strength
        self.wifi_battery_charge = wifi_battery_charge
        self.dns_suffix = dns_suffix
        self.sent_quality_event_ratio = sent_quality_event_ratio
        self.received_quality_event_ratio = received_quality_event_ratio
        self.delay_event_ratio = delay_event_ratio
        self.bandwidth_low_event_ratio = bandwidth_low_event_ratio


class MicrosoftGraphCallRecordsSegment(MicrosoftGraphEntity):
    """segment.

    :param id: Read-only.
    :type id: str
    :param start_date_time:
    :type start_date_time: ~datetime.datetime
    :param end_date_time:
    :type end_date_time: ~datetime.datetime
    :param failure_info: failureInfo.
    :type failure_info: ~cloud_communications.models.MicrosoftGraphCallRecordsFailureInfo
    :param media:
    :type media: list[~cloud_communications.models.MicrosoftGraphCallRecordsMedia]
    :param user_agent_callee_user_agent: userAgent.
    :type user_agent_callee_user_agent:
     ~cloud_communications.models.MicrosoftGraphCallRecordsUserAgent
    :param user_agent_caller_user_agent: userAgent.
    :type user_agent_caller_user_agent:
     ~cloud_communications.models.MicrosoftGraphCallRecordsUserAgent
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'failure_info': {'key': 'failureInfo', 'type': 'MicrosoftGraphCallRecordsFailureInfo'},
        'media': {'key': 'media', 'type': '[MicrosoftGraphCallRecordsMedia]'},
        'user_agent_callee_user_agent': {'key': 'callee.userAgent', 'type': 'MicrosoftGraphCallRecordsUserAgent'},
        'user_agent_caller_user_agent': {'key': 'caller.userAgent', 'type': 'MicrosoftGraphCallRecordsUserAgent'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        start_date_time: Optional[datetime.datetime] = None,
        end_date_time: Optional[datetime.datetime] = None,
        failure_info: Optional["MicrosoftGraphCallRecordsFailureInfo"] = None,
        media: Optional[List["MicrosoftGraphCallRecordsMedia"]] = None,
        user_agent_callee_user_agent: Optional["MicrosoftGraphCallRecordsUserAgent"] = None,
        user_agent_caller_user_agent: Optional["MicrosoftGraphCallRecordsUserAgent"] = None,
        **kwargs
    ):
        super(MicrosoftGraphCallRecordsSegment, self).__init__(id=id, **kwargs)
        self.start_date_time = start_date_time
        self.end_date_time = end_date_time
        self.failure_info = failure_info
        self.media = media
        self.user_agent_callee_user_agent = user_agent_callee_user_agent
        self.user_agent_caller_user_agent = user_agent_caller_user_agent


class MicrosoftGraphCallRecordsSession(MicrosoftGraphEntity):
    """session.

    :param id: Read-only.
    :type id: str
    :param modalities:
    :type modalities: list[str or ~cloud_communications.models.MicrosoftGraphCallRecordsModality]
    :param start_date_time:
    :type start_date_time: ~datetime.datetime
    :param end_date_time:
    :type end_date_time: ~datetime.datetime
    :param failure_info: failureInfo.
    :type failure_info: ~cloud_communications.models.MicrosoftGraphCallRecordsFailureInfo
    :param segments:
    :type segments: list[~cloud_communications.models.MicrosoftGraphCallRecordsSegment]
    :param user_agent_callee_user_agent: userAgent.
    :type user_agent_callee_user_agent:
     ~cloud_communications.models.MicrosoftGraphCallRecordsUserAgent
    :param user_agent_caller_user_agent: userAgent.
    :type user_agent_caller_user_agent:
     ~cloud_communications.models.MicrosoftGraphCallRecordsUserAgent
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'modalities': {'key': 'modalities', 'type': '[str]'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'failure_info': {'key': 'failureInfo', 'type': 'MicrosoftGraphCallRecordsFailureInfo'},
        'segments': {'key': 'segments', 'type': '[MicrosoftGraphCallRecordsSegment]'},
        'user_agent_callee_user_agent': {'key': 'callee.userAgent', 'type': 'MicrosoftGraphCallRecordsUserAgent'},
        'user_agent_caller_user_agent': {'key': 'caller.userAgent', 'type': 'MicrosoftGraphCallRecordsUserAgent'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        modalities: Optional[List[Union[str, "MicrosoftGraphCallRecordsModality"]]] = None,
        start_date_time: Optional[datetime.datetime] = None,
        end_date_time: Optional[datetime.datetime] = None,
        failure_info: Optional["MicrosoftGraphCallRecordsFailureInfo"] = None,
        segments: Optional[List["MicrosoftGraphCallRecordsSegment"]] = None,
        user_agent_callee_user_agent: Optional["MicrosoftGraphCallRecordsUserAgent"] = None,
        user_agent_caller_user_agent: Optional["MicrosoftGraphCallRecordsUserAgent"] = None,
        **kwargs
    ):
        super(MicrosoftGraphCallRecordsSession, self).__init__(id=id, **kwargs)
        self.modalities = modalities
        self.start_date_time = start_date_time
        self.end_date_time = end_date_time
        self.failure_info = failure_info
        self.segments = segments
        self.user_agent_callee_user_agent = user_agent_callee_user_agent
        self.user_agent_caller_user_agent = user_agent_caller_user_agent


class MicrosoftGraphCallRecordsUserAgent(msrest.serialization.Model):
    """userAgent.

    :param header_value:
    :type header_value: str
    :param application_version:
    :type application_version: str
    """

    _attribute_map = {
        'header_value': {'key': 'headerValue', 'type': 'str'},
        'application_version': {'key': 'applicationVersion', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        header_value: Optional[str] = None,
        application_version: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphCallRecordsUserAgent, self).__init__(**kwargs)
        self.header_value = header_value
        self.application_version = application_version


class MicrosoftGraphCallRoute(msrest.serialization.Model):
    """callRoute.

    :param routing_type:  Possible values include: "forwarded", "lookup", "selfFork",
     "unknownFutureValue".
    :type routing_type: str or ~cloud_communications.models.MicrosoftGraphRoutingType
    :param original: identitySet.
    :type original: ~cloud_communications.models.MicrosoftGraphIdentitySet
    :param final: identitySet.
    :type final: ~cloud_communications.models.MicrosoftGraphIdentitySet
    """

    _attribute_map = {
        'routing_type': {'key': 'routingType', 'type': 'str'},
        'original': {'key': 'original', 'type': 'MicrosoftGraphIdentitySet'},
        'final': {'key': 'final', 'type': 'MicrosoftGraphIdentitySet'},
    }

    def __init__(
        self,
        *,
        routing_type: Optional[Union[str, "MicrosoftGraphRoutingType"]] = None,
        original: Optional["MicrosoftGraphIdentitySet"] = None,
        final: Optional["MicrosoftGraphIdentitySet"] = None,
        **kwargs
    ):
        super(MicrosoftGraphCallRoute, self).__init__(**kwargs)
        self.routing_type = routing_type
        self.original = original
        self.final = final


class MicrosoftGraphCommsOperation(MicrosoftGraphEntity):
    """commsOperation.

    :param id: Read-only.
    :type id: str
    :param status:  Possible values include: "NotStarted", "Running", "Completed", "Failed".
    :type status: str or ~cloud_communications.models.MicrosoftGraphOperationStatus
    :param client_context: Unique Client Context string. Max limit is 256 chars.
    :type client_context: str
    :param code:
    :type code: int
    :param subcode:
    :type subcode: int
    :param message:
    :type message: str
    """

    _validation = {
        'code': {'maximum': 2147483647, 'minimum': -2147483648},
        'subcode': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'client_context': {'key': 'clientContext', 'type': 'str'},
        'code': {'key': 'resultInfo.code', 'type': 'int'},
        'subcode': {'key': 'resultInfo.subcode', 'type': 'int'},
        'message': {'key': 'resultInfo.message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        status: Optional[Union[str, "MicrosoftGraphOperationStatus"]] = None,
        client_context: Optional[str] = None,
        code: Optional[int] = None,
        subcode: Optional[int] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphCommsOperation, self).__init__(id=id, **kwargs)
        self.status = status
        self.client_context = client_context
        self.code = code
        self.subcode = subcode
        self.message = message


class MicrosoftGraphCancelMediaProcessingOperation(MicrosoftGraphCommsOperation):
    """cancelMediaProcessingOperation.

    :param id: Read-only.
    :type id: str
    :param status:  Possible values include: "NotStarted", "Running", "Completed", "Failed".
    :type status: str or ~cloud_communications.models.MicrosoftGraphOperationStatus
    :param client_context: Unique Client Context string. Max limit is 256 chars.
    :type client_context: str
    :param code:
    :type code: int
    :param subcode:
    :type subcode: int
    :param message:
    :type message: str
    """

    _validation = {
        'code': {'maximum': 2147483647, 'minimum': -2147483648},
        'subcode': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'client_context': {'key': 'clientContext', 'type': 'str'},
        'code': {'key': 'resultInfo.code', 'type': 'int'},
        'subcode': {'key': 'resultInfo.subcode', 'type': 'int'},
        'message': {'key': 'resultInfo.message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        status: Optional[Union[str, "MicrosoftGraphOperationStatus"]] = None,
        client_context: Optional[str] = None,
        code: Optional[int] = None,
        subcode: Optional[int] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphCancelMediaProcessingOperation, self).__init__(id=id, status=status, client_context=client_context, code=code, subcode=subcode, message=message, **kwargs)


class MicrosoftGraphChatInfo(msrest.serialization.Model):
    """chatInfo.

    :param thread_id: The unique identifier for a thread in Microsoft Teams.
    :type thread_id: str
    :param message_id: The unique identifier of a message in a Microsoft Teams channel.
    :type message_id: str
    :param reply_chain_message_id: The ID of the reply message.
    :type reply_chain_message_id: str
    """

    _attribute_map = {
        'thread_id': {'key': 'threadId', 'type': 'str'},
        'message_id': {'key': 'messageId', 'type': 'str'},
        'reply_chain_message_id': {'key': 'replyChainMessageId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        thread_id: Optional[str] = None,
        message_id: Optional[str] = None,
        reply_chain_message_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphChatInfo, self).__init__(**kwargs)
        self.thread_id = thread_id
        self.message_id = message_id
        self.reply_chain_message_id = reply_chain_message_id


class MicrosoftGraphCloudCommunications(MicrosoftGraphEntity):
    """cloudCommunications.

    :param id: Read-only.
    :type id: str
    :param calls:
    :type calls: list[~cloud_communications.models.MicrosoftGraphCall]
    :param call_records:
    :type call_records: list[~cloud_communications.models.MicrosoftGraphCallRecordsCallRecord]
    :param online_meetings:
    :type online_meetings: list[~cloud_communications.models.MicrosoftGraphOnlineMeeting]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'calls': {'key': 'calls', 'type': '[MicrosoftGraphCall]'},
        'call_records': {'key': 'callRecords', 'type': '[MicrosoftGraphCallRecordsCallRecord]'},
        'online_meetings': {'key': 'onlineMeetings', 'type': '[MicrosoftGraphOnlineMeeting]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        calls: Optional[List["MicrosoftGraphCall"]] = None,
        call_records: Optional[List["MicrosoftGraphCallRecordsCallRecord"]] = None,
        online_meetings: Optional[List["MicrosoftGraphOnlineMeeting"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphCloudCommunications, self).__init__(id=id, **kwargs)
        self.calls = calls
        self.call_records = call_records
        self.online_meetings = online_meetings


class MicrosoftGraphIdentitySet(msrest.serialization.Model):
    """identitySet.

    :param id_user_id: Unique identifier for the identity.
    :type id_user_id: str
    :param display_name_user_display_name: The identity's display name. Note that this may not
     always be available or up to date. For example, if a user changes their display name, the API
     may show the new value in a future response, but the items associated with the user won't show
     up as having changed when using delta.
    :type display_name_user_display_name: str
    :param id_device_id: Unique identifier for the identity.
    :type id_device_id: str
    :param display_name_device_display_name: The identity's display name. Note that this may not
     always be available or up to date. For example, if a user changes their display name, the API
     may show the new value in a future response, but the items associated with the user won't show
     up as having changed when using delta.
    :type display_name_device_display_name: str
    :param id_application_id: Unique identifier for the identity.
    :type id_application_id: str
    :param display_name_application_display_name: The identity's display name. Note that this may
     not always be available or up to date. For example, if a user changes their display name, the
     API may show the new value in a future response, but the items associated with the user won't
     show up as having changed when using delta.
    :type display_name_application_display_name: str
    """

    _attribute_map = {
        'id_user_id': {'key': 'user.id', 'type': 'str'},
        'display_name_user_display_name': {'key': 'user.displayName', 'type': 'str'},
        'id_device_id': {'key': 'device.id', 'type': 'str'},
        'display_name_device_display_name': {'key': 'device.displayName', 'type': 'str'},
        'id_application_id': {'key': 'application.id', 'type': 'str'},
        'display_name_application_display_name': {'key': 'application.displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id_user_id: Optional[str] = None,
        display_name_user_display_name: Optional[str] = None,
        id_device_id: Optional[str] = None,
        display_name_device_display_name: Optional[str] = None,
        id_application_id: Optional[str] = None,
        display_name_application_display_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphIdentitySet, self).__init__(**kwargs)
        self.id_user_id = id_user_id
        self.display_name_user_display_name = display_name_user_display_name
        self.id_device_id = id_device_id
        self.display_name_device_display_name = display_name_device_display_name
        self.id_application_id = id_application_id
        self.display_name_application_display_name = display_name_application_display_name


class MicrosoftGraphInvitationParticipantInfo(msrest.serialization.Model):
    """invitationParticipantInfo.

    :param endpoint_type:  Possible values include: "default", "voicemail", "skypeForBusiness",
     "skypeForBusinessVoipPhone", "unknownFutureValue".
    :type endpoint_type: str or ~cloud_communications.models.MicrosoftGraphEndpointType
    :param replaces_call_id: Optional. The call which the target identity is currently a part of.
     This call will be dropped once the participant is added.
    :type replaces_call_id: str
    :param id_identity_user_id: Unique identifier for the identity.
    :type id_identity_user_id: str
    :param display_name_identity_user_display_name: The identity's display name. Note that this may
     not always be available or up to date. For example, if a user changes their display name, the
     API may show the new value in a future response, but the items associated with the user won't
     show up as having changed when using delta.
    :type display_name_identity_user_display_name: str
    :param id_identity_device_id: Unique identifier for the identity.
    :type id_identity_device_id: str
    :param display_name_identity_device_display_name: The identity's display name. Note that this
     may not always be available or up to date. For example, if a user changes their display name,
     the API may show the new value in a future response, but the items associated with the user
     won't show up as having changed when using delta.
    :type display_name_identity_device_display_name: str
    :param id_identity_application_id: Unique identifier for the identity.
    :type id_identity_application_id: str
    :param display_name_identity_application_display_name: The identity's display name. Note that
     this may not always be available or up to date. For example, if a user changes their display
     name, the API may show the new value in a future response, but the items associated with the
     user won't show up as having changed when using delta.
    :type display_name_identity_application_display_name: str
    """

    _attribute_map = {
        'endpoint_type': {'key': 'endpointType', 'type': 'str'},
        'replaces_call_id': {'key': 'replacesCallId', 'type': 'str'},
        'id_identity_user_id': {'key': 'identity.user.id', 'type': 'str'},
        'display_name_identity_user_display_name': {'key': 'identity.user.displayName', 'type': 'str'},
        'id_identity_device_id': {'key': 'identity.device.id', 'type': 'str'},
        'display_name_identity_device_display_name': {'key': 'identity.device.displayName', 'type': 'str'},
        'id_identity_application_id': {'key': 'identity.application.id', 'type': 'str'},
        'display_name_identity_application_display_name': {'key': 'identity.application.displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        endpoint_type: Optional[Union[str, "MicrosoftGraphEndpointType"]] = None,
        replaces_call_id: Optional[str] = None,
        id_identity_user_id: Optional[str] = None,
        display_name_identity_user_display_name: Optional[str] = None,
        id_identity_device_id: Optional[str] = None,
        display_name_identity_device_display_name: Optional[str] = None,
        id_identity_application_id: Optional[str] = None,
        display_name_identity_application_display_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphInvitationParticipantInfo, self).__init__(**kwargs)
        self.endpoint_type = endpoint_type
        self.replaces_call_id = replaces_call_id
        self.id_identity_user_id = id_identity_user_id
        self.display_name_identity_user_display_name = display_name_identity_user_display_name
        self.id_identity_device_id = id_identity_device_id
        self.display_name_identity_device_display_name = display_name_identity_device_display_name
        self.id_identity_application_id = id_identity_application_id
        self.display_name_identity_application_display_name = display_name_identity_application_display_name


class MicrosoftGraphInviteParticipantsOperation(MicrosoftGraphCommsOperation):
    """inviteParticipantsOperation.

    :param id: Read-only.
    :type id: str
    :param status:  Possible values include: "NotStarted", "Running", "Completed", "Failed".
    :type status: str or ~cloud_communications.models.MicrosoftGraphOperationStatus
    :param client_context: Unique Client Context string. Max limit is 256 chars.
    :type client_context: str
    :param code:
    :type code: int
    :param subcode:
    :type subcode: int
    :param message:
    :type message: str
    :param participants: The participants to invite.
    :type participants: list[~cloud_communications.models.MicrosoftGraphInvitationParticipantInfo]
    """

    _validation = {
        'code': {'maximum': 2147483647, 'minimum': -2147483648},
        'subcode': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'client_context': {'key': 'clientContext', 'type': 'str'},
        'code': {'key': 'resultInfo.code', 'type': 'int'},
        'subcode': {'key': 'resultInfo.subcode', 'type': 'int'},
        'message': {'key': 'resultInfo.message', 'type': 'str'},
        'participants': {'key': 'participants', 'type': '[MicrosoftGraphInvitationParticipantInfo]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        status: Optional[Union[str, "MicrosoftGraphOperationStatus"]] = None,
        client_context: Optional[str] = None,
        code: Optional[int] = None,
        subcode: Optional[int] = None,
        message: Optional[str] = None,
        participants: Optional[List["MicrosoftGraphInvitationParticipantInfo"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphInviteParticipantsOperation, self).__init__(id=id, status=status, client_context=client_context, code=code, subcode=subcode, message=message, **kwargs)
        self.participants = participants


class MicrosoftGraphMediaStream(msrest.serialization.Model):
    """mediaStream.

    :param media_type:  Possible values include: "unknown", "audio", "video",
     "videoBasedScreenSharing", "data", "unknownFutureValue".
    :type media_type: str or ~cloud_communications.models.MicrosoftGraphModality
    :param label: The media stream label.
    :type label: str
    :param source_id: The source ID.
    :type source_id: str
    :param direction:  Possible values include: "inactive", "sendOnly", "receiveOnly",
     "sendReceive".
    :type direction: str or ~cloud_communications.models.MicrosoftGraphMediaDirection
    :param server_muted: If the media is muted by the server.
    :type server_muted: bool
    """

    _attribute_map = {
        'media_type': {'key': 'mediaType', 'type': 'str'},
        'label': {'key': 'label', 'type': 'str'},
        'source_id': {'key': 'sourceId', 'type': 'str'},
        'direction': {'key': 'direction', 'type': 'str'},
        'server_muted': {'key': 'serverMuted', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        media_type: Optional[Union[str, "MicrosoftGraphModality"]] = None,
        label: Optional[str] = None,
        source_id: Optional[str] = None,
        direction: Optional[Union[str, "MicrosoftGraphMediaDirection"]] = None,
        server_muted: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphMediaStream, self).__init__(**kwargs)
        self.media_type = media_type
        self.label = label
        self.source_id = source_id
        self.direction = direction
        self.server_muted = server_muted


class MicrosoftGraphMeetingCapability(msrest.serialization.Model):
    """meetingCapability.

    :param allow_anonymous_users_to_dial_out:
    :type allow_anonymous_users_to_dial_out: bool
    :param auto_admitted_users:  Possible values include: "everyoneInCompany", "everyone".
    :type auto_admitted_users: str or
     ~cloud_communications.models.MicrosoftGraphAutoAdmittedUsersType
    :param allow_anonymous_users_to_start_meeting:
    :type allow_anonymous_users_to_start_meeting: bool
    """

    _attribute_map = {
        'allow_anonymous_users_to_dial_out': {'key': 'allowAnonymousUsersToDialOut', 'type': 'bool'},
        'auto_admitted_users': {'key': 'autoAdmittedUsers', 'type': 'str'},
        'allow_anonymous_users_to_start_meeting': {'key': 'allowAnonymousUsersToStartMeeting', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        allow_anonymous_users_to_dial_out: Optional[bool] = None,
        auto_admitted_users: Optional[Union[str, "MicrosoftGraphAutoAdmittedUsersType"]] = None,
        allow_anonymous_users_to_start_meeting: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphMeetingCapability, self).__init__(**kwargs)
        self.allow_anonymous_users_to_dial_out = allow_anonymous_users_to_dial_out
        self.auto_admitted_users = auto_admitted_users
        self.allow_anonymous_users_to_start_meeting = allow_anonymous_users_to_start_meeting


class MicrosoftGraphMeetingParticipantInfo(msrest.serialization.Model):
    """meetingParticipantInfo.

    :param identity: identitySet.
    :type identity: ~cloud_communications.models.MicrosoftGraphIdentitySet
    :param upn: User principal name of the participant.
    :type upn: str
    """

    _attribute_map = {
        'identity': {'key': 'identity', 'type': 'MicrosoftGraphIdentitySet'},
        'upn': {'key': 'upn', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        identity: Optional["MicrosoftGraphIdentitySet"] = None,
        upn: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphMeetingParticipantInfo, self).__init__(**kwargs)
        self.identity = identity
        self.upn = upn


class MicrosoftGraphMuteParticipantOperation(MicrosoftGraphCommsOperation):
    """muteParticipantOperation.

    :param id: Read-only.
    :type id: str
    :param status:  Possible values include: "NotStarted", "Running", "Completed", "Failed".
    :type status: str or ~cloud_communications.models.MicrosoftGraphOperationStatus
    :param client_context: Unique Client Context string. Max limit is 256 chars.
    :type client_context: str
    :param code:
    :type code: int
    :param subcode:
    :type subcode: int
    :param message:
    :type message: str
    """

    _validation = {
        'code': {'maximum': 2147483647, 'minimum': -2147483648},
        'subcode': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'client_context': {'key': 'clientContext', 'type': 'str'},
        'code': {'key': 'resultInfo.code', 'type': 'int'},
        'subcode': {'key': 'resultInfo.subcode', 'type': 'int'},
        'message': {'key': 'resultInfo.message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        status: Optional[Union[str, "MicrosoftGraphOperationStatus"]] = None,
        client_context: Optional[str] = None,
        code: Optional[int] = None,
        subcode: Optional[int] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphMuteParticipantOperation, self).__init__(id=id, status=status, client_context=client_context, code=code, subcode=subcode, message=message, **kwargs)


class MicrosoftGraphMuteParticipantsOperation(MicrosoftGraphCommsOperation):
    """muteParticipantsOperation.

    :param id: Read-only.
    :type id: str
    :param status:  Possible values include: "NotStarted", "Running", "Completed", "Failed".
    :type status: str or ~cloud_communications.models.MicrosoftGraphOperationStatus
    :param client_context: Unique Client Context string. Max limit is 256 chars.
    :type client_context: str
    :param code:
    :type code: int
    :param subcode:
    :type subcode: int
    :param message:
    :type message: str
    :param participants:
    :type participants: list[str]
    """

    _validation = {
        'code': {'maximum': 2147483647, 'minimum': -2147483648},
        'subcode': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'client_context': {'key': 'clientContext', 'type': 'str'},
        'code': {'key': 'resultInfo.code', 'type': 'int'},
        'subcode': {'key': 'resultInfo.subcode', 'type': 'int'},
        'message': {'key': 'resultInfo.message', 'type': 'str'},
        'participants': {'key': 'participants', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        status: Optional[Union[str, "MicrosoftGraphOperationStatus"]] = None,
        client_context: Optional[str] = None,
        code: Optional[int] = None,
        subcode: Optional[int] = None,
        message: Optional[str] = None,
        participants: Optional[List[str]] = None,
        **kwargs
    ):
        super(MicrosoftGraphMuteParticipantsOperation, self).__init__(id=id, status=status, client_context=client_context, code=code, subcode=subcode, message=message, **kwargs)
        self.participants = participants


class MicrosoftGraphOnlineMeeting(MicrosoftGraphEntity):
    """onlineMeeting.

    :param id: Read-only.
    :type id: str
    :param creation_date_time: The meeting creation time in UTC. Read-only.
    :type creation_date_time: ~datetime.datetime
    :param start_date_time: The meeting start time in UTC.
    :type start_date_time: ~datetime.datetime
    :param end_date_time: The meeting end time in UTC.
    :type end_date_time: ~datetime.datetime
    :param canceled_date_time:
    :type canceled_date_time: ~datetime.datetime
    :param expiration_date_time:
    :type expiration_date_time: ~datetime.datetime
    :param entry_exit_announcement:
    :type entry_exit_announcement: bool
    :param join_url:
    :type join_url: str
    :param subject: The subject of the online meeting.
    :type subject: str
    :param is_cancelled:
    :type is_cancelled: bool
    :param is_broadcast:
    :type is_broadcast: bool
    :param access_level:  Possible values include: "everyone", "invited", "locked",
     "sameEnterprise", "sameEnterpriseAndFederated".
    :type access_level: str or ~cloud_communications.models.MicrosoftGraphAccessLevel
    :param capabilities:
    :type capabilities: list[str or ~cloud_communications.models.MicrosoftGraphMeetingCapabilities]
    :param audio_conferencing: audioConferencing.
    :type audio_conferencing: ~cloud_communications.models.MicrosoftGraphAudioConferencing
    :param chat_info: chatInfo.
    :type chat_info: ~cloud_communications.models.MicrosoftGraphChatInfo
    :param video_teleconference_id: The video teleconferencing ID. Read-only.
    :type video_teleconference_id: str
    :param organizer: meetingParticipantInfo.
    :type organizer: ~cloud_communications.models.MicrosoftGraphMeetingParticipantInfo
    :param attendees:
    :type attendees: list[~cloud_communications.models.MicrosoftGraphMeetingParticipantInfo]
    :param producers:
    :type producers: list[~cloud_communications.models.MicrosoftGraphMeetingParticipantInfo]
    :param contributors:
    :type contributors: list[~cloud_communications.models.MicrosoftGraphMeetingParticipantInfo]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'creation_date_time': {'key': 'creationDateTime', 'type': 'iso-8601'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'canceled_date_time': {'key': 'canceledDateTime', 'type': 'iso-8601'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'entry_exit_announcement': {'key': 'entryExitAnnouncement', 'type': 'bool'},
        'join_url': {'key': 'joinUrl', 'type': 'str'},
        'subject': {'key': 'subject', 'type': 'str'},
        'is_cancelled': {'key': 'isCancelled', 'type': 'bool'},
        'is_broadcast': {'key': 'isBroadcast', 'type': 'bool'},
        'access_level': {'key': 'accessLevel', 'type': 'str'},
        'capabilities': {'key': 'capabilities', 'type': '[str]'},
        'audio_conferencing': {'key': 'audioConferencing', 'type': 'MicrosoftGraphAudioConferencing'},
        'chat_info': {'key': 'chatInfo', 'type': 'MicrosoftGraphChatInfo'},
        'video_teleconference_id': {'key': 'videoTeleconferenceId', 'type': 'str'},
        'organizer': {'key': 'participants.organizer', 'type': 'MicrosoftGraphMeetingParticipantInfo'},
        'attendees': {'key': 'participants.attendees', 'type': '[MicrosoftGraphMeetingParticipantInfo]'},
        'producers': {'key': 'participants.producers', 'type': '[MicrosoftGraphMeetingParticipantInfo]'},
        'contributors': {'key': 'participants.contributors', 'type': '[MicrosoftGraphMeetingParticipantInfo]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        creation_date_time: Optional[datetime.datetime] = None,
        start_date_time: Optional[datetime.datetime] = None,
        end_date_time: Optional[datetime.datetime] = None,
        canceled_date_time: Optional[datetime.datetime] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        entry_exit_announcement: Optional[bool] = None,
        join_url: Optional[str] = None,
        subject: Optional[str] = None,
        is_cancelled: Optional[bool] = None,
        is_broadcast: Optional[bool] = None,
        access_level: Optional[Union[str, "MicrosoftGraphAccessLevel"]] = None,
        capabilities: Optional[List[Union[str, "MicrosoftGraphMeetingCapabilities"]]] = None,
        audio_conferencing: Optional["MicrosoftGraphAudioConferencing"] = None,
        chat_info: Optional["MicrosoftGraphChatInfo"] = None,
        video_teleconference_id: Optional[str] = None,
        organizer: Optional["MicrosoftGraphMeetingParticipantInfo"] = None,
        attendees: Optional[List["MicrosoftGraphMeetingParticipantInfo"]] = None,
        producers: Optional[List["MicrosoftGraphMeetingParticipantInfo"]] = None,
        contributors: Optional[List["MicrosoftGraphMeetingParticipantInfo"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphOnlineMeeting, self).__init__(id=id, **kwargs)
        self.creation_date_time = creation_date_time
        self.start_date_time = start_date_time
        self.end_date_time = end_date_time
        self.canceled_date_time = canceled_date_time
        self.expiration_date_time = expiration_date_time
        self.entry_exit_announcement = entry_exit_announcement
        self.join_url = join_url
        self.subject = subject
        self.is_cancelled = is_cancelled
        self.is_broadcast = is_broadcast
        self.access_level = access_level
        self.capabilities = capabilities
        self.audio_conferencing = audio_conferencing
        self.chat_info = chat_info
        self.video_teleconference_id = video_teleconference_id
        self.organizer = organizer
        self.attendees = attendees
        self.producers = producers
        self.contributors = contributors


class MicrosoftGraphParticipant(MicrosoftGraphEntity):
    """participant.

    :param id: Read-only.
    :type id: str
    :param media_streams: The list of media streams.
    :type media_streams: list[~cloud_communications.models.MicrosoftGraphMediaStream]
    :param metadata:
    :type metadata: str
    :param is_muted: true if the participant is muted (client or server muted).
    :type is_muted: bool
    :param is_in_lobby: true if the participant is in lobby.
    :type is_in_lobby: bool
    :param recording_status:  Possible values include: "unknown", "notRecording", "recording",
     "failed", "unknownFutureValue".
    :type recording_status: str or ~cloud_communications.models.MicrosoftGraphRecordingStatus
    :param initiated_by: participantInfo.
    :type initiated_by: ~cloud_communications.models.MicrosoftGraphParticipantInfo
    :param initiator: identitySet.
    :type initiator: ~cloud_communications.models.MicrosoftGraphIdentitySet
    :param identity: identitySet.
    :type identity: ~cloud_communications.models.MicrosoftGraphIdentitySet
    :param endpoint_type:  Possible values include: "default", "voicemail", "skypeForBusiness",
     "skypeForBusinessVoipPhone", "unknownFutureValue".
    :type endpoint_type: str or ~cloud_communications.models.MicrosoftGraphEndpointType
    :param region: The home region of the participant. This can be a country, a continent, or a
     larger geographic region. This does not change based on the participant's current physical
     location. Read-only.
    :type region: str
    :param language_id: The language culture string. Read-only.
    :type language_id: str
    :param country_code:
    :type country_code: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'media_streams': {'key': 'mediaStreams', 'type': '[MicrosoftGraphMediaStream]'},
        'metadata': {'key': 'metadata', 'type': 'str'},
        'is_muted': {'key': 'isMuted', 'type': 'bool'},
        'is_in_lobby': {'key': 'isInLobby', 'type': 'bool'},
        'recording_status': {'key': 'recordingInfo.recordingStatus', 'type': 'str'},
        'initiated_by': {'key': 'recordingInfo.initiatedBy', 'type': 'MicrosoftGraphParticipantInfo'},
        'initiator': {'key': 'recordingInfo.initiator', 'type': 'MicrosoftGraphIdentitySet'},
        'identity': {'key': 'info.identity', 'type': 'MicrosoftGraphIdentitySet'},
        'endpoint_type': {'key': 'info.endpointType', 'type': 'str'},
        'region': {'key': 'info.region', 'type': 'str'},
        'language_id': {'key': 'info.languageId', 'type': 'str'},
        'country_code': {'key': 'info.countryCode', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        media_streams: Optional[List["MicrosoftGraphMediaStream"]] = None,
        metadata: Optional[str] = None,
        is_muted: Optional[bool] = None,
        is_in_lobby: Optional[bool] = None,
        recording_status: Optional[Union[str, "MicrosoftGraphRecordingStatus"]] = None,
        initiated_by: Optional["MicrosoftGraphParticipantInfo"] = None,
        initiator: Optional["MicrosoftGraphIdentitySet"] = None,
        identity: Optional["MicrosoftGraphIdentitySet"] = None,
        endpoint_type: Optional[Union[str, "MicrosoftGraphEndpointType"]] = None,
        region: Optional[str] = None,
        language_id: Optional[str] = None,
        country_code: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphParticipant, self).__init__(id=id, **kwargs)
        self.media_streams = media_streams
        self.metadata = metadata
        self.is_muted = is_muted
        self.is_in_lobby = is_in_lobby
        self.recording_status = recording_status
        self.initiated_by = initiated_by
        self.initiator = initiator
        self.identity = identity
        self.endpoint_type = endpoint_type
        self.region = region
        self.language_id = language_id
        self.country_code = country_code


class MicrosoftGraphParticipantInfo(msrest.serialization.Model):
    """participantInfo.

    :param identity: identitySet.
    :type identity: ~cloud_communications.models.MicrosoftGraphIdentitySet
    :param endpoint_type:  Possible values include: "default", "voicemail", "skypeForBusiness",
     "skypeForBusinessVoipPhone", "unknownFutureValue".
    :type endpoint_type: str or ~cloud_communications.models.MicrosoftGraphEndpointType
    :param region: The home region of the participant. This can be a country, a continent, or a
     larger geographic region. This does not change based on the participant's current physical
     location. Read-only.
    :type region: str
    :param language_id: The language culture string. Read-only.
    :type language_id: str
    :param country_code:
    :type country_code: str
    """

    _attribute_map = {
        'identity': {'key': 'identity', 'type': 'MicrosoftGraphIdentitySet'},
        'endpoint_type': {'key': 'endpointType', 'type': 'str'},
        'region': {'key': 'region', 'type': 'str'},
        'language_id': {'key': 'languageId', 'type': 'str'},
        'country_code': {'key': 'countryCode', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        identity: Optional["MicrosoftGraphIdentitySet"] = None,
        endpoint_type: Optional[Union[str, "MicrosoftGraphEndpointType"]] = None,
        region: Optional[str] = None,
        language_id: Optional[str] = None,
        country_code: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphParticipantInfo, self).__init__(**kwargs)
        self.identity = identity
        self.endpoint_type = endpoint_type
        self.region = region
        self.language_id = language_id
        self.country_code = country_code


class MicrosoftGraphPlayPromptOperation(MicrosoftGraphCommsOperation):
    """playPromptOperation.

    :param id: Read-only.
    :type id: str
    :param status:  Possible values include: "NotStarted", "Running", "Completed", "Failed".
    :type status: str or ~cloud_communications.models.MicrosoftGraphOperationStatus
    :param client_context: Unique Client Context string. Max limit is 256 chars.
    :type client_context: str
    :param code:
    :type code: int
    :param subcode:
    :type subcode: int
    :param message:
    :type message: str
    :param completion_reason:  Possible values include: "unknown", "completedSuccessfully",
     "mediaOperationCanceled", "unknownFutureValue".
    :type completion_reason: str or
     ~cloud_communications.models.MicrosoftGraphPlayPromptCompletionReason
    """

    _validation = {
        'code': {'maximum': 2147483647, 'minimum': -2147483648},
        'subcode': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'client_context': {'key': 'clientContext', 'type': 'str'},
        'code': {'key': 'resultInfo.code', 'type': 'int'},
        'subcode': {'key': 'resultInfo.subcode', 'type': 'int'},
        'message': {'key': 'resultInfo.message', 'type': 'str'},
        'completion_reason': {'key': 'completionReason', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        status: Optional[Union[str, "MicrosoftGraphOperationStatus"]] = None,
        client_context: Optional[str] = None,
        code: Optional[int] = None,
        subcode: Optional[int] = None,
        message: Optional[str] = None,
        completion_reason: Optional[Union[str, "MicrosoftGraphPlayPromptCompletionReason"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPlayPromptOperation, self).__init__(id=id, status=status, client_context=client_context, code=code, subcode=subcode, message=message, **kwargs)
        self.completion_reason = completion_reason


class MicrosoftGraphPresence(MicrosoftGraphEntity):
    """presence.

    :param id: Read-only.
    :type id: str
    :param availability:
    :type availability: str
    :param activity:
    :type activity: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'availability': {'key': 'availability', 'type': 'str'},
        'activity': {'key': 'activity', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        availability: Optional[str] = None,
        activity: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPresence, self).__init__(id=id, **kwargs)
        self.availability = availability
        self.activity = activity


class MicrosoftGraphRecordOperation(MicrosoftGraphCommsOperation):
    """recordOperation.

    :param id: Read-only.
    :type id: str
    :param status:  Possible values include: "NotStarted", "Running", "Completed", "Failed".
    :type status: str or ~cloud_communications.models.MicrosoftGraphOperationStatus
    :param client_context: Unique Client Context string. Max limit is 256 chars.
    :type client_context: str
    :param code:
    :type code: int
    :param subcode:
    :type subcode: int
    :param message:
    :type message: str
    :param recording_location: The location where the recording is located.
    :type recording_location: str
    :param recording_access_token: The access token required to retrieve the recording.
    :type recording_access_token: str
    :param completion_reason:  Possible values include: "operationCanceled", "stopToneDetected",
     "maxRecordDurationReached", "initialSilenceTimeout", "maxSilenceTimeout", "playPromptFailed",
     "playBeepFailed", "mediaReceiveTimeout", "unspecifiedError".
    :type completion_reason: str or
     ~cloud_communications.models.MicrosoftGraphRecordCompletionReason
    """

    _validation = {
        'code': {'maximum': 2147483647, 'minimum': -2147483648},
        'subcode': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'client_context': {'key': 'clientContext', 'type': 'str'},
        'code': {'key': 'resultInfo.code', 'type': 'int'},
        'subcode': {'key': 'resultInfo.subcode', 'type': 'int'},
        'message': {'key': 'resultInfo.message', 'type': 'str'},
        'recording_location': {'key': 'recordingLocation', 'type': 'str'},
        'recording_access_token': {'key': 'recordingAccessToken', 'type': 'str'},
        'completion_reason': {'key': 'completionReason', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        status: Optional[Union[str, "MicrosoftGraphOperationStatus"]] = None,
        client_context: Optional[str] = None,
        code: Optional[int] = None,
        subcode: Optional[int] = None,
        message: Optional[str] = None,
        recording_location: Optional[str] = None,
        recording_access_token: Optional[str] = None,
        completion_reason: Optional[Union[str, "MicrosoftGraphRecordCompletionReason"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphRecordOperation, self).__init__(id=id, status=status, client_context=client_context, code=code, subcode=subcode, message=message, **kwargs)
        self.recording_location = recording_location
        self.recording_access_token = recording_access_token
        self.completion_reason = completion_reason


class MicrosoftGraphResultInfo(msrest.serialization.Model):
    """ResultInfo.

    :param code:
    :type code: int
    :param subcode:
    :type subcode: int
    :param message:
    :type message: str
    """

    _validation = {
        'code': {'maximum': 2147483647, 'minimum': -2147483648},
        'subcode': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'subcode': {'key': 'subcode', 'type': 'int'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        subcode: Optional[int] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphResultInfo, self).__init__(**kwargs)
        self.code = code
        self.subcode = subcode
        self.message = message


class MicrosoftGraphSubscribeToToneOperation(MicrosoftGraphCommsOperation):
    """subscribeToToneOperation.

    :param id: Read-only.
    :type id: str
    :param status:  Possible values include: "NotStarted", "Running", "Completed", "Failed".
    :type status: str or ~cloud_communications.models.MicrosoftGraphOperationStatus
    :param client_context: Unique Client Context string. Max limit is 256 chars.
    :type client_context: str
    :param code:
    :type code: int
    :param subcode:
    :type subcode: int
    :param message:
    :type message: str
    """

    _validation = {
        'code': {'maximum': 2147483647, 'minimum': -2147483648},
        'subcode': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'client_context': {'key': 'clientContext', 'type': 'str'},
        'code': {'key': 'resultInfo.code', 'type': 'int'},
        'subcode': {'key': 'resultInfo.subcode', 'type': 'int'},
        'message': {'key': 'resultInfo.message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        status: Optional[Union[str, "MicrosoftGraphOperationStatus"]] = None,
        client_context: Optional[str] = None,
        code: Optional[int] = None,
        subcode: Optional[int] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSubscribeToToneOperation, self).__init__(id=id, status=status, client_context=client_context, code=code, subcode=subcode, message=message, **kwargs)


class MicrosoftGraphToneInfo(msrest.serialization.Model):
    """toneInfo.

    :param sequence_id: An incremental identifier used for ordering DTMF events.
    :type sequence_id: long
    :param tone:  Possible values include: "tone0", "tone1", "tone2", "tone3", "tone4", "tone5",
     "tone6", "tone7", "tone8", "tone9", "star", "pound", "a", "b", "c", "d", "flash".
    :type tone: str or ~cloud_communications.models.MicrosoftGraphTone
    """

    _attribute_map = {
        'sequence_id': {'key': 'sequenceId', 'type': 'long'},
        'tone': {'key': 'tone', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        sequence_id: Optional[int] = None,
        tone: Optional[Union[str, "MicrosoftGraphTone"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphToneInfo, self).__init__(**kwargs)
        self.sequence_id = sequence_id
        self.tone = tone


class MicrosoftGraphUnmuteParticipantOperation(MicrosoftGraphCommsOperation):
    """unmuteParticipantOperation.

    :param id: Read-only.
    :type id: str
    :param status:  Possible values include: "NotStarted", "Running", "Completed", "Failed".
    :type status: str or ~cloud_communications.models.MicrosoftGraphOperationStatus
    :param client_context: Unique Client Context string. Max limit is 256 chars.
    :type client_context: str
    :param code:
    :type code: int
    :param subcode:
    :type subcode: int
    :param message:
    :type message: str
    """

    _validation = {
        'code': {'maximum': 2147483647, 'minimum': -2147483648},
        'subcode': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'client_context': {'key': 'clientContext', 'type': 'str'},
        'code': {'key': 'resultInfo.code', 'type': 'int'},
        'subcode': {'key': 'resultInfo.subcode', 'type': 'int'},
        'message': {'key': 'resultInfo.message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        status: Optional[Union[str, "MicrosoftGraphOperationStatus"]] = None,
        client_context: Optional[str] = None,
        code: Optional[int] = None,
        subcode: Optional[int] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphUnmuteParticipantOperation, self).__init__(id=id, status=status, client_context=client_context, code=code, subcode=subcode, message=message, **kwargs)


class MicrosoftGraphUpdateRecordingStatusOperation(MicrosoftGraphCommsOperation):
    """updateRecordingStatusOperation.

    :param id: Read-only.
    :type id: str
    :param status:  Possible values include: "NotStarted", "Running", "Completed", "Failed".
    :type status: str or ~cloud_communications.models.MicrosoftGraphOperationStatus
    :param client_context: Unique Client Context string. Max limit is 256 chars.
    :type client_context: str
    :param code:
    :type code: int
    :param subcode:
    :type subcode: int
    :param message:
    :type message: str
    """

    _validation = {
        'code': {'maximum': 2147483647, 'minimum': -2147483648},
        'subcode': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'client_context': {'key': 'clientContext', 'type': 'str'},
        'code': {'key': 'resultInfo.code', 'type': 'int'},
        'subcode': {'key': 'resultInfo.subcode', 'type': 'int'},
        'message': {'key': 'resultInfo.message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        status: Optional[Union[str, "MicrosoftGraphOperationStatus"]] = None,
        client_context: Optional[str] = None,
        code: Optional[int] = None,
        subcode: Optional[int] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphUpdateRecordingStatusOperation, self).__init__(id=id, status=status, client_context=client_context, code=code, subcode=subcode, message=message, **kwargs)


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param error: Required.
    :type error: ~cloud_communications.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        *,
        error: "OdataErrorMain",
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.error = error


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~cloud_communications.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        details: Optional[List["OdataErrorDetail"]] = None,
        innererror: Optional[object] = None,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror


class Paths10WpgkzCommunicationsMicrosoftGraphGetpresencesbyuseridPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths10WpgkzCommunicationsMicrosoftGraphGetpresencesbyuseridPostRequestbodyContentApplicationJsonSchema.

    :param ids:
    :type ids: list[str]
    """

    _attribute_map = {
        'ids': {'key': 'ids', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        ids: Optional[List[str]] = None,
        **kwargs
    ):
        super(Paths10WpgkzCommunicationsMicrosoftGraphGetpresencesbyuseridPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.ids = ids


class Paths13Zt223CommunicationsCallsCallIdMicrosoftGraphMutePostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths13Zt223CommunicationsCallsCallIdMicrosoftGraphMutePostRequestbodyContentApplicationJsonSchema.

    :param client_context:
    :type client_context: str
    """

    _attribute_map = {
        'client_context': {'key': 'clientContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        client_context: Optional[str] = None,
        **kwargs
    ):
        super(Paths13Zt223CommunicationsCallsCallIdMicrosoftGraphMutePostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.client_context = client_context


class Paths14Wb7KqCommunicationsCallsCallIdMicrosoftGraphRecordresponsePostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths14Wb7KqCommunicationsCallsCallIdMicrosoftGraphRecordresponsePostRequestbodyContentApplicationJsonSchema.

    :param prompts:
    :type prompts: list[object]
    :param barge_in_allowed:
    :type barge_in_allowed: bool
    :param initial_silence_timeout_in_seconds:
    :type initial_silence_timeout_in_seconds: int
    :param max_silence_timeout_in_seconds:
    :type max_silence_timeout_in_seconds: int
    :param max_record_duration_in_seconds:
    :type max_record_duration_in_seconds: int
    :param play_beep:
    :type play_beep: bool
    :param stream_while_recording:
    :type stream_while_recording: bool
    :param stop_tones:
    :type stop_tones: list[str]
    :param client_context:
    :type client_context: str
    """

    _validation = {
        'initial_silence_timeout_in_seconds': {'maximum': 2147483647, 'minimum': -2147483648},
        'max_silence_timeout_in_seconds': {'maximum': 2147483647, 'minimum': -2147483648},
        'max_record_duration_in_seconds': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'prompts': {'key': 'prompts', 'type': '[object]'},
        'barge_in_allowed': {'key': 'bargeInAllowed', 'type': 'bool'},
        'initial_silence_timeout_in_seconds': {'key': 'initialSilenceTimeoutInSeconds', 'type': 'int'},
        'max_silence_timeout_in_seconds': {'key': 'maxSilenceTimeoutInSeconds', 'type': 'int'},
        'max_record_duration_in_seconds': {'key': 'maxRecordDurationInSeconds', 'type': 'int'},
        'play_beep': {'key': 'playBeep', 'type': 'bool'},
        'stream_while_recording': {'key': 'streamWhileRecording', 'type': 'bool'},
        'stop_tones': {'key': 'stopTones', 'type': '[str]'},
        'client_context': {'key': 'clientContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        prompts: Optional[List[object]] = None,
        barge_in_allowed: Optional[bool] = False,
        initial_silence_timeout_in_seconds: Optional[int] = None,
        max_silence_timeout_in_seconds: Optional[int] = None,
        max_record_duration_in_seconds: Optional[int] = None,
        play_beep: Optional[bool] = False,
        stream_while_recording: Optional[bool] = False,
        stop_tones: Optional[List[str]] = None,
        client_context: Optional[str] = None,
        **kwargs
    ):
        super(Paths14Wb7KqCommunicationsCallsCallIdMicrosoftGraphRecordresponsePostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.prompts = prompts
        self.barge_in_allowed = barge_in_allowed
        self.initial_silence_timeout_in_seconds = initial_silence_timeout_in_seconds
        self.max_silence_timeout_in_seconds = max_silence_timeout_in_seconds
        self.max_record_duration_in_seconds = max_record_duration_in_seconds
        self.play_beep = play_beep
        self.stream_while_recording = stream_while_recording
        self.stop_tones = stop_tones
        self.client_context = client_context


class Paths183Gi8UCommunicationsCallsCallIdMicrosoftGraphRedirectPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths183Gi8UCommunicationsCallsCallIdMicrosoftGraphRedirectPostRequestbodyContentApplicationJsonSchema.

    :param targets:
    :type targets: list[~cloud_communications.models.MicrosoftGraphInvitationParticipantInfo]
    :param target_disposition:  Possible values include: "default", "simultaneousRing", "forward".
    :type target_disposition: str or ~cloud_communications.models.MicrosoftGraphCallDisposition
    :param timeout:
    :type timeout: int
    :param mask_callee:
    :type mask_callee: bool
    :param mask_caller:
    :type mask_caller: bool
    :param callback_uri:
    :type callback_uri: str
    """

    _validation = {
        'timeout': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'targets': {'key': 'targets', 'type': '[MicrosoftGraphInvitationParticipantInfo]'},
        'target_disposition': {'key': 'targetDisposition', 'type': 'str'},
        'timeout': {'key': 'timeout', 'type': 'int'},
        'mask_callee': {'key': 'maskCallee', 'type': 'bool'},
        'mask_caller': {'key': 'maskCaller', 'type': 'bool'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        targets: Optional[List["MicrosoftGraphInvitationParticipantInfo"]] = None,
        target_disposition: Optional[Union[str, "MicrosoftGraphCallDisposition"]] = None,
        timeout: Optional[int] = None,
        mask_callee: Optional[bool] = False,
        mask_caller: Optional[bool] = False,
        callback_uri: Optional[str] = None,
        **kwargs
    ):
        super(Paths183Gi8UCommunicationsCallsCallIdMicrosoftGraphRedirectPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.targets = targets
        self.target_disposition = target_disposition
        self.timeout = timeout
        self.mask_callee = mask_callee
        self.mask_caller = mask_caller
        self.callback_uri = callback_uri


class Paths1Bh76WaCommunicationsCallsCallIdParticipantsMicrosoftGraphInvitePostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths1Bh76WaCommunicationsCallsCallIdParticipantsMicrosoftGraphInvitePostRequestbodyContentApplicationJsonSchema.

    :param participants:
    :type participants: list[~cloud_communications.models.MicrosoftGraphInvitationParticipantInfo]
    :param client_context:
    :type client_context: str
    """

    _attribute_map = {
        'participants': {'key': 'participants', 'type': '[MicrosoftGraphInvitationParticipantInfo]'},
        'client_context': {'key': 'clientContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        participants: Optional[List["MicrosoftGraphInvitationParticipantInfo"]] = None,
        client_context: Optional[str] = None,
        **kwargs
    ):
        super(Paths1Bh76WaCommunicationsCallsCallIdParticipantsMicrosoftGraphInvitePostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.participants = participants
        self.client_context = client_context


class Paths1Gzqcv2CommunicationsCallsCallIdMicrosoftGraphPlaypromptPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths1Gzqcv2CommunicationsCallsCallIdMicrosoftGraphPlaypromptPostRequestbodyContentApplicationJsonSchema.

    :param prompts:
    :type prompts: list[object]
    :param loop:
    :type loop: bool
    :param client_context:
    :type client_context: str
    """

    _attribute_map = {
        'prompts': {'key': 'prompts', 'type': '[object]'},
        'loop': {'key': 'loop', 'type': 'bool'},
        'client_context': {'key': 'clientContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        prompts: Optional[List[object]] = None,
        loop: Optional[bool] = False,
        client_context: Optional[str] = None,
        **kwargs
    ):
        super(Paths1Gzqcv2CommunicationsCallsCallIdMicrosoftGraphPlaypromptPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.prompts = prompts
        self.loop = loop
        self.client_context = client_context


class Paths1Mdqe66CommunicationsCallsCallIdMicrosoftGraphRecordPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths1Mdqe66CommunicationsCallsCallIdMicrosoftGraphRecordPostRequestbodyContentApplicationJsonSchema.

    :param prompts:
    :type prompts: list[object]
    :param barge_in_allowed:
    :type barge_in_allowed: bool
    :param initial_silence_timeout_in_seconds:
    :type initial_silence_timeout_in_seconds: int
    :param max_silence_timeout_in_seconds:
    :type max_silence_timeout_in_seconds: int
    :param max_record_duration_in_seconds:
    :type max_record_duration_in_seconds: int
    :param play_beep:
    :type play_beep: bool
    :param stream_while_recording:
    :type stream_while_recording: bool
    :param stop_tones:
    :type stop_tones: list[str]
    :param client_context:
    :type client_context: str
    """

    _validation = {
        'initial_silence_timeout_in_seconds': {'maximum': 2147483647, 'minimum': -2147483648},
        'max_silence_timeout_in_seconds': {'maximum': 2147483647, 'minimum': -2147483648},
        'max_record_duration_in_seconds': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'prompts': {'key': 'prompts', 'type': '[object]'},
        'barge_in_allowed': {'key': 'bargeInAllowed', 'type': 'bool'},
        'initial_silence_timeout_in_seconds': {'key': 'initialSilenceTimeoutInSeconds', 'type': 'int'},
        'max_silence_timeout_in_seconds': {'key': 'maxSilenceTimeoutInSeconds', 'type': 'int'},
        'max_record_duration_in_seconds': {'key': 'maxRecordDurationInSeconds', 'type': 'int'},
        'play_beep': {'key': 'playBeep', 'type': 'bool'},
        'stream_while_recording': {'key': 'streamWhileRecording', 'type': 'bool'},
        'stop_tones': {'key': 'stopTones', 'type': '[str]'},
        'client_context': {'key': 'clientContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        prompts: Optional[List[object]] = None,
        barge_in_allowed: Optional[bool] = False,
        initial_silence_timeout_in_seconds: Optional[int] = None,
        max_silence_timeout_in_seconds: Optional[int] = None,
        max_record_duration_in_seconds: Optional[int] = None,
        play_beep: Optional[bool] = False,
        stream_while_recording: Optional[bool] = False,
        stop_tones: Optional[List[str]] = None,
        client_context: Optional[str] = None,
        **kwargs
    ):
        super(Paths1Mdqe66CommunicationsCallsCallIdMicrosoftGraphRecordPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.prompts = prompts
        self.barge_in_allowed = barge_in_allowed
        self.initial_silence_timeout_in_seconds = initial_silence_timeout_in_seconds
        self.max_silence_timeout_in_seconds = max_silence_timeout_in_seconds
        self.max_record_duration_in_seconds = max_record_duration_in_seconds
        self.play_beep = play_beep
        self.stream_while_recording = stream_while_recording
        self.stop_tones = stop_tones
        self.client_context = client_context


class Paths1X7BvttCommunicationsCallsCallIdMicrosoftGraphUnmutePostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths1X7BvttCommunicationsCallsCallIdMicrosoftGraphUnmutePostRequestbodyContentApplicationJsonSchema.

    :param client_context:
    :type client_context: str
    """

    _attribute_map = {
        'client_context': {'key': 'clientContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        client_context: Optional[str] = None,
        **kwargs
    ):
        super(Paths1X7BvttCommunicationsCallsCallIdMicrosoftGraphUnmutePostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.client_context = client_context


class Paths4QrghdCommunicationsCallsCallIdMicrosoftGraphRejectPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths4QrghdCommunicationsCallsCallIdMicrosoftGraphRejectPostRequestbodyContentApplicationJsonSchema.

    :param reason:  Possible values include: "none", "busy", "forbidden", "unknownFutureValue".
    :type reason: str or ~cloud_communications.models.MicrosoftGraphRejectReason
    :param callback_uri:
    :type callback_uri: str
    """

    _attribute_map = {
        'reason': {'key': 'reason', 'type': 'str'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        reason: Optional[Union[str, "MicrosoftGraphRejectReason"]] = None,
        callback_uri: Optional[str] = None,
        **kwargs
    ):
        super(Paths4QrghdCommunicationsCallsCallIdMicrosoftGraphRejectPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.reason = reason
        self.callback_uri = callback_uri


class Paths4Zbm7LCommunicationsCallsCallIdMicrosoftGraphTransferPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths4Zbm7LCommunicationsCallsCallIdMicrosoftGraphTransferPostRequestbodyContentApplicationJsonSchema.

    :param endpoint_type:  Possible values include: "default", "voicemail", "skypeForBusiness",
     "skypeForBusinessVoipPhone", "unknownFutureValue".
    :type endpoint_type: str or ~cloud_communications.models.MicrosoftGraphEndpointType
    :param replaces_call_id: Optional. The call which the target identity is currently a part of.
     This call will be dropped once the participant is added.
    :type replaces_call_id: str
    :param id_transfer_target_identity_user_id: Unique identifier for the identity.
    :type id_transfer_target_identity_user_id: str
    :param display_name_transfer_target_identity_user_display_name: The identity's display name.
     Note that this may not always be available or up to date. For example, if a user changes their
     display name, the API may show the new value in a future response, but the items associated
     with the user won't show up as having changed when using delta.
    :type display_name_transfer_target_identity_user_display_name: str
    :param id_transfer_target_identity_device_id: Unique identifier for the identity.
    :type id_transfer_target_identity_device_id: str
    :param display_name_transfer_target_identity_device_display_name: The identity's display name.
     Note that this may not always be available or up to date. For example, if a user changes their
     display name, the API may show the new value in a future response, but the items associated
     with the user won't show up as having changed when using delta.
    :type display_name_transfer_target_identity_device_display_name: str
    :param id_transfer_target_identity_application_id: Unique identifier for the identity.
    :type id_transfer_target_identity_application_id: str
    :param display_name_transfer_target_identity_application_display_name: The identity's display
     name. Note that this may not always be available or up to date. For example, if a user changes
     their display name, the API may show the new value in a future response, but the items
     associated with the user won't show up as having changed when using delta.
    :type display_name_transfer_target_identity_application_display_name: str
    """

    _attribute_map = {
        'endpoint_type': {'key': 'transferTarget.endpointType', 'type': 'str'},
        'replaces_call_id': {'key': 'transferTarget.replacesCallId', 'type': 'str'},
        'id_transfer_target_identity_user_id': {'key': 'transferTarget.identity.user.id', 'type': 'str'},
        'display_name_transfer_target_identity_user_display_name': {'key': 'transferTarget.identity.user.displayName', 'type': 'str'},
        'id_transfer_target_identity_device_id': {'key': 'transferTarget.identity.device.id', 'type': 'str'},
        'display_name_transfer_target_identity_device_display_name': {'key': 'transferTarget.identity.device.displayName', 'type': 'str'},
        'id_transfer_target_identity_application_id': {'key': 'transferTarget.identity.application.id', 'type': 'str'},
        'display_name_transfer_target_identity_application_display_name': {'key': 'transferTarget.identity.application.displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        endpoint_type: Optional[Union[str, "MicrosoftGraphEndpointType"]] = None,
        replaces_call_id: Optional[str] = None,
        id_transfer_target_identity_user_id: Optional[str] = None,
        display_name_transfer_target_identity_user_display_name: Optional[str] = None,
        id_transfer_target_identity_device_id: Optional[str] = None,
        display_name_transfer_target_identity_device_display_name: Optional[str] = None,
        id_transfer_target_identity_application_id: Optional[str] = None,
        display_name_transfer_target_identity_application_display_name: Optional[str] = None,
        **kwargs
    ):
        super(Paths4Zbm7LCommunicationsCallsCallIdMicrosoftGraphTransferPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.endpoint_type = endpoint_type
        self.replaces_call_id = replaces_call_id
        self.id_transfer_target_identity_user_id = id_transfer_target_identity_user_id
        self.display_name_transfer_target_identity_user_display_name = display_name_transfer_target_identity_user_display_name
        self.id_transfer_target_identity_device_id = id_transfer_target_identity_device_id
        self.display_name_transfer_target_identity_device_display_name = display_name_transfer_target_identity_device_display_name
        self.id_transfer_target_identity_application_id = id_transfer_target_identity_application_id
        self.display_name_transfer_target_identity_application_display_name = display_name_transfer_target_identity_application_display_name


class PathsEipedyCommunicationsCallsCallIdMicrosoftGraphUpdaterecordingstatusPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """PathsEipedyCommunicationsCallsCallIdMicrosoftGraphUpdaterecordingstatusPostRequestbodyContentApplicationJsonSchema.

    :param status:  Possible values include: "unknown", "notRecording", "recording", "failed",
     "unknownFutureValue".
    :type status: str or ~cloud_communications.models.MicrosoftGraphRecordingStatus
    :param client_context:
    :type client_context: str
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'client_context': {'key': 'clientContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        status: Optional[Union[str, "MicrosoftGraphRecordingStatus"]] = None,
        client_context: Optional[str] = None,
        **kwargs
    ):
        super(PathsEipedyCommunicationsCallsCallIdMicrosoftGraphUpdaterecordingstatusPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.status = status
        self.client_context = client_context


class PathsKpvac3CommunicationsCallsCallIdParticipantsMicrosoftGraphMuteallPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """PathsKpvac3CommunicationsCallsCallIdParticipantsMicrosoftGraphMuteallPostRequestbodyContentApplicationJsonSchema.

    :param participants:
    :type participants: list[str]
    :param client_context:
    :type client_context: str
    """

    _attribute_map = {
        'participants': {'key': 'participants', 'type': '[str]'},
        'client_context': {'key': 'clientContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        participants: Optional[List[str]] = None,
        client_context: Optional[str] = None,
        **kwargs
    ):
        super(PathsKpvac3CommunicationsCallsCallIdParticipantsMicrosoftGraphMuteallPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.participants = participants
        self.client_context = client_context


class PathsOj95ZpCommunicationsCallsCallIdMicrosoftGraphChangescreensharingrolePostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """PathsOj95ZpCommunicationsCallsCallIdMicrosoftGraphChangescreensharingrolePostRequestbodyContentApplicationJsonSchema.

    :param role:  Possible values include: "viewer", "sharer".
    :type role: str or ~cloud_communications.models.MicrosoftGraphScreenSharingRole
    """

    _attribute_map = {
        'role': {'key': 'role', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        role: Optional[Union[str, "MicrosoftGraphScreenSharingRole"]] = None,
        **kwargs
    ):
        super(PathsOj95ZpCommunicationsCallsCallIdMicrosoftGraphChangescreensharingrolePostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.role = role


class PathsQvpqn4CommunicationsCallsCallIdMicrosoftGraphAnswerPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """PathsQvpqn4CommunicationsCallsCallIdMicrosoftGraphAnswerPostRequestbodyContentApplicationJsonSchema.

    :param callback_uri:
    :type callback_uri: str
    :param accepted_modalities:
    :type accepted_modalities: list[str or ~cloud_communications.models.MicrosoftGraphModality]
    :param remove_from_default_audio_group:
    :type remove_from_default_audio_group: bool
    """

    _attribute_map = {
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
        'accepted_modalities': {'key': 'acceptedModalities', 'type': '[str]'},
        'remove_from_default_audio_group': {'key': 'mediaConfig.removeFromDefaultAudioGroup', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        callback_uri: Optional[str] = None,
        accepted_modalities: Optional[List[Union[str, "MicrosoftGraphModality"]]] = None,
        remove_from_default_audio_group: Optional[bool] = None,
        **kwargs
    ):
        super(PathsQvpqn4CommunicationsCallsCallIdMicrosoftGraphAnswerPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.callback_uri = callback_uri
        self.accepted_modalities = accepted_modalities
        self.remove_from_default_audio_group = remove_from_default_audio_group


class PathsTobgxoCommunicationsCallsCallIdParticipantsParticipantIdMicrosoftGraphMutePostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """PathsTobgxoCommunicationsCallsCallIdParticipantsParticipantIdMicrosoftGraphMutePostRequestbodyContentApplicationJsonSchema.

    :param client_context:
    :type client_context: str
    """

    _attribute_map = {
        'client_context': {'key': 'clientContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        client_context: Optional[str] = None,
        **kwargs
    ):
        super(PathsTobgxoCommunicationsCallsCallIdParticipantsParticipantIdMicrosoftGraphMutePostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.client_context = client_context


class PathsXyl6WiCommunicationsCallsCallIdMicrosoftGraphSubscribetotonePostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """PathsXyl6WiCommunicationsCallsCallIdMicrosoftGraphSubscribetotonePostRequestbodyContentApplicationJsonSchema.

    :param client_context:
    :type client_context: str
    """

    _attribute_map = {
        'client_context': {'key': 'clientContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        client_context: Optional[str] = None,
        **kwargs
    ):
        super(PathsXyl6WiCommunicationsCallsCallIdMicrosoftGraphSubscribetotonePostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.client_context = client_context


class PathsYp37FjCommunicationsCallsCallIdMicrosoftGraphCancelmediaprocessingPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """PathsYp37FjCommunicationsCallsCallIdMicrosoftGraphCancelmediaprocessingPostRequestbodyContentApplicationJsonSchema.

    :param client_context:
    :type client_context: str
    """

    _attribute_map = {
        'client_context': {'key': 'clientContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        client_context: Optional[str] = None,
        **kwargs
    ):
        super(PathsYp37FjCommunicationsCallsCallIdMicrosoftGraphCancelmediaprocessingPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.client_context = client_context
