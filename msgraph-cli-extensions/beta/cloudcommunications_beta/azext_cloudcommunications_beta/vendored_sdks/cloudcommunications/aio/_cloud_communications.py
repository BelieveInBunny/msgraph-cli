# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.mgmt.core import AsyncARMPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

from ._configuration import CloudCommunicationsConfiguration
from .operations import CommunicationsCloudCommunicationsOperations
from .operations import CommunicationsOperations
from .operations import CommunicationsCallRecordsOperations
from .operations import CommunicationsCallRecordsSessionsOperations
from .operations import CommunicationsCallsOperations
from .operations import CommunicationsCallsParticipantsOperations
from .operations import CommunicationsOnlineMeetingsOperations
from .operations import UsersOperations
from .. import models


class CloudCommunications(object):
    """CloudCommunications.

    :ivar communications_cloud_communications: CommunicationsCloudCommunicationsOperations operations
    :vartype communications_cloud_communications: cloud_communications.aio.operations.CommunicationsCloudCommunicationsOperations
    :ivar communications: CommunicationsOperations operations
    :vartype communications: cloud_communications.aio.operations.CommunicationsOperations
    :ivar communications_call_records: CommunicationsCallRecordsOperations operations
    :vartype communications_call_records: cloud_communications.aio.operations.CommunicationsCallRecordsOperations
    :ivar communications_call_records_sessions: CommunicationsCallRecordsSessionsOperations operations
    :vartype communications_call_records_sessions: cloud_communications.aio.operations.CommunicationsCallRecordsSessionsOperations
    :ivar communications_calls: CommunicationsCallsOperations operations
    :vartype communications_calls: cloud_communications.aio.operations.CommunicationsCallsOperations
    :ivar communications_calls_participants: CommunicationsCallsParticipantsOperations operations
    :vartype communications_calls_participants: cloud_communications.aio.operations.CommunicationsCallsParticipantsOperations
    :ivar communications_online_meetings: CommunicationsOnlineMeetingsOperations operations
    :vartype communications_online_meetings: cloud_communications.aio.operations.CommunicationsOnlineMeetingsOperations
    :ivar users: UsersOperations operations
    :vartype users: cloud_communications.aio.operations.UsersOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param top: Show only the first n items.
    :type top: int
    :param skip: Skip the first n items.
    :type skip: int
    :param search: Search items by search phrases.
    :type search: str
    :param filter: Filter items by property values.
    :type filter: str
    :param count: Include count of items.
    :type count: bool
    :param str base_url: Service URL
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://graph.microsoft.com/beta'
        self._config = CloudCommunicationsConfiguration(credential, top, skip, search, filter, count, **kwargs)
        self._client = AsyncARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.communications_cloud_communications = CommunicationsCloudCommunicationsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.communications = CommunicationsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.communications_call_records = CommunicationsCallRecordsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.communications_call_records_sessions = CommunicationsCallRecordsSessionsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.communications_calls = CommunicationsCallsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.communications_calls_participants = CommunicationsCallsParticipantsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.communications_online_meetings = CommunicationsOnlineMeetingsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.users = UsersOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "CloudCommunications":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
