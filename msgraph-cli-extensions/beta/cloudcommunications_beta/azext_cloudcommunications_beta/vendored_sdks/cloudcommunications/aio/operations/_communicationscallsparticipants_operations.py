# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Generic, Optional, TypeVar
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class communicationscallsparticipantsOperations:
    """communicationscallsparticipantsOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~cloud_communications.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def mute(
        self,
        call_id: str,
        participant_id: str,
        body: "models.pathstobgxocommunicationscallscallidparticipantsparticipantidmicrosoftgraphmutepostrequestbodycontentapplicationjsonschema",
        **kwargs
    ) -> "models.microsoftgraphmuteparticipantoperation":
        """Invoke action mute.

        Invoke action mute.

        :param call_id: key: id of call.
        :type call_id: str
        :param participant_id: key: id of participant.
        :type participant_id: str
        :param body: Action parameters.
        :type body: ~cloud_communications.models.pathstobgxocommunicationscallscallidparticipantsparticipantidmicrosoftgraphmutepostrequestbodycontentapplicationjsonschema
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphmuteparticipantoperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.microsoftgraphmuteparticipantoperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphmuteparticipantoperation"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.mute.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
            'participant-id': self._serialize.url("participant_id", participant_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'pathstobgxocommunicationscallscallidparticipantsparticipantidmicrosoftgraphmutepostrequestbodycontentapplicationjsonschema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphmuteparticipantoperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    mute.metadata = {'url': '/communications/calls/{call-id}/participants/{participant-id}/microsoft.graph.mute'}  # type: ignore

    async def invite(
        self,
        call_id: str,
        body: "models.paths1bh76wacommunicationscallscallidparticipantsmicrosoftgraphinvitepostrequestbodycontentapplicationjsonschema",
        **kwargs
    ) -> "models.microsoftgraphinviteparticipantsoperation":
        """Invoke action invite.

        Invoke action invite.

        :param call_id: key: id of call.
        :type call_id: str
        :param body: Action parameters.
        :type body: ~cloud_communications.models.paths1bh76wacommunicationscallscallidparticipantsmicrosoftgraphinvitepostrequestbodycontentapplicationjsonschema
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphinviteparticipantsoperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.microsoftgraphinviteparticipantsoperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphinviteparticipantsoperation"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.invite.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'paths1bh76wacommunicationscallscallidparticipantsmicrosoftgraphinvitepostrequestbodycontentapplicationjsonschema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphinviteparticipantsoperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    invite.metadata = {'url': '/communications/calls/{call-id}/participants/microsoft.graph.invite'}  # type: ignore

    async def mute_all(
        self,
        call_id: str,
        body: "models.pathskpvac3communicationscallscallidparticipantsmicrosoftgraphmuteallpostrequestbodycontentapplicationjsonschema",
        **kwargs
    ) -> "models.microsoftgraphmuteparticipantsoperation":
        """Invoke action muteAll.

        Invoke action muteAll.

        :param call_id: key: id of call.
        :type call_id: str
        :param body: Action parameters.
        :type body: ~cloud_communications.models.pathskpvac3communicationscallscallidparticipantsmicrosoftgraphmuteallpostrequestbodycontentapplicationjsonschema
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphmuteparticipantsoperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.microsoftgraphmuteparticipantsoperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphmuteparticipantsoperation"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.mute_all.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'pathskpvac3communicationscallscallidparticipantsmicrosoftgraphmuteallpostrequestbodycontentapplicationjsonschema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphmuteparticipantsoperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    mute_all.metadata = {'url': '/communications/calls/{call-id}/participants/microsoft.graph.muteAll'}  # type: ignore
