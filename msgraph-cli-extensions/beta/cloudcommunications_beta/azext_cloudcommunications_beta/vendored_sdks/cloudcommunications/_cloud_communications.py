# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import TYPE_CHECKING

from azure.core import PipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Optional

    from azure.core.credentials import TokenCredential

from ._configuration import CloudCommunicationsConfiguration
from .operations import communicationscloudcommunicationsOperations
from .operations import communicationsOperations
from .operations import communicationscallrecordsOperations
from .operations import communicationscallrecordssessionsOperations
from .operations import communicationscallsOperations
from .operations import communicationscallsparticipantsOperations
from .operations import communicationsonlinemeetingsOperations
from .operations import usersOperations
from . import models


class CloudCommunications(object):
    """CloudCommunications.

    :ivar communicationscloudcommunications: communicationscloudcommunicationsOperations operations
    :vartype communicationscloudcommunications: cloud_communications.operations.communicationscloudcommunicationsOperations
    :ivar communications: communicationsOperations operations
    :vartype communications: cloud_communications.operations.communicationsOperations
    :ivar communicationscallrecords: communicationscallrecordsOperations operations
    :vartype communicationscallrecords: cloud_communications.operations.communicationscallrecordsOperations
    :ivar communicationscallrecordssessions: communicationscallrecordssessionsOperations operations
    :vartype communicationscallrecordssessions: cloud_communications.operations.communicationscallrecordssessionsOperations
    :ivar communicationscalls: communicationscallsOperations operations
    :vartype communicationscalls: cloud_communications.operations.communicationscallsOperations
    :ivar communicationscallsparticipants: communicationscallsparticipantsOperations operations
    :vartype communicationscallsparticipants: cloud_communications.operations.communicationscallsparticipantsOperations
    :ivar communicationsonlinemeetings: communicationsonlinemeetingsOperations operations
    :vartype communicationsonlinemeetings: cloud_communications.operations.communicationsonlinemeetingsOperations
    :ivar users: usersOperations operations
    :vartype users: cloud_communications.operations.usersOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials.TokenCredential
    :param top: Show only the first n items.
    :type top: int
    :param skip: Skip the first n items.
    :type skip: int
    :param search: Search items by search phrases.
    :type search: str
    :param filter: Filter items by property values.
    :type filter: str
    :param count: Include count of items.
    :type count: bool
    :param str base_url: Service URL
    """

    def __init__(
        self,
        credential,  # type: "TokenCredential"
        top=None,  # type: Optional[int]
        skip=None,  # type: Optional[int]
        search=None,  # type: Optional[str]
        filter=None,  # type: Optional[str]
        count=None,  # type: Optional[bool]
        base_url=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        if not base_url:
            base_url = 'https://graph.microsoft.com/beta'
        self._config = CloudCommunicationsConfiguration(credential, top, skip, search, filter, count, **kwargs)
        self._client = PipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.communicationscloudcommunications = communicationscloudcommunicationsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.communications = communicationsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.communicationscallrecords = communicationscallrecordsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.communicationscallrecordssessions = communicationscallrecordssessionsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.communicationscalls = communicationscallsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.communicationscallsparticipants = communicationscallsparticipantsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.communicationsonlinemeetings = communicationsonlinemeetingsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.users = usersOperations(
            self._client, self._config, self._serialize, self._deserialize)

    def close(self):
        # type: () -> None
        self._client.close()

    def __enter__(self):
        # type: () -> CloudCommunications
        self._client.__enter__()
        return self

    def __exit__(self, *exc_details):
        # type: (Any) -> None
        self._client.__exit__(*exc_details)
