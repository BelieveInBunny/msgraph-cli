# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=protected-access

import argparse
from collections import defaultdict
from knack.util import CLIError


class AddPresences(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddPresences, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'activity':
                d['activity'] = v[0]
            elif kl == 'availability':
                d['availability'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter presences. All possible keys are: '
                               'activity, availability, id'.format(k))
        return d


class AddChatInfo(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.chat_info = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'message-id':
                d['message_id'] = v[0]
            elif kl == 'reply-chain-message-id':
                d['reply_chain_message_id'] = v[0]
            elif kl == 'thread-id':
                d['thread_id'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter chat_info. All possible keys are: '
                               'message-id, reply-chain-message-id, thread-id'.format(k))
        return d


class AddMeetingCapability(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.meeting_capability = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'allow-anonymous-users-to-dial-out':
                d['allow_anonymous_users_to_dial_out'] = v[0]
            elif kl == 'allow-anonymous-users-to-start-meeting':
                d['allow_anonymous_users_to_start_meeting'] = v[0]
            elif kl == 'auto-admitted-users':
                d['auto_admitted_users'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter meeting_capability. All possible keys '
                               'are: allow-anonymous-users-to-dial-out, allow-anonymous-users-to-start-meeting, '
                               'auto-admitted-users'.format(k))
        return d


class AddResultInfo(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.result_info = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'code':
                d['code'] = v[0]
            elif kl == 'message':
                d['message'] = v[0]
            elif kl == 'subcode':
                d['subcode'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter result_info. All possible keys are: code, '
                               'message, subcode'.format(k))
        return d


class AddToneInfo(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.tone_info = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'sequence-id':
                d['sequence_id'] = v[0]
            elif kl == 'tone':
                d['tone'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter tone_info. All possible keys are: '
                               'sequence-id, tone'.format(k))
        return d


class AddTranscription(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.transcription = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'last-modified-date-time':
                d['last_modified_date_time'] = v[0]
            elif kl == 'state':
                d['state'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter transcription. All possible keys are: '
                               'last-modified-date-time, state'.format(k))
        return d


class AddAudioRoutingGroups(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddAudioRoutingGroups, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'receivers':
                d['receivers'] = v
            elif kl == 'routing-mode':
                d['routing_mode'] = v[0]
            elif kl == 'sources':
                d['sources'] = v
            elif kl == 'id':
                d['id'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter audio_routing_groups. All possible keys '
                               'are: receivers, routing-mode, sources, id'.format(k))
        return d


class AddApplication(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.application = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'display-name':
                d['display_name'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter application. All possible keys are: '
                               'display-name, id'.format(k))
        return d


class AddAudioConferencing(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.audio_conferencing = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'conference-id':
                d['conference_id'] = v[0]
            elif kl == 'dialin-url':
                d['dialin_url'] = v[0]
            elif kl == 'toll-free-number':
                d['toll_free_number'] = v[0]
            elif kl == 'toll-number':
                d['toll_number'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter audio_conferencing. All possible keys '
                               'are: conference-id, dialin-url, toll-free-number, toll-number'.format(k))
        return d


class AddJoinInformation(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.join_information = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'content':
                d['content'] = v[0]
            elif kl == 'content-type':
                d['content_type'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter join_information. All possible keys are: '
                               'content, content-type'.format(k))
        return d


class AddLobbyBypassSettings(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.lobby_bypass_settings = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'is-dial-in-bypass-enabled':
                d['is_dial_in_bypass_enabled'] = v[0]
            elif kl == 'scope':
                d['scope'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter lobby_bypass_settings. All possible keys '
                               'are: is-dial-in-bypass-enabled, scope'.format(k))
        return d


class AddFailureInfo(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.failure_info = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'reason':
                d['reason'] = v[0]
            elif kl == 'stage':
                d['stage'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter failure_info. All possible keys are: '
                               'reason, stage'.format(k))
        return d


class AddUserAgent(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.user_agent = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'application-version':
                d['application_version'] = v[0]
            elif kl == 'header-value':
                d['header_value'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter user_agent. All possible keys are: '
                               'application-version, header-value'.format(k))
        return d


class AddMediaStreams(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddMediaStreams, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'direction':
                d['direction'] = v[0]
            elif kl == 'label':
                d['label'] = v[0]
            elif kl == 'media-type':
                d['media_type'] = v[0]
            elif kl == 'server-muted':
                d['server_muted'] = v[0]
            elif kl == 'source-id':
                d['source_id'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter media_streams. All possible keys are: '
                               'direction, label, media-type, server-muted, source-id'.format(k))
        return d


class AddMediaQualityList(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddMediaQualityList, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'average-inbound-jitter':
                d['average_inbound_jitter'] = v[0]
            elif kl == 'average-inbound-packet-loss-rate-in-percentage':
                d['average_inbound_packet_loss_rate_in_percentage'] = v[0]
            elif kl == 'average-inbound-round-trip-delay':
                d['average_inbound_round_trip_delay'] = v[0]
            elif kl == 'average-outbound-jitter':
                d['average_outbound_jitter'] = v[0]
            elif kl == 'average-outbound-packet-loss-rate-in-percentage':
                d['average_outbound_packet_loss_rate_in_percentage'] = v[0]
            elif kl == 'average-outbound-round-trip-delay':
                d['average_outbound_round_trip_delay'] = v[0]
            elif kl == 'channel-index':
                d['channel_index'] = v[0]
            elif kl == 'inbound-packets':
                d['inbound_packets'] = v[0]
            elif kl == 'local-ip-address':
                d['local_ip_address'] = v[0]
            elif kl == 'local-port':
                d['local_port'] = v[0]
            elif kl == 'maximum-inbound-jitter':
                d['maximum_inbound_jitter'] = v[0]
            elif kl == 'maximum-inbound-packet-loss-rate-in-percentage':
                d['maximum_inbound_packet_loss_rate_in_percentage'] = v[0]
            elif kl == 'maximum-inbound-round-trip-delay':
                d['maximum_inbound_round_trip_delay'] = v[0]
            elif kl == 'maximum-outbound-jitter':
                d['maximum_outbound_jitter'] = v[0]
            elif kl == 'maximum-outbound-packet-loss-rate-in-percentage':
                d['maximum_outbound_packet_loss_rate_in_percentage'] = v[0]
            elif kl == 'maximum-outbound-round-trip-delay':
                d['maximum_outbound_round_trip_delay'] = v[0]
            elif kl == 'media-duration':
                d['media_duration'] = v[0]
            elif kl == 'network-link-speed-in-bytes':
                d['network_link_speed_in_bytes'] = v[0]
            elif kl == 'outbound-packets':
                d['outbound_packets'] = v[0]
            elif kl == 'remote-ip-address':
                d['remote_ip_address'] = v[0]
            elif kl == 'remote-port':
                d['remote_port'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter media_quality_list. All possible keys '
                               'are: average-inbound-jitter, average-inbound-packet-loss-rate-in-percentage, '
                               'average-inbound-round-trip-delay, average-outbound-jitter, '
                               'average-outbound-packet-loss-rate-in-percentage, average-outbound-round-trip-delay, '
                               'channel-index, inbound-packets, local-ip-address, local-port, maximum-inbound-jitter, '
                               'maximum-inbound-packet-loss-rate-in-percentage, maximum-inbound-round-trip-delay, '
                               'maximum-outbound-jitter, maximum-outbound-packet-loss-rate-in-percentage, '
                               'maximum-outbound-round-trip-delay, media-duration, network-link-speed-in-bytes, '
                               'outbound-packets, remote-ip-address, remote-port'.format(k))
        return d


class AddCloudcommunicationsCommunicationscallPlayPromptPrompts(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddCloudcommunicationsCommunicationscallPlayPromptPrompts, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            v = properties[k]
            d[k] = v
        return d


class AddCloudcommunicationsCommunicationscallRecordPrompts(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddCloudcommunicationsCommunicationscallRecordPrompts, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            v = properties[k]
            d[k] = v
        return d


class AddPrompts(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddPrompts, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            v = properties[k]
            d[k] = v
        return d
