# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=protected-access

import argparse
from collections import defaultdict
from knack.util import CLIError


class AddResultInfo(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.result_info = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'code':
                d['code'] = v[0]
            elif kl == 'subcode':
                d['subcode'] = v[0]
            elif kl == 'message':
                d['message'] = v[0]
        return d


class AddCommunicationsTargets(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddCommunicationsTargets, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'endpoint-type':
                d['endpoint_type'] = v[0]
            elif kl == 'replaces-call-id':
                d['replaces_call_id'] = v[0]
            elif kl == 'id-identity-user-id':
                d['id_identity_user_id'] = v[0]
            elif kl == 'display-name-identity-user-display-name':
                d['display_name_identity_user_display_name'] = v[0]
            elif kl == 'id-identity-device-id':
                d['id_identity_device_id'] = v[0]
            elif kl == 'display-name-identity-device-display-name':
                d['display_name_identity_device_display_name'] = v[0]
            elif kl == 'id-identity-application-id':
                d['id_identity_application_id'] = v[0]
            elif kl == 'display-name-identity-application-display-name':
                d['display_name_identity_application_display_name'] = v[0]
        return d


class AddChatInfo(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.chat_info = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'thread-id':
                d['thread_id'] = v[0]
            elif kl == 'message-id':
                d['message_id'] = v[0]
            elif kl == 'reply-chain-message-id':
                d['reply_chain_message_id'] = v[0]
        return d


class AddMeetingCapability(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.meeting_capability = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'allow-anonymous-users-to-dial-out':
                d['allow_anonymous_users_to_dial_out'] = v[0]
            elif kl == 'auto-admitted-users':
                d['auto_admitted_users'] = v[0]
            elif kl == 'allow-anonymous-users-to-start-meeting':
                d['allow_anonymous_users_to_start_meeting'] = v[0]
        return d


class AddToneInfo(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.tone_info = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'sequence-id':
                d['sequence_id'] = v[0]
            elif kl == 'tone':
                d['tone'] = v[0]
        return d


class AddAudioRoutingGroups(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddAudioRoutingGroups, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'routing-mode':
                d['routing_mode'] = v[0]
            elif kl == 'sources':
                d['sources'] = v
            elif kl == 'receivers':
                d['receivers'] = v
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddOperations(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddOperations, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'status':
                d['status'] = v[0]
            elif kl == 'client-context':
                d['client_context'] = v[0]
            elif kl == 'code':
                d['code'] = v[0]
            elif kl == 'subcode':
                d['subcode'] = v[0]
            elif kl == 'message':
                d['message'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddIncomingContextOnBehalfOf(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.incoming_context_on_behalf_of = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'id-user-id':
                d['id_user_id'] = v[0]
            elif kl == 'display-name-user-display-name':
                d['display_name_user_display_name'] = v[0]
            elif kl == 'id-device-id':
                d['id_device_id'] = v[0]
            elif kl == 'display-name-device-display-name':
                d['display_name_device_display_name'] = v[0]
            elif kl == 'id-application-id':
                d['id_application_id'] = v[0]
            elif kl == 'display-name-application-display-name':
                d['display_name_application_display_name'] = v[0]
        return d


class AddCommunicationsParticipants(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddCommunicationsParticipants, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'id-user-id':
                d['id_user_id'] = v[0]
            elif kl == 'display-name-user-display-name':
                d['display_name_user_display_name'] = v[0]
            elif kl == 'id-device-id':
                d['id_device_id'] = v[0]
            elif kl == 'display-name-device-display-name':
                d['display_name_device_display_name'] = v[0]
            elif kl == 'id-application-id':
                d['id_application_id'] = v[0]
            elif kl == 'display-name-application-display-name':
                d['display_name_application_display_name'] = v[0]
        return d


class AddAudioConferencing(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.audio_conferencing = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'conference-id':
                d['conference_id'] = v[0]
            elif kl == 'toll-number':
                d['toll_number'] = v[0]
            elif kl == 'toll-free-number':
                d['toll_free_number'] = v[0]
            elif kl == 'dialin-url':
                d['dialin_url'] = v[0]
        return d


class AddFailureInfo(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.failure_info = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'stage':
                d['stage'] = v[0]
            elif kl == 'reason':
                d['reason'] = v[0]
        return d


class AddCalleeUserAgent(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.callee_user_agent = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'header-value':
                d['header_value'] = v[0]
            elif kl == 'application-version':
                d['application_version'] = v[0]
        return d


class AddMediaStreams(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddMediaStreams, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'media-type':
                d['media_type'] = v[0]
            elif kl == 'label':
                d['label'] = v[0]
            elif kl == 'source-id':
                d['source_id'] = v[0]
            elif kl == 'direction':
                d['direction'] = v[0]
            elif kl == 'server-muted':
                d['server_muted'] = v[0]
        return d


class AddCommunicationsCallsTargets(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddCommunicationsCallsTargets, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'endpoint-type':
                d['endpoint_type'] = v[0]
            elif kl == 'replaces-call-id':
                d['replaces_call_id'] = v[0]
            elif kl == 'id-identity-user-id':
                d['id_identity_user_id'] = v[0]
            elif kl == 'display-name-identity-user-display-name':
                d['display_name_identity_user_display_name'] = v[0]
            elif kl == 'id-identity-device-id':
                d['id_identity_device_id'] = v[0]
            elif kl == 'display-name-identity-device-display-name':
                d['display_name_identity_device_display_name'] = v[0]
            elif kl == 'id-identity-application-id':
                d['id_identity_application_id'] = v[0]
            elif kl == 'display-name-identity-application-display-name':
                d['display_name_identity_application_display_name'] = v[0]
        return d


class AddCommunicationsCallsParticipantsParticipants(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddCommunicationsCallsParticipantsParticipants, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'endpoint-type':
                d['endpoint_type'] = v[0]
            elif kl == 'replaces-call-id':
                d['replaces_call_id'] = v[0]
            elif kl == 'id-identity-user-id':
                d['id_identity_user_id'] = v[0]
            elif kl == 'display-name-identity-user-display-name':
                d['display_name_identity_user_display_name'] = v[0]
            elif kl == 'id-identity-device-id':
                d['id_identity_device_id'] = v[0]
            elif kl == 'display-name-identity-device-display-name':
                d['display_name_identity_device_display_name'] = v[0]
            elif kl == 'id-identity-application-id':
                d['id_identity_application_id'] = v[0]
            elif kl == 'display-name-identity-application-display-name':
                d['display_name_identity_application_display_name'] = v[0]
        return d
