# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class EducationUserOperations:
    """EducationUserOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~education.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_assignment(
        self,
        education_user_id: str,
        orderby: Optional[List[Union[str, "models.Enum251"]]] = None,
        select: Optional[List[Union[str, "models.Enum252"]]] = None,
        expand: Optional[List[Union[str, "models.Enum253"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationAssignment1"]:
        """Get assignments from education.

        Get assignments from education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum251]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum252]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum253]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationAssignment1 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationAssignment1]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationAssignment1"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_assignment.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationAssignment1', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_assignment.metadata = {'url': '/education/users/{educationUser-id}/assignments'}  # type: ignore

    async def create_assignment(
        self,
        education_user_id: str,
        id: Optional[str] = None,
        allow_late_submissions: Optional[bool] = None,
        allow_students_to_add_resources_to_submission: Optional[bool] = None,
        assign_date_time: Optional[datetime.datetime] = None,
        assigned_date_time: Optional[datetime.datetime] = None,
        assign_to: Optional[Dict[str, object]] = None,
        class_id: Optional[str] = None,
        close_date_time: Optional[datetime.datetime] = None,
        created_date_time: Optional[datetime.datetime] = None,
        display_name: Optional[str] = None,
        due_date_time: Optional[datetime.datetime] = None,
        grading: Optional[Dict[str, object]] = None,
        instructions: Optional["models.MicrosoftGraphEducationItemBody"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        status: Optional[Union[str, "models.MicrosoftGraphEducationAssignmentStatus"]] = None,
        categories: Optional[List["models.MicrosoftGraphEducationCategory"]] = None,
        resources: Optional[List["models.MicrosoftGraphEducationAssignmentResource"]] = None,
        submissions: Optional[List["models.MicrosoftGraphEducationSubmission"]] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        microsoft_graph_education_rubric_created_date_time_created_date_time: Optional[datetime.datetime] = None,
        description: Optional["models.MicrosoftGraphEducationItemBody"] = None,
        microsoft_graph_education_rubric_display_name: Optional[str] = None,
        microsoft_graph_education_assignment_grade_type_grading: Optional[Dict[str, object]] = None,
        microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time: Optional[datetime.datetime] = None,
        levels: Optional[List["models.MicrosoftGraphRubricLevel"]] = None,
        qualities: Optional[List["models.MicrosoftGraphRubricQuality"]] = None,
        application: Optional["models.MicrosoftGraphIdentity"] = None,
        device: Optional["models.MicrosoftGraphIdentity"] = None,
        user: Optional["models.MicrosoftGraphIdentity"] = None,
        microsoft_graph_identity_application: Optional["models.MicrosoftGraphIdentity"] = None,
        microsoft_graph_identity_device: Optional["models.MicrosoftGraphIdentity"] = None,
        microsoft_graph_identity_user: Optional["models.MicrosoftGraphIdentity"] = None,
        application1: Optional["models.MicrosoftGraphIdentity"] = None,
        device1: Optional["models.MicrosoftGraphIdentity"] = None,
        user1: Optional["models.MicrosoftGraphIdentity"] = None,
        application2: Optional["models.MicrosoftGraphIdentity"] = None,
        device2: Optional["models.MicrosoftGraphIdentity"] = None,
        user2: Optional["models.MicrosoftGraphIdentity"] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationAssignment":
        """Create new navigation property to assignments for education.

        Create new navigation property to assignments for education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param id: Read-only.
        :type id: str
        :param allow_late_submissions:
        :type allow_late_submissions: bool
        :param allow_students_to_add_resources_to_submission:
        :type allow_students_to_add_resources_to_submission: bool
        :param assign_date_time:
        :type assign_date_time: ~datetime.datetime
        :param assigned_date_time:
        :type assigned_date_time: ~datetime.datetime
        :param assign_to: educationAssignmentRecipient.
        :type assign_to: dict[str, object]
        :param class_id:
        :type class_id: str
        :param close_date_time:
        :type close_date_time: ~datetime.datetime
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param display_name:
        :type display_name: str
        :param due_date_time:
        :type due_date_time: ~datetime.datetime
        :param grading: educationAssignmentGradeType.
        :type grading: dict[str, object]
        :param instructions: educationItemBody.
        :type instructions: ~education.models.MicrosoftGraphEducationItemBody
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param status:
        :type status: str or ~education.models.MicrosoftGraphEducationAssignmentStatus
        :param categories:
        :type categories: list[~education.models.MicrosoftGraphEducationCategory]
        :param resources:
        :type resources: list[~education.models.MicrosoftGraphEducationAssignmentResource]
        :param submissions:
        :type submissions: list[~education.models.MicrosoftGraphEducationSubmission]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param microsoft_graph_education_rubric_created_date_time_created_date_time:
        :type microsoft_graph_education_rubric_created_date_time_created_date_time: ~datetime.datetime
        :param description: educationItemBody.
        :type description: ~education.models.MicrosoftGraphEducationItemBody
        :param microsoft_graph_education_rubric_display_name:
        :type microsoft_graph_education_rubric_display_name: str
        :param microsoft_graph_education_assignment_grade_type_grading: educationAssignmentGradeType.
        :type microsoft_graph_education_assignment_grade_type_grading: dict[str, object]
        :param microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time:
        :type microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time: ~datetime.datetime
        :param levels:
        :type levels: list[~education.models.MicrosoftGraphRubricLevel]
        :param qualities:
        :type qualities: list[~education.models.MicrosoftGraphRubricQuality]
        :param application: identity.
        :type application: ~education.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~education.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~education.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~education.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~education.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~education.models.MicrosoftGraphIdentity
        :param application1: identity.
        :type application1: ~education.models.MicrosoftGraphIdentity
        :param device1: identity.
        :type device1: ~education.models.MicrosoftGraphIdentity
        :param user1: identity.
        :type user1: ~education.models.MicrosoftGraphIdentity
        :param application2: identity.
        :type application2: ~education.models.MicrosoftGraphIdentity
        :param device2: identity.
        :type device2: ~education.models.MicrosoftGraphIdentity
        :param user2: identity.
        :type user2: ~education.models.MicrosoftGraphIdentity
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationAssignment, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationAssignment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationAssignment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphEducationAssignment(id=id, allow_late_submissions=allow_late_submissions, allow_students_to_add_resources_to_submission=allow_students_to_add_resources_to_submission, assign_date_time=assign_date_time, assigned_date_time=assigned_date_time, assign_to=assign_to, class_id=class_id, close_date_time=close_date_time, created_date_time=created_date_time, display_name=display_name, due_date_time=due_date_time, grading=grading, instructions=instructions, last_modified_date_time=last_modified_date_time, status=status, categories=categories, resources=resources, submissions=submissions, id_rubric_id=microsoft_graph_entity_id, created_date_time_rubric_created_date_time=microsoft_graph_education_rubric_created_date_time_created_date_time, description=description, display_name_rubric_display_name=microsoft_graph_education_rubric_display_name, grading_rubric_grading=microsoft_graph_education_assignment_grade_type_grading, last_modified_date_time_rubric_last_modified_date_time=microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time, levels=levels, qualities=qualities, application_rubric_last_modified_by_application=application, device_rubric_last_modified_by_device=device, user_rubric_last_modified_by_user=user, application_rubric_created_by_application=microsoft_graph_identity_application, device_rubric_created_by_device=microsoft_graph_identity_device, user_rubric_created_by_user=microsoft_graph_identity_user, application_last_modified_by_application=application1, device_last_modified_by_device=device1, user_last_modified_by_user=user1, application_created_by_application=application2, device_created_by_device=device2, user_created_by_user=user2)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphEducationAssignment')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationAssignment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_assignment.metadata = {'url': '/education/users/{educationUser-id}/assignments'}  # type: ignore

    async def get_assignment(
        self,
        education_user_id: str,
        education_assignment_id: str,
        select: Optional[List[Union[str, "models.Enum254"]]] = None,
        expand: Optional[List[Union[str, "models.Enum255"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationAssignment":
        """Get assignments from education.

        Get assignments from education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum254]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum255]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationAssignment, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationAssignment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationAssignment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationAssignment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_assignment.metadata = {'url': '/education/users/{educationUser-id}/assignments/{educationAssignment-id}'}  # type: ignore

    async def update_assignment(
        self,
        education_user_id: str,
        education_assignment_id: str,
        id: Optional[str] = None,
        allow_late_submissions: Optional[bool] = None,
        allow_students_to_add_resources_to_submission: Optional[bool] = None,
        assign_date_time: Optional[datetime.datetime] = None,
        assigned_date_time: Optional[datetime.datetime] = None,
        assign_to: Optional[Dict[str, object]] = None,
        class_id: Optional[str] = None,
        close_date_time: Optional[datetime.datetime] = None,
        created_date_time: Optional[datetime.datetime] = None,
        display_name: Optional[str] = None,
        due_date_time: Optional[datetime.datetime] = None,
        grading: Optional[Dict[str, object]] = None,
        instructions: Optional["models.MicrosoftGraphEducationItemBody"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        status: Optional[Union[str, "models.MicrosoftGraphEducationAssignmentStatus"]] = None,
        categories: Optional[List["models.MicrosoftGraphEducationCategory"]] = None,
        resources: Optional[List["models.MicrosoftGraphEducationAssignmentResource"]] = None,
        submissions: Optional[List["models.MicrosoftGraphEducationSubmission"]] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        microsoft_graph_education_rubric_created_date_time_created_date_time: Optional[datetime.datetime] = None,
        description: Optional["models.MicrosoftGraphEducationItemBody"] = None,
        microsoft_graph_education_rubric_display_name: Optional[str] = None,
        microsoft_graph_education_assignment_grade_type_grading: Optional[Dict[str, object]] = None,
        microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time: Optional[datetime.datetime] = None,
        levels: Optional[List["models.MicrosoftGraphRubricLevel"]] = None,
        qualities: Optional[List["models.MicrosoftGraphRubricQuality"]] = None,
        application: Optional["models.MicrosoftGraphIdentity"] = None,
        device: Optional["models.MicrosoftGraphIdentity"] = None,
        user: Optional["models.MicrosoftGraphIdentity"] = None,
        microsoft_graph_identity_application: Optional["models.MicrosoftGraphIdentity"] = None,
        microsoft_graph_identity_device: Optional["models.MicrosoftGraphIdentity"] = None,
        microsoft_graph_identity_user: Optional["models.MicrosoftGraphIdentity"] = None,
        application1: Optional["models.MicrosoftGraphIdentity"] = None,
        device1: Optional["models.MicrosoftGraphIdentity"] = None,
        user1: Optional["models.MicrosoftGraphIdentity"] = None,
        application2: Optional["models.MicrosoftGraphIdentity"] = None,
        device2: Optional["models.MicrosoftGraphIdentity"] = None,
        user2: Optional["models.MicrosoftGraphIdentity"] = None,
        **kwargs
    ) -> None:
        """Update the navigation property assignments in education.

        Update the navigation property assignments in education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param id: Read-only.
        :type id: str
        :param allow_late_submissions:
        :type allow_late_submissions: bool
        :param allow_students_to_add_resources_to_submission:
        :type allow_students_to_add_resources_to_submission: bool
        :param assign_date_time:
        :type assign_date_time: ~datetime.datetime
        :param assigned_date_time:
        :type assigned_date_time: ~datetime.datetime
        :param assign_to: educationAssignmentRecipient.
        :type assign_to: dict[str, object]
        :param class_id:
        :type class_id: str
        :param close_date_time:
        :type close_date_time: ~datetime.datetime
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param display_name:
        :type display_name: str
        :param due_date_time:
        :type due_date_time: ~datetime.datetime
        :param grading: educationAssignmentGradeType.
        :type grading: dict[str, object]
        :param instructions: educationItemBody.
        :type instructions: ~education.models.MicrosoftGraphEducationItemBody
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param status:
        :type status: str or ~education.models.MicrosoftGraphEducationAssignmentStatus
        :param categories:
        :type categories: list[~education.models.MicrosoftGraphEducationCategory]
        :param resources:
        :type resources: list[~education.models.MicrosoftGraphEducationAssignmentResource]
        :param submissions:
        :type submissions: list[~education.models.MicrosoftGraphEducationSubmission]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param microsoft_graph_education_rubric_created_date_time_created_date_time:
        :type microsoft_graph_education_rubric_created_date_time_created_date_time: ~datetime.datetime
        :param description: educationItemBody.
        :type description: ~education.models.MicrosoftGraphEducationItemBody
        :param microsoft_graph_education_rubric_display_name:
        :type microsoft_graph_education_rubric_display_name: str
        :param microsoft_graph_education_assignment_grade_type_grading: educationAssignmentGradeType.
        :type microsoft_graph_education_assignment_grade_type_grading: dict[str, object]
        :param microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time:
        :type microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time: ~datetime.datetime
        :param levels:
        :type levels: list[~education.models.MicrosoftGraphRubricLevel]
        :param qualities:
        :type qualities: list[~education.models.MicrosoftGraphRubricQuality]
        :param application: identity.
        :type application: ~education.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~education.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~education.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~education.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~education.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~education.models.MicrosoftGraphIdentity
        :param application1: identity.
        :type application1: ~education.models.MicrosoftGraphIdentity
        :param device1: identity.
        :type device1: ~education.models.MicrosoftGraphIdentity
        :param user1: identity.
        :type user1: ~education.models.MicrosoftGraphIdentity
        :param application2: identity.
        :type application2: ~education.models.MicrosoftGraphIdentity
        :param device2: identity.
        :type device2: ~education.models.MicrosoftGraphIdentity
        :param user2: identity.
        :type user2: ~education.models.MicrosoftGraphIdentity
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphEducationAssignment(id=id, allow_late_submissions=allow_late_submissions, allow_students_to_add_resources_to_submission=allow_students_to_add_resources_to_submission, assign_date_time=assign_date_time, assigned_date_time=assigned_date_time, assign_to=assign_to, class_id=class_id, close_date_time=close_date_time, created_date_time=created_date_time, display_name=display_name, due_date_time=due_date_time, grading=grading, instructions=instructions, last_modified_date_time=last_modified_date_time, status=status, categories=categories, resources=resources, submissions=submissions, id_rubric_id=microsoft_graph_entity_id, created_date_time_rubric_created_date_time=microsoft_graph_education_rubric_created_date_time_created_date_time, description=description, display_name_rubric_display_name=microsoft_graph_education_rubric_display_name, grading_rubric_grading=microsoft_graph_education_assignment_grade_type_grading, last_modified_date_time_rubric_last_modified_date_time=microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time, levels=levels, qualities=qualities, application_rubric_last_modified_by_application=application, device_rubric_last_modified_by_device=device, user_rubric_last_modified_by_user=user, application_rubric_created_by_application=microsoft_graph_identity_application, device_rubric_created_by_device=microsoft_graph_identity_device, user_rubric_created_by_user=microsoft_graph_identity_user, application_last_modified_by_application=application1, device_last_modified_by_device=device1, user_last_modified_by_user=user1, application_created_by_application=application2, device_created_by_device=device2, user_created_by_user=user2)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphEducationAssignment')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_assignment.metadata = {'url': '/education/users/{educationUser-id}/assignments/{educationAssignment-id}'}  # type: ignore

    async def delete_assignment(
        self,
        education_user_id: str,
        education_assignment_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property assignments for education.

        Delete navigation property assignments for education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_assignment.metadata = {'url': '/education/users/{educationUser-id}/assignments/{educationAssignment-id}'}  # type: ignore

    def list_class(
        self,
        education_user_id: str,
        orderby: Optional[List[Union[str, "models.Enum277"]]] = None,
        select: Optional[List[Union[str, "models.Enum278"]]] = None,
        expand: Optional[List[Union[str, "models.Enum279"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationClass3"]:
        """Get classes from education.

        Get classes from education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum277]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum278]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum279]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationClass3 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationClass3]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationClass3"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_class.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationClass3', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_class.metadata = {'url': '/education/users/{educationUser-id}/classes'}  # type: ignore

    def list_ref_class(
        self,
        education_user_id: str,
        orderby: Optional[List[Union[str, "models.Enum280"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfLinksOfEducationClass2"]:
        """Get ref of classes from education.

        Get ref of classes from education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum280]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfLinksOfEducationClass2 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfLinksOfEducationClass2]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfLinksOfEducationClass2"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_ref_class.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfLinksOfEducationClass2', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_ref_class.metadata = {'url': '/education/users/{educationUser-id}/classes/$ref'}  # type: ignore

    async def create_ref_class(
        self,
        education_user_id: str,
        body: Dict[str, object],
        **kwargs
    ) -> Dict[str, object]:
        """Create new navigation property ref to classes for education.

        Create new navigation property ref to classes for education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param body: New navigation property ref value.
        :type body: dict[str, object]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to object, or the result of cls(response)
        :rtype: dict[str, object]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Dict[str, object]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_ref_class.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, '{object}')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('{object}', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_ref_class.metadata = {'url': '/education/users/{educationUser-id}/classes/$ref'}  # type: ignore

    def list_rubric(
        self,
        education_user_id: str,
        orderby: Optional[List[Union[str, "models.Enum281"]]] = None,
        select: Optional[List[Union[str, "models.Enum282"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationRubric0"]:
        """Get rubrics from education.

        Get rubrics from education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum281]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum282]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationRubric0 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationRubric0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationRubric0"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_rubric.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationRubric0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_rubric.metadata = {'url': '/education/users/{educationUser-id}/rubrics'}  # type: ignore

    async def create_rubric(
        self,
        education_user_id: str,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional["models.MicrosoftGraphEducationItemBody"] = None,
        display_name: Optional[str] = None,
        grading: Optional[Dict[str, object]] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        levels: Optional[List["models.MicrosoftGraphRubricLevel"]] = None,
        qualities: Optional[List["models.MicrosoftGraphRubricQuality"]] = None,
        application: Optional["models.MicrosoftGraphIdentity"] = None,
        device: Optional["models.MicrosoftGraphIdentity"] = None,
        user: Optional["models.MicrosoftGraphIdentity"] = None,
        microsoft_graph_identity_application: Optional["models.MicrosoftGraphIdentity"] = None,
        microsoft_graph_identity_device: Optional["models.MicrosoftGraphIdentity"] = None,
        microsoft_graph_identity_user: Optional["models.MicrosoftGraphIdentity"] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationRubric":
        """Create new navigation property to rubrics for education.

        Create new navigation property to rubrics for education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description: educationItemBody.
        :type description: ~education.models.MicrosoftGraphEducationItemBody
        :param display_name:
        :type display_name: str
        :param grading: educationAssignmentGradeType.
        :type grading: dict[str, object]
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param levels:
        :type levels: list[~education.models.MicrosoftGraphRubricLevel]
        :param qualities:
        :type qualities: list[~education.models.MicrosoftGraphRubricQuality]
        :param application: identity.
        :type application: ~education.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~education.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~education.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~education.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~education.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~education.models.MicrosoftGraphIdentity
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationRubric, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationRubric
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationRubric"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphEducationRubric(id=id, created_date_time=created_date_time, description=description, display_name=display_name, grading=grading, last_modified_date_time=last_modified_date_time, levels=levels, qualities=qualities, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_rubric.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphEducationRubric')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationRubric', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_rubric.metadata = {'url': '/education/users/{educationUser-id}/rubrics'}  # type: ignore

    async def get_rubric(
        self,
        education_user_id: str,
        education_rubric_id: str,
        select: Optional[List[Union[str, "models.Enum283"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationRubric":
        """Get rubrics from education.

        Get rubrics from education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param education_rubric_id: key: id of educationRubric.
        :type education_rubric_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum283]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationRubric, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationRubric
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationRubric"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_rubric.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
            'educationRubric-id': self._serialize.url("education_rubric_id", education_rubric_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationRubric', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_rubric.metadata = {'url': '/education/users/{educationUser-id}/rubrics/{educationRubric-id}'}  # type: ignore

    async def update_rubric(
        self,
        education_user_id: str,
        education_rubric_id: str,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional["models.MicrosoftGraphEducationItemBody"] = None,
        display_name: Optional[str] = None,
        grading: Optional[Dict[str, object]] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        levels: Optional[List["models.MicrosoftGraphRubricLevel"]] = None,
        qualities: Optional[List["models.MicrosoftGraphRubricQuality"]] = None,
        application: Optional["models.MicrosoftGraphIdentity"] = None,
        device: Optional["models.MicrosoftGraphIdentity"] = None,
        user: Optional["models.MicrosoftGraphIdentity"] = None,
        microsoft_graph_identity_application: Optional["models.MicrosoftGraphIdentity"] = None,
        microsoft_graph_identity_device: Optional["models.MicrosoftGraphIdentity"] = None,
        microsoft_graph_identity_user: Optional["models.MicrosoftGraphIdentity"] = None,
        **kwargs
    ) -> None:
        """Update the navigation property rubrics in education.

        Update the navigation property rubrics in education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param education_rubric_id: key: id of educationRubric.
        :type education_rubric_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description: educationItemBody.
        :type description: ~education.models.MicrosoftGraphEducationItemBody
        :param display_name:
        :type display_name: str
        :param grading: educationAssignmentGradeType.
        :type grading: dict[str, object]
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param levels:
        :type levels: list[~education.models.MicrosoftGraphRubricLevel]
        :param qualities:
        :type qualities: list[~education.models.MicrosoftGraphRubricQuality]
        :param application: identity.
        :type application: ~education.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~education.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~education.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~education.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~education.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~education.models.MicrosoftGraphIdentity
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphEducationRubric(id=id, created_date_time=created_date_time, description=description, display_name=display_name, grading=grading, last_modified_date_time=last_modified_date_time, levels=levels, qualities=qualities, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_rubric.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
            'educationRubric-id': self._serialize.url("education_rubric_id", education_rubric_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphEducationRubric')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_rubric.metadata = {'url': '/education/users/{educationUser-id}/rubrics/{educationRubric-id}'}  # type: ignore

    async def delete_rubric(
        self,
        education_user_id: str,
        education_rubric_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property rubrics for education.

        Delete navigation property rubrics for education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param education_rubric_id: key: id of educationRubric.
        :type education_rubric_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_rubric.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
            'educationRubric-id': self._serialize.url("education_rubric_id", education_rubric_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_rubric.metadata = {'url': '/education/users/{educationUser-id}/rubrics/{educationRubric-id}'}  # type: ignore

    def list_school(
        self,
        education_user_id: str,
        orderby: Optional[List[Union[str, "models.Enum284"]]] = None,
        select: Optional[List[Union[str, "models.Enum285"]]] = None,
        expand: Optional[List[Union[str, "models.Enum286"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationSchool2"]:
        """Get schools from education.

        Get schools from education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum284]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum285]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum286]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationSchool2 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationSchool2]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationSchool2"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_school.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationSchool2', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_school.metadata = {'url': '/education/users/{educationUser-id}/schools'}  # type: ignore

    def list_ref_school(
        self,
        education_user_id: str,
        orderby: Optional[List[Union[str, "models.Enum287"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfLinksOfEducationSchool1"]:
        """Get ref of schools from education.

        Get ref of schools from education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum287]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfLinksOfEducationSchool1 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfLinksOfEducationSchool1]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfLinksOfEducationSchool1"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_ref_school.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfLinksOfEducationSchool1', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_ref_school.metadata = {'url': '/education/users/{educationUser-id}/schools/$ref'}  # type: ignore

    async def create_ref_school(
        self,
        education_user_id: str,
        body: Dict[str, object],
        **kwargs
    ) -> Dict[str, object]:
        """Create new navigation property ref to schools for education.

        Create new navigation property ref to schools for education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param body: New navigation property ref value.
        :type body: dict[str, object]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to object, or the result of cls(response)
        :rtype: dict[str, object]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Dict[str, object]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_ref_school.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, '{object}')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('{object}', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_ref_school.metadata = {'url': '/education/users/{educationUser-id}/schools/$ref'}  # type: ignore

    def list_taught_class(
        self,
        education_user_id: str,
        orderby: Optional[List[Union[str, "models.Enum288"]]] = None,
        select: Optional[List[Union[str, "models.Enum289"]]] = None,
        expand: Optional[List[Union[str, "models.Enum290"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationClass4"]:
        """Get taughtClasses from education.

        Get taughtClasses from education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum288]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum289]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum290]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationClass4 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationClass4]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationClass4"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_taught_class.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationClass4', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_taught_class.metadata = {'url': '/education/users/{educationUser-id}/taughtClasses'}  # type: ignore

    def list_ref_taught_class(
        self,
        education_user_id: str,
        orderby: Optional[List[Union[str, "models.Enum291"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfLinksOfEducationClass3"]:
        """Get ref of taughtClasses from education.

        Get ref of taughtClasses from education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum291]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfLinksOfEducationClass3 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfLinksOfEducationClass3]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfLinksOfEducationClass3"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_ref_taught_class.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfLinksOfEducationClass3', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_ref_taught_class.metadata = {'url': '/education/users/{educationUser-id}/taughtClasses/$ref'}  # type: ignore

    async def create_ref_taught_class(
        self,
        education_user_id: str,
        body: Dict[str, object],
        **kwargs
    ) -> Dict[str, object]:
        """Create new navigation property ref to taughtClasses for education.

        Create new navigation property ref to taughtClasses for education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param body: New navigation property ref value.
        :type body: dict[str, object]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to object, or the result of cls(response)
        :rtype: dict[str, object]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Dict[str, object]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_ref_taught_class.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, '{object}')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('{object}', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_ref_taught_class.metadata = {'url': '/education/users/{educationUser-id}/taughtClasses/$ref'}  # type: ignore

    async def get_user(
        self,
        education_user_id: str,
        select: Optional[List[Union[str, "models.Enum292"]]] = None,
        expand: Optional[List[Union[str, "models.Enum293"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphUser":
        """Get user from education.

        Get user from education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum292]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum293]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphUser, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphUser
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphUser"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_user.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphUser', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_user.metadata = {'url': '/education/users/{educationUser-id}/user'}  # type: ignore

    async def get_ref_user(
        self,
        education_user_id: str,
        **kwargs
    ) -> str:
        """Get ref of user from education.

        Get ref of user from education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str, or the result of cls(response)
        :rtype: str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[str]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_ref_user.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_ref_user.metadata = {'url': '/education/users/{educationUser-id}/user/$ref'}  # type: ignore

    async def set_ref_user(
        self,
        education_user_id: str,
        body: Dict[str, object],
        **kwargs
    ) -> None:
        """Update the ref of navigation property user in education.

        Update the ref of navigation property user in education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param body: New navigation property ref values.
        :type body: dict[str, object]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.set_ref_user.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, '{object}')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    set_ref_user.metadata = {'url': '/education/users/{educationUser-id}/user/$ref'}  # type: ignore

    async def delete_ref_user(
        self,
        education_user_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete ref of navigation property user for education.

        Delete ref of navigation property user for education.

        :param education_user_id: key: id of educationUser.
        :type education_user_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_ref_user.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_ref_user.metadata = {'url': '/education/users/{educationUser-id}/user/$ref'}  # type: ignore

    async def delta(
        self,
        **kwargs
    ) -> List["models.MicrosoftGraphEducationUser"]:
        """Invoke function delta.

        Invoke function delta.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MicrosoftGraphEducationUser, or the result of cls(response)
        :rtype: list[~education.models.MicrosoftGraphEducationUser]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.MicrosoftGraphEducationUser"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delta.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[MicrosoftGraphEducationUser]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    delta.metadata = {'url': '/education/users/microsoft.graph.delta()'}  # type: ignore
