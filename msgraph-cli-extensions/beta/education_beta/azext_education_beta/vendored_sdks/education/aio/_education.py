# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.core import AsyncPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

from ._configuration import EducationConfiguration
from .operations import educationeducationrootOperations
from .operations import educationOperations
from .operations import educationclassesOperations
from .operations import educationclassesassignmentsOperations
from .operations import educationclassesassignmentssubmissionsOperations
from .operations import educationclassesmembersOperations
from .operations import educationclassesschoolsOperations
from .operations import educationclassesteachersOperations
from .operations import educationmeOperations
from .operations import educationmeassignmentsOperations
from .operations import educationmeassignmentssubmissionsOperations
from .operations import educationmeclassesOperations
from .operations import educationmeschoolsOperations
from .operations import educationmetaughtclassesOperations
from .operations import educationschoolsOperations
from .operations import educationschoolsclassesOperations
from .operations import educationschoolsusersOperations
from .operations import educationsynchronizationprofilesOperations
from .operations import educationusersOperations
from .operations import educationusersassignmentsOperations
from .operations import educationusersassignmentssubmissionsOperations
from .operations import educationusersclassesOperations
from .operations import educationusersschoolsOperations
from .operations import educationuserstaughtclassesOperations
from .. import models


class Education(object):
    """Education.

    :ivar educationeducationroot: educationeducationrootOperations operations
    :vartype educationeducationroot: education.aio.operations.educationeducationrootOperations
    :ivar education: educationOperations operations
    :vartype education: education.aio.operations.educationOperations
    :ivar educationclasses: educationclassesOperations operations
    :vartype educationclasses: education.aio.operations.educationclassesOperations
    :ivar educationclassesassignments: educationclassesassignmentsOperations operations
    :vartype educationclassesassignments: education.aio.operations.educationclassesassignmentsOperations
    :ivar educationclassesassignmentssubmissions: educationclassesassignmentssubmissionsOperations operations
    :vartype educationclassesassignmentssubmissions: education.aio.operations.educationclassesassignmentssubmissionsOperations
    :ivar educationclassesmembers: educationclassesmembersOperations operations
    :vartype educationclassesmembers: education.aio.operations.educationclassesmembersOperations
    :ivar educationclassesschools: educationclassesschoolsOperations operations
    :vartype educationclassesschools: education.aio.operations.educationclassesschoolsOperations
    :ivar educationclassesteachers: educationclassesteachersOperations operations
    :vartype educationclassesteachers: education.aio.operations.educationclassesteachersOperations
    :ivar educationme: educationmeOperations operations
    :vartype educationme: education.aio.operations.educationmeOperations
    :ivar educationmeassignments: educationmeassignmentsOperations operations
    :vartype educationmeassignments: education.aio.operations.educationmeassignmentsOperations
    :ivar educationmeassignmentssubmissions: educationmeassignmentssubmissionsOperations operations
    :vartype educationmeassignmentssubmissions: education.aio.operations.educationmeassignmentssubmissionsOperations
    :ivar educationmeclasses: educationmeclassesOperations operations
    :vartype educationmeclasses: education.aio.operations.educationmeclassesOperations
    :ivar educationmeschools: educationmeschoolsOperations operations
    :vartype educationmeschools: education.aio.operations.educationmeschoolsOperations
    :ivar educationmetaughtclasses: educationmetaughtclassesOperations operations
    :vartype educationmetaughtclasses: education.aio.operations.educationmetaughtclassesOperations
    :ivar educationschools: educationschoolsOperations operations
    :vartype educationschools: education.aio.operations.educationschoolsOperations
    :ivar educationschoolsclasses: educationschoolsclassesOperations operations
    :vartype educationschoolsclasses: education.aio.operations.educationschoolsclassesOperations
    :ivar educationschoolsusers: educationschoolsusersOperations operations
    :vartype educationschoolsusers: education.aio.operations.educationschoolsusersOperations
    :ivar educationsynchronizationprofiles: educationsynchronizationprofilesOperations operations
    :vartype educationsynchronizationprofiles: education.aio.operations.educationsynchronizationprofilesOperations
    :ivar educationusers: educationusersOperations operations
    :vartype educationusers: education.aio.operations.educationusersOperations
    :ivar educationusersassignments: educationusersassignmentsOperations operations
    :vartype educationusersassignments: education.aio.operations.educationusersassignmentsOperations
    :ivar educationusersassignmentssubmissions: educationusersassignmentssubmissionsOperations operations
    :vartype educationusersassignmentssubmissions: education.aio.operations.educationusersassignmentssubmissionsOperations
    :ivar educationusersclasses: educationusersclassesOperations operations
    :vartype educationusersclasses: education.aio.operations.educationusersclassesOperations
    :ivar educationusersschools: educationusersschoolsOperations operations
    :vartype educationusersschools: education.aio.operations.educationusersschoolsOperations
    :ivar educationuserstaughtclasses: educationuserstaughtclassesOperations operations
    :vartype educationuserstaughtclasses: education.aio.operations.educationuserstaughtclassesOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param top: Show only the first n items.
    :type top: int
    :param skip: Skip the first n items.
    :type skip: int
    :param search: Search items by search phrases.
    :type search: str
    :param filter: Filter items by property values.
    :type filter: str
    :param count: Include count of items.
    :type count: bool
    :param str base_url: Service URL
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://graph.microsoft.com/beta'
        self._config = EducationConfiguration(credential, top, skip, search, filter, count, **kwargs)
        self._client = AsyncPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.educationeducationroot = educationeducationrootOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education = educationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationclasses = educationclassesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationclassesassignments = educationclassesassignmentsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationclassesassignmentssubmissions = educationclassesassignmentssubmissionsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationclassesmembers = educationclassesmembersOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationclassesschools = educationclassesschoolsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationclassesteachers = educationclassesteachersOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationme = educationmeOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationmeassignments = educationmeassignmentsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationmeassignmentssubmissions = educationmeassignmentssubmissionsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationmeclasses = educationmeclassesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationmeschools = educationmeschoolsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationmetaughtclasses = educationmetaughtclassesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationschools = educationschoolsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationschoolsclasses = educationschoolsclassesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationschoolsusers = educationschoolsusersOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationsynchronizationprofiles = educationsynchronizationprofilesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationusers = educationusersOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationusersassignments = educationusersassignmentsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationusersassignmentssubmissions = educationusersassignmentssubmissionsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationusersclasses = educationusersclassesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationusersschools = educationusersschoolsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.educationuserstaughtclasses = educationuserstaughtclassesOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "Education":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
