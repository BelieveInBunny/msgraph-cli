# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.mgmt.core import AsyncARMPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

from ._configuration import EducationConfiguration
from .operations import EducationEducationRootOperations
from .operations import EducationOperations
from .operations import EducationClassesOperations
from .operations import EducationClassesAssignmentsOperations
from .operations import EducationClassesAssignmentsSubmissionsOperations
from .operations import EducationClassesMembersOperations
from .operations import EducationClassesSchoolsOperations
from .operations import EducationClassesTeachersOperations
from .operations import EducationMeOperations
from .operations import EducationMeAssignmentsOperations
from .operations import EducationMeAssignmentsSubmissionsOperations
from .operations import EducationMeClassesOperations
from .operations import EducationMeSchoolsOperations
from .operations import EducationMeTaughtClassesOperations
from .operations import EducationSchoolsOperations
from .operations import EducationSchoolsClassesOperations
from .operations import EducationSchoolsUsersOperations
from .operations import EducationSynchronizationProfilesOperations
from .operations import EducationUsersOperations
from .operations import EducationUsersAssignmentsOperations
from .operations import EducationUsersAssignmentsSubmissionsOperations
from .operations import EducationUsersClassesOperations
from .operations import EducationUsersSchoolsOperations
from .operations import EducationUsersTaughtClassesOperations
from .. import models


class Education(object):
    """Education.

    :ivar education_education_root: EducationEducationRootOperations operations
    :vartype education_education_root: education.aio.operations.EducationEducationRootOperations
    :ivar education: EducationOperations operations
    :vartype education: education.aio.operations.EducationOperations
    :ivar education_classes: EducationClassesOperations operations
    :vartype education_classes: education.aio.operations.EducationClassesOperations
    :ivar education_classes_assignments: EducationClassesAssignmentsOperations operations
    :vartype education_classes_assignments: education.aio.operations.EducationClassesAssignmentsOperations
    :ivar education_classes_assignments_submissions: EducationClassesAssignmentsSubmissionsOperations operations
    :vartype education_classes_assignments_submissions: education.aio.operations.EducationClassesAssignmentsSubmissionsOperations
    :ivar education_classes_members: EducationClassesMembersOperations operations
    :vartype education_classes_members: education.aio.operations.EducationClassesMembersOperations
    :ivar education_classes_schools: EducationClassesSchoolsOperations operations
    :vartype education_classes_schools: education.aio.operations.EducationClassesSchoolsOperations
    :ivar education_classes_teachers: EducationClassesTeachersOperations operations
    :vartype education_classes_teachers: education.aio.operations.EducationClassesTeachersOperations
    :ivar education_me: EducationMeOperations operations
    :vartype education_me: education.aio.operations.EducationMeOperations
    :ivar education_me_assignments: EducationMeAssignmentsOperations operations
    :vartype education_me_assignments: education.aio.operations.EducationMeAssignmentsOperations
    :ivar education_me_assignments_submissions: EducationMeAssignmentsSubmissionsOperations operations
    :vartype education_me_assignments_submissions: education.aio.operations.EducationMeAssignmentsSubmissionsOperations
    :ivar education_me_classes: EducationMeClassesOperations operations
    :vartype education_me_classes: education.aio.operations.EducationMeClassesOperations
    :ivar education_me_schools: EducationMeSchoolsOperations operations
    :vartype education_me_schools: education.aio.operations.EducationMeSchoolsOperations
    :ivar education_me_taught_classes: EducationMeTaughtClassesOperations operations
    :vartype education_me_taught_classes: education.aio.operations.EducationMeTaughtClassesOperations
    :ivar education_schools: EducationSchoolsOperations operations
    :vartype education_schools: education.aio.operations.EducationSchoolsOperations
    :ivar education_schools_classes: EducationSchoolsClassesOperations operations
    :vartype education_schools_classes: education.aio.operations.EducationSchoolsClassesOperations
    :ivar education_schools_users: EducationSchoolsUsersOperations operations
    :vartype education_schools_users: education.aio.operations.EducationSchoolsUsersOperations
    :ivar education_synchronization_profiles: EducationSynchronizationProfilesOperations operations
    :vartype education_synchronization_profiles: education.aio.operations.EducationSynchronizationProfilesOperations
    :ivar education_users: EducationUsersOperations operations
    :vartype education_users: education.aio.operations.EducationUsersOperations
    :ivar education_users_assignments: EducationUsersAssignmentsOperations operations
    :vartype education_users_assignments: education.aio.operations.EducationUsersAssignmentsOperations
    :ivar education_users_assignments_submissions: EducationUsersAssignmentsSubmissionsOperations operations
    :vartype education_users_assignments_submissions: education.aio.operations.EducationUsersAssignmentsSubmissionsOperations
    :ivar education_users_classes: EducationUsersClassesOperations operations
    :vartype education_users_classes: education.aio.operations.EducationUsersClassesOperations
    :ivar education_users_schools: EducationUsersSchoolsOperations operations
    :vartype education_users_schools: education.aio.operations.EducationUsersSchoolsOperations
    :ivar education_users_taught_classes: EducationUsersTaughtClassesOperations operations
    :vartype education_users_taught_classes: education.aio.operations.EducationUsersTaughtClassesOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param top: Show only the first n items.
    :type top: int
    :param skip: Skip the first n items.
    :type skip: int
    :param search: Search items by search phrases.
    :type search: str
    :param filter: Filter items by property values.
    :type filter: str
    :param count: Include count of items.
    :type count: bool
    :param str base_url: Service URL
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://graph.microsoft.com/beta'
        self._config = EducationConfiguration(credential, top, skip, search, filter, count, **kwargs)
        self._client = AsyncARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.education_education_root = EducationEducationRootOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education = EducationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_classes = EducationClassesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_classes_assignments = EducationClassesAssignmentsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_classes_assignments_submissions = EducationClassesAssignmentsSubmissionsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_classes_members = EducationClassesMembersOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_classes_schools = EducationClassesSchoolsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_classes_teachers = EducationClassesTeachersOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_me = EducationMeOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_me_assignments = EducationMeAssignmentsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_me_assignments_submissions = EducationMeAssignmentsSubmissionsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_me_classes = EducationMeClassesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_me_schools = EducationMeSchoolsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_me_taught_classes = EducationMeTaughtClassesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_schools = EducationSchoolsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_schools_classes = EducationSchoolsClassesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_schools_users = EducationSchoolsUsersOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_synchronization_profiles = EducationSynchronizationProfilesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_users = EducationUsersOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_users_assignments = EducationUsersAssignmentsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_users_assignments_submissions = EducationUsersAssignmentsSubmissionsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_users_classes = EducationUsersClassesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_users_schools = EducationUsersSchoolsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_users_taught_classes = EducationUsersTaughtClassesOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "Education":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
