# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class EducationClassOperations:
    """EducationClassOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~education.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_assignment_category(
        self,
        education_class_id: str,
        orderby: Optional[List[Union[str, "models.Enum134"]]] = None,
        select: Optional[List[Union[str, "models.Enum135"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationCategory"]:
        """Get assignmentCategories from education.

        Get assignmentCategories from education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum134]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum135]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationCategory or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationCategory]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationCategory"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_assignment_category.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationCategory', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_assignment_category.metadata = {'url': '/education/classes/{educationClass-id}/assignmentCategories'}  # type: ignore

    async def create_assignment_category(
        self,
        education_class_id: str,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationCategory":
        """Create new navigation property to assignmentCategories for education.

        Create new navigation property to assignmentCategories for education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param id: Read-only.
        :type id: str
        :param display_name:
        :type display_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationCategory, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationCategory
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationCategory"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEducationCategory(id=id, display_name=display_name)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_assignment_category.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEducationCategory')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationCategory', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_assignment_category.metadata = {'url': '/education/classes/{educationClass-id}/assignmentCategories'}  # type: ignore

    async def get_assignment_category(
        self,
        education_class_id: str,
        education_category_id: str,
        select: Optional[List[Union[str, "models.Enum136"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationCategory":
        """Get assignmentCategories from education.

        Get assignmentCategories from education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_category_id: key: id of educationCategory.
        :type education_category_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum136]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationCategory, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationCategory
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationCategory"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_assignment_category.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationCategory-id': self._serialize.url("education_category_id", education_category_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationCategory', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_assignment_category.metadata = {'url': '/education/classes/{educationClass-id}/assignmentCategories/{educationCategory-id}'}  # type: ignore

    async def update_assignment_category(
        self,
        education_class_id: str,
        education_category_id: str,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property assignmentCategories in education.

        Update the navigation property assignmentCategories in education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_category_id: key: id of educationCategory.
        :type education_category_id: str
        :param id: Read-only.
        :type id: str
        :param display_name:
        :type display_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEducationCategory(id=id, display_name=display_name)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_assignment_category.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationCategory-id': self._serialize.url("education_category_id", education_category_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEducationCategory')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_assignment_category.metadata = {'url': '/education/classes/{educationClass-id}/assignmentCategories/{educationCategory-id}'}  # type: ignore

    async def delete_assignment_category(
        self,
        education_class_id: str,
        education_category_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property assignmentCategories for education.

        Delete navigation property assignmentCategories for education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_category_id: key: id of educationCategory.
        :type education_category_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_assignment_category.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationCategory-id': self._serialize.url("education_category_id", education_category_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_assignment_category.metadata = {'url': '/education/classes/{educationClass-id}/assignmentCategories/{educationCategory-id}'}  # type: ignore

    def list_assignment(
        self,
        education_class_id: str,
        orderby: Optional[List[Union[str, "models.Enum137"]]] = None,
        select: Optional[List[Union[str, "models.Enum138"]]] = None,
        expand: Optional[List[Union[str, "models.Enum139"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationAssignment"]:
        """Get assignments from education.

        Get assignments from education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum137]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum138]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum139]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationAssignment or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationAssignment]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationAssignment"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_assignment.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationAssignment', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_assignment.metadata = {'url': '/education/classes/{educationClass-id}/assignments'}  # type: ignore

    async def create_assignment(
        self,
        education_class_id: str,
        id: Optional[str] = None,
        allow_late_submissions: Optional[bool] = None,
        allow_students_to_add_resources_to_submission: Optional[bool] = None,
        assign_date_time: Optional[datetime.datetime] = None,
        assigned_date_time: Optional[datetime.datetime] = None,
        assign_to: Optional[Dict[str, object]] = None,
        class_id: Optional[str] = None,
        close_date_time: Optional[datetime.datetime] = None,
        created_date_time: Optional[datetime.datetime] = None,
        display_name: Optional[str] = None,
        due_date_time: Optional[datetime.datetime] = None,
        grading: Optional[Dict[str, object]] = None,
        instructions: Optional["models.MicrosoftGraphEducationItemBody"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        status: Optional[Union[str, "models.MicrosoftGraphEducationAssignmentStatus"]] = None,
        categories: Optional[List["models.MicrosoftGraphEducationCategory"]] = None,
        resources: Optional[List["models.MicrosoftGraphEducationAssignmentResource"]] = None,
        submissions: Optional[List["models.MicrosoftGraphEducationSubmission"]] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        microsoft_graph_education_rubric_created_date_time_created_date_time: Optional[datetime.datetime] = None,
        description: Optional["models.MicrosoftGraphEducationItemBody"] = None,
        microsoft_graph_education_rubric_display_name: Optional[str] = None,
        microsoft_graph_education_assignment_grade_type_grading: Optional[Dict[str, object]] = None,
        microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time: Optional[datetime.datetime] = None,
        levels: Optional[List["models.MicrosoftGraphRubricLevel"]] = None,
        qualities: Optional[List["models.MicrosoftGraphRubricQuality"]] = None,
        microsoft_graph_identity_display_name: Optional[str] = None,
        microsoft_graph_identity_id: Optional[str] = None,
        display_name1: Optional[str] = None,
        id1: Optional[str] = None,
        display_name2: Optional[str] = None,
        id2: Optional[str] = None,
        display_name3: Optional[str] = None,
        id3: Optional[str] = None,
        display_name4: Optional[str] = None,
        id4: Optional[str] = None,
        display_name5: Optional[str] = None,
        id5: Optional[str] = None,
        display_name6: Optional[str] = None,
        id6: Optional[str] = None,
        display_name7: Optional[str] = None,
        id7: Optional[str] = None,
        display_name8: Optional[str] = None,
        id8: Optional[str] = None,
        display_name9: Optional[str] = None,
        id9: Optional[str] = None,
        display_name10: Optional[str] = None,
        id10: Optional[str] = None,
        display_name11: Optional[str] = None,
        id11: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationAssignment":
        """Create new navigation property to assignments for education.

        Create new navigation property to assignments for education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param id: Read-only.
        :type id: str
        :param allow_late_submissions:
        :type allow_late_submissions: bool
        :param allow_students_to_add_resources_to_submission:
        :type allow_students_to_add_resources_to_submission: bool
        :param assign_date_time:
        :type assign_date_time: ~datetime.datetime
        :param assigned_date_time:
        :type assigned_date_time: ~datetime.datetime
        :param assign_to: educationAssignmentRecipient.
        :type assign_to: dict[str, object]
        :param class_id:
        :type class_id: str
        :param close_date_time:
        :type close_date_time: ~datetime.datetime
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param display_name:
        :type display_name: str
        :param due_date_time:
        :type due_date_time: ~datetime.datetime
        :param grading: educationAssignmentGradeType.
        :type grading: dict[str, object]
        :param instructions: educationItemBody.
        :type instructions: ~education.models.MicrosoftGraphEducationItemBody
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param status:
        :type status: str or ~education.models.MicrosoftGraphEducationAssignmentStatus
        :param categories:
        :type categories: list[~education.models.MicrosoftGraphEducationCategory]
        :param resources:
        :type resources: list[~education.models.MicrosoftGraphEducationAssignmentResource]
        :param submissions:
        :type submissions: list[~education.models.MicrosoftGraphEducationSubmission]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param microsoft_graph_education_rubric_created_date_time_created_date_time:
        :type microsoft_graph_education_rubric_created_date_time_created_date_time: ~datetime.datetime
        :param description: educationItemBody.
        :type description: ~education.models.MicrosoftGraphEducationItemBody
        :param microsoft_graph_education_rubric_display_name:
        :type microsoft_graph_education_rubric_display_name: str
        :param microsoft_graph_education_assignment_grade_type_grading: educationAssignmentGradeType.
        :type microsoft_graph_education_assignment_grade_type_grading: dict[str, object]
        :param microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time:
        :type microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time: ~datetime.datetime
        :param levels:
        :type levels: list[~education.models.MicrosoftGraphRubricLevel]
        :param qualities:
        :type qualities: list[~education.models.MicrosoftGraphRubricQuality]
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name2: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name2: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name3: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name3: str
        :param id3: Unique identifier for the identity.
        :type id3: str
        :param display_name4: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name4: str
        :param id4: Unique identifier for the identity.
        :type id4: str
        :param display_name5: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name5: str
        :param id5: Unique identifier for the identity.
        :type id5: str
        :param display_name6: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name6: str
        :param id6: Unique identifier for the identity.
        :type id6: str
        :param display_name7: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name7: str
        :param id7: Unique identifier for the identity.
        :type id7: str
        :param display_name8: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name8: str
        :param id8: Unique identifier for the identity.
        :type id8: str
        :param display_name9: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name9: str
        :param id9: Unique identifier for the identity.
        :type id9: str
        :param display_name10: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name10: str
        :param id10: Unique identifier for the identity.
        :type id10: str
        :param display_name11: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name11: str
        :param id11: Unique identifier for the identity.
        :type id11: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationAssignment, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationAssignment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationAssignment"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEducationAssignment(id=id, allow_late_submissions=allow_late_submissions, allow_students_to_add_resources_to_submission=allow_students_to_add_resources_to_submission, assign_date_time=assign_date_time, assigned_date_time=assigned_date_time, assign_to=assign_to, class_id=class_id, close_date_time=close_date_time, created_date_time=created_date_time, display_name=display_name, due_date_time=due_date_time, grading=grading, instructions=instructions, last_modified_date_time=last_modified_date_time, status=status, categories=categories, resources=resources, submissions=submissions, id_rubric_id=microsoft_graph_entity_id, created_date_time_rubric_created_date_time=microsoft_graph_education_rubric_created_date_time_created_date_time, description=description, display_name_rubric_display_name=microsoft_graph_education_rubric_display_name, grading_rubric_grading=microsoft_graph_education_assignment_grade_type_grading, last_modified_date_time_rubric_last_modified_date_time=microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time, levels=levels, qualities=qualities, display_name_rubric_last_modified_by_user_display_name=microsoft_graph_identity_display_name, id_rubric_last_modified_by_user_id=microsoft_graph_identity_id, display_name_rubric_last_modified_by_device_display_name=display_name1, id_rubric_last_modified_by_device_id=id1, display_name_rubric_last_modified_by_application_display_name=display_name2, id_rubric_last_modified_by_application_id=id2, display_name_rubric_created_by_user_display_name=display_name3, id_rubric_created_by_user_id=id3, display_name_rubric_created_by_device_display_name=display_name4, id_rubric_created_by_device_id=id4, display_name_rubric_created_by_application_display_name=display_name5, id_rubric_created_by_application_id=id5, display_name_last_modified_by_user_display_name=display_name6, id_last_modified_by_user_id=id6, display_name_last_modified_by_device_display_name=display_name7, id_last_modified_by_device_id=id7, display_name_last_modified_by_application_display_name=display_name8, id_last_modified_by_application_id=id8, display_name_created_by_user_display_name=display_name9, id_created_by_user_id=id9, display_name_created_by_device_display_name=display_name10, id_created_by_device_id=id10, display_name_created_by_application_display_name=display_name11, id_created_by_application_id=id11)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEducationAssignment')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationAssignment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_assignment.metadata = {'url': '/education/classes/{educationClass-id}/assignments'}  # type: ignore

    async def get_assignment(
        self,
        education_class_id: str,
        education_assignment_id: str,
        select: Optional[List[Union[str, "models.Enum140"]]] = None,
        expand: Optional[List[Union[str, "models.Enum141"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationAssignment":
        """Get assignments from education.

        Get assignments from education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum140]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum141]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationAssignment, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationAssignment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationAssignment"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationAssignment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_assignment.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}'}  # type: ignore

    async def update_assignment(
        self,
        education_class_id: str,
        education_assignment_id: str,
        id: Optional[str] = None,
        allow_late_submissions: Optional[bool] = None,
        allow_students_to_add_resources_to_submission: Optional[bool] = None,
        assign_date_time: Optional[datetime.datetime] = None,
        assigned_date_time: Optional[datetime.datetime] = None,
        assign_to: Optional[Dict[str, object]] = None,
        class_id: Optional[str] = None,
        close_date_time: Optional[datetime.datetime] = None,
        created_date_time: Optional[datetime.datetime] = None,
        display_name: Optional[str] = None,
        due_date_time: Optional[datetime.datetime] = None,
        grading: Optional[Dict[str, object]] = None,
        instructions: Optional["models.MicrosoftGraphEducationItemBody"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        status: Optional[Union[str, "models.MicrosoftGraphEducationAssignmentStatus"]] = None,
        categories: Optional[List["models.MicrosoftGraphEducationCategory"]] = None,
        resources: Optional[List["models.MicrosoftGraphEducationAssignmentResource"]] = None,
        submissions: Optional[List["models.MicrosoftGraphEducationSubmission"]] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        microsoft_graph_education_rubric_created_date_time_created_date_time: Optional[datetime.datetime] = None,
        description: Optional["models.MicrosoftGraphEducationItemBody"] = None,
        microsoft_graph_education_rubric_display_name: Optional[str] = None,
        microsoft_graph_education_assignment_grade_type_grading: Optional[Dict[str, object]] = None,
        microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time: Optional[datetime.datetime] = None,
        levels: Optional[List["models.MicrosoftGraphRubricLevel"]] = None,
        qualities: Optional[List["models.MicrosoftGraphRubricQuality"]] = None,
        microsoft_graph_identity_display_name: Optional[str] = None,
        microsoft_graph_identity_id: Optional[str] = None,
        display_name1: Optional[str] = None,
        id1: Optional[str] = None,
        display_name2: Optional[str] = None,
        id2: Optional[str] = None,
        display_name3: Optional[str] = None,
        id3: Optional[str] = None,
        display_name4: Optional[str] = None,
        id4: Optional[str] = None,
        display_name5: Optional[str] = None,
        id5: Optional[str] = None,
        display_name6: Optional[str] = None,
        id6: Optional[str] = None,
        display_name7: Optional[str] = None,
        id7: Optional[str] = None,
        display_name8: Optional[str] = None,
        id8: Optional[str] = None,
        display_name9: Optional[str] = None,
        id9: Optional[str] = None,
        display_name10: Optional[str] = None,
        id10: Optional[str] = None,
        display_name11: Optional[str] = None,
        id11: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property assignments in education.

        Update the navigation property assignments in education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param id: Read-only.
        :type id: str
        :param allow_late_submissions:
        :type allow_late_submissions: bool
        :param allow_students_to_add_resources_to_submission:
        :type allow_students_to_add_resources_to_submission: bool
        :param assign_date_time:
        :type assign_date_time: ~datetime.datetime
        :param assigned_date_time:
        :type assigned_date_time: ~datetime.datetime
        :param assign_to: educationAssignmentRecipient.
        :type assign_to: dict[str, object]
        :param class_id:
        :type class_id: str
        :param close_date_time:
        :type close_date_time: ~datetime.datetime
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param display_name:
        :type display_name: str
        :param due_date_time:
        :type due_date_time: ~datetime.datetime
        :param grading: educationAssignmentGradeType.
        :type grading: dict[str, object]
        :param instructions: educationItemBody.
        :type instructions: ~education.models.MicrosoftGraphEducationItemBody
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param status:
        :type status: str or ~education.models.MicrosoftGraphEducationAssignmentStatus
        :param categories:
        :type categories: list[~education.models.MicrosoftGraphEducationCategory]
        :param resources:
        :type resources: list[~education.models.MicrosoftGraphEducationAssignmentResource]
        :param submissions:
        :type submissions: list[~education.models.MicrosoftGraphEducationSubmission]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param microsoft_graph_education_rubric_created_date_time_created_date_time:
        :type microsoft_graph_education_rubric_created_date_time_created_date_time: ~datetime.datetime
        :param description: educationItemBody.
        :type description: ~education.models.MicrosoftGraphEducationItemBody
        :param microsoft_graph_education_rubric_display_name:
        :type microsoft_graph_education_rubric_display_name: str
        :param microsoft_graph_education_assignment_grade_type_grading: educationAssignmentGradeType.
        :type microsoft_graph_education_assignment_grade_type_grading: dict[str, object]
        :param microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time:
        :type microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time: ~datetime.datetime
        :param levels:
        :type levels: list[~education.models.MicrosoftGraphRubricLevel]
        :param qualities:
        :type qualities: list[~education.models.MicrosoftGraphRubricQuality]
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name2: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name2: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name3: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name3: str
        :param id3: Unique identifier for the identity.
        :type id3: str
        :param display_name4: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name4: str
        :param id4: Unique identifier for the identity.
        :type id4: str
        :param display_name5: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name5: str
        :param id5: Unique identifier for the identity.
        :type id5: str
        :param display_name6: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name6: str
        :param id6: Unique identifier for the identity.
        :type id6: str
        :param display_name7: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name7: str
        :param id7: Unique identifier for the identity.
        :type id7: str
        :param display_name8: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name8: str
        :param id8: Unique identifier for the identity.
        :type id8: str
        :param display_name9: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name9: str
        :param id9: Unique identifier for the identity.
        :type id9: str
        :param display_name10: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name10: str
        :param id10: Unique identifier for the identity.
        :type id10: str
        :param display_name11: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name11: str
        :param id11: Unique identifier for the identity.
        :type id11: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEducationAssignment(id=id, allow_late_submissions=allow_late_submissions, allow_students_to_add_resources_to_submission=allow_students_to_add_resources_to_submission, assign_date_time=assign_date_time, assigned_date_time=assigned_date_time, assign_to=assign_to, class_id=class_id, close_date_time=close_date_time, created_date_time=created_date_time, display_name=display_name, due_date_time=due_date_time, grading=grading, instructions=instructions, last_modified_date_time=last_modified_date_time, status=status, categories=categories, resources=resources, submissions=submissions, id_rubric_id=microsoft_graph_entity_id, created_date_time_rubric_created_date_time=microsoft_graph_education_rubric_created_date_time_created_date_time, description=description, display_name_rubric_display_name=microsoft_graph_education_rubric_display_name, grading_rubric_grading=microsoft_graph_education_assignment_grade_type_grading, last_modified_date_time_rubric_last_modified_date_time=microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time, levels=levels, qualities=qualities, display_name_rubric_last_modified_by_user_display_name=microsoft_graph_identity_display_name, id_rubric_last_modified_by_user_id=microsoft_graph_identity_id, display_name_rubric_last_modified_by_device_display_name=display_name1, id_rubric_last_modified_by_device_id=id1, display_name_rubric_last_modified_by_application_display_name=display_name2, id_rubric_last_modified_by_application_id=id2, display_name_rubric_created_by_user_display_name=display_name3, id_rubric_created_by_user_id=id3, display_name_rubric_created_by_device_display_name=display_name4, id_rubric_created_by_device_id=id4, display_name_rubric_created_by_application_display_name=display_name5, id_rubric_created_by_application_id=id5, display_name_last_modified_by_user_display_name=display_name6, id_last_modified_by_user_id=id6, display_name_last_modified_by_device_display_name=display_name7, id_last_modified_by_device_id=id7, display_name_last_modified_by_application_display_name=display_name8, id_last_modified_by_application_id=id8, display_name_created_by_user_display_name=display_name9, id_created_by_user_id=id9, display_name_created_by_device_display_name=display_name10, id_created_by_device_id=id10, display_name_created_by_application_display_name=display_name11, id_created_by_application_id=id11)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEducationAssignment')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_assignment.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}'}  # type: ignore

    async def delete_assignment(
        self,
        education_class_id: str,
        education_assignment_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property assignments for education.

        Delete navigation property assignments for education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_assignment.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}'}  # type: ignore

    async def get_group(
        self,
        education_class_id: str,
        select: Optional[List[Union[str, "models.Enum163"]]] = None,
        expand: Optional[List[Union[str, "models.Enum164"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphGroup":
        """Get group from education.

        Get group from education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum163]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum164]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphGroup, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphGroup
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphGroup"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_group.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphGroup', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_group.metadata = {'url': '/education/classes/{educationClass-id}/group'}  # type: ignore

    async def get_ref_group(
        self,
        education_class_id: str,
        **kwargs
    ) -> str:
        """Get ref of group from education.

        Get ref of group from education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str, or the result of cls(response)
        :rtype: str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[str]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_ref_group.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_ref_group.metadata = {'url': '/education/classes/{educationClass-id}/group/$ref'}  # type: ignore

    async def set_ref_group(
        self,
        education_class_id: str,
        body: Dict[str, object],
        **kwargs
    ) -> None:
        """Update the ref of navigation property group in education.

        Update the ref of navigation property group in education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param body: New navigation property ref values.
        :type body: dict[str, object]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.set_ref_group.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, '{object}')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    set_ref_group.metadata = {'url': '/education/classes/{educationClass-id}/group/$ref'}  # type: ignore

    async def delete_ref_group(
        self,
        education_class_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete ref of navigation property group for education.

        Delete ref of navigation property group for education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_ref_group.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_ref_group.metadata = {'url': '/education/classes/{educationClass-id}/group/$ref'}  # type: ignore

    def list_member(
        self,
        education_class_id: str,
        orderby: Optional[List[Union[str, "models.Enum165"]]] = None,
        select: Optional[List[Union[str, "models.Enum166"]]] = None,
        expand: Optional[List[Union[str, "models.Enum167"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationUser"]:
        """Get members from education.

        Get members from education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum165]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum166]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum167]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationUser or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationUser]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationUser"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_member.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationUser', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_member.metadata = {'url': '/education/classes/{educationClass-id}/members'}  # type: ignore

    def list_ref_member(
        self,
        education_class_id: str,
        orderby: Optional[List[Union[str, "models.Enum168"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfLinksOfEducationUser"]:
        """Get ref of members from education.

        Get ref of members from education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum168]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfLinksOfEducationUser or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfLinksOfEducationUser]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfLinksOfEducationUser"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_ref_member.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfLinksOfEducationUser', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_ref_member.metadata = {'url': '/education/classes/{educationClass-id}/members/$ref'}  # type: ignore

    async def create_ref_member(
        self,
        education_class_id: str,
        body: Dict[str, object],
        **kwargs
    ) -> Dict[str, object]:
        """Create new navigation property ref to members for education.

        Create new navigation property ref to members for education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param body: New navigation property ref value.
        :type body: dict[str, object]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to object, or the result of cls(response)
        :rtype: dict[str, object]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Dict[str, object]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_ref_member.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, '{object}')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('{object}', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_ref_member.metadata = {'url': '/education/classes/{educationClass-id}/members/$ref'}  # type: ignore

    def list_school(
        self,
        education_class_id: str,
        orderby: Optional[List[Union[str, "models.Enum169"]]] = None,
        select: Optional[List[Union[str, "models.Enum170"]]] = None,
        expand: Optional[List[Union[str, "models.Enum171"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationSchool"]:
        """Get schools from education.

        Get schools from education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum169]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum170]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum171]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationSchool or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationSchool]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationSchool"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_school.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationSchool', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_school.metadata = {'url': '/education/classes/{educationClass-id}/schools'}  # type: ignore

    def list_ref_school(
        self,
        education_class_id: str,
        orderby: Optional[List[Union[str, "models.Enum172"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfLinksOfEducationSchool"]:
        """Get ref of schools from education.

        Get ref of schools from education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum172]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfLinksOfEducationSchool or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfLinksOfEducationSchool]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfLinksOfEducationSchool"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_ref_school.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfLinksOfEducationSchool', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_ref_school.metadata = {'url': '/education/classes/{educationClass-id}/schools/$ref'}  # type: ignore

    async def create_ref_school(
        self,
        education_class_id: str,
        body: Dict[str, object],
        **kwargs
    ) -> Dict[str, object]:
        """Create new navigation property ref to schools for education.

        Create new navigation property ref to schools for education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param body: New navigation property ref value.
        :type body: dict[str, object]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to object, or the result of cls(response)
        :rtype: dict[str, object]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Dict[str, object]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_ref_school.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, '{object}')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('{object}', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_ref_school.metadata = {'url': '/education/classes/{educationClass-id}/schools/$ref'}  # type: ignore

    def list_teacher(
        self,
        education_class_id: str,
        orderby: Optional[List[Union[str, "models.Enum173"]]] = None,
        select: Optional[List[Union[str, "models.Enum174"]]] = None,
        expand: Optional[List[Union[str, "models.Enum175"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationUser0"]:
        """Get teachers from education.

        Get teachers from education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum173]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum174]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum175]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationUser0 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationUser0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationUser0"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_teacher.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationUser0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_teacher.metadata = {'url': '/education/classes/{educationClass-id}/teachers'}  # type: ignore

    def list_ref_teacher(
        self,
        education_class_id: str,
        orderby: Optional[List[Union[str, "models.Enum176"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfLinksOfEducationUser0"]:
        """Get ref of teachers from education.

        Get ref of teachers from education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum176]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfLinksOfEducationUser0 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfLinksOfEducationUser0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfLinksOfEducationUser0"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_ref_teacher.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfLinksOfEducationUser0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_ref_teacher.metadata = {'url': '/education/classes/{educationClass-id}/teachers/$ref'}  # type: ignore

    async def create_ref_teacher(
        self,
        education_class_id: str,
        body: Dict[str, object],
        **kwargs
    ) -> Dict[str, object]:
        """Create new navigation property ref to teachers for education.

        Create new navigation property ref to teachers for education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param body: New navigation property ref value.
        :type body: dict[str, object]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to object, or the result of cls(response)
        :rtype: dict[str, object]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Dict[str, object]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_ref_teacher.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, '{object}')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('{object}', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_ref_teacher.metadata = {'url': '/education/classes/{educationClass-id}/teachers/$ref'}  # type: ignore

    async def delta(
        self,
        **kwargs
    ) -> List["models.MicrosoftGraphEducationClass"]:
        """Invoke function delta.

        Invoke function delta.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MicrosoftGraphEducationClass, or the result of cls(response)
        :rtype: list[~education.models.MicrosoftGraphEducationClass]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.MicrosoftGraphEducationClass"]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delta.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[MicrosoftGraphEducationClass]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    delta.metadata = {'url': '/education/classes/microsoft.graph.delta()'}  # type: ignore
