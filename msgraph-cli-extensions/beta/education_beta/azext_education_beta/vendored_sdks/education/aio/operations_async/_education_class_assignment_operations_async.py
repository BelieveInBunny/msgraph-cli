# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class EducationClassAssignmentOperations:
    """EducationClassAssignmentOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~education.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_category(
        self,
        education_class_id: str,
        education_assignment_id: str,
        orderby: Optional[List[Union[str, "models.Enum142"]]] = None,
        select: Optional[List[Union[str, "models.Enum143"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationCategory0"]:
        """Get categories from education.

        Get categories from education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum142]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum143]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationCategory0 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationCategory0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationCategory0"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_category.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
                    'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationCategory0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_category.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/categories'}  # type: ignore

    async def create_category(
        self,
        education_class_id: str,
        education_assignment_id: str,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationCategory":
        """Create new navigation property to categories for education.

        Create new navigation property to categories for education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param id: Read-only.
        :type id: str
        :param display_name:
        :type display_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationCategory, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationCategory
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationCategory"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEducationCategory(id=id, display_name=display_name)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_category.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEducationCategory')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationCategory', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_category.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/categories'}  # type: ignore

    async def get_category(
        self,
        education_class_id: str,
        education_assignment_id: str,
        education_category_id: str,
        select: Optional[List[Union[str, "models.Enum144"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationCategory":
        """Get categories from education.

        Get categories from education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param education_category_id: key: id of educationCategory.
        :type education_category_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum144]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationCategory, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationCategory
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationCategory"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_category.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
            'educationCategory-id': self._serialize.url("education_category_id", education_category_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationCategory', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_category.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/categories/{educationCategory-id}'}  # type: ignore

    async def update_category(
        self,
        education_class_id: str,
        education_assignment_id: str,
        education_category_id: str,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property categories in education.

        Update the navigation property categories in education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param education_category_id: key: id of educationCategory.
        :type education_category_id: str
        :param id: Read-only.
        :type id: str
        :param display_name:
        :type display_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEducationCategory(id=id, display_name=display_name)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_category.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
            'educationCategory-id': self._serialize.url("education_category_id", education_category_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEducationCategory')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_category.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/categories/{educationCategory-id}'}  # type: ignore

    async def delete_category(
        self,
        education_class_id: str,
        education_assignment_id: str,
        education_category_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property categories for education.

        Delete navigation property categories for education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param education_category_id: key: id of educationCategory.
        :type education_category_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_category.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
            'educationCategory-id': self._serialize.url("education_category_id", education_category_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_category.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/categories/{educationCategory-id}'}  # type: ignore

    async def get_resource_folder_url(
        self,
        education_class_id: str,
        education_assignment_id: str,
        **kwargs
    ) -> str:
        """Invoke function getResourcesFolderUrl.

        Invoke function getResourcesFolderUrl.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str, or the result of cls(response)
        :rtype: str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[str]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_resource_folder_url.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_resource_folder_url.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/microsoft.graph.getResourcesFolderUrl()'}  # type: ignore

    async def publish(
        self,
        education_class_id: str,
        education_assignment_id: str,
        **kwargs
    ) -> "models.MicrosoftGraphEducationAssignment":
        """Invoke action publish.

        Invoke action publish.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationAssignment, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationAssignment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationAssignment"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.publish.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationAssignment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    publish.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/microsoft.graph.publish'}  # type: ignore

    def list_resource(
        self,
        education_class_id: str,
        education_assignment_id: str,
        orderby: Optional[List[Union[str, "models.Enum145"]]] = None,
        select: Optional[List[Union[str, "models.Enum146"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationAssignmentResource"]:
        """Get resources from education.

        Get resources from education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum145]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum146]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationAssignmentResource or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationAssignmentResource]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationAssignmentResource"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_resource.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
                    'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationAssignmentResource', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_resource.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/resources'}  # type: ignore

    async def create_resource(
        self,
        education_class_id: str,
        education_assignment_id: str,
        id: Optional[str] = None,
        distribute_for_student_work: Optional[bool] = None,
        created_date_time: Optional[datetime.datetime] = None,
        display_name: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        microsoft_graph_identity_display_name: Optional[str] = None,
        microsoft_graph_identity_id: Optional[str] = None,
        display_name1: Optional[str] = None,
        id1: Optional[str] = None,
        display_name2: Optional[str] = None,
        id2: Optional[str] = None,
        display_name3: Optional[str] = None,
        id3: Optional[str] = None,
        display_name4: Optional[str] = None,
        id4: Optional[str] = None,
        display_name5: Optional[str] = None,
        id5: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationAssignmentResource":
        """Create new navigation property to resources for education.

        Create new navigation property to resources for education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param id: Read-only.
        :type id: str
        :param distribute_for_student_work:
        :type distribute_for_student_work: bool
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param display_name:
        :type display_name: str
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name2: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name2: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name3: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name3: str
        :param id3: Unique identifier for the identity.
        :type id3: str
        :param display_name4: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name4: str
        :param id4: Unique identifier for the identity.
        :type id4: str
        :param display_name5: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name5: str
        :param id5: Unique identifier for the identity.
        :type id5: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationAssignmentResource, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationAssignmentResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationAssignmentResource"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEducationAssignmentResource(id=id, distribute_for_student_work=distribute_for_student_work, created_date_time=created_date_time, display_name_resource_display_name=display_name, last_modified_date_time=last_modified_date_time, display_name_resource_last_modified_by_user_display_name=microsoft_graph_identity_display_name, id_resource_last_modified_by_user_id=microsoft_graph_identity_id, display_name_resource_last_modified_by_device_display_name=display_name1, id_resource_last_modified_by_device_id=id1, display_name_resource_last_modified_by_application_display_name=display_name2, id_resource_last_modified_by_application_id=id2, display_name_resource_created_by_user_display_name=display_name3, id_resource_created_by_user_id=id3, display_name_resource_created_by_device_display_name=display_name4, id_resource_created_by_device_id=id4, display_name_resource_created_by_application_display_name=display_name5, id_resource_created_by_application_id=id5)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_resource.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEducationAssignmentResource')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationAssignmentResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_resource.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/resources'}  # type: ignore

    async def get_resource(
        self,
        education_class_id: str,
        education_assignment_id: str,
        education_assignment_resource_id: str,
        select: Optional[List[Union[str, "models.Enum147"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationAssignmentResource":
        """Get resources from education.

        Get resources from education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param education_assignment_resource_id: key: id of educationAssignmentResource.
        :type education_assignment_resource_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum147]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationAssignmentResource, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationAssignmentResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationAssignmentResource"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_resource.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
            'educationAssignmentResource-id': self._serialize.url("education_assignment_resource_id", education_assignment_resource_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationAssignmentResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_resource.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/resources/{educationAssignmentResource-id}'}  # type: ignore

    async def update_resource(
        self,
        education_class_id: str,
        education_assignment_id: str,
        education_assignment_resource_id: str,
        id: Optional[str] = None,
        distribute_for_student_work: Optional[bool] = None,
        created_date_time: Optional[datetime.datetime] = None,
        display_name: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        microsoft_graph_identity_display_name: Optional[str] = None,
        microsoft_graph_identity_id: Optional[str] = None,
        display_name1: Optional[str] = None,
        id1: Optional[str] = None,
        display_name2: Optional[str] = None,
        id2: Optional[str] = None,
        display_name3: Optional[str] = None,
        id3: Optional[str] = None,
        display_name4: Optional[str] = None,
        id4: Optional[str] = None,
        display_name5: Optional[str] = None,
        id5: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property resources in education.

        Update the navigation property resources in education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param education_assignment_resource_id: key: id of educationAssignmentResource.
        :type education_assignment_resource_id: str
        :param id: Read-only.
        :type id: str
        :param distribute_for_student_work:
        :type distribute_for_student_work: bool
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param display_name:
        :type display_name: str
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name2: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name2: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name3: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name3: str
        :param id3: Unique identifier for the identity.
        :type id3: str
        :param display_name4: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name4: str
        :param id4: Unique identifier for the identity.
        :type id4: str
        :param display_name5: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name5: str
        :param id5: Unique identifier for the identity.
        :type id5: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEducationAssignmentResource(id=id, distribute_for_student_work=distribute_for_student_work, created_date_time=created_date_time, display_name_resource_display_name=display_name, last_modified_date_time=last_modified_date_time, display_name_resource_last_modified_by_user_display_name=microsoft_graph_identity_display_name, id_resource_last_modified_by_user_id=microsoft_graph_identity_id, display_name_resource_last_modified_by_device_display_name=display_name1, id_resource_last_modified_by_device_id=id1, display_name_resource_last_modified_by_application_display_name=display_name2, id_resource_last_modified_by_application_id=id2, display_name_resource_created_by_user_display_name=display_name3, id_resource_created_by_user_id=id3, display_name_resource_created_by_device_display_name=display_name4, id_resource_created_by_device_id=id4, display_name_resource_created_by_application_display_name=display_name5, id_resource_created_by_application_id=id5)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_resource.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
            'educationAssignmentResource-id': self._serialize.url("education_assignment_resource_id", education_assignment_resource_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEducationAssignmentResource')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_resource.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/resources/{educationAssignmentResource-id}'}  # type: ignore

    async def delete_resource(
        self,
        education_class_id: str,
        education_assignment_id: str,
        education_assignment_resource_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property resources for education.

        Delete navigation property resources for education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param education_assignment_resource_id: key: id of educationAssignmentResource.
        :type education_assignment_resource_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_resource.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
            'educationAssignmentResource-id': self._serialize.url("education_assignment_resource_id", education_assignment_resource_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_resource.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/resources/{educationAssignmentResource-id}'}  # type: ignore

    async def get_rubric(
        self,
        education_class_id: str,
        education_assignment_id: str,
        select: Optional[List[Union[str, "models.Enum148"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationRubric":
        """Get rubric from education.

        Get rubric from education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum148]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationRubric, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationRubric
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationRubric"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_rubric.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationRubric', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_rubric.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/rubric'}  # type: ignore

    async def update_rubric(
        self,
        education_class_id: str,
        education_assignment_id: str,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional["models.MicrosoftGraphEducationItemBody"] = None,
        display_name: Optional[str] = None,
        grading: Optional[Dict[str, object]] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        levels: Optional[List["models.MicrosoftGraphRubricLevel"]] = None,
        qualities: Optional[List["models.MicrosoftGraphRubricQuality"]] = None,
        microsoft_graph_identity_display_name: Optional[str] = None,
        microsoft_graph_identity_id: Optional[str] = None,
        display_name1: Optional[str] = None,
        id1: Optional[str] = None,
        display_name2: Optional[str] = None,
        id2: Optional[str] = None,
        display_name3: Optional[str] = None,
        id3: Optional[str] = None,
        display_name4: Optional[str] = None,
        id4: Optional[str] = None,
        display_name5: Optional[str] = None,
        id5: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property rubric in education.

        Update the navigation property rubric in education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param description: educationItemBody.
        :type description: ~education.models.MicrosoftGraphEducationItemBody
        :param display_name:
        :type display_name: str
        :param grading: educationAssignmentGradeType.
        :type grading: dict[str, object]
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param levels:
        :type levels: list[~education.models.MicrosoftGraphRubricLevel]
        :param qualities:
        :type qualities: list[~education.models.MicrosoftGraphRubricQuality]
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name2: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name2: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name3: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name3: str
        :param id3: Unique identifier for the identity.
        :type id3: str
        :param display_name4: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name4: str
        :param id4: Unique identifier for the identity.
        :type id4: str
        :param display_name5: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name5: str
        :param id5: Unique identifier for the identity.
        :type id5: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEducationRubric(id=id, created_date_time=created_date_time, description=description, display_name=display_name, grading=grading, last_modified_date_time=last_modified_date_time, levels=levels, qualities=qualities, display_name_last_modified_by_user_display_name=microsoft_graph_identity_display_name, id_last_modified_by_user_id=microsoft_graph_identity_id, display_name_last_modified_by_device_display_name=display_name1, id_last_modified_by_device_id=id1, display_name_last_modified_by_application_display_name=display_name2, id_last_modified_by_application_id=id2, display_name_created_by_user_display_name=display_name3, id_created_by_user_id=id3, display_name_created_by_device_display_name=display_name4, id_created_by_device_id=id4, display_name_created_by_application_display_name=display_name5, id_created_by_application_id=id5)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_rubric.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEducationRubric')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_rubric.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/rubric'}  # type: ignore

    async def delete_rubric(
        self,
        education_class_id: str,
        education_assignment_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property rubric for education.

        Delete navigation property rubric for education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_rubric.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_rubric.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/rubric'}  # type: ignore

    def list_submission(
        self,
        education_class_id: str,
        education_assignment_id: str,
        orderby: Optional[List[Union[str, "models.Enum149"]]] = None,
        select: Optional[List[Union[str, "models.Enum150"]]] = None,
        expand: Optional[List[Union[str, "models.Enum151"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationSubmission"]:
        """Get submissions from education.

        Get submissions from education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum149]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum150]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum151]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationSubmission or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationSubmission]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationSubmission"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_submission.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
                    'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationSubmission', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_submission.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions'}  # type: ignore

    async def create_submission(
        self,
        education_class_id: str,
        education_assignment_id: str,
        id: Optional[str] = None,
        recipient: Optional[Dict[str, object]] = None,
        released_date_time: Optional[datetime.datetime] = None,
        resources_folder_url: Optional[str] = None,
        returned_date_time: Optional[datetime.datetime] = None,
        status: Optional[Union[str, "models.MicrosoftGraphEducationSubmissionStatus"]] = None,
        submitted_date_time: Optional[datetime.datetime] = None,
        unsubmitted_date_time: Optional[datetime.datetime] = None,
        outcomes: Optional[List["models.MicrosoftGraphEducationOutcome"]] = None,
        resources: Optional[List["models.MicrosoftGraphEducationSubmissionResource"]] = None,
        submitted_resources: Optional[List["models.MicrosoftGraphEducationSubmissionResource"]] = None,
        display_name: Optional[str] = None,
        microsoft_graph_identity_id: Optional[str] = None,
        microsoft_graph_identity_display_name: Optional[str] = None,
        id1: Optional[str] = None,
        display_name1: Optional[str] = None,
        id2: Optional[str] = None,
        display_name2: Optional[str] = None,
        id3: Optional[str] = None,
        display_name3: Optional[str] = None,
        id4: Optional[str] = None,
        display_name4: Optional[str] = None,
        id5: Optional[str] = None,
        display_name5: Optional[str] = None,
        id6: Optional[str] = None,
        display_name6: Optional[str] = None,
        id7: Optional[str] = None,
        display_name7: Optional[str] = None,
        id8: Optional[str] = None,
        display_name8: Optional[str] = None,
        id9: Optional[str] = None,
        display_name9: Optional[str] = None,
        id10: Optional[str] = None,
        display_name10: Optional[str] = None,
        id11: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationSubmission":
        """Create new navigation property to submissions for education.

        Create new navigation property to submissions for education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param id: Read-only.
        :type id: str
        :param recipient: educationSubmissionRecipient.
        :type recipient: dict[str, object]
        :param released_date_time:
        :type released_date_time: ~datetime.datetime
        :param resources_folder_url:
        :type resources_folder_url: str
        :param returned_date_time:
        :type returned_date_time: ~datetime.datetime
        :param status:
        :type status: str or ~education.models.MicrosoftGraphEducationSubmissionStatus
        :param submitted_date_time:
        :type submitted_date_time: ~datetime.datetime
        :param unsubmitted_date_time:
        :type unsubmitted_date_time: ~datetime.datetime
        :param outcomes:
        :type outcomes: list[~education.models.MicrosoftGraphEducationOutcome]
        :param resources:
        :type resources: list[~education.models.MicrosoftGraphEducationSubmissionResource]
        :param submitted_resources:
        :type submitted_resources: list[~education.models.MicrosoftGraphEducationSubmissionResource]
        :param display_name: The identity's display name. Note that this may not always be available or
         up to date. For example, if a user changes their display name, the API may show the new value
         in a future response, but the items associated with the user won't show up as having changed
         when using delta.
        :type display_name: str
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name2: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name2: str
        :param id3: Unique identifier for the identity.
        :type id3: str
        :param display_name3: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name3: str
        :param id4: Unique identifier for the identity.
        :type id4: str
        :param display_name4: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name4: str
        :param id5: Unique identifier for the identity.
        :type id5: str
        :param display_name5: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name5: str
        :param id6: Unique identifier for the identity.
        :type id6: str
        :param display_name6: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name6: str
        :param id7: Unique identifier for the identity.
        :type id7: str
        :param display_name7: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name7: str
        :param id8: Unique identifier for the identity.
        :type id8: str
        :param display_name8: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name8: str
        :param id9: Unique identifier for the identity.
        :type id9: str
        :param display_name9: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name9: str
        :param id10: Unique identifier for the identity.
        :type id10: str
        :param display_name10: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name10: str
        :param id11: Unique identifier for the identity.
        :type id11: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationSubmission, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationSubmission
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationSubmission"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEducationSubmission(id=id, recipient=recipient, released_date_time=released_date_time, resources_folder_url=resources_folder_url, returned_date_time=returned_date_time, status=status, submitted_date_time=submitted_date_time, unsubmitted_date_time=unsubmitted_date_time, outcomes=outcomes, resources=resources, submitted_resources=submitted_resources, display_name_unsubmitted_by_user_display_name=display_name, id_unsubmitted_by_user_id=microsoft_graph_identity_id, display_name_unsubmitted_by_device_display_name=microsoft_graph_identity_display_name, id_unsubmitted_by_device_id=id1, display_name_unsubmitted_by_application_display_name=display_name1, id_unsubmitted_by_application_id=id2, display_name_submitted_by_user_display_name=display_name2, id_submitted_by_user_id=id3, display_name_submitted_by_device_display_name=display_name3, id_submitted_by_device_id=id4, display_name_submitted_by_application_display_name=display_name4, id_submitted_by_application_id=id5, display_name_returned_by_user_display_name=display_name5, id_returned_by_user_id=id6, display_name_returned_by_device_display_name=display_name6, id_returned_by_device_id=id7, display_name_returned_by_application_display_name=display_name7, id_returned_by_application_id=id8, display_name_released_by_user_display_name=display_name8, id_released_by_user_id=id9, display_name_released_by_device_display_name=display_name9, id_released_by_device_id=id10, display_name_released_by_application_display_name=display_name10, id_released_by_application_id=id11)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_submission.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEducationSubmission')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationSubmission', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_submission.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions'}  # type: ignore

    async def get_submission(
        self,
        education_class_id: str,
        education_assignment_id: str,
        education_submission_id: str,
        select: Optional[List[Union[str, "models.Enum152"]]] = None,
        expand: Optional[List[Union[str, "models.Enum153"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationSubmission":
        """Get submissions from education.

        Get submissions from education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param education_submission_id: key: id of educationSubmission.
        :type education_submission_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum152]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum153]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationSubmission, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationSubmission
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationSubmission"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_submission.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
            'educationSubmission-id': self._serialize.url("education_submission_id", education_submission_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationSubmission', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_submission.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}'}  # type: ignore

    async def update_submission(
        self,
        education_class_id: str,
        education_assignment_id: str,
        education_submission_id: str,
        id: Optional[str] = None,
        recipient: Optional[Dict[str, object]] = None,
        released_date_time: Optional[datetime.datetime] = None,
        resources_folder_url: Optional[str] = None,
        returned_date_time: Optional[datetime.datetime] = None,
        status: Optional[Union[str, "models.MicrosoftGraphEducationSubmissionStatus"]] = None,
        submitted_date_time: Optional[datetime.datetime] = None,
        unsubmitted_date_time: Optional[datetime.datetime] = None,
        outcomes: Optional[List["models.MicrosoftGraphEducationOutcome"]] = None,
        resources: Optional[List["models.MicrosoftGraphEducationSubmissionResource"]] = None,
        submitted_resources: Optional[List["models.MicrosoftGraphEducationSubmissionResource"]] = None,
        display_name: Optional[str] = None,
        microsoft_graph_identity_id: Optional[str] = None,
        microsoft_graph_identity_display_name: Optional[str] = None,
        id1: Optional[str] = None,
        display_name1: Optional[str] = None,
        id2: Optional[str] = None,
        display_name2: Optional[str] = None,
        id3: Optional[str] = None,
        display_name3: Optional[str] = None,
        id4: Optional[str] = None,
        display_name4: Optional[str] = None,
        id5: Optional[str] = None,
        display_name5: Optional[str] = None,
        id6: Optional[str] = None,
        display_name6: Optional[str] = None,
        id7: Optional[str] = None,
        display_name7: Optional[str] = None,
        id8: Optional[str] = None,
        display_name8: Optional[str] = None,
        id9: Optional[str] = None,
        display_name9: Optional[str] = None,
        id10: Optional[str] = None,
        display_name10: Optional[str] = None,
        id11: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property submissions in education.

        Update the navigation property submissions in education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param education_submission_id: key: id of educationSubmission.
        :type education_submission_id: str
        :param id: Read-only.
        :type id: str
        :param recipient: educationSubmissionRecipient.
        :type recipient: dict[str, object]
        :param released_date_time:
        :type released_date_time: ~datetime.datetime
        :param resources_folder_url:
        :type resources_folder_url: str
        :param returned_date_time:
        :type returned_date_time: ~datetime.datetime
        :param status:
        :type status: str or ~education.models.MicrosoftGraphEducationSubmissionStatus
        :param submitted_date_time:
        :type submitted_date_time: ~datetime.datetime
        :param unsubmitted_date_time:
        :type unsubmitted_date_time: ~datetime.datetime
        :param outcomes:
        :type outcomes: list[~education.models.MicrosoftGraphEducationOutcome]
        :param resources:
        :type resources: list[~education.models.MicrosoftGraphEducationSubmissionResource]
        :param submitted_resources:
        :type submitted_resources: list[~education.models.MicrosoftGraphEducationSubmissionResource]
        :param display_name: The identity's display name. Note that this may not always be available or
         up to date. For example, if a user changes their display name, the API may show the new value
         in a future response, but the items associated with the user won't show up as having changed
         when using delta.
        :type display_name: str
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name2: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name2: str
        :param id3: Unique identifier for the identity.
        :type id3: str
        :param display_name3: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name3: str
        :param id4: Unique identifier for the identity.
        :type id4: str
        :param display_name4: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name4: str
        :param id5: Unique identifier for the identity.
        :type id5: str
        :param display_name5: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name5: str
        :param id6: Unique identifier for the identity.
        :type id6: str
        :param display_name6: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name6: str
        :param id7: Unique identifier for the identity.
        :type id7: str
        :param display_name7: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name7: str
        :param id8: Unique identifier for the identity.
        :type id8: str
        :param display_name8: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name8: str
        :param id9: Unique identifier for the identity.
        :type id9: str
        :param display_name9: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name9: str
        :param id10: Unique identifier for the identity.
        :type id10: str
        :param display_name10: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name10: str
        :param id11: Unique identifier for the identity.
        :type id11: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEducationSubmission(id=id, recipient=recipient, released_date_time=released_date_time, resources_folder_url=resources_folder_url, returned_date_time=returned_date_time, status=status, submitted_date_time=submitted_date_time, unsubmitted_date_time=unsubmitted_date_time, outcomes=outcomes, resources=resources, submitted_resources=submitted_resources, display_name_unsubmitted_by_user_display_name=display_name, id_unsubmitted_by_user_id=microsoft_graph_identity_id, display_name_unsubmitted_by_device_display_name=microsoft_graph_identity_display_name, id_unsubmitted_by_device_id=id1, display_name_unsubmitted_by_application_display_name=display_name1, id_unsubmitted_by_application_id=id2, display_name_submitted_by_user_display_name=display_name2, id_submitted_by_user_id=id3, display_name_submitted_by_device_display_name=display_name3, id_submitted_by_device_id=id4, display_name_submitted_by_application_display_name=display_name4, id_submitted_by_application_id=id5, display_name_returned_by_user_display_name=display_name5, id_returned_by_user_id=id6, display_name_returned_by_device_display_name=display_name6, id_returned_by_device_id=id7, display_name_returned_by_application_display_name=display_name7, id_returned_by_application_id=id8, display_name_released_by_user_display_name=display_name8, id_released_by_user_id=id9, display_name_released_by_device_display_name=display_name9, id_released_by_device_id=id10, display_name_released_by_application_display_name=display_name10, id_released_by_application_id=id11)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_submission.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
            'educationSubmission-id': self._serialize.url("education_submission_id", education_submission_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEducationSubmission')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_submission.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}'}  # type: ignore

    async def delete_submission(
        self,
        education_class_id: str,
        education_assignment_id: str,
        education_submission_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property submissions for education.

        Delete navigation property submissions for education.

        :param education_class_id: key: id of educationClass.
        :type education_class_id: str
        :param education_assignment_id: key: id of educationAssignment.
        :type education_assignment_id: str
        :param education_submission_id: key: id of educationSubmission.
        :type education_submission_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_submission.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
            'educationSubmission-id': self._serialize.url("education_submission_id", education_submission_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_submission.metadata = {'url': '/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}'}  # type: ignore
