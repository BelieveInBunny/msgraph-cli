# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class Enum132(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSCODE = "classCode"
    COURSE = "course"
    CREATEDBY = "createdBy"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALID = "externalId"
    EXTERNALNAME = "externalName"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    GRADE = "grade"
    MAILNICKNAME = "mailNickname"
    TERM = "term"
    ASSIGNMENTCATEGORIES = "assignmentCategories"
    ASSIGNMENTS = "assignments"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Enum134(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"

class Enum135(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"

class Enum136(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"

class Enum137(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ALLOWLATESUBMISSIONS = "allowLateSubmissions"
    ALLOWLATESUBMISSIONSDESC = "allowLateSubmissions desc"
    ALLOWSTUDENTSTOADDRESOURCESTOSUBMISSION = "allowStudentsToAddResourcesToSubmission"
    ALLOWSTUDENTSTOADDRESOURCESTOSUBMISSIONDESC = "allowStudentsToAddResourcesToSubmission desc"
    ASSIGNDATETIME = "assignDateTime"
    ASSIGNDATETIMEDESC = "assignDateTime desc"
    ASSIGNEDDATETIME = "assignedDateTime"
    ASSIGNEDDATETIMEDESC = "assignedDateTime desc"
    ASSIGNTO = "assignTo"
    ASSIGNTODESC = "assignTo desc"
    CLASSID = "classId"
    CLASSIDDESC = "classId desc"
    CLOSEDATETIME = "closeDateTime"
    CLOSEDATETIMEDESC = "closeDateTime desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    DUEDATETIME = "dueDateTime"
    DUEDATETIMEDESC = "dueDateTime desc"
    GRADING = "grading"
    GRADINGDESC = "grading desc"
    INSTRUCTIONS = "instructions"
    INSTRUCTIONSDESC = "instructions desc"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDBYDESC = "lastModifiedBy desc"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LASTMODIFIEDDATETIMEDESC = "lastModifiedDateTime desc"
    STATUS = "status"
    STATUSDESC = "status desc"

class Enum138(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ALLOWLATESUBMISSIONS = "allowLateSubmissions"
    ALLOWSTUDENTSTOADDRESOURCESTOSUBMISSION = "allowStudentsToAddResourcesToSubmission"
    ASSIGNDATETIME = "assignDateTime"
    ASSIGNEDDATETIME = "assignedDateTime"
    ASSIGNTO = "assignTo"
    CLASSID = "classId"
    CLOSEDATETIME = "closeDateTime"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DISPLAYNAME = "displayName"
    DUEDATETIME = "dueDateTime"
    GRADING = "grading"
    INSTRUCTIONS = "instructions"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    STATUS = "status"
    CATEGORIES = "categories"
    RESOURCES = "resources"
    RUBRIC = "rubric"
    SUBMISSIONS = "submissions"

class Enum139(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CATEGORIES = "categories"
    RESOURCES = "resources"
    RUBRIC = "rubric"
    SUBMISSIONS = "submissions"

class Enum140(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ALLOWLATESUBMISSIONS = "allowLateSubmissions"
    ALLOWSTUDENTSTOADDRESOURCESTOSUBMISSION = "allowStudentsToAddResourcesToSubmission"
    ASSIGNDATETIME = "assignDateTime"
    ASSIGNEDDATETIME = "assignedDateTime"
    ASSIGNTO = "assignTo"
    CLASSID = "classId"
    CLOSEDATETIME = "closeDateTime"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DISPLAYNAME = "displayName"
    DUEDATETIME = "dueDateTime"
    GRADING = "grading"
    INSTRUCTIONS = "instructions"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    STATUS = "status"
    CATEGORIES = "categories"
    RESOURCES = "resources"
    RUBRIC = "rubric"
    SUBMISSIONS = "submissions"

class Enum141(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CATEGORIES = "categories"
    RESOURCES = "resources"
    RUBRIC = "rubric"
    SUBMISSIONS = "submissions"

class Enum142(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"

class Enum143(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"

class Enum144(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"

class Enum145(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DISTRIBUTEFORSTUDENTWORK = "distributeForStudentWork"
    DISTRIBUTEFORSTUDENTWORKDESC = "distributeForStudentWork desc"
    RESOURCE = "resource"
    RESOURCEDESC = "resource desc"

class Enum146(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISTRIBUTEFORSTUDENTWORK = "distributeForStudentWork"
    RESOURCE = "resource"

class Enum147(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISTRIBUTEFORSTUDENTWORK = "distributeForStudentWork"
    RESOURCE = "resource"

class Enum148(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    GRADING = "grading"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LEVELS = "levels"
    QUALITIES = "qualities"

class Enum149(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    RECIPIENT = "recipient"
    RECIPIENTDESC = "recipient desc"
    RELEASEDBY = "releasedBy"
    RELEASEDBYDESC = "releasedBy desc"
    RELEASEDDATETIME = "releasedDateTime"
    RELEASEDDATETIMEDESC = "releasedDateTime desc"
    RESOURCESFOLDERURL = "resourcesFolderUrl"
    RESOURCESFOLDERURLDESC = "resourcesFolderUrl desc"
    RETURNEDBY = "returnedBy"
    RETURNEDBYDESC = "returnedBy desc"
    RETURNEDDATETIME = "returnedDateTime"
    RETURNEDDATETIMEDESC = "returnedDateTime desc"
    STATUS = "status"
    STATUSDESC = "status desc"
    SUBMITTEDBY = "submittedBy"
    SUBMITTEDBYDESC = "submittedBy desc"
    SUBMITTEDDATETIME = "submittedDateTime"
    SUBMITTEDDATETIMEDESC = "submittedDateTime desc"
    UNSUBMITTEDBY = "unsubmittedBy"
    UNSUBMITTEDBYDESC = "unsubmittedBy desc"
    UNSUBMITTEDDATETIME = "unsubmittedDateTime"
    UNSUBMITTEDDATETIMEDESC = "unsubmittedDateTime desc"

class Enum150(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RECIPIENT = "recipient"
    RELEASEDBY = "releasedBy"
    RELEASEDDATETIME = "releasedDateTime"
    RESOURCESFOLDERURL = "resourcesFolderUrl"
    RETURNEDBY = "returnedBy"
    RETURNEDDATETIME = "returnedDateTime"
    STATUS = "status"
    SUBMITTEDBY = "submittedBy"
    SUBMITTEDDATETIME = "submittedDateTime"
    UNSUBMITTEDBY = "unsubmittedBy"
    UNSUBMITTEDDATETIME = "unsubmittedDateTime"
    OUTCOMES = "outcomes"
    RESOURCES = "resources"
    SUBMITTEDRESOURCES = "submittedResources"

class Enum151(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    OUTCOMES = "outcomes"
    RESOURCES = "resources"
    SUBMITTEDRESOURCES = "submittedResources"

class Enum152(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RECIPIENT = "recipient"
    RELEASEDBY = "releasedBy"
    RELEASEDDATETIME = "releasedDateTime"
    RESOURCESFOLDERURL = "resourcesFolderUrl"
    RETURNEDBY = "returnedBy"
    RETURNEDDATETIME = "returnedDateTime"
    STATUS = "status"
    SUBMITTEDBY = "submittedBy"
    SUBMITTEDDATETIME = "submittedDateTime"
    UNSUBMITTEDBY = "unsubmittedBy"
    UNSUBMITTEDDATETIME = "unsubmittedDateTime"
    OUTCOMES = "outcomes"
    RESOURCES = "resources"
    SUBMITTEDRESOURCES = "submittedResources"

class Enum153(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    OUTCOMES = "outcomes"
    RESOURCES = "resources"
    SUBMITTEDRESOURCES = "submittedResources"

class Enum154(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDBYDESC = "lastModifiedBy desc"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LASTMODIFIEDDATETIMEDESC = "lastModifiedDateTime desc"

class Enum155(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"

class Enum156(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"

class Enum157(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ASSIGNMENTRESOURCEURL = "assignmentResourceUrl"
    ASSIGNMENTRESOURCEURLDESC = "assignmentResourceUrl desc"
    RESOURCE = "resource"
    RESOURCEDESC = "resource desc"

class Enum158(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ASSIGNMENTRESOURCEURL = "assignmentResourceUrl"
    RESOURCE = "resource"

class Enum159(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ASSIGNMENTRESOURCEURL = "assignmentResourceUrl"
    RESOURCE = "resource"

class Enum160(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ASSIGNMENTRESOURCEURL = "assignmentResourceUrl"
    ASSIGNMENTRESOURCEURLDESC = "assignmentResourceUrl desc"
    RESOURCE = "resource"
    RESOURCEDESC = "resource desc"

class Enum161(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ASSIGNMENTRESOURCEURL = "assignmentResourceUrl"
    RESOURCE = "resource"

class Enum162(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ASSIGNMENTRESOURCEURL = "assignmentResourceUrl"
    RESOURCE = "resource"

class Enum163(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETEDDATETIME = "deletedDateTime"
    ASSIGNEDLABELS = "assignedLabels"
    ASSIGNEDLICENSES = "assignedLicenses"
    CLASSIFICATION = "classification"
    CREATEDBYAPPID = "createdByAppId"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXPIRATIONDATETIME = "expirationDateTime"
    GROUPTYPES = "groupTypes"
    HASMEMBERSWITHLICENSEERRORS = "hasMembersWithLicenseErrors"
    INFOCATALOGS = "infoCatalogs"
    ISASSIGNABLETOROLE = "isAssignableToRole"
    LICENSEPROCESSINGSTATE = "licenseProcessingState"
    MAIL = "mail"
    MAILENABLED = "mailEnabled"
    MAILNICKNAME = "mailNickname"
    MDMAPPID = "mdmAppId"
    MEMBERSHIPRULE = "membershipRule"
    MEMBERSHIPRULEPROCESSINGSTATE = "membershipRuleProcessingState"
    ONPREMISESDOMAINNAME = "onPremisesDomainName"
    ONPREMISESLASTSYNCDATETIME = "onPremisesLastSyncDateTime"
    ONPREMISESNETBIOSNAME = "onPremisesNetBiosName"
    ONPREMISESPROVISIONINGERRORS = "onPremisesProvisioningErrors"
    ONPREMISESSAMACCOUNTNAME = "onPremisesSamAccountName"
    ONPREMISESSECURITYIDENTIFIER = "onPremisesSecurityIdentifier"
    ONPREMISESSYNCENABLED = "onPremisesSyncEnabled"
    PREFERREDDATALOCATION = "preferredDataLocation"
    PREFERREDLANGUAGE = "preferredLanguage"
    PROXYADDRESSES = "proxyAddresses"
    RENEWEDDATETIME = "renewedDateTime"
    RESOURCEBEHAVIOROPTIONS = "resourceBehaviorOptions"
    RESOURCEPROVISIONINGOPTIONS = "resourceProvisioningOptions"
    SECURITYENABLED = "securityEnabled"
    SECURITYIDENTIFIER = "securityIdentifier"
    THEME = "theme"
    VISIBILITY = "visibility"
    ACCESSTYPE = "accessType"
    ALLOWEXTERNALSENDERS = "allowExternalSenders"
    AUTOSUBSCRIBENEWMEMBERS = "autoSubscribeNewMembers"
    HIDEFROMADDRESSLISTS = "hideFromAddressLists"
    HIDEFROMOUTLOOKCLIENTS = "hideFromOutlookClients"
    ISFAVORITE = "isFavorite"
    ISSUBSCRIBEDBYMAIL = "isSubscribedByMail"
    UNSEENCONVERSATIONSCOUNT = "unseenConversationsCount"
    UNSEENCOUNT = "unseenCount"
    UNSEENMESSAGESCOUNT = "unseenMessagesCount"
    ISARCHIVED = "isArchived"
    APPROLEASSIGNMENTS = "appRoleAssignments"
    CREATEDONBEHALFOF = "createdOnBehalfOf"
    ENDPOINTS = "endpoints"
    MEMBEROF = "memberOf"
    MEMBERS = "members"
    MEMBERSWITHLICENSEERRORS = "membersWithLicenseErrors"
    OWNERS = "owners"
    PERMISSIONGRANTS = "permissionGrants"
    SETTINGS = "settings"
    TRANSITIVEMEMBEROF = "transitiveMemberOf"
    TRANSITIVEMEMBERS = "transitiveMembers"
    ACCEPTEDSENDERS = "acceptedSenders"
    CALENDAR = "calendar"
    CALENDARVIEW = "calendarView"
    CONVERSATIONS = "conversations"
    EVENTS = "events"
    PHOTO = "photo"
    PHOTOS = "photos"
    REJECTEDSENDERS = "rejectedSenders"
    THREADS = "threads"
    DRIVE = "drive"
    DRIVES = "drives"
    SITES = "sites"
    EXTENSIONS = "extensions"
    GROUPLIFECYCLEPOLICIES = "groupLifecyclePolicies"
    PLANNER = "planner"
    ONENOTE = "onenote"
    TEAM = "team"

class Enum164(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPROLEASSIGNMENTS = "appRoleAssignments"
    CREATEDONBEHALFOF = "createdOnBehalfOf"
    ENDPOINTS = "endpoints"
    MEMBEROF = "memberOf"
    MEMBERS = "members"
    MEMBERSWITHLICENSEERRORS = "membersWithLicenseErrors"
    OWNERS = "owners"
    PERMISSIONGRANTS = "permissionGrants"
    SETTINGS = "settings"
    TRANSITIVEMEMBEROF = "transitiveMemberOf"
    TRANSITIVEMEMBERS = "transitiveMembers"
    ACCEPTEDSENDERS = "acceptedSenders"
    CALENDAR = "calendar"
    CALENDARVIEW = "calendarView"
    CONVERSATIONS = "conversations"
    EVENTS = "events"
    PHOTO = "photo"
    PHOTOS = "photos"
    REJECTEDSENDERS = "rejectedSenders"
    THREADS = "threads"
    DRIVE = "drive"
    DRIVES = "drives"
    SITES = "sites"
    EXTENSIONS = "extensions"
    GROUPLIFECYCLEPOLICIES = "groupLifecyclePolicies"
    PLANNER = "planner"
    ONENOTE = "onenote"
    TEAM = "team"

class Enum165(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    RELATEDCONTACTS = "relatedContacts"
    RELATEDCONTACTSDESC = "relatedContacts desc"
    ACCOUNTENABLED = "accountEnabled"
    ACCOUNTENABLEDDESC = "accountEnabled desc"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDLICENSESDESC = "assignedLicenses desc"
    ASSIGNEDPLANS = "assignedPlans"
    ASSIGNEDPLANSDESC = "assignedPlans desc"
    BUSINESSPHONES = "businessPhones"
    BUSINESSPHONESDESC = "businessPhones desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DEPARTMENT = "department"
    DEPARTMENTDESC = "department desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    GIVENNAME = "givenName"
    GIVENNAMEDESC = "givenName desc"
    MAIL = "mail"
    MAILDESC = "mail desc"
    MAILINGADDRESS = "mailingAddress"
    MAILINGADDRESSDESC = "mailingAddress desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    MIDDLENAME = "middleName"
    MIDDLENAMEDESC = "middleName desc"
    MOBILEPHONE = "mobilePhone"
    MOBILEPHONEDESC = "mobilePhone desc"
    OFFICELOCATION = "officeLocation"
    OFFICELOCATIONDESC = "officeLocation desc"
    ONPREMISESINFO = "onPremisesInfo"
    ONPREMISESINFODESC = "onPremisesInfo desc"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPOLICIESDESC = "passwordPolicies desc"
    PASSWORDPROFILE = "passwordProfile"
    PASSWORDPROFILEDESC = "passwordProfile desc"
    PREFERREDLANGUAGE = "preferredLanguage"
    PREFERREDLANGUAGEDESC = "preferredLanguage desc"
    PRIMARYROLE = "primaryRole"
    PRIMARYROLEDESC = "primaryRole desc"
    PROVISIONEDPLANS = "provisionedPlans"
    PROVISIONEDPLANSDESC = "provisionedPlans desc"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    REFRESHTOKENSVALIDFROMDATETIMEDESC = "refreshTokensValidFromDateTime desc"
    RESIDENCEADDRESS = "residenceAddress"
    RESIDENCEADDRESSDESC = "residenceAddress desc"
    SHOWINADDRESSLIST = "showInAddressList"
    SHOWINADDRESSLISTDESC = "showInAddressList desc"
    STUDENT = "student"
    STUDENTDESC = "student desc"
    SURNAME = "surname"
    SURNAMEDESC = "surname desc"
    TEACHER = "teacher"
    TEACHERDESC = "teacher desc"
    USAGELOCATION = "usageLocation"
    USAGELOCATIONDESC = "usageLocation desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"
    USERTYPE = "userType"
    USERTYPEDESC = "userType desc"

class Enum166(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RELATEDCONTACTS = "relatedContacts"
    ACCOUNTENABLED = "accountEnabled"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDPLANS = "assignedPlans"
    BUSINESSPHONES = "businessPhones"
    CREATEDBY = "createdBy"
    DEPARTMENT = "department"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    GIVENNAME = "givenName"
    MAIL = "mail"
    MAILINGADDRESS = "mailingAddress"
    MAILNICKNAME = "mailNickname"
    MIDDLENAME = "middleName"
    MOBILEPHONE = "mobilePhone"
    OFFICELOCATION = "officeLocation"
    ONPREMISESINFO = "onPremisesInfo"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPROFILE = "passwordProfile"
    PREFERREDLANGUAGE = "preferredLanguage"
    PRIMARYROLE = "primaryRole"
    PROVISIONEDPLANS = "provisionedPlans"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    RESIDENCEADDRESS = "residenceAddress"
    SHOWINADDRESSLIST = "showInAddressList"
    STUDENT = "student"
    SURNAME = "surname"
    TEACHER = "teacher"
    USAGELOCATION = "usageLocation"
    USERPRINCIPALNAME = "userPrincipalName"
    USERTYPE = "userType"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    SCHOOLS = "schools"
    TAUGHTCLASSES = "taughtClasses"
    USER = "user"

class Enum167(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    SCHOOLS = "schools"
    TAUGHTCLASSES = "taughtClasses"
    USER = "user"

class Enum168(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    RELATEDCONTACTS = "relatedContacts"
    RELATEDCONTACTSDESC = "relatedContacts desc"
    ACCOUNTENABLED = "accountEnabled"
    ACCOUNTENABLEDDESC = "accountEnabled desc"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDLICENSESDESC = "assignedLicenses desc"
    ASSIGNEDPLANS = "assignedPlans"
    ASSIGNEDPLANSDESC = "assignedPlans desc"
    BUSINESSPHONES = "businessPhones"
    BUSINESSPHONESDESC = "businessPhones desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DEPARTMENT = "department"
    DEPARTMENTDESC = "department desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    GIVENNAME = "givenName"
    GIVENNAMEDESC = "givenName desc"
    MAIL = "mail"
    MAILDESC = "mail desc"
    MAILINGADDRESS = "mailingAddress"
    MAILINGADDRESSDESC = "mailingAddress desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    MIDDLENAME = "middleName"
    MIDDLENAMEDESC = "middleName desc"
    MOBILEPHONE = "mobilePhone"
    MOBILEPHONEDESC = "mobilePhone desc"
    OFFICELOCATION = "officeLocation"
    OFFICELOCATIONDESC = "officeLocation desc"
    ONPREMISESINFO = "onPremisesInfo"
    ONPREMISESINFODESC = "onPremisesInfo desc"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPOLICIESDESC = "passwordPolicies desc"
    PASSWORDPROFILE = "passwordProfile"
    PASSWORDPROFILEDESC = "passwordProfile desc"
    PREFERREDLANGUAGE = "preferredLanguage"
    PREFERREDLANGUAGEDESC = "preferredLanguage desc"
    PRIMARYROLE = "primaryRole"
    PRIMARYROLEDESC = "primaryRole desc"
    PROVISIONEDPLANS = "provisionedPlans"
    PROVISIONEDPLANSDESC = "provisionedPlans desc"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    REFRESHTOKENSVALIDFROMDATETIMEDESC = "refreshTokensValidFromDateTime desc"
    RESIDENCEADDRESS = "residenceAddress"
    RESIDENCEADDRESSDESC = "residenceAddress desc"
    SHOWINADDRESSLIST = "showInAddressList"
    SHOWINADDRESSLISTDESC = "showInAddressList desc"
    STUDENT = "student"
    STUDENTDESC = "student desc"
    SURNAME = "surname"
    SURNAMEDESC = "surname desc"
    TEACHER = "teacher"
    TEACHERDESC = "teacher desc"
    USAGELOCATION = "usageLocation"
    USAGELOCATIONDESC = "usageLocation desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"
    USERTYPE = "userType"
    USERTYPEDESC = "userType desc"

class Enum169(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    ADDRESS = "address"
    ADDRESSDESC = "address desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    EXTERNALPRINCIPALIDDESC = "externalPrincipalId desc"
    FAX = "fax"
    FAXDESC = "fax desc"
    HIGHESTGRADE = "highestGrade"
    HIGHESTGRADEDESC = "highestGrade desc"
    LOWESTGRADE = "lowestGrade"
    LOWESTGRADEDESC = "lowestGrade desc"
    PHONE = "phone"
    PHONEDESC = "phone desc"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALEMAILDESC = "principalEmail desc"
    PRINCIPALNAME = "principalName"
    PRINCIPALNAMEDESC = "principalName desc"
    SCHOOLNUMBER = "schoolNumber"
    SCHOOLNUMBERDESC = "schoolNumber desc"

class Enum170(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    ADDRESS = "address"
    CREATEDBY = "createdBy"
    EXTERNALID = "externalId"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    FAX = "fax"
    HIGHESTGRADE = "highestGrade"
    LOWESTGRADE = "lowestGrade"
    PHONE = "phone"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALNAME = "principalName"
    SCHOOLNUMBER = "schoolNumber"
    ADMINISTRATIVEUNIT = "administrativeUnit"
    CLASSES = "classes"
    USERS = "users"

class Enum171(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ADMINISTRATIVEUNIT = "administrativeUnit"
    CLASSES = "classes"
    USERS = "users"

class Enum172(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    ADDRESS = "address"
    ADDRESSDESC = "address desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    EXTERNALPRINCIPALIDDESC = "externalPrincipalId desc"
    FAX = "fax"
    FAXDESC = "fax desc"
    HIGHESTGRADE = "highestGrade"
    HIGHESTGRADEDESC = "highestGrade desc"
    LOWESTGRADE = "lowestGrade"
    LOWESTGRADEDESC = "lowestGrade desc"
    PHONE = "phone"
    PHONEDESC = "phone desc"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALEMAILDESC = "principalEmail desc"
    PRINCIPALNAME = "principalName"
    PRINCIPALNAMEDESC = "principalName desc"
    SCHOOLNUMBER = "schoolNumber"
    SCHOOLNUMBERDESC = "schoolNumber desc"

class Enum173(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    RELATEDCONTACTS = "relatedContacts"
    RELATEDCONTACTSDESC = "relatedContacts desc"
    ACCOUNTENABLED = "accountEnabled"
    ACCOUNTENABLEDDESC = "accountEnabled desc"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDLICENSESDESC = "assignedLicenses desc"
    ASSIGNEDPLANS = "assignedPlans"
    ASSIGNEDPLANSDESC = "assignedPlans desc"
    BUSINESSPHONES = "businessPhones"
    BUSINESSPHONESDESC = "businessPhones desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DEPARTMENT = "department"
    DEPARTMENTDESC = "department desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    GIVENNAME = "givenName"
    GIVENNAMEDESC = "givenName desc"
    MAIL = "mail"
    MAILDESC = "mail desc"
    MAILINGADDRESS = "mailingAddress"
    MAILINGADDRESSDESC = "mailingAddress desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    MIDDLENAME = "middleName"
    MIDDLENAMEDESC = "middleName desc"
    MOBILEPHONE = "mobilePhone"
    MOBILEPHONEDESC = "mobilePhone desc"
    OFFICELOCATION = "officeLocation"
    OFFICELOCATIONDESC = "officeLocation desc"
    ONPREMISESINFO = "onPremisesInfo"
    ONPREMISESINFODESC = "onPremisesInfo desc"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPOLICIESDESC = "passwordPolicies desc"
    PASSWORDPROFILE = "passwordProfile"
    PASSWORDPROFILEDESC = "passwordProfile desc"
    PREFERREDLANGUAGE = "preferredLanguage"
    PREFERREDLANGUAGEDESC = "preferredLanguage desc"
    PRIMARYROLE = "primaryRole"
    PRIMARYROLEDESC = "primaryRole desc"
    PROVISIONEDPLANS = "provisionedPlans"
    PROVISIONEDPLANSDESC = "provisionedPlans desc"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    REFRESHTOKENSVALIDFROMDATETIMEDESC = "refreshTokensValidFromDateTime desc"
    RESIDENCEADDRESS = "residenceAddress"
    RESIDENCEADDRESSDESC = "residenceAddress desc"
    SHOWINADDRESSLIST = "showInAddressList"
    SHOWINADDRESSLISTDESC = "showInAddressList desc"
    STUDENT = "student"
    STUDENTDESC = "student desc"
    SURNAME = "surname"
    SURNAMEDESC = "surname desc"
    TEACHER = "teacher"
    TEACHERDESC = "teacher desc"
    USAGELOCATION = "usageLocation"
    USAGELOCATIONDESC = "usageLocation desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"
    USERTYPE = "userType"
    USERTYPEDESC = "userType desc"

class Enum174(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RELATEDCONTACTS = "relatedContacts"
    ACCOUNTENABLED = "accountEnabled"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDPLANS = "assignedPlans"
    BUSINESSPHONES = "businessPhones"
    CREATEDBY = "createdBy"
    DEPARTMENT = "department"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    GIVENNAME = "givenName"
    MAIL = "mail"
    MAILINGADDRESS = "mailingAddress"
    MAILNICKNAME = "mailNickname"
    MIDDLENAME = "middleName"
    MOBILEPHONE = "mobilePhone"
    OFFICELOCATION = "officeLocation"
    ONPREMISESINFO = "onPremisesInfo"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPROFILE = "passwordProfile"
    PREFERREDLANGUAGE = "preferredLanguage"
    PRIMARYROLE = "primaryRole"
    PROVISIONEDPLANS = "provisionedPlans"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    RESIDENCEADDRESS = "residenceAddress"
    SHOWINADDRESSLIST = "showInAddressList"
    STUDENT = "student"
    SURNAME = "surname"
    TEACHER = "teacher"
    USAGELOCATION = "usageLocation"
    USERPRINCIPALNAME = "userPrincipalName"
    USERTYPE = "userType"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    SCHOOLS = "schools"
    TAUGHTCLASSES = "taughtClasses"
    USER = "user"

class Enum175(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    SCHOOLS = "schools"
    TAUGHTCLASSES = "taughtClasses"
    USER = "user"

class Enum176(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    RELATEDCONTACTS = "relatedContacts"
    RELATEDCONTACTSDESC = "relatedContacts desc"
    ACCOUNTENABLED = "accountEnabled"
    ACCOUNTENABLEDDESC = "accountEnabled desc"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDLICENSESDESC = "assignedLicenses desc"
    ASSIGNEDPLANS = "assignedPlans"
    ASSIGNEDPLANSDESC = "assignedPlans desc"
    BUSINESSPHONES = "businessPhones"
    BUSINESSPHONESDESC = "businessPhones desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DEPARTMENT = "department"
    DEPARTMENTDESC = "department desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    GIVENNAME = "givenName"
    GIVENNAMEDESC = "givenName desc"
    MAIL = "mail"
    MAILDESC = "mail desc"
    MAILINGADDRESS = "mailingAddress"
    MAILINGADDRESSDESC = "mailingAddress desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    MIDDLENAME = "middleName"
    MIDDLENAMEDESC = "middleName desc"
    MOBILEPHONE = "mobilePhone"
    MOBILEPHONEDESC = "mobilePhone desc"
    OFFICELOCATION = "officeLocation"
    OFFICELOCATIONDESC = "officeLocation desc"
    ONPREMISESINFO = "onPremisesInfo"
    ONPREMISESINFODESC = "onPremisesInfo desc"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPOLICIESDESC = "passwordPolicies desc"
    PASSWORDPROFILE = "passwordProfile"
    PASSWORDPROFILEDESC = "passwordProfile desc"
    PREFERREDLANGUAGE = "preferredLanguage"
    PREFERREDLANGUAGEDESC = "preferredLanguage desc"
    PRIMARYROLE = "primaryRole"
    PRIMARYROLEDESC = "primaryRole desc"
    PROVISIONEDPLANS = "provisionedPlans"
    PROVISIONEDPLANSDESC = "provisionedPlans desc"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    REFRESHTOKENSVALIDFROMDATETIMEDESC = "refreshTokensValidFromDateTime desc"
    RESIDENCEADDRESS = "residenceAddress"
    RESIDENCEADDRESSDESC = "residenceAddress desc"
    SHOWINADDRESSLIST = "showInAddressList"
    SHOWINADDRESSLISTDESC = "showInAddressList desc"
    STUDENT = "student"
    STUDENTDESC = "student desc"
    SURNAME = "surname"
    SURNAMEDESC = "surname desc"
    TEACHER = "teacher"
    TEACHERDESC = "teacher desc"
    USAGELOCATION = "usageLocation"
    USAGELOCATIONDESC = "usageLocation desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"
    USERTYPE = "userType"
    USERTYPEDESC = "userType desc"

class Enum177(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RELATEDCONTACTS = "relatedContacts"
    ACCOUNTENABLED = "accountEnabled"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDPLANS = "assignedPlans"
    BUSINESSPHONES = "businessPhones"
    CREATEDBY = "createdBy"
    DEPARTMENT = "department"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    GIVENNAME = "givenName"
    MAIL = "mail"
    MAILINGADDRESS = "mailingAddress"
    MAILNICKNAME = "mailNickname"
    MIDDLENAME = "middleName"
    MOBILEPHONE = "mobilePhone"
    OFFICELOCATION = "officeLocation"
    ONPREMISESINFO = "onPremisesInfo"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPROFILE = "passwordProfile"
    PREFERREDLANGUAGE = "preferredLanguage"
    PRIMARYROLE = "primaryRole"
    PROVISIONEDPLANS = "provisionedPlans"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    RESIDENCEADDRESS = "residenceAddress"
    SHOWINADDRESSLIST = "showInAddressList"
    STUDENT = "student"
    SURNAME = "surname"
    TEACHER = "teacher"
    USAGELOCATION = "usageLocation"
    USERPRINCIPALNAME = "userPrincipalName"
    USERTYPE = "userType"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    SCHOOLS = "schools"
    TAUGHTCLASSES = "taughtClasses"
    USER = "user"

class Enum178(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    SCHOOLS = "schools"
    TAUGHTCLASSES = "taughtClasses"
    USER = "user"

class Enum179(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ALLOWLATESUBMISSIONS = "allowLateSubmissions"
    ALLOWLATESUBMISSIONSDESC = "allowLateSubmissions desc"
    ALLOWSTUDENTSTOADDRESOURCESTOSUBMISSION = "allowStudentsToAddResourcesToSubmission"
    ALLOWSTUDENTSTOADDRESOURCESTOSUBMISSIONDESC = "allowStudentsToAddResourcesToSubmission desc"
    ASSIGNDATETIME = "assignDateTime"
    ASSIGNDATETIMEDESC = "assignDateTime desc"
    ASSIGNEDDATETIME = "assignedDateTime"
    ASSIGNEDDATETIMEDESC = "assignedDateTime desc"
    ASSIGNTO = "assignTo"
    ASSIGNTODESC = "assignTo desc"
    CLASSID = "classId"
    CLASSIDDESC = "classId desc"
    CLOSEDATETIME = "closeDateTime"
    CLOSEDATETIMEDESC = "closeDateTime desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    DUEDATETIME = "dueDateTime"
    DUEDATETIMEDESC = "dueDateTime desc"
    GRADING = "grading"
    GRADINGDESC = "grading desc"
    INSTRUCTIONS = "instructions"
    INSTRUCTIONSDESC = "instructions desc"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDBYDESC = "lastModifiedBy desc"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LASTMODIFIEDDATETIMEDESC = "lastModifiedDateTime desc"
    STATUS = "status"
    STATUSDESC = "status desc"

class Enum180(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ALLOWLATESUBMISSIONS = "allowLateSubmissions"
    ALLOWSTUDENTSTOADDRESOURCESTOSUBMISSION = "allowStudentsToAddResourcesToSubmission"
    ASSIGNDATETIME = "assignDateTime"
    ASSIGNEDDATETIME = "assignedDateTime"
    ASSIGNTO = "assignTo"
    CLASSID = "classId"
    CLOSEDATETIME = "closeDateTime"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DISPLAYNAME = "displayName"
    DUEDATETIME = "dueDateTime"
    GRADING = "grading"
    INSTRUCTIONS = "instructions"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    STATUS = "status"
    CATEGORIES = "categories"
    RESOURCES = "resources"
    RUBRIC = "rubric"
    SUBMISSIONS = "submissions"

class Enum181(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CATEGORIES = "categories"
    RESOURCES = "resources"
    RUBRIC = "rubric"
    SUBMISSIONS = "submissions"

class Enum182(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ALLOWLATESUBMISSIONS = "allowLateSubmissions"
    ALLOWSTUDENTSTOADDRESOURCESTOSUBMISSION = "allowStudentsToAddResourcesToSubmission"
    ASSIGNDATETIME = "assignDateTime"
    ASSIGNEDDATETIME = "assignedDateTime"
    ASSIGNTO = "assignTo"
    CLASSID = "classId"
    CLOSEDATETIME = "closeDateTime"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DISPLAYNAME = "displayName"
    DUEDATETIME = "dueDateTime"
    GRADING = "grading"
    INSTRUCTIONS = "instructions"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    STATUS = "status"
    CATEGORIES = "categories"
    RESOURCES = "resources"
    RUBRIC = "rubric"
    SUBMISSIONS = "submissions"

class Enum183(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CATEGORIES = "categories"
    RESOURCES = "resources"
    RUBRIC = "rubric"
    SUBMISSIONS = "submissions"

class Enum184(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"

class Enum185(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"

class Enum186(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"

class Enum187(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DISTRIBUTEFORSTUDENTWORK = "distributeForStudentWork"
    DISTRIBUTEFORSTUDENTWORKDESC = "distributeForStudentWork desc"
    RESOURCE = "resource"
    RESOURCEDESC = "resource desc"

class Enum188(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISTRIBUTEFORSTUDENTWORK = "distributeForStudentWork"
    RESOURCE = "resource"

class Enum189(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISTRIBUTEFORSTUDENTWORK = "distributeForStudentWork"
    RESOURCE = "resource"

class Enum190(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    GRADING = "grading"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LEVELS = "levels"
    QUALITIES = "qualities"

class Enum191(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    RECIPIENT = "recipient"
    RECIPIENTDESC = "recipient desc"
    RELEASEDBY = "releasedBy"
    RELEASEDBYDESC = "releasedBy desc"
    RELEASEDDATETIME = "releasedDateTime"
    RELEASEDDATETIMEDESC = "releasedDateTime desc"
    RESOURCESFOLDERURL = "resourcesFolderUrl"
    RESOURCESFOLDERURLDESC = "resourcesFolderUrl desc"
    RETURNEDBY = "returnedBy"
    RETURNEDBYDESC = "returnedBy desc"
    RETURNEDDATETIME = "returnedDateTime"
    RETURNEDDATETIMEDESC = "returnedDateTime desc"
    STATUS = "status"
    STATUSDESC = "status desc"
    SUBMITTEDBY = "submittedBy"
    SUBMITTEDBYDESC = "submittedBy desc"
    SUBMITTEDDATETIME = "submittedDateTime"
    SUBMITTEDDATETIMEDESC = "submittedDateTime desc"
    UNSUBMITTEDBY = "unsubmittedBy"
    UNSUBMITTEDBYDESC = "unsubmittedBy desc"
    UNSUBMITTEDDATETIME = "unsubmittedDateTime"
    UNSUBMITTEDDATETIMEDESC = "unsubmittedDateTime desc"

class Enum192(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RECIPIENT = "recipient"
    RELEASEDBY = "releasedBy"
    RELEASEDDATETIME = "releasedDateTime"
    RESOURCESFOLDERURL = "resourcesFolderUrl"
    RETURNEDBY = "returnedBy"
    RETURNEDDATETIME = "returnedDateTime"
    STATUS = "status"
    SUBMITTEDBY = "submittedBy"
    SUBMITTEDDATETIME = "submittedDateTime"
    UNSUBMITTEDBY = "unsubmittedBy"
    UNSUBMITTEDDATETIME = "unsubmittedDateTime"
    OUTCOMES = "outcomes"
    RESOURCES = "resources"
    SUBMITTEDRESOURCES = "submittedResources"

class Enum193(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    OUTCOMES = "outcomes"
    RESOURCES = "resources"
    SUBMITTEDRESOURCES = "submittedResources"

class Enum194(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RECIPIENT = "recipient"
    RELEASEDBY = "releasedBy"
    RELEASEDDATETIME = "releasedDateTime"
    RESOURCESFOLDERURL = "resourcesFolderUrl"
    RETURNEDBY = "returnedBy"
    RETURNEDDATETIME = "returnedDateTime"
    STATUS = "status"
    SUBMITTEDBY = "submittedBy"
    SUBMITTEDDATETIME = "submittedDateTime"
    UNSUBMITTEDBY = "unsubmittedBy"
    UNSUBMITTEDDATETIME = "unsubmittedDateTime"
    OUTCOMES = "outcomes"
    RESOURCES = "resources"
    SUBMITTEDRESOURCES = "submittedResources"

class Enum195(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    OUTCOMES = "outcomes"
    RESOURCES = "resources"
    SUBMITTEDRESOURCES = "submittedResources"

class Enum196(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDBYDESC = "lastModifiedBy desc"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LASTMODIFIEDDATETIMEDESC = "lastModifiedDateTime desc"

class Enum197(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"

class Enum198(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"

class Enum199(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ASSIGNMENTRESOURCEURL = "assignmentResourceUrl"
    ASSIGNMENTRESOURCEURLDESC = "assignmentResourceUrl desc"
    RESOURCE = "resource"
    RESOURCEDESC = "resource desc"

class Enum200(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ASSIGNMENTRESOURCEURL = "assignmentResourceUrl"
    RESOURCE = "resource"

class Enum201(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ASSIGNMENTRESOURCEURL = "assignmentResourceUrl"
    RESOURCE = "resource"

class Enum202(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ASSIGNMENTRESOURCEURL = "assignmentResourceUrl"
    ASSIGNMENTRESOURCEURLDESC = "assignmentResourceUrl desc"
    RESOURCE = "resource"
    RESOURCEDESC = "resource desc"

class Enum203(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ASSIGNMENTRESOURCEURL = "assignmentResourceUrl"
    RESOURCE = "resource"

class Enum204(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ASSIGNMENTRESOURCEURL = "assignmentResourceUrl"
    RESOURCE = "resource"

class Enum205(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CLASSCODE = "classCode"
    CLASSCODEDESC = "classCode desc"
    COURSE = "course"
    COURSEDESC = "course desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALNAME = "externalName"
    EXTERNALNAMEDESC = "externalName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    GRADE = "grade"
    GRADEDESC = "grade desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    TERM = "term"
    TERMDESC = "term desc"

class Enum206(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSCODE = "classCode"
    COURSE = "course"
    CREATEDBY = "createdBy"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALID = "externalId"
    EXTERNALNAME = "externalName"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    GRADE = "grade"
    MAILNICKNAME = "mailNickname"
    TERM = "term"
    ASSIGNMENTCATEGORIES = "assignmentCategories"
    ASSIGNMENTS = "assignments"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Enum207(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTCATEGORIES = "assignmentCategories"
    ASSIGNMENTS = "assignments"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Enum208(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CLASSCODE = "classCode"
    CLASSCODEDESC = "classCode desc"
    COURSE = "course"
    COURSEDESC = "course desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALNAME = "externalName"
    EXTERNALNAMEDESC = "externalName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    GRADE = "grade"
    GRADEDESC = "grade desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    TERM = "term"
    TERMDESC = "term desc"

class Enum209(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    GRADING = "grading"
    GRADINGDESC = "grading desc"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDBYDESC = "lastModifiedBy desc"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LASTMODIFIEDDATETIMEDESC = "lastModifiedDateTime desc"
    LEVELS = "levels"
    LEVELSDESC = "levels desc"
    QUALITIES = "qualities"
    QUALITIESDESC = "qualities desc"

class Enum210(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    GRADING = "grading"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LEVELS = "levels"
    QUALITIES = "qualities"

class Enum211(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    GRADING = "grading"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LEVELS = "levels"
    QUALITIES = "qualities"

class Enum212(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    ADDRESS = "address"
    ADDRESSDESC = "address desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    EXTERNALPRINCIPALIDDESC = "externalPrincipalId desc"
    FAX = "fax"
    FAXDESC = "fax desc"
    HIGHESTGRADE = "highestGrade"
    HIGHESTGRADEDESC = "highestGrade desc"
    LOWESTGRADE = "lowestGrade"
    LOWESTGRADEDESC = "lowestGrade desc"
    PHONE = "phone"
    PHONEDESC = "phone desc"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALEMAILDESC = "principalEmail desc"
    PRINCIPALNAME = "principalName"
    PRINCIPALNAMEDESC = "principalName desc"
    SCHOOLNUMBER = "schoolNumber"
    SCHOOLNUMBERDESC = "schoolNumber desc"

class Enum213(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    ADDRESS = "address"
    CREATEDBY = "createdBy"
    EXTERNALID = "externalId"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    FAX = "fax"
    HIGHESTGRADE = "highestGrade"
    LOWESTGRADE = "lowestGrade"
    PHONE = "phone"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALNAME = "principalName"
    SCHOOLNUMBER = "schoolNumber"
    ADMINISTRATIVEUNIT = "administrativeUnit"
    CLASSES = "classes"
    USERS = "users"

class Enum214(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ADMINISTRATIVEUNIT = "administrativeUnit"
    CLASSES = "classes"
    USERS = "users"

class Enum215(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    ADDRESS = "address"
    ADDRESSDESC = "address desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    EXTERNALPRINCIPALIDDESC = "externalPrincipalId desc"
    FAX = "fax"
    FAXDESC = "fax desc"
    HIGHESTGRADE = "highestGrade"
    HIGHESTGRADEDESC = "highestGrade desc"
    LOWESTGRADE = "lowestGrade"
    LOWESTGRADEDESC = "lowestGrade desc"
    PHONE = "phone"
    PHONEDESC = "phone desc"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALEMAILDESC = "principalEmail desc"
    PRINCIPALNAME = "principalName"
    PRINCIPALNAMEDESC = "principalName desc"
    SCHOOLNUMBER = "schoolNumber"
    SCHOOLNUMBERDESC = "schoolNumber desc"

class Enum216(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CLASSCODE = "classCode"
    CLASSCODEDESC = "classCode desc"
    COURSE = "course"
    COURSEDESC = "course desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALNAME = "externalName"
    EXTERNALNAMEDESC = "externalName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    GRADE = "grade"
    GRADEDESC = "grade desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    TERM = "term"
    TERMDESC = "term desc"

class Enum217(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSCODE = "classCode"
    COURSE = "course"
    CREATEDBY = "createdBy"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALID = "externalId"
    EXTERNALNAME = "externalName"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    GRADE = "grade"
    MAILNICKNAME = "mailNickname"
    TERM = "term"
    ASSIGNMENTCATEGORIES = "assignmentCategories"
    ASSIGNMENTS = "assignments"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Enum218(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTCATEGORIES = "assignmentCategories"
    ASSIGNMENTS = "assignments"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Enum219(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CLASSCODE = "classCode"
    CLASSCODEDESC = "classCode desc"
    COURSE = "course"
    COURSEDESC = "course desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALNAME = "externalName"
    EXTERNALNAMEDESC = "externalName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    GRADE = "grade"
    GRADEDESC = "grade desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    TERM = "term"
    TERMDESC = "term desc"

class Enum220(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETEDDATETIME = "deletedDateTime"
    SIGNINACTIVITY = "signInActivity"
    ACCOUNTENABLED = "accountEnabled"
    AGEGROUP = "ageGroup"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDPLANS = "assignedPlans"
    BUSINESSPHONES = "businessPhones"
    CITY = "city"
    COMPANYNAME = "companyName"
    CONSENTPROVIDEDFORMINOR = "consentProvidedForMinor"
    COUNTRY = "country"
    CREATEDDATETIME = "createdDateTime"
    CREATIONTYPE = "creationType"
    DEPARTMENT = "department"
    DEVICEKEYS = "deviceKeys"
    DISPLAYNAME = "displayName"
    EMPLOYEEHIREDATE = "employeeHireDate"
    EMPLOYEEID = "employeeId"
    EMPLOYEEORGDATA = "employeeOrgData"
    EMPLOYEETYPE = "employeeType"
    EXTERNALUSERSTATE = "externalUserState"
    EXTERNALUSERSTATECHANGEDATETIME = "externalUserStateChangeDateTime"
    FAXNUMBER = "faxNumber"
    GIVENNAME = "givenName"
    IDENTITIES = "identities"
    IMADDRESSES = "imAddresses"
    INFOCATALOGS = "infoCatalogs"
    ISRESOURCEACCOUNT = "isResourceAccount"
    JOBTITLE = "jobTitle"
    LASTPASSWORDCHANGEDATETIME = "lastPasswordChangeDateTime"
    LEGALAGEGROUPCLASSIFICATION = "legalAgeGroupClassification"
    LICENSEASSIGNMENTSTATES = "licenseAssignmentStates"
    MAIL = "mail"
    MAILNICKNAME = "mailNickname"
    MOBILEPHONE = "mobilePhone"
    OFFICELOCATION = "officeLocation"
    ONPREMISESDISTINGUISHEDNAME = "onPremisesDistinguishedName"
    ONPREMISESDOMAINNAME = "onPremisesDomainName"
    ONPREMISESEXTENSIONATTRIBUTES = "onPremisesExtensionAttributes"
    ONPREMISESIMMUTABLEID = "onPremisesImmutableId"
    ONPREMISESLASTSYNCDATETIME = "onPremisesLastSyncDateTime"
    ONPREMISESPROVISIONINGERRORS = "onPremisesProvisioningErrors"
    ONPREMISESSAMACCOUNTNAME = "onPremisesSamAccountName"
    ONPREMISESSECURITYIDENTIFIER = "onPremisesSecurityIdentifier"
    ONPREMISESSYNCENABLED = "onPremisesSyncEnabled"
    ONPREMISESUSERPRINCIPALNAME = "onPremisesUserPrincipalName"
    OTHERMAILS = "otherMails"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPROFILE = "passwordProfile"
    POSTALCODE = "postalCode"
    PREFERREDDATALOCATION = "preferredDataLocation"
    PREFERREDLANGUAGE = "preferredLanguage"
    PROVISIONEDPLANS = "provisionedPlans"
    PROXYADDRESSES = "proxyAddresses"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    SHOWINADDRESSLIST = "showInAddressList"
    SIGNINSESSIONSVALIDFROMDATETIME = "signInSessionsValidFromDateTime"
    STATE = "state"
    STREETADDRESS = "streetAddress"
    SURNAME = "surname"
    USAGELOCATION = "usageLocation"
    USERPRINCIPALNAME = "userPrincipalName"
    USERTYPE = "userType"
    MAILBOXSETTINGS = "mailboxSettings"
    DEVICEENROLLMENTLIMIT = "deviceEnrollmentLimit"
    ABOUTME = "aboutMe"
    BIRTHDAY = "birthday"
    HIREDATE = "hireDate"
    INTERESTS = "interests"
    MYSITE = "mySite"
    PASTPROJECTS = "pastProjects"
    PREFERREDNAME = "preferredName"
    RESPONSIBILITIES = "responsibilities"
    SCHOOLS = "schools"
    SKILLS = "skills"
    ANALYTICS = "analytics"
    INFORMATIONPROTECTION = "informationProtection"
    APPROLEASSIGNMENTS = "appRoleAssignments"
    CREATEDOBJECTS = "createdObjects"
    DIRECTREPORTS = "directReports"
    LICENSEDETAILS = "licenseDetails"
    MANAGER = "manager"
    MEMBEROF = "memberOf"
    OWNEDDEVICES = "ownedDevices"
    OWNEDOBJECTS = "ownedObjects"
    REGISTEREDDEVICES = "registeredDevices"
    SCOPEDROLEMEMBEROF = "scopedRoleMemberOf"
    TRANSITIVEMEMBEROF = "transitiveMemberOf"
    CALENDAR = "calendar"
    CALENDARGROUPS = "calendarGroups"
    CALENDARS = "calendars"
    CALENDARVIEW = "calendarView"
    CONTACTFOLDERS = "contactFolders"
    CONTACTS = "contacts"
    EVENTS = "events"
    INFERENCECLASSIFICATION = "inferenceClassification"
    JOINEDGROUPS = "joinedGroups"
    MAILFOLDERS = "mailFolders"
    MESSAGES = "messages"
    OUTLOOK = "outlook"
    PEOPLE = "people"
    PHOTO = "photo"
    PHOTOS = "photos"
    DRIVE = "drive"
    DRIVES = "drives"
    FOLLOWEDSITES = "followedSites"
    EXTENSIONS = "extensions"
    APPCONSENTREQUESTSFORAPPROVAL = "appConsentRequestsForApproval"
    APPROVALS = "approvals"
    PENDINGACCESSREVIEWINSTANCES = "pendingAccessReviewInstances"
    AGREEMENTACCEPTANCES = "agreementAcceptances"
    DEVICEENROLLMENTCONFIGURATIONS = "deviceEnrollmentConfigurations"
    MANAGEDDEVICES = "managedDevices"
    MANAGEDAPPREGISTRATIONS = "managedAppRegistrations"
    WINDOWSINFORMATIONPROTECTIONDEVICEREGISTRATIONS = "windowsInformationProtectionDeviceRegistrations"
    DEVICEMANAGEMENTTROUBLESHOOTINGEVENTS = "deviceManagementTroubleshootingEvents"
    MOBILEAPPINTENTANDSTATES = "mobileAppIntentAndStates"
    MOBILEAPPTROUBLESHOOTINGEVENTS = "mobileAppTroubleshootingEvents"
    NOTIFICATIONS = "notifications"
    PLANNER = "planner"
    INSIGHTS = "insights"
    SETTINGS = "settings"
    ONENOTE = "onenote"
    PROFILE = "profile"
    ACTIVITIES = "activities"
    DEVICES = "devices"
    ONLINEMEETINGS = "onlineMeetings"
    PRESENCE = "presence"
    AUTHENTICATION = "authentication"
    CHATS = "chats"
    JOINEDTEAMS = "joinedTeams"
    TEAMWORK = "teamwork"
    TODO = "todo"

class Enum221(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ANALYTICS = "analytics"
    INFORMATIONPROTECTION = "informationProtection"
    APPROLEASSIGNMENTS = "appRoleAssignments"
    CREATEDOBJECTS = "createdObjects"
    DIRECTREPORTS = "directReports"
    LICENSEDETAILS = "licenseDetails"
    MANAGER = "manager"
    MEMBEROF = "memberOf"
    OWNEDDEVICES = "ownedDevices"
    OWNEDOBJECTS = "ownedObjects"
    REGISTEREDDEVICES = "registeredDevices"
    SCOPEDROLEMEMBEROF = "scopedRoleMemberOf"
    TRANSITIVEMEMBEROF = "transitiveMemberOf"
    CALENDAR = "calendar"
    CALENDARGROUPS = "calendarGroups"
    CALENDARS = "calendars"
    CALENDARVIEW = "calendarView"
    CONTACTFOLDERS = "contactFolders"
    CONTACTS = "contacts"
    EVENTS = "events"
    INFERENCECLASSIFICATION = "inferenceClassification"
    JOINEDGROUPS = "joinedGroups"
    MAILFOLDERS = "mailFolders"
    MESSAGES = "messages"
    OUTLOOK = "outlook"
    PEOPLE = "people"
    PHOTO = "photo"
    PHOTOS = "photos"
    DRIVE = "drive"
    DRIVES = "drives"
    FOLLOWEDSITES = "followedSites"
    EXTENSIONS = "extensions"
    APPCONSENTREQUESTSFORAPPROVAL = "appConsentRequestsForApproval"
    APPROVALS = "approvals"
    PENDINGACCESSREVIEWINSTANCES = "pendingAccessReviewInstances"
    AGREEMENTACCEPTANCES = "agreementAcceptances"
    DEVICEENROLLMENTCONFIGURATIONS = "deviceEnrollmentConfigurations"
    MANAGEDDEVICES = "managedDevices"
    MANAGEDAPPREGISTRATIONS = "managedAppRegistrations"
    WINDOWSINFORMATIONPROTECTIONDEVICEREGISTRATIONS = "windowsInformationProtectionDeviceRegistrations"
    DEVICEMANAGEMENTTROUBLESHOOTINGEVENTS = "deviceManagementTroubleshootingEvents"
    MOBILEAPPINTENTANDSTATES = "mobileAppIntentAndStates"
    MOBILEAPPTROUBLESHOOTINGEVENTS = "mobileAppTroubleshootingEvents"
    NOTIFICATIONS = "notifications"
    PLANNER = "planner"
    INSIGHTS = "insights"
    SETTINGS = "settings"
    ONENOTE = "onenote"
    PROFILE = "profile"
    ACTIVITIES = "activities"
    DEVICES = "devices"
    ONLINEMEETINGS = "onlineMeetings"
    PRESENCE = "presence"
    AUTHENTICATION = "authentication"
    CHATS = "chats"
    JOINEDTEAMS = "joinedTeams"
    TEAMWORK = "teamwork"
    TODO = "todo"

class Enum222(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    ADDRESS = "address"
    ADDRESSDESC = "address desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    EXTERNALPRINCIPALIDDESC = "externalPrincipalId desc"
    FAX = "fax"
    FAXDESC = "fax desc"
    HIGHESTGRADE = "highestGrade"
    HIGHESTGRADEDESC = "highestGrade desc"
    LOWESTGRADE = "lowestGrade"
    LOWESTGRADEDESC = "lowestGrade desc"
    PHONE = "phone"
    PHONEDESC = "phone desc"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALEMAILDESC = "principalEmail desc"
    PRINCIPALNAME = "principalName"
    PRINCIPALNAMEDESC = "principalName desc"
    SCHOOLNUMBER = "schoolNumber"
    SCHOOLNUMBERDESC = "schoolNumber desc"

class Enum223(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    ADDRESS = "address"
    CREATEDBY = "createdBy"
    EXTERNALID = "externalId"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    FAX = "fax"
    HIGHESTGRADE = "highestGrade"
    LOWESTGRADE = "lowestGrade"
    PHONE = "phone"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALNAME = "principalName"
    SCHOOLNUMBER = "schoolNumber"
    ADMINISTRATIVEUNIT = "administrativeUnit"
    CLASSES = "classes"
    USERS = "users"

class Enum224(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ADMINISTRATIVEUNIT = "administrativeUnit"
    CLASSES = "classes"
    USERS = "users"

class Enum225(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    ADDRESS = "address"
    CREATEDBY = "createdBy"
    EXTERNALID = "externalId"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    FAX = "fax"
    HIGHESTGRADE = "highestGrade"
    LOWESTGRADE = "lowestGrade"
    PHONE = "phone"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALNAME = "principalName"
    SCHOOLNUMBER = "schoolNumber"
    ADMINISTRATIVEUNIT = "administrativeUnit"
    CLASSES = "classes"
    USERS = "users"

class Enum226(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ADMINISTRATIVEUNIT = "administrativeUnit"
    CLASSES = "classes"
    USERS = "users"

class Enum227(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETEDDATETIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    VISIBILITY = "visibility"
    MEMBERS = "members"
    SCOPEDROLEMEMBERS = "scopedRoleMembers"
    EXTENSIONS = "extensions"

class Enum228(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    MEMBERS = "members"
    SCOPEDROLEMEMBERS = "scopedRoleMembers"
    EXTENSIONS = "extensions"

class Enum229(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CLASSCODE = "classCode"
    CLASSCODEDESC = "classCode desc"
    COURSE = "course"
    COURSEDESC = "course desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALNAME = "externalName"
    EXTERNALNAMEDESC = "externalName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    GRADE = "grade"
    GRADEDESC = "grade desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    TERM = "term"
    TERMDESC = "term desc"

class Enum230(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSCODE = "classCode"
    COURSE = "course"
    CREATEDBY = "createdBy"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALID = "externalId"
    EXTERNALNAME = "externalName"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    GRADE = "grade"
    MAILNICKNAME = "mailNickname"
    TERM = "term"
    ASSIGNMENTCATEGORIES = "assignmentCategories"
    ASSIGNMENTS = "assignments"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Enum231(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTCATEGORIES = "assignmentCategories"
    ASSIGNMENTS = "assignments"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Enum232(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CLASSCODE = "classCode"
    CLASSCODEDESC = "classCode desc"
    COURSE = "course"
    COURSEDESC = "course desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALNAME = "externalName"
    EXTERNALNAMEDESC = "externalName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    GRADE = "grade"
    GRADEDESC = "grade desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    TERM = "term"
    TERMDESC = "term desc"

class Enum233(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    RELATEDCONTACTS = "relatedContacts"
    RELATEDCONTACTSDESC = "relatedContacts desc"
    ACCOUNTENABLED = "accountEnabled"
    ACCOUNTENABLEDDESC = "accountEnabled desc"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDLICENSESDESC = "assignedLicenses desc"
    ASSIGNEDPLANS = "assignedPlans"
    ASSIGNEDPLANSDESC = "assignedPlans desc"
    BUSINESSPHONES = "businessPhones"
    BUSINESSPHONESDESC = "businessPhones desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DEPARTMENT = "department"
    DEPARTMENTDESC = "department desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    GIVENNAME = "givenName"
    GIVENNAMEDESC = "givenName desc"
    MAIL = "mail"
    MAILDESC = "mail desc"
    MAILINGADDRESS = "mailingAddress"
    MAILINGADDRESSDESC = "mailingAddress desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    MIDDLENAME = "middleName"
    MIDDLENAMEDESC = "middleName desc"
    MOBILEPHONE = "mobilePhone"
    MOBILEPHONEDESC = "mobilePhone desc"
    OFFICELOCATION = "officeLocation"
    OFFICELOCATIONDESC = "officeLocation desc"
    ONPREMISESINFO = "onPremisesInfo"
    ONPREMISESINFODESC = "onPremisesInfo desc"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPOLICIESDESC = "passwordPolicies desc"
    PASSWORDPROFILE = "passwordProfile"
    PASSWORDPROFILEDESC = "passwordProfile desc"
    PREFERREDLANGUAGE = "preferredLanguage"
    PREFERREDLANGUAGEDESC = "preferredLanguage desc"
    PRIMARYROLE = "primaryRole"
    PRIMARYROLEDESC = "primaryRole desc"
    PROVISIONEDPLANS = "provisionedPlans"
    PROVISIONEDPLANSDESC = "provisionedPlans desc"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    REFRESHTOKENSVALIDFROMDATETIMEDESC = "refreshTokensValidFromDateTime desc"
    RESIDENCEADDRESS = "residenceAddress"
    RESIDENCEADDRESSDESC = "residenceAddress desc"
    SHOWINADDRESSLIST = "showInAddressList"
    SHOWINADDRESSLISTDESC = "showInAddressList desc"
    STUDENT = "student"
    STUDENTDESC = "student desc"
    SURNAME = "surname"
    SURNAMEDESC = "surname desc"
    TEACHER = "teacher"
    TEACHERDESC = "teacher desc"
    USAGELOCATION = "usageLocation"
    USAGELOCATIONDESC = "usageLocation desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"
    USERTYPE = "userType"
    USERTYPEDESC = "userType desc"

class Enum234(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RELATEDCONTACTS = "relatedContacts"
    ACCOUNTENABLED = "accountEnabled"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDPLANS = "assignedPlans"
    BUSINESSPHONES = "businessPhones"
    CREATEDBY = "createdBy"
    DEPARTMENT = "department"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    GIVENNAME = "givenName"
    MAIL = "mail"
    MAILINGADDRESS = "mailingAddress"
    MAILNICKNAME = "mailNickname"
    MIDDLENAME = "middleName"
    MOBILEPHONE = "mobilePhone"
    OFFICELOCATION = "officeLocation"
    ONPREMISESINFO = "onPremisesInfo"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPROFILE = "passwordProfile"
    PREFERREDLANGUAGE = "preferredLanguage"
    PRIMARYROLE = "primaryRole"
    PROVISIONEDPLANS = "provisionedPlans"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    RESIDENCEADDRESS = "residenceAddress"
    SHOWINADDRESSLIST = "showInAddressList"
    STUDENT = "student"
    SURNAME = "surname"
    TEACHER = "teacher"
    USAGELOCATION = "usageLocation"
    USERPRINCIPALNAME = "userPrincipalName"
    USERTYPE = "userType"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    SCHOOLS = "schools"
    TAUGHTCLASSES = "taughtClasses"
    USER = "user"

class Enum235(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    SCHOOLS = "schools"
    TAUGHTCLASSES = "taughtClasses"
    USER = "user"

class Enum236(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    RELATEDCONTACTS = "relatedContacts"
    RELATEDCONTACTSDESC = "relatedContacts desc"
    ACCOUNTENABLED = "accountEnabled"
    ACCOUNTENABLEDDESC = "accountEnabled desc"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDLICENSESDESC = "assignedLicenses desc"
    ASSIGNEDPLANS = "assignedPlans"
    ASSIGNEDPLANSDESC = "assignedPlans desc"
    BUSINESSPHONES = "businessPhones"
    BUSINESSPHONESDESC = "businessPhones desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DEPARTMENT = "department"
    DEPARTMENTDESC = "department desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    GIVENNAME = "givenName"
    GIVENNAMEDESC = "givenName desc"
    MAIL = "mail"
    MAILDESC = "mail desc"
    MAILINGADDRESS = "mailingAddress"
    MAILINGADDRESSDESC = "mailingAddress desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    MIDDLENAME = "middleName"
    MIDDLENAMEDESC = "middleName desc"
    MOBILEPHONE = "mobilePhone"
    MOBILEPHONEDESC = "mobilePhone desc"
    OFFICELOCATION = "officeLocation"
    OFFICELOCATIONDESC = "officeLocation desc"
    ONPREMISESINFO = "onPremisesInfo"
    ONPREMISESINFODESC = "onPremisesInfo desc"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPOLICIESDESC = "passwordPolicies desc"
    PASSWORDPROFILE = "passwordProfile"
    PASSWORDPROFILEDESC = "passwordProfile desc"
    PREFERREDLANGUAGE = "preferredLanguage"
    PREFERREDLANGUAGEDESC = "preferredLanguage desc"
    PRIMARYROLE = "primaryRole"
    PRIMARYROLEDESC = "primaryRole desc"
    PROVISIONEDPLANS = "provisionedPlans"
    PROVISIONEDPLANSDESC = "provisionedPlans desc"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    REFRESHTOKENSVALIDFROMDATETIMEDESC = "refreshTokensValidFromDateTime desc"
    RESIDENCEADDRESS = "residenceAddress"
    RESIDENCEADDRESSDESC = "residenceAddress desc"
    SHOWINADDRESSLIST = "showInAddressList"
    SHOWINADDRESSLISTDESC = "showInAddressList desc"
    STUDENT = "student"
    STUDENTDESC = "student desc"
    SURNAME = "surname"
    SURNAMEDESC = "surname desc"
    TEACHER = "teacher"
    TEACHERDESC = "teacher desc"
    USAGELOCATION = "usageLocation"
    USAGELOCATIONDESC = "usageLocation desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"
    USERTYPE = "userType"
    USERTYPEDESC = "userType desc"

class Enum237(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DATAPROVIDER = "dataProvider"
    DATAPROVIDERDESC = "dataProvider desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXPIRATIONDATE = "expirationDate"
    EXPIRATIONDATEDESC = "expirationDate desc"
    HANDLESPECIALCHARACTERCONSTRAINT = "handleSpecialCharacterConstraint"
    HANDLESPECIALCHARACTERCONSTRAINTDESC = "handleSpecialCharacterConstraint desc"
    IDENTITYSYNCHRONIZATIONCONFIGURATION = "identitySynchronizationConfiguration"
    IDENTITYSYNCHRONIZATIONCONFIGURATIONDESC = "identitySynchronizationConfiguration desc"
    LICENSESTOASSIGN = "licensesToAssign"
    LICENSESTOASSIGNDESC = "licensesToAssign desc"
    STATE = "state"
    STATEDESC = "state desc"

class Enum238(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DATAPROVIDER = "dataProvider"
    DISPLAYNAME = "displayName"
    EXPIRATIONDATE = "expirationDate"
    HANDLESPECIALCHARACTERCONSTRAINT = "handleSpecialCharacterConstraint"
    IDENTITYSYNCHRONIZATIONCONFIGURATION = "identitySynchronizationConfiguration"
    LICENSESTOASSIGN = "licensesToAssign"
    STATE = "state"
    ERRORS = "errors"
    PROFILESTATUS = "profileStatus"

class Enum239(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ERRORS = "errors"
    PROFILESTATUS = "profileStatus"

class Enum240(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DATAPROVIDER = "dataProvider"
    DISPLAYNAME = "displayName"
    EXPIRATIONDATE = "expirationDate"
    HANDLESPECIALCHARACTERCONSTRAINT = "handleSpecialCharacterConstraint"
    IDENTITYSYNCHRONIZATIONCONFIGURATION = "identitySynchronizationConfiguration"
    LICENSESTOASSIGN = "licensesToAssign"
    STATE = "state"
    ERRORS = "errors"
    PROFILESTATUS = "profileStatus"

class Enum241(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ERRORS = "errors"
    PROFILESTATUS = "profileStatus"

class Enum242(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ENTRYTYPE = "entryType"
    ENTRYTYPEDESC = "entryType desc"
    ERRORCODE = "errorCode"
    ERRORCODEDESC = "errorCode desc"
    ERRORMESSAGE = "errorMessage"
    ERRORMESSAGEDESC = "errorMessage desc"
    JOININGVALUE = "joiningValue"
    JOININGVALUEDESC = "joiningValue desc"
    RECORDEDDATETIME = "recordedDateTime"
    RECORDEDDATETIMEDESC = "recordedDateTime desc"
    REPORTABLEIDENTIFIER = "reportableIdentifier"
    REPORTABLEIDENTIFIERDESC = "reportableIdentifier desc"

class Enum243(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ENTRYTYPE = "entryType"
    ERRORCODE = "errorCode"
    ERRORMESSAGE = "errorMessage"
    JOININGVALUE = "joiningValue"
    RECORDEDDATETIME = "recordedDateTime"
    REPORTABLEIDENTIFIER = "reportableIdentifier"

class Enum244(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ENTRYTYPE = "entryType"
    ERRORCODE = "errorCode"
    ERRORMESSAGE = "errorMessage"
    JOININGVALUE = "joiningValue"
    RECORDEDDATETIME = "recordedDateTime"
    REPORTABLEIDENTIFIER = "reportableIdentifier"

class Enum245(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    LASTSYNCHRONIZATIONDATETIME = "lastSynchronizationDateTime"
    STATUS = "status"

class Enum246(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    RELATEDCONTACTS = "relatedContacts"
    RELATEDCONTACTSDESC = "relatedContacts desc"
    ACCOUNTENABLED = "accountEnabled"
    ACCOUNTENABLEDDESC = "accountEnabled desc"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDLICENSESDESC = "assignedLicenses desc"
    ASSIGNEDPLANS = "assignedPlans"
    ASSIGNEDPLANSDESC = "assignedPlans desc"
    BUSINESSPHONES = "businessPhones"
    BUSINESSPHONESDESC = "businessPhones desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DEPARTMENT = "department"
    DEPARTMENTDESC = "department desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    GIVENNAME = "givenName"
    GIVENNAMEDESC = "givenName desc"
    MAIL = "mail"
    MAILDESC = "mail desc"
    MAILINGADDRESS = "mailingAddress"
    MAILINGADDRESSDESC = "mailingAddress desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    MIDDLENAME = "middleName"
    MIDDLENAMEDESC = "middleName desc"
    MOBILEPHONE = "mobilePhone"
    MOBILEPHONEDESC = "mobilePhone desc"
    OFFICELOCATION = "officeLocation"
    OFFICELOCATIONDESC = "officeLocation desc"
    ONPREMISESINFO = "onPremisesInfo"
    ONPREMISESINFODESC = "onPremisesInfo desc"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPOLICIESDESC = "passwordPolicies desc"
    PASSWORDPROFILE = "passwordProfile"
    PASSWORDPROFILEDESC = "passwordProfile desc"
    PREFERREDLANGUAGE = "preferredLanguage"
    PREFERREDLANGUAGEDESC = "preferredLanguage desc"
    PRIMARYROLE = "primaryRole"
    PRIMARYROLEDESC = "primaryRole desc"
    PROVISIONEDPLANS = "provisionedPlans"
    PROVISIONEDPLANSDESC = "provisionedPlans desc"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    REFRESHTOKENSVALIDFROMDATETIMEDESC = "refreshTokensValidFromDateTime desc"
    RESIDENCEADDRESS = "residenceAddress"
    RESIDENCEADDRESSDESC = "residenceAddress desc"
    SHOWINADDRESSLIST = "showInAddressList"
    SHOWINADDRESSLISTDESC = "showInAddressList desc"
    STUDENT = "student"
    STUDENTDESC = "student desc"
    SURNAME = "surname"
    SURNAMEDESC = "surname desc"
    TEACHER = "teacher"
    TEACHERDESC = "teacher desc"
    USAGELOCATION = "usageLocation"
    USAGELOCATIONDESC = "usageLocation desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"
    USERTYPE = "userType"
    USERTYPEDESC = "userType desc"

class Enum247(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RELATEDCONTACTS = "relatedContacts"
    ACCOUNTENABLED = "accountEnabled"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDPLANS = "assignedPlans"
    BUSINESSPHONES = "businessPhones"
    CREATEDBY = "createdBy"
    DEPARTMENT = "department"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    GIVENNAME = "givenName"
    MAIL = "mail"
    MAILINGADDRESS = "mailingAddress"
    MAILNICKNAME = "mailNickname"
    MIDDLENAME = "middleName"
    MOBILEPHONE = "mobilePhone"
    OFFICELOCATION = "officeLocation"
    ONPREMISESINFO = "onPremisesInfo"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPROFILE = "passwordProfile"
    PREFERREDLANGUAGE = "preferredLanguage"
    PRIMARYROLE = "primaryRole"
    PROVISIONEDPLANS = "provisionedPlans"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    RESIDENCEADDRESS = "residenceAddress"
    SHOWINADDRESSLIST = "showInAddressList"
    STUDENT = "student"
    SURNAME = "surname"
    TEACHER = "teacher"
    USAGELOCATION = "usageLocation"
    USERPRINCIPALNAME = "userPrincipalName"
    USERTYPE = "userType"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    SCHOOLS = "schools"
    TAUGHTCLASSES = "taughtClasses"
    USER = "user"

class Enum248(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    SCHOOLS = "schools"
    TAUGHTCLASSES = "taughtClasses"
    USER = "user"

class Enum249(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RELATEDCONTACTS = "relatedContacts"
    ACCOUNTENABLED = "accountEnabled"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDPLANS = "assignedPlans"
    BUSINESSPHONES = "businessPhones"
    CREATEDBY = "createdBy"
    DEPARTMENT = "department"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    GIVENNAME = "givenName"
    MAIL = "mail"
    MAILINGADDRESS = "mailingAddress"
    MAILNICKNAME = "mailNickname"
    MIDDLENAME = "middleName"
    MOBILEPHONE = "mobilePhone"
    OFFICELOCATION = "officeLocation"
    ONPREMISESINFO = "onPremisesInfo"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPROFILE = "passwordProfile"
    PREFERREDLANGUAGE = "preferredLanguage"
    PRIMARYROLE = "primaryRole"
    PROVISIONEDPLANS = "provisionedPlans"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    RESIDENCEADDRESS = "residenceAddress"
    SHOWINADDRESSLIST = "showInAddressList"
    STUDENT = "student"
    SURNAME = "surname"
    TEACHER = "teacher"
    USAGELOCATION = "usageLocation"
    USERPRINCIPALNAME = "userPrincipalName"
    USERTYPE = "userType"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    SCHOOLS = "schools"
    TAUGHTCLASSES = "taughtClasses"
    USER = "user"

class Enum250(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    SCHOOLS = "schools"
    TAUGHTCLASSES = "taughtClasses"
    USER = "user"

class Enum251(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ALLOWLATESUBMISSIONS = "allowLateSubmissions"
    ALLOWLATESUBMISSIONSDESC = "allowLateSubmissions desc"
    ALLOWSTUDENTSTOADDRESOURCESTOSUBMISSION = "allowStudentsToAddResourcesToSubmission"
    ALLOWSTUDENTSTOADDRESOURCESTOSUBMISSIONDESC = "allowStudentsToAddResourcesToSubmission desc"
    ASSIGNDATETIME = "assignDateTime"
    ASSIGNDATETIMEDESC = "assignDateTime desc"
    ASSIGNEDDATETIME = "assignedDateTime"
    ASSIGNEDDATETIMEDESC = "assignedDateTime desc"
    ASSIGNTO = "assignTo"
    ASSIGNTODESC = "assignTo desc"
    CLASSID = "classId"
    CLASSIDDESC = "classId desc"
    CLOSEDATETIME = "closeDateTime"
    CLOSEDATETIMEDESC = "closeDateTime desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    DUEDATETIME = "dueDateTime"
    DUEDATETIMEDESC = "dueDateTime desc"
    GRADING = "grading"
    GRADINGDESC = "grading desc"
    INSTRUCTIONS = "instructions"
    INSTRUCTIONSDESC = "instructions desc"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDBYDESC = "lastModifiedBy desc"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LASTMODIFIEDDATETIMEDESC = "lastModifiedDateTime desc"
    STATUS = "status"
    STATUSDESC = "status desc"

class Enum252(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ALLOWLATESUBMISSIONS = "allowLateSubmissions"
    ALLOWSTUDENTSTOADDRESOURCESTOSUBMISSION = "allowStudentsToAddResourcesToSubmission"
    ASSIGNDATETIME = "assignDateTime"
    ASSIGNEDDATETIME = "assignedDateTime"
    ASSIGNTO = "assignTo"
    CLASSID = "classId"
    CLOSEDATETIME = "closeDateTime"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DISPLAYNAME = "displayName"
    DUEDATETIME = "dueDateTime"
    GRADING = "grading"
    INSTRUCTIONS = "instructions"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    STATUS = "status"
    CATEGORIES = "categories"
    RESOURCES = "resources"
    RUBRIC = "rubric"
    SUBMISSIONS = "submissions"

class Enum253(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CATEGORIES = "categories"
    RESOURCES = "resources"
    RUBRIC = "rubric"
    SUBMISSIONS = "submissions"

class Enum254(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ALLOWLATESUBMISSIONS = "allowLateSubmissions"
    ALLOWSTUDENTSTOADDRESOURCESTOSUBMISSION = "allowStudentsToAddResourcesToSubmission"
    ASSIGNDATETIME = "assignDateTime"
    ASSIGNEDDATETIME = "assignedDateTime"
    ASSIGNTO = "assignTo"
    CLASSID = "classId"
    CLOSEDATETIME = "closeDateTime"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DISPLAYNAME = "displayName"
    DUEDATETIME = "dueDateTime"
    GRADING = "grading"
    INSTRUCTIONS = "instructions"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    STATUS = "status"
    CATEGORIES = "categories"
    RESOURCES = "resources"
    RUBRIC = "rubric"
    SUBMISSIONS = "submissions"

class Enum255(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CATEGORIES = "categories"
    RESOURCES = "resources"
    RUBRIC = "rubric"
    SUBMISSIONS = "submissions"

class Enum256(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"

class Enum257(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"

class Enum258(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAYNAME = "displayName"

class Enum259(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DISTRIBUTEFORSTUDENTWORK = "distributeForStudentWork"
    DISTRIBUTEFORSTUDENTWORKDESC = "distributeForStudentWork desc"
    RESOURCE = "resource"
    RESOURCEDESC = "resource desc"

class Enum260(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISTRIBUTEFORSTUDENTWORK = "distributeForStudentWork"
    RESOURCE = "resource"

class Enum261(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISTRIBUTEFORSTUDENTWORK = "distributeForStudentWork"
    RESOURCE = "resource"

class Enum262(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    GRADING = "grading"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LEVELS = "levels"
    QUALITIES = "qualities"

class Enum263(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    RECIPIENT = "recipient"
    RECIPIENTDESC = "recipient desc"
    RELEASEDBY = "releasedBy"
    RELEASEDBYDESC = "releasedBy desc"
    RELEASEDDATETIME = "releasedDateTime"
    RELEASEDDATETIMEDESC = "releasedDateTime desc"
    RESOURCESFOLDERURL = "resourcesFolderUrl"
    RESOURCESFOLDERURLDESC = "resourcesFolderUrl desc"
    RETURNEDBY = "returnedBy"
    RETURNEDBYDESC = "returnedBy desc"
    RETURNEDDATETIME = "returnedDateTime"
    RETURNEDDATETIMEDESC = "returnedDateTime desc"
    STATUS = "status"
    STATUSDESC = "status desc"
    SUBMITTEDBY = "submittedBy"
    SUBMITTEDBYDESC = "submittedBy desc"
    SUBMITTEDDATETIME = "submittedDateTime"
    SUBMITTEDDATETIMEDESC = "submittedDateTime desc"
    UNSUBMITTEDBY = "unsubmittedBy"
    UNSUBMITTEDBYDESC = "unsubmittedBy desc"
    UNSUBMITTEDDATETIME = "unsubmittedDateTime"
    UNSUBMITTEDDATETIMEDESC = "unsubmittedDateTime desc"

class Enum264(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RECIPIENT = "recipient"
    RELEASEDBY = "releasedBy"
    RELEASEDDATETIME = "releasedDateTime"
    RESOURCESFOLDERURL = "resourcesFolderUrl"
    RETURNEDBY = "returnedBy"
    RETURNEDDATETIME = "returnedDateTime"
    STATUS = "status"
    SUBMITTEDBY = "submittedBy"
    SUBMITTEDDATETIME = "submittedDateTime"
    UNSUBMITTEDBY = "unsubmittedBy"
    UNSUBMITTEDDATETIME = "unsubmittedDateTime"
    OUTCOMES = "outcomes"
    RESOURCES = "resources"
    SUBMITTEDRESOURCES = "submittedResources"

class Enum265(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    OUTCOMES = "outcomes"
    RESOURCES = "resources"
    SUBMITTEDRESOURCES = "submittedResources"

class Enum266(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RECIPIENT = "recipient"
    RELEASEDBY = "releasedBy"
    RELEASEDDATETIME = "releasedDateTime"
    RESOURCESFOLDERURL = "resourcesFolderUrl"
    RETURNEDBY = "returnedBy"
    RETURNEDDATETIME = "returnedDateTime"
    STATUS = "status"
    SUBMITTEDBY = "submittedBy"
    SUBMITTEDDATETIME = "submittedDateTime"
    UNSUBMITTEDBY = "unsubmittedBy"
    UNSUBMITTEDDATETIME = "unsubmittedDateTime"
    OUTCOMES = "outcomes"
    RESOURCES = "resources"
    SUBMITTEDRESOURCES = "submittedResources"

class Enum267(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    OUTCOMES = "outcomes"
    RESOURCES = "resources"
    SUBMITTEDRESOURCES = "submittedResources"

class Enum268(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDBYDESC = "lastModifiedBy desc"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LASTMODIFIEDDATETIMEDESC = "lastModifiedDateTime desc"

class Enum269(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"

class Enum270(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"

class Enum271(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ASSIGNMENTRESOURCEURL = "assignmentResourceUrl"
    ASSIGNMENTRESOURCEURLDESC = "assignmentResourceUrl desc"
    RESOURCE = "resource"
    RESOURCEDESC = "resource desc"

class Enum272(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ASSIGNMENTRESOURCEURL = "assignmentResourceUrl"
    RESOURCE = "resource"

class Enum273(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ASSIGNMENTRESOURCEURL = "assignmentResourceUrl"
    RESOURCE = "resource"

class Enum274(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ASSIGNMENTRESOURCEURL = "assignmentResourceUrl"
    ASSIGNMENTRESOURCEURLDESC = "assignmentResourceUrl desc"
    RESOURCE = "resource"
    RESOURCEDESC = "resource desc"

class Enum275(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ASSIGNMENTRESOURCEURL = "assignmentResourceUrl"
    RESOURCE = "resource"

class Enum276(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ASSIGNMENTRESOURCEURL = "assignmentResourceUrl"
    RESOURCE = "resource"

class Enum277(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CLASSCODE = "classCode"
    CLASSCODEDESC = "classCode desc"
    COURSE = "course"
    COURSEDESC = "course desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALNAME = "externalName"
    EXTERNALNAMEDESC = "externalName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    GRADE = "grade"
    GRADEDESC = "grade desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    TERM = "term"
    TERMDESC = "term desc"

class Enum278(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSCODE = "classCode"
    COURSE = "course"
    CREATEDBY = "createdBy"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALID = "externalId"
    EXTERNALNAME = "externalName"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    GRADE = "grade"
    MAILNICKNAME = "mailNickname"
    TERM = "term"
    ASSIGNMENTCATEGORIES = "assignmentCategories"
    ASSIGNMENTS = "assignments"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Enum279(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTCATEGORIES = "assignmentCategories"
    ASSIGNMENTS = "assignments"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Enum280(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CLASSCODE = "classCode"
    CLASSCODEDESC = "classCode desc"
    COURSE = "course"
    COURSEDESC = "course desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALNAME = "externalName"
    EXTERNALNAMEDESC = "externalName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    GRADE = "grade"
    GRADEDESC = "grade desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    TERM = "term"
    TERMDESC = "term desc"

class Enum281(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    GRADING = "grading"
    GRADINGDESC = "grading desc"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDBYDESC = "lastModifiedBy desc"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LASTMODIFIEDDATETIMEDESC = "lastModifiedDateTime desc"
    LEVELS = "levels"
    LEVELSDESC = "levels desc"
    QUALITIES = "qualities"
    QUALITIESDESC = "qualities desc"

class Enum282(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    GRADING = "grading"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LEVELS = "levels"
    QUALITIES = "qualities"

class Enum283(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    GRADING = "grading"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LEVELS = "levels"
    QUALITIES = "qualities"

class Enum284(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    ADDRESS = "address"
    ADDRESSDESC = "address desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    EXTERNALPRINCIPALIDDESC = "externalPrincipalId desc"
    FAX = "fax"
    FAXDESC = "fax desc"
    HIGHESTGRADE = "highestGrade"
    HIGHESTGRADEDESC = "highestGrade desc"
    LOWESTGRADE = "lowestGrade"
    LOWESTGRADEDESC = "lowestGrade desc"
    PHONE = "phone"
    PHONEDESC = "phone desc"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALEMAILDESC = "principalEmail desc"
    PRINCIPALNAME = "principalName"
    PRINCIPALNAMEDESC = "principalName desc"
    SCHOOLNUMBER = "schoolNumber"
    SCHOOLNUMBERDESC = "schoolNumber desc"

class Enum285(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    ADDRESS = "address"
    CREATEDBY = "createdBy"
    EXTERNALID = "externalId"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    FAX = "fax"
    HIGHESTGRADE = "highestGrade"
    LOWESTGRADE = "lowestGrade"
    PHONE = "phone"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALNAME = "principalName"
    SCHOOLNUMBER = "schoolNumber"
    ADMINISTRATIVEUNIT = "administrativeUnit"
    CLASSES = "classes"
    USERS = "users"

class Enum286(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ADMINISTRATIVEUNIT = "administrativeUnit"
    CLASSES = "classes"
    USERS = "users"

class Enum287(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    ADDRESS = "address"
    ADDRESSDESC = "address desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    EXTERNALPRINCIPALIDDESC = "externalPrincipalId desc"
    FAX = "fax"
    FAXDESC = "fax desc"
    HIGHESTGRADE = "highestGrade"
    HIGHESTGRADEDESC = "highestGrade desc"
    LOWESTGRADE = "lowestGrade"
    LOWESTGRADEDESC = "lowestGrade desc"
    PHONE = "phone"
    PHONEDESC = "phone desc"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALEMAILDESC = "principalEmail desc"
    PRINCIPALNAME = "principalName"
    PRINCIPALNAMEDESC = "principalName desc"
    SCHOOLNUMBER = "schoolNumber"
    SCHOOLNUMBERDESC = "schoolNumber desc"

class Enum288(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CLASSCODE = "classCode"
    CLASSCODEDESC = "classCode desc"
    COURSE = "course"
    COURSEDESC = "course desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALNAME = "externalName"
    EXTERNALNAMEDESC = "externalName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    GRADE = "grade"
    GRADEDESC = "grade desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    TERM = "term"
    TERMDESC = "term desc"

class Enum289(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSCODE = "classCode"
    COURSE = "course"
    CREATEDBY = "createdBy"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALID = "externalId"
    EXTERNALNAME = "externalName"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    GRADE = "grade"
    MAILNICKNAME = "mailNickname"
    TERM = "term"
    ASSIGNMENTCATEGORIES = "assignmentCategories"
    ASSIGNMENTS = "assignments"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Enum290(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTCATEGORIES = "assignmentCategories"
    ASSIGNMENTS = "assignments"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Enum291(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CLASSCODE = "classCode"
    CLASSCODEDESC = "classCode desc"
    COURSE = "course"
    COURSEDESC = "course desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALNAME = "externalName"
    EXTERNALNAMEDESC = "externalName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    GRADE = "grade"
    GRADEDESC = "grade desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    TERM = "term"
    TERMDESC = "term desc"

class Enum292(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETEDDATETIME = "deletedDateTime"
    SIGNINACTIVITY = "signInActivity"
    ACCOUNTENABLED = "accountEnabled"
    AGEGROUP = "ageGroup"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDPLANS = "assignedPlans"
    BUSINESSPHONES = "businessPhones"
    CITY = "city"
    COMPANYNAME = "companyName"
    CONSENTPROVIDEDFORMINOR = "consentProvidedForMinor"
    COUNTRY = "country"
    CREATEDDATETIME = "createdDateTime"
    CREATIONTYPE = "creationType"
    DEPARTMENT = "department"
    DEVICEKEYS = "deviceKeys"
    DISPLAYNAME = "displayName"
    EMPLOYEEHIREDATE = "employeeHireDate"
    EMPLOYEEID = "employeeId"
    EMPLOYEEORGDATA = "employeeOrgData"
    EMPLOYEETYPE = "employeeType"
    EXTERNALUSERSTATE = "externalUserState"
    EXTERNALUSERSTATECHANGEDATETIME = "externalUserStateChangeDateTime"
    FAXNUMBER = "faxNumber"
    GIVENNAME = "givenName"
    IDENTITIES = "identities"
    IMADDRESSES = "imAddresses"
    INFOCATALOGS = "infoCatalogs"
    ISRESOURCEACCOUNT = "isResourceAccount"
    JOBTITLE = "jobTitle"
    LASTPASSWORDCHANGEDATETIME = "lastPasswordChangeDateTime"
    LEGALAGEGROUPCLASSIFICATION = "legalAgeGroupClassification"
    LICENSEASSIGNMENTSTATES = "licenseAssignmentStates"
    MAIL = "mail"
    MAILNICKNAME = "mailNickname"
    MOBILEPHONE = "mobilePhone"
    OFFICELOCATION = "officeLocation"
    ONPREMISESDISTINGUISHEDNAME = "onPremisesDistinguishedName"
    ONPREMISESDOMAINNAME = "onPremisesDomainName"
    ONPREMISESEXTENSIONATTRIBUTES = "onPremisesExtensionAttributes"
    ONPREMISESIMMUTABLEID = "onPremisesImmutableId"
    ONPREMISESLASTSYNCDATETIME = "onPremisesLastSyncDateTime"
    ONPREMISESPROVISIONINGERRORS = "onPremisesProvisioningErrors"
    ONPREMISESSAMACCOUNTNAME = "onPremisesSamAccountName"
    ONPREMISESSECURITYIDENTIFIER = "onPremisesSecurityIdentifier"
    ONPREMISESSYNCENABLED = "onPremisesSyncEnabled"
    ONPREMISESUSERPRINCIPALNAME = "onPremisesUserPrincipalName"
    OTHERMAILS = "otherMails"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPROFILE = "passwordProfile"
    POSTALCODE = "postalCode"
    PREFERREDDATALOCATION = "preferredDataLocation"
    PREFERREDLANGUAGE = "preferredLanguage"
    PROVISIONEDPLANS = "provisionedPlans"
    PROXYADDRESSES = "proxyAddresses"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    SHOWINADDRESSLIST = "showInAddressList"
    SIGNINSESSIONSVALIDFROMDATETIME = "signInSessionsValidFromDateTime"
    STATE = "state"
    STREETADDRESS = "streetAddress"
    SURNAME = "surname"
    USAGELOCATION = "usageLocation"
    USERPRINCIPALNAME = "userPrincipalName"
    USERTYPE = "userType"
    MAILBOXSETTINGS = "mailboxSettings"
    DEVICEENROLLMENTLIMIT = "deviceEnrollmentLimit"
    ABOUTME = "aboutMe"
    BIRTHDAY = "birthday"
    HIREDATE = "hireDate"
    INTERESTS = "interests"
    MYSITE = "mySite"
    PASTPROJECTS = "pastProjects"
    PREFERREDNAME = "preferredName"
    RESPONSIBILITIES = "responsibilities"
    SCHOOLS = "schools"
    SKILLS = "skills"
    ANALYTICS = "analytics"
    INFORMATIONPROTECTION = "informationProtection"
    APPROLEASSIGNMENTS = "appRoleAssignments"
    CREATEDOBJECTS = "createdObjects"
    DIRECTREPORTS = "directReports"
    LICENSEDETAILS = "licenseDetails"
    MANAGER = "manager"
    MEMBEROF = "memberOf"
    OWNEDDEVICES = "ownedDevices"
    OWNEDOBJECTS = "ownedObjects"
    REGISTEREDDEVICES = "registeredDevices"
    SCOPEDROLEMEMBEROF = "scopedRoleMemberOf"
    TRANSITIVEMEMBEROF = "transitiveMemberOf"
    CALENDAR = "calendar"
    CALENDARGROUPS = "calendarGroups"
    CALENDARS = "calendars"
    CALENDARVIEW = "calendarView"
    CONTACTFOLDERS = "contactFolders"
    CONTACTS = "contacts"
    EVENTS = "events"
    INFERENCECLASSIFICATION = "inferenceClassification"
    JOINEDGROUPS = "joinedGroups"
    MAILFOLDERS = "mailFolders"
    MESSAGES = "messages"
    OUTLOOK = "outlook"
    PEOPLE = "people"
    PHOTO = "photo"
    PHOTOS = "photos"
    DRIVE = "drive"
    DRIVES = "drives"
    FOLLOWEDSITES = "followedSites"
    EXTENSIONS = "extensions"
    APPCONSENTREQUESTSFORAPPROVAL = "appConsentRequestsForApproval"
    APPROVALS = "approvals"
    PENDINGACCESSREVIEWINSTANCES = "pendingAccessReviewInstances"
    AGREEMENTACCEPTANCES = "agreementAcceptances"
    DEVICEENROLLMENTCONFIGURATIONS = "deviceEnrollmentConfigurations"
    MANAGEDDEVICES = "managedDevices"
    MANAGEDAPPREGISTRATIONS = "managedAppRegistrations"
    WINDOWSINFORMATIONPROTECTIONDEVICEREGISTRATIONS = "windowsInformationProtectionDeviceRegistrations"
    DEVICEMANAGEMENTTROUBLESHOOTINGEVENTS = "deviceManagementTroubleshootingEvents"
    MOBILEAPPINTENTANDSTATES = "mobileAppIntentAndStates"
    MOBILEAPPTROUBLESHOOTINGEVENTS = "mobileAppTroubleshootingEvents"
    NOTIFICATIONS = "notifications"
    PLANNER = "planner"
    INSIGHTS = "insights"
    SETTINGS = "settings"
    ONENOTE = "onenote"
    PROFILE = "profile"
    ACTIVITIES = "activities"
    DEVICES = "devices"
    ONLINEMEETINGS = "onlineMeetings"
    PRESENCE = "presence"
    AUTHENTICATION = "authentication"
    CHATS = "chats"
    JOINEDTEAMS = "joinedTeams"
    TEAMWORK = "teamwork"
    TODO = "todo"

class Enum293(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ANALYTICS = "analytics"
    INFORMATIONPROTECTION = "informationProtection"
    APPROLEASSIGNMENTS = "appRoleAssignments"
    CREATEDOBJECTS = "createdObjects"
    DIRECTREPORTS = "directReports"
    LICENSEDETAILS = "licenseDetails"
    MANAGER = "manager"
    MEMBEROF = "memberOf"
    OWNEDDEVICES = "ownedDevices"
    OWNEDOBJECTS = "ownedObjects"
    REGISTEREDDEVICES = "registeredDevices"
    SCOPEDROLEMEMBEROF = "scopedRoleMemberOf"
    TRANSITIVEMEMBEROF = "transitiveMemberOf"
    CALENDAR = "calendar"
    CALENDARGROUPS = "calendarGroups"
    CALENDARS = "calendars"
    CALENDARVIEW = "calendarView"
    CONTACTFOLDERS = "contactFolders"
    CONTACTS = "contacts"
    EVENTS = "events"
    INFERENCECLASSIFICATION = "inferenceClassification"
    JOINEDGROUPS = "joinedGroups"
    MAILFOLDERS = "mailFolders"
    MESSAGES = "messages"
    OUTLOOK = "outlook"
    PEOPLE = "people"
    PHOTO = "photo"
    PHOTOS = "photos"
    DRIVE = "drive"
    DRIVES = "drives"
    FOLLOWEDSITES = "followedSites"
    EXTENSIONS = "extensions"
    APPCONSENTREQUESTSFORAPPROVAL = "appConsentRequestsForApproval"
    APPROVALS = "approvals"
    PENDINGACCESSREVIEWINSTANCES = "pendingAccessReviewInstances"
    AGREEMENTACCEPTANCES = "agreementAcceptances"
    DEVICEENROLLMENTCONFIGURATIONS = "deviceEnrollmentConfigurations"
    MANAGEDDEVICES = "managedDevices"
    MANAGEDAPPREGISTRATIONS = "managedAppRegistrations"
    WINDOWSINFORMATIONPROTECTIONDEVICEREGISTRATIONS = "windowsInformationProtectionDeviceRegistrations"
    DEVICEMANAGEMENTTROUBLESHOOTINGEVENTS = "deviceManagementTroubleshootingEvents"
    MOBILEAPPINTENTANDSTATES = "mobileAppIntentAndStates"
    MOBILEAPPTROUBLESHOOTINGEVENTS = "mobileAppTroubleshootingEvents"
    NOTIFICATIONS = "notifications"
    PLANNER = "planner"
    INSIGHTS = "insights"
    SETTINGS = "settings"
    ONENOTE = "onenote"
    PROFILE = "profile"
    ACTIVITIES = "activities"
    DEVICES = "devices"
    ONLINEMEETINGS = "onlineMeetings"
    PRESENCE = "presence"
    AUTHENTICATION = "authentication"
    CHATS = "chats"
    JOINEDTEAMS = "joinedTeams"
    TEAMWORK = "teamwork"
    TODO = "todo"

class Get0itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    SYNCHRONIZATIONPROFILES = "synchronizationProfiles"
    CLASSES = "classes"
    ME = "me"
    SCHOOLS = "schools"
    USERS = "users"

class Get1itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SYNCHRONIZATIONPROFILES = "synchronizationProfiles"
    CLASSES = "classes"
    ME = "me"
    SCHOOLS = "schools"
    USERS = "users"

class Get2itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTCATEGORIES = "assignmentCategories"
    ASSIGNMENTS = "assignments"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Get5itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CLASSCODE = "classCode"
    CLASSCODEDESC = "classCode desc"
    COURSE = "course"
    COURSEDESC = "course desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALNAME = "externalName"
    EXTERNALNAMEDESC = "externalName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    EXTERNALSOURCEDETAILDESC = "externalSourceDetail desc"
    GRADE = "grade"
    GRADEDESC = "grade desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    TERM = "term"
    TERMDESC = "term desc"

class Get6itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSCODE = "classCode"
    COURSE = "course"
    CREATEDBY = "createdBy"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALID = "externalId"
    EXTERNALNAME = "externalName"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDETAIL = "externalSourceDetail"
    GRADE = "grade"
    MAILNICKNAME = "mailNickname"
    TERM = "term"
    ASSIGNMENTCATEGORIES = "assignmentCategories"
    ASSIGNMENTS = "assignments"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Get7itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTCATEGORIES = "assignmentCategories"
    ASSIGNMENTS = "assignments"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Microsoftgraphaccesslevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EVERYONE = "everyone"
    INVITED = "invited"
    LOCKED = "locked"
    SAMEENTERPRISE = "sameEnterprise"
    SAMEENTERPRISEANDFEDERATED = "sameEnterpriseAndFederated"

class Microsoftgraphactionstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    PENDING = "pending"
    CANCELED = "canceled"
    ACTIVE = "active"
    DONE = "done"
    FAILED = "failed"
    NOTSUPPORTED = "notSupported"

class Microsoftgraphagreementacceptancestate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ACCEPTED = "accepted"
    DECLINED = "declined"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphallowedaudiences(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ME = "me"
    FAMILY = "family"
    CONTACTS = "contacts"
    GROUPMEMBERS = "groupMembers"
    ORGANIZATION = "organization"
    FEDERATEDORGANIZATIONS = "federatedOrganizations"
    EVERYONE = "everyone"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphanalyticsactivitytype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EMAIL = "Email"
    MEETING = "Meeting"
    FOCUS = "Focus"
    CHAT = "Chat"
    CALL = "Call"

class Microsoftgraphanniversarytype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    BIRTHDAY = "birthday"
    WEDDING = "wedding"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphapplicationmode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MANUAL = "manual"
    AUTOMATIC = "automatic"
    RECOMMENDED = "recommended"

class Microsoftgraphapploguploadstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "pending"
    COMPLETED = "completed"
    FAILED = "failed"

class Microsoftgraphattendeetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    REQUIRED = "required"
    OPTIONAL = "optional"
    RESOURCE = "resource"

class Microsoftgraphauthenticationmethodsigninstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTSUPPORTED = "notSupported"
    NOTALLOWEDBYPOLICY = "notAllowedByPolicy"
    NOTENABLED = "notEnabled"
    PHONENUMBERNOTUNIQUE = "phoneNumberNotUnique"
    READY = "ready"
    NOTCONFIGURED = "notConfigured"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphauthenticationphonetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MOBILE = "mobile"
    ALTERNATEMOBILE = "alternateMobile"
    OFFICE = "office"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphautomaticrepliesstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DISABLED = "disabled"
    ALWAYSENABLED = "alwaysEnabled"
    SCHEDULED = "scheduled"

class Microsoftgraphbodytype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    TEXT = "text"
    HTML = "html"

class Microsoftgraphcalendarcolor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LIGHTBLUE = "lightBlue"
    LIGHTGREEN = "lightGreen"
    AUTO = "auto"
    LIGHTORANGE = "lightOrange"
    LIGHTGRAY = "lightGray"
    LIGHTYELLOW = "lightYellow"
    LIGHTTEAL = "lightTeal"
    LIGHTPINK = "lightPink"
    LIGHTBROWN = "lightBrown"
    LIGHTRED = "lightRed"
    MAXCOLOR = "maxColor"

class Microsoftgraphcalendarroletype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    FREEBUSYREAD = "freeBusyRead"
    LIMITEDREAD = "limitedRead"
    READ = "read"
    WRITE = "write"
    DELEGATEWITHOUTPRIVATEEVENTACCESS = "delegateWithoutPrivateEventAccess"
    DELEGATEWITHPRIVATEEVENTACCESS = "delegateWithPrivateEventAccess"
    CUSTOM = "custom"

class Microsoftgraphcategorycolor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PRESET0 = "preset0"
    PRESET1 = "preset1"
    NONE = "none"
    PRESET2 = "preset2"
    PRESET3 = "preset3"
    PRESET4 = "preset4"
    PRESET5 = "preset5"
    PRESET6 = "preset6"
    PRESET7 = "preset7"
    PRESET8 = "preset8"
    PRESET9 = "preset9"
    PRESET10 = "preset10"
    PRESET11 = "preset11"
    PRESET12 = "preset12"
    PRESET13 = "preset13"
    PRESET14 = "preset14"
    PRESET15 = "preset15"
    PRESET16 = "preset16"
    PRESET17 = "preset17"
    PRESET18 = "preset18"
    PRESET19 = "preset19"
    PRESET20 = "preset20"
    PRESET21 = "preset21"
    PRESET22 = "preset22"
    PRESET23 = "preset23"
    PRESET24 = "preset24"

class Microsoftgraphchannelmembershiptype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STANDARD = "standard"
    PRIVATE = "private"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphchassistype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    DESKTOP = "desktop"
    LAPTOP = "laptop"
    WORKSWORKSTATION = "worksWorkstation"
    ENTERPRISESERVER = "enterpriseServer"
    PHONE = "phone"
    TABLET = "tablet"
    MOBILEOTHER = "mobileOther"
    MOBILEUNKNOWN = "mobileUnknown"

class Microsoftgraphchatmessageimportance(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NORMAL = "normal"
    HIGH = "high"
    URGENT = "urgent"

class Microsoftgraphchatmessagepolicyviolationdlpactiontypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    NOTIFYSENDER = "notifySender"
    BLOCKACCESS = "blockAccess"
    BLOCKACCESSEXTERNAL = "blockAccessExternal"

class Microsoftgraphchatmessagepolicyviolationuseractiontypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    OVERRIDE = "override"
    REPORTFALSEPOSITIVE = "reportFalsePositive"

class Microsoftgraphchatmessagepolicyviolationverdictdetailstypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ALLOWFALSEPOSITIVEOVERRIDE = "allowFalsePositiveOverride"
    ALLOWOVERRIDEWITHOUTJUSTIFICATION = "allowOverrideWithoutJustification"
    ALLOWOVERRIDEWITHJUSTIFICATION = "allowOverrideWithJustification"

class Microsoftgraphchatmessagetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MESSAGE = "message"
    CHATEVENT = "chatEvent"
    TYPING = "typing"

class Microsoftgraphcompliancestate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPLIANT = "compliant"
    NONCOMPLIANT = "noncompliant"
    CONFLICT = "conflict"
    ERROR = "error"
    INGRACEPERIOD = "inGracePeriod"
    CONFIGMANAGER = "configManager"

class Microsoftgraphcompliancestatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    NOTAPPLICABLE = "notApplicable"
    COMPLIANT = "compliant"
    REMEDIATED = "remediated"
    NONCOMPLIANT = "nonCompliant"
    ERROR = "error"
    CONFLICT = "conflict"
    NOTASSIGNED = "notAssigned"

class Microsoftgraphconfigurationmanagerclientstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    INSTALLED = "installed"
    HEALTHY = "healthy"
    INSTALLFAILED = "installFailed"
    UPDATEFAILED = "updateFailed"
    COMMUNICATIONERROR = "communicationError"

class Microsoftgraphconfirmedby(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    USER = "user"
    MANAGER = "manager"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphcontactrelationship(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PARENT = "parent"
    RELATIVE = "relative"
    AIDE = "aide"
    DOCTOR = "doctor"
    GUARDIAN = "guardian"
    CHILD = "child"
    OTHER = "other"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphdayofweek(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SUNDAY = "sunday"
    MONDAY = "monday"
    TUESDAY = "tuesday"
    WEDNESDAY = "wednesday"
    THURSDAY = "thursday"
    FRIDAY = "friday"
    SATURDAY = "saturday"

class Microsoftgraphdelegatemeetingmessagedeliveryoptions(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SENDTODELEGATEANDINFORMATIONTOPRINCIPAL = "sendToDelegateAndInformationToPrincipal"
    SENDTODELEGATEANDPRINCIPAL = "sendToDelegateAndPrincipal"
    SENDTODELEGATEONLY = "sendToDelegateOnly"

class Microsoftgraphdeviceandappmanagementassignmentfiltertype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    INCLUDE = "include"

class Microsoftgraphdeviceandappmanagementassignmentsource(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DIRECT = "direct"
    POLICYSETS = "policySets"

class Microsoftgraphdeviceenrollmenttype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    USERENROLLMENT = "userEnrollment"
    DEVICEENROLLMENTMANAGER = "deviceEnrollmentManager"
    APPLEBULKWITHUSER = "appleBulkWithUser"
    APPLEBULKWITHOUTUSER = "appleBulkWithoutUser"
    WINDOWSAZUREADJOIN = "windowsAzureADJoin"
    WINDOWSBULKUSERLESS = "windowsBulkUserless"
    WINDOWSAUTOENROLLMENT = "windowsAutoEnrollment"
    WINDOWSBULKAZUREDOMAINJOIN = "windowsBulkAzureDomainJoin"
    WINDOWSCOMANAGEMENT = "windowsCoManagement"
    APPLEUSERENROLLMENT = "appleUserEnrollment"
    APPLEUSERENROLLMENTWITHSERVICEACCOUNT = "appleUserEnrollmentWithServiceAccount"
    AZUREADJOINUSINGAZUREVMEXTENSION = "azureAdJoinUsingAzureVmExtension"
    ANDROIDENTERPRISEDEDICATEDDEVICE = "androidEnterpriseDedicatedDevice"
    ANDROIDENTERPRISEFULLYMANAGED = "androidEnterpriseFullyManaged"
    ANDROIDENTERPRISECORPORATEWORKPROFILE = "androidEnterpriseCorporateWorkProfile"

class Microsoftgraphdeviceguardlocalsystemauthoritycredentialguardstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    RUNNING = "running"
    REBOOTREQUIRED = "rebootRequired"
    NOTLICENSED = "notLicensed"
    NOTCONFIGURED = "notConfigured"
    VIRTUALIZATIONBASEDSECURITYNOTRUNNING = "virtualizationBasedSecurityNotRunning"

class Microsoftgraphdeviceguardvirtualizationbasedsecurityhardwarerequirementstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MEETHARDWAREREQUIREMENTS = "meetHardwareRequirements"
    SECUREBOOTREQUIRED = "secureBootRequired"
    DMAPROTECTIONREQUIRED = "dmaProtectionRequired"
    HYPERVNOTSUPPORTEDFORGUESTVM = "hyperVNotSupportedForGuestVM"
    HYPERVNOTAVAILABLE = "hyperVNotAvailable"

class Microsoftgraphdeviceguardvirtualizationbasedsecuritystate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    RUNNING = "running"
    REBOOTREQUIRED = "rebootRequired"
    REQUIRE64BITARCHITECTURE = "require64BitArchitecture"
    NOTLICENSED = "notLicensed"
    NOTCONFIGURED = "notConfigured"
    DOESNOTMEETHARDWAREREQUIREMENTS = "doesNotMeetHardwareRequirements"
    OTHER = "other"

class Microsoftgraphdevicemanagementexchangeaccessstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    UNKNOWN = "unknown"
    ALLOWED = "allowed"
    BLOCKED = "blocked"
    QUARANTINED = "quarantined"

class Microsoftgraphdevicemanagementexchangeaccessstatereason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    UNKNOWN = "unknown"
    EXCHANGEGLOBALRULE = "exchangeGlobalRule"
    EXCHANGEINDIVIDUALRULE = "exchangeIndividualRule"
    EXCHANGEDEVICERULE = "exchangeDeviceRule"
    EXCHANGEUPGRADE = "exchangeUpgrade"
    EXCHANGEMAILBOXPOLICY = "exchangeMailboxPolicy"
    OTHER = "other"
    COMPLIANT = "compliant"
    NOTCOMPLIANT = "notCompliant"
    NOTENROLLED = "notEnrolled"
    UNKNOWNLOCATION = "unknownLocation"
    MFAREQUIRED = "mfaRequired"
    AZUREADBLOCKDUETOACCESSPOLICY = "azureADBlockDueToAccessPolicy"
    COMPROMISEDPASSWORD = "compromisedPassword"
    DEVICENOTKNOWNWITHMANAGEDAPP = "deviceNotKnownWithManagedApp"

class Microsoftgraphdeviceregistrationstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTREGISTERED = "notRegistered"
    REGISTERED = "registered"
    REVOKED = "revoked"
    KEYCONFLICT = "keyConflict"
    APPROVALPENDING = "approvalPending"
    CERTIFICATERESET = "certificateReset"
    NOTREGISTEREDPENDINGENROLLMENT = "notRegisteredPendingEnrollment"
    UNKNOWN = "unknown"

class Microsoftgraphdevicetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DESKTOP = "desktop"
    WINDOWSRT = "windowsRT"
    WINMO6 = "winMO6"
    NOKIA = "nokia"
    WINDOWSPHONE = "windowsPhone"
    MAC = "mac"
    WINCE = "winCE"
    WINEMBEDDED = "winEmbedded"
    IPHONE = "iPhone"
    IPAD = "iPad"
    IPOD = "iPod"
    ANDROID = "android"
    ISOCCONSUMER = "iSocConsumer"
    UNIX = "unix"
    MACMDM = "macMDM"
    HOLOLENS = "holoLens"
    SURFACEHUB = "surfaceHub"
    ANDROIDFORWORK = "androidForWork"
    ANDROIDENTERPRISE = "androidEnterprise"
    WINDOWS10X = "windows10x"
    ANDROIDNGMS = "androidnGMS"
    CLOUDPC = "cloudPC"
    BLACKBERRY = "blackberry"
    PALM = "palm"
    UNKNOWN = "unknown"

class Microsoftgrapheducationassignmentstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DRAFT = "draft"
    PUBLISHED = "published"
    ASSIGNED = "assigned"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgrapheducationexternalsource(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SIS = "sis"
    MANUAL = "manual"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"
    LMS = "lms"

class Microsoftgrapheducationgender(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FEMALE = "female"
    MALE = "male"
    OTHER = "other"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgrapheducationsubmissionstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    WORKING = "working"
    SUBMITTED = "submitted"
    RELEASED = "released"
    RETURNED = "returned"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgrapheducationsynchronizationprofilestate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DELETING = "deleting"
    DELETIONFAILED = "deletionFailed"
    PROVISIONINGFAILED = "provisioningFailed"
    PROVISIONED = "provisioned"
    PROVISIONING = "provisioning"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgrapheducationsynchronizationstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PAUSED = "paused"
    INPROGRESS = "inProgress"
    SUCCESS = "success"
    ERROR = "error"
    VALIDATIONERROR = "validationError"
    QUARANTINED = "quarantined"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgrapheducationuserrole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STUDENT = "student"
    TEACHER = "teacher"
    NONE = "none"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"
    FACULTY = "faculty"

class Microsoftgraphemailtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    WORK = "work"
    PERSONAL = "personal"
    MAIN = "main"
    OTHER = "other"

class Microsoftgrapheventtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SINGLEINSTANCE = "singleInstance"
    OCCURRENCE = "occurrence"
    EXCEPTION = "exception"
    SERIESMASTER = "seriesMaster"

class Microsoftgraphexternalaudiencescope(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    CONTACTSONLY = "contactsOnly"
    ALL = "all"

class Microsoftgraphfollowupflagstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTFLAGGED = "notFlagged"
    COMPLETE = "complete"
    FLAGGED = "flagged"

class Microsoftgraphfreebusystatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FREE = "free"
    TENTATIVE = "tentative"
    UNKNOWN = "unknown"
    BUSY = "busy"
    OOF = "oof"
    WORKINGELSEWHERE = "workingElsewhere"

class Microsoftgraphgiphyratingtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STRICT = "strict"
    MODERATE = "moderate"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphgroupaccesstype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    PRIVATE = "private"
    SECRET = "secret"
    PUBLIC = "public"

class Microsoftgraphimportance(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LOW = "low"
    NORMAL = "normal"
    HIGH = "high"

class Microsoftgraphinferenceclassificationtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FOCUSED = "focused"
    OTHER = "other"

class Microsoftgraphjointype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    AZUREADJOINED = "azureADJoined"
    AZUREADREGISTERED = "azureADRegistered"
    HYBRIDAZUREADJOINED = "hybridAzureADJoined"

class Microsoftgraphlanguageproficiencylevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ELEMENTARY = "elementary"
    CONVERSATIONAL = "conversational"
    LIMITEDWORKING = "limitedWorking"
    PROFESSIONALWORKING = "professionalWorking"
    FULLPROFESSIONAL = "fullProfessional"
    NATIVEORBILINGUAL = "nativeOrBilingual"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphlobbybypassscope(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ORGANIZER = "organizer"
    ORGANIZATION = "organization"
    ORGANIZATIONANDFEDERATED = "organizationAndFederated"
    EVERYONE = "everyone"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphlocationtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DEFAULT = "default"
    CONFERENCEROOM = "conferenceRoom"
    HOMEADDRESS = "homeAddress"
    BUSINESSADDRESS = "businessAddress"
    GEOCOORDINATES = "geoCoordinates"
    STREETADDRESS = "streetAddress"
    HOTEL = "hotel"
    RESTAURANT = "restaurant"
    LOCALBUSINESS = "localBusiness"
    POSTALADDRESS = "postalAddress"

class Microsoftgraphlocationuniqueidtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    LOCATIONSTORE = "locationStore"
    DIRECTORY = "directory"
    PRIVATE = "private"
    BING = "bing"

class Microsoftgraphlongrunningoperationstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTSTARTED = "notstarted"
    RUNNING = "running"
    SUCCEEDED = "succeeded"
    FAILED = "failed"

class Microsoftgraphlostmodestate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DISABLED = "disabled"
    ENABLED = "enabled"

class Microsoftgraphmailboxrecipienttype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    USER = "user"
    LINKED = "linked"
    SHARED = "shared"
    ROOM = "room"
    EQUIPMENT = "equipment"
    OTHERS = "others"

class Microsoftgraphmanagedappflaggedreason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ROOTEDDEVICE = "rootedDevice"
    ANDROIDBOOTLOADERUNLOCKED = "androidBootloaderUnlocked"
    ANDROIDFACTORYROMMODIFIED = "androidFactoryRomModified"

class Microsoftgraphmanageddevicearchitecture(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    X86 = "x86"
    X64 = "x64"
    ARM = "arm"
    ARM64 = "arM64"

class Microsoftgraphmanageddevicemanagementfeatures(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    MICROSOFTMANAGEDDESKTOP = "microsoftManagedDesktop"

class Microsoftgraphmanageddeviceownertype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPANY = "company"
    PERSONAL = "personal"

class Microsoftgraphmanageddevicepartnerreportedhealthstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    ACTIVATED = "activated"
    DEACTIVATED = "deactivated"
    SECURED = "secured"
    LOWSEVERITY = "lowSeverity"
    MEDIUMSEVERITY = "mediumSeverity"
    HIGHSEVERITY = "highSeverity"
    UNRESPONSIVE = "unresponsive"
    COMPROMISED = "compromised"
    MISCONFIGURED = "misconfigured"

class Microsoftgraphmanagementagenttype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EAS = "eas"
    MDM = "mdm"
    EASMDM = "easMdm"
    INTUNECLIENT = "intuneClient"
    EASINTUNECLIENT = "easIntuneClient"
    CONFIGURATIONMANAGERCLIENT = "configurationManagerClient"
    CONFIGURATIONMANAGERCLIENTMDM = "configurationManagerClientMdm"
    CONFIGURATIONMANAGERCLIENTMDMEAS = "configurationManagerClientMdmEas"
    UNKNOWN = "unknown"
    JAMF = "jamf"
    GOOGLECLOUDDEVICEPOLICYCONTROLLER = "googleCloudDevicePolicyController"
    MICROSOFT365MANAGEDMDM = "microsoft365ManagedMdm"
    WINDOWSMANAGEMENTCLOUDAPI = "windowsManagementCloudApi"

class Microsoftgraphmanagementstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MANAGED = "managed"
    RETIREPENDING = "retirePending"
    RETIREFAILED = "retireFailed"
    WIPEPENDING = "wipePending"
    WIPEFAILED = "wipeFailed"
    UNHEALTHY = "unhealthy"
    DELETEPENDING = "deletePending"
    RETIREISSUED = "retireIssued"
    WIPEISSUED = "wipeIssued"
    WIPECANCELED = "wipeCanceled"
    RETIRECANCELED = "retireCanceled"
    DISCOVERED = "discovered"

class Microsoftgraphmeetingcapabilities(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    QUESTIONANDANSWER = "questionAndAnswer"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphmessageactionflag(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ANY = "any"
    CALL = "call"
    DONOTFORWARD = "doNotForward"
    FOLLOWUP = "followUp"
    FYI = "fyi"
    FORWARD = "forward"
    NORESPONSENECESSARY = "noResponseNecessary"
    READ = "read"
    REPLY = "reply"
    REPLYTOALL = "replyToAll"
    REVIEW = "review"

class Microsoftgraphmobileappintent(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AVAILABLE = "available"
    NOTAVAILABLE = "notAvailable"
    REQUIREDINSTALL = "requiredInstall"
    REQUIREDUNINSTALL = "requiredUninstall"
    REQUIREDANDAVAILABLEINSTALL = "requiredAndAvailableInstall"
    AVAILABLEINSTALLWITHOUTENROLLMENT = "availableInstallWithoutEnrollment"
    EXCLUDE = "exclude"

class Microsoftgraphonenoteuserrole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    OWNER = "Owner"
    CONTRIBUTOR = "Contributor"
    NONE = "None"
    READER = "Reader"

class Microsoftgraphonlinemeetingpresenters(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EVERYONE = "everyone"
    ORGANIZATION = "organization"
    ROLEISPRESENTER = "roleIsPresenter"
    ORGANIZER = "organizer"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphonlinemeetingprovidertype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    SKYPEFORBUSINESS = "skypeForBusiness"
    SKYPEFORCONSUMER = "skypeForConsumer"
    TEAMSFORBUSINESS = "teamsForBusiness"

class Microsoftgraphonlinemeetingrole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ATTENDEE = "attendee"
    PRESENTER = "presenter"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphoperationstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTSTARTED = "NotStarted"
    RUNNING = "Running"
    COMPLETED = "Completed"
    FAILED = "Failed"

class Microsoftgraphownertype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPANY = "company"
    PERSONAL = "personal"

class Microsoftgraphpersonrelationship(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MANAGER = "manager"
    COLLEAGUE = "colleague"
    DIRECTREPORT = "directReport"
    DOTLINEREPORT = "dotLineReport"
    ASSISTANT = "assistant"
    DOTLINEMANAGER = "dotLineManager"
    ALTERNATECONTACT = "alternateContact"
    FRIEND = "friend"
    SPOUSE = "spouse"
    SIBLING = "sibling"
    CHILD = "child"
    PARENT = "parent"
    SPONSOR = "sponsor"
    EMERGENCYCONTACT = "emergencyContact"
    OTHER = "other"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphphonetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    HOME = "home"
    BUSINESS = "business"
    MOBILE = "mobile"
    OTHER = "other"
    ASSISTANT = "assistant"
    HOMEFAX = "homeFax"
    BUSINESSFAX = "businessFax"
    OTHERFAX = "otherFax"
    PAGER = "pager"
    RADIO = "radio"

class Microsoftgraphphysicaladdresstype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    HOME = "home"
    BUSINESS = "business"
    OTHER = "other"

class Microsoftgraphplannerpreviewtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AUTOMATIC = "automatic"
    NOPREVIEW = "noPreview"
    CHECKLIST = "checklist"
    DESCRIPTION = "description"
    REFERENCE = "reference"

class Microsoftgraphpolicyplatformtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ANDROID = "android"
    ANDROIDFORWORK = "androidForWork"
    IOS = "iOS"
    MACOS = "macOS"
    WINDOWSPHONE81 = "windowsPhone81"
    WINDOWS81ANDLATER = "windows81AndLater"
    WINDOWS10ANDLATER = "windows10AndLater"
    ANDROIDWORKPROFILE = "androidWorkProfile"
    WINDOWS10XPROFILE = "windows10XProfile"
    ALL = "all"

class Microsoftgraphpriority(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    HIGH = "High"
    LOW = "Low"

class Microsoftgraphrecurrencepatterntype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DAILY = "daily"
    WEEKLY = "weekly"
    ABSOLUTEMONTHLY = "absoluteMonthly"
    RELATIVEMONTHLY = "relativeMonthly"
    ABSOLUTEYEARLY = "absoluteYearly"
    RELATIVEYEARLY = "relativeYearly"

class Microsoftgraphrecurrencerangetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ENDDATE = "endDate"
    NOEND = "noEnd"
    NUMBERED = "numbered"

class Microsoftgraphreplyrestriction(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EVERYONE = "everyone"
    AUTHORANDMODERATORS = "authorAndModerators"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphresponsetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ORGANIZER = "organizer"
    TENTATIVELYACCEPTED = "tentativelyAccepted"
    ACCEPTED = "accepted"
    DECLINED = "declined"
    NOTRESPONDED = "notResponded"

class Microsoftgraphresultantappstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INSTALLED = "installed"
    NOTAPPLICABLE = "notApplicable"
    FAILED = "failed"
    NOTINSTALLED = "notInstalled"
    UNINSTALLFAILED = "uninstallFailed"
    PENDINGINSTALL = "pendingInstall"
    UNKNOWN = "unknown"

class Microsoftgraphschedulechangerequestactor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SENDER = "sender"
    RECIPIENT = "recipient"
    MANAGER = "manager"
    SYSTEM = "system"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphschedulechangestate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "pending"
    APPROVED = "approved"
    DECLINED = "declined"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphscheduleentitytheme(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    WHITE = "white"
    BLUE = "blue"
    GREEN = "green"
    PURPLE = "purple"
    PINK = "pink"
    YELLOW = "yellow"
    GRAY = "gray"
    DARKBLUE = "darkBlue"
    DARKGREEN = "darkGreen"
    DARKPURPLE = "darkPurple"
    DARKPINK = "darkPink"
    DARKYELLOW = "darkYellow"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphsecuritybaselinecompliancestate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    SECURE = "secure"
    NOTAPPLICABLE = "notApplicable"
    NOTSECURE = "notSecure"
    ERROR = "error"
    CONFLICT = "conflict"

class Microsoftgraphsecuritybaselinepolicysourcetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DEVICECONFIGURATION = "deviceConfiguration"
    DEVICEINTENT = "deviceIntent"

class Microsoftgraphsensitivity(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NORMAL = "normal"
    PERSONAL = "personal"
    PRIVATE = "private"
    CONFIDENTIAL = "confidential"

class Microsoftgraphsensitivitylabeltarget(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EMAIL = "email"
    SITE = "site"
    UNIFIEDGROUP = "unifiedGroup"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphsettingsourcetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DEVICECONFIGURATION = "deviceConfiguration"
    DEVICEINTENT = "deviceIntent"

class Microsoftgraphskillproficiencylevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ELEMENTARY = "elementary"
    LIMITEDWORKING = "limitedWorking"
    GENERALPROFESSIONAL = "generalProfessional"
    ADVANCEDPROFESSIONAL = "advancedProfessional"
    EXPERT = "expert"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ACTIVE = "active"
    UPDATED = "updated"
    DELETED = "deleted"
    IGNORED = "ignored"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphtaskstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTSTARTED = "notStarted"
    INPROGRESS = "inProgress"
    COMPLETED = "completed"
    WAITINGONOTHERS = "waitingOnOthers"
    DEFERRED = "deferred"

class Microsoftgraphteamsappdistributionmethod(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STORE = "store"
    ORGANIZATION = "organization"
    SIDELOADED = "sideloaded"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphteamsapppublishingstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SUBMITTED = "submitted"
    REJECTED = "rejected"
    PUBLISHED = "published"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphteamsasyncoperationstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "invalid"
    NOTSTARTED = "notStarted"
    INPROGRESS = "inProgress"
    SUCCEEDED = "succeeded"
    FAILED = "failed"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphteamsasyncoperationtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "invalid"
    CLONETEAM = "cloneTeam"
    ARCHIVETEAM = "archiveTeam"
    UNARCHIVETEAM = "unarchiveTeam"
    CREATETEAM = "createTeam"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphteamspecialization(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    EDUCATIONSTANDARD = "educationStandard"
    EDUCATIONCLASS = "educationClass"
    EDUCATIONPROFESSIONALLEARNINGCOMMUNITY = "educationProfessionalLearningCommunity"
    EDUCATIONSTAFF = "educationStaff"
    HEALTHCARESTANDARD = "healthcareStandard"
    HEALTHCARECARECOORDINATION = "healthcareCareCoordination"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphteamvisibilitytype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PRIVATE = "private"
    PUBLIC = "public"
    HIDDENMEMBERSHIP = "hiddenMembership"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphthreatassessmentcontenttype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MAIL = "mail"
    URL = "url"
    FILE = "file"

class Microsoftgraphthreatassessmentrequestsource(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNDEFINED = "undefined"
    USER = "user"
    ADMINISTRATOR = "administrator"

class Microsoftgraphthreatassessmentresulttype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CHECKPOLICY = "checkPolicy"
    RESCAN = "rescan"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphthreatassessmentstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "pending"
    COMPLETED = "completed"

class Microsoftgraphthreatcategory(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNDEFINED = "undefined"
    SPAM = "spam"
    PHISHING = "phishing"
    MALWARE = "malware"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphthreatexpectedassessment(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    BLOCK = "block"
    UNBLOCK = "unblock"

class Microsoftgraphtimecardstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CLOCKEDIN = "clockedIn"
    ONBREAK = "onBreak"
    CLOCKEDOUT = "clockedOut"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphtimeoffreasonicontype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    CAR = "car"
    CALENDAR = "calendar"
    RUNNING = "running"
    PLANE = "plane"
    FIRSTAID = "firstAid"
    DOCTOR = "doctor"
    NOTWORKING = "notWorking"
    CLOCK = "clock"
    JURYDUTY = "juryDuty"
    GLOBE = "globe"
    CUP = "cup"
    PHONE = "phone"
    WEATHER = "weather"
    UMBRELLA = "umbrella"
    PIGGYBANK = "piggyBank"
    DOG = "dog"
    CAKE = "cake"
    TRAFFICCONE = "trafficCone"
    PIN = "pin"
    SUNNY = "sunny"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphusernewmessagerestriction(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EVERYONE = "everyone"
    EVERYONEEXCEPTGUESTS = "everyoneExceptGuests"
    MODERATORS = "moderators"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphwebsitetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    OTHER = "other"
    HOME = "home"
    WORK = "work"
    BLOG = "blog"
    PROFILE = "profile"

class Microsoftgraphweekindex(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FIRST = "first"
    SECOND = "second"
    THIRD = "third"
    FOURTH = "fourth"
    LAST = "last"

class Microsoftgraphwellknownlistname(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    DEFAULTLIST = "defaultList"
    FLAGGEDEMAILS = "flaggedEmails"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphwindowsdevicehealthstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CLEAN = "clean"
    FULLSCANPENDING = "fullScanPending"
    REBOOTPENDING = "rebootPending"
    MANUALSTEPSPENDING = "manualStepsPending"
    OFFLINESCANPENDING = "offlineScanPending"
    CRITICAL = "critical"

class Microsoftgraphwindowsmalwarecategory(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "invalid"
    ADWARE = "adware"
    SPYWARE = "spyware"
    PASSWORDSTEALER = "passwordStealer"
    TROJANDOWNLOADER = "trojanDownloader"
    WORM = "worm"
    BACKDOOR = "backdoor"
    REMOTEACCESSTROJAN = "remoteAccessTrojan"
    TROJAN = "trojan"
    EMAILFLOODER = "emailFlooder"
    KEYLOGGER = "keylogger"
    DIALER = "dialer"
    MONITORINGSOFTWARE = "monitoringSoftware"
    BROWSERMODIFIER = "browserModifier"
    COOKIE = "cookie"
    BROWSERPLUGIN = "browserPlugin"
    AOLEXPLOIT = "aolExploit"
    NUKER = "nuker"
    SECURITYDISABLER = "securityDisabler"
    JOKEPROGRAM = "jokeProgram"
    HOSTILEACTIVEXCONTROL = "hostileActiveXControl"
    SOFTWAREBUNDLER = "softwareBundler"
    STEALTHNOTIFIER = "stealthNotifier"
    SETTINGSMODIFIER = "settingsModifier"
    TOOLBAR = "toolBar"
    REMOTECONTROLSOFTWARE = "remoteControlSoftware"
    TROJANFTP = "trojanFtp"
    POTENTIALUNWANTEDSOFTWARE = "potentialUnwantedSoftware"
    ICQEXPLOIT = "icqExploit"
    TROJANTELNET = "trojanTelnet"
    EXPLOIT = "exploit"
    FILESHARINGPROGRAM = "filesharingProgram"
    MALWARECREATIONTOOL = "malwareCreationTool"
    TOOL = "tool"
    TROJANDENIALOFSERVICE = "trojanDenialOfService"
    TROJANDROPPER = "trojanDropper"
    TROJANMASSMAILER = "trojanMassMailer"
    TROJANMONITORINGSOFTWARE = "trojanMonitoringSoftware"
    TROJANPROXYSERVER = "trojanProxyServer"
    VIRUS = "virus"
    KNOWN = "known"
    UNKNOWN = "unknown"
    SPP = "spp"
    BEHAVIOR = "behavior"
    VULNERABILITY = "vulnerability"
    POLICY = "policy"
    ENTERPRISEUNWANTEDSOFTWARE = "enterpriseUnwantedSoftware"
    RANSOM = "ransom"
    HIPSRULE = "hipsRule"

class Microsoftgraphwindowsmalwareexecutionstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    BLOCKED = "blocked"
    ALLOWED = "allowed"
    RUNNING = "running"
    NOTRUNNING = "notRunning"

class Microsoftgraphwindowsmalwareseverity(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    LOW = "low"
    MODERATE = "moderate"
    HIGH = "high"
    SEVERE = "severe"

class Microsoftgraphwindowsmalwarestate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    DETECTED = "detected"
    CLEANED = "cleaned"
    QUARANTINED = "quarantined"
    REMOVED = "removed"
    ALLOWED = "allowed"
    BLOCKED = "blocked"
    CLEANFAILED = "cleanFailed"
    QUARANTINEFAILED = "quarantineFailed"
    REMOVEFAILED = "removeFailed"
    ALLOWFAILED = "allowFailed"
    ABANDONED = "abandoned"
    BLOCKFAILED = "blockFailed"

class Microsoftgraphwindowsmalwarethreatstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ACTIVE = "active"
    ACTIONFAILED = "actionFailed"
    MANUALSTEPSREQUIRED = "manualStepsRequired"
    FULLSCANREQUIRED = "fullScanRequired"
    REBOOTREQUIRED = "rebootRequired"
    REMEDIATEDWITHNONCRITICALFAILURES = "remediatedWithNonCriticalFailures"
    QUARANTINED = "quarantined"
    REMOVED = "removed"
    CLEANED = "cleaned"
    ALLOWED = "allowed"
    NOSTATUSCLEARED = "noStatusCleared"

class Microsoftgraphworkbookoperationstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTSTARTED = "notStarted"
    RUNNING = "running"
    SUCCEEDED = "succeeded"
    FAILED = "failed"
