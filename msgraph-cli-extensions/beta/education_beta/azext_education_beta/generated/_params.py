# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type
)
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_education_beta.action import (
    AddCourse,
    AddTerm,
    AddAssignmentCategories,
    AddApplication,
    AddMailingAddress,
    AddMembers,
    AddExtensions,
    AddLicensesToAssign,
    AddErrors,
    AddProfileStatus,
    AddRelatedContacts,
    AddAssignedLicenses,
    AddAssignedPlans,
    AddPasswordProfile,
    AddProvisionedPlans,
    AddStudent,
    AddTeacher,
    AddInstructions,
    AddCategories
)


def load_arguments(self, _):

    with self.argument_context('education education-root show-education-root') as c:
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-root update-education-root') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('synchronization_profiles', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('classes', type=validate_file_or_dict, help='Read-only. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('me', type=validate_file_or_dict, help='educationUser Expected value: json-string/@json-file.')
        c.argument('schools', type=validate_file_or_dict, help='Read-only. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('users', type=validate_file_or_dict, help='Read-only. Nullable. Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education create-class') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('class_code', type=str, help='Class code used by the school to identify the class.')
        c.argument('course', action=AddCourse, nargs='+', help='educationCourse')
        c.argument('description', type=str, help='Description of the class.')
        c.argument('display_name', type=str, help='Name of the class.')
        c.argument('external_id', type=str, help='ID of the class from the syncing system.')
        c.argument('external_name', type=str, help='Name of the class in the syncing system.')
        c.argument('external_source', arg_type=get_enum_type(['sis', 'manual', 'unknownFutureValue', 'lms']), help='')
        c.argument('external_source_detail', type=str, help='')
        c.argument('grade', type=str, help='')
        c.argument('mail_nickname', type=str, help='Mail name for sending email to all members, if this is enabled.')
        c.argument('term', action=AddTerm, nargs='+', help='educationTerm')
        c.argument('assignment_categories', action=AddAssignmentCategories, nargs='+', help='')
        c.argument('assignments', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('group', type=validate_file_or_dict, help='Represents an Azure Active Directory object. The '
                   'directoryObject type is the base type for many other directory entity types. Expected value: '
                   'json-string/@json-file.')
        c.argument('members', type=validate_file_or_dict, help='All users in the class. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('schools', type=validate_file_or_dict, help='All schools that this class is associated with. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('teachers', type=validate_file_or_dict, help='All teachers in the class. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('education education create-school') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('description', type=str, help='Organization description.')
        c.argument('display_name', type=str, help='Organization display name.')
        c.argument('external_source', arg_type=get_enum_type(['sis', 'manual', 'unknownFutureValue', 'lms']), help='')
        c.argument('external_source_detail', type=str, help='')
        c.argument('address', action=AddMailingAddress, nargs='+', help='physicalAddress')
        c.argument('external_id', type=str, help='ID of school in syncing system.')
        c.argument('external_principal_id', type=str, help='ID of principal in syncing system.')
        c.argument('fax', type=str, help='')
        c.argument('highest_grade', type=str, help='Highest grade taught.')
        c.argument('lowest_grade', type=str, help='Lowest grade taught.')
        c.argument('phone', type=str, help='Phone number of school.')
        c.argument('principal_email', type=str, help='Email address of the principal.')
        c.argument('principal_name', type=str, help='Name of the principal.')
        c.argument('school_number', type=str, help='School Number.')
        c.argument('classes', type=validate_file_or_dict, help='Classes taught at the school. Nullable. Expected '
                   'value: json-string/@json-file.')
        c.argument('users', type=validate_file_or_dict, help='Users in the school. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Administrative Unit')
        c.argument('deleted_date_time', help='', arg_group='Administrative Unit')
        c.argument('microsoft_graph_administrative_unit_description', type=str, help='An optional description for the '
                   'administrative unit.', arg_group='Administrative Unit')
        c.argument('microsoft_graph_administrative_unit_display_name', type=str, help='Display name for the '
                   'administrative unit.', arg_group='Administrative Unit')
        c.argument('visibility', type=str, help='Controls whether the administrative unit and its members are hidden '
                   'or public. Can be set to HiddenMembership or Public. If not set, default behavior is Public. When '
                   'set to HiddenMembership, only members of the administrative unit can list other members of the '
                   'adminstrative unit.', arg_group='Administrative Unit')
        c.argument('members', action=AddMembers, nargs='+', help='Users and groups that are members of this '
                   'Adminsitrative Unit. HTTP Methods: GET (list members), POST (add members), DELETE (remove '
                   'members).', arg_group='Administrative Unit')
        c.argument('scoped_role_members', type=validate_file_or_dict, help='Scoped-role members of this Administrative '
                   'Unit.  HTTP Methods: GET (list scopedRoleMemberships), POST (add scopedRoleMembership), DELETE '
                   '(remove scopedRoleMembership). Expected value: json-string/@json-file.', arg_group='Administrative '
                   'Unit')
        c.argument('extensions', action=AddExtensions, nargs='+', help='', arg_group='Administrative Unit')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('education education create-synchronization-profile') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('data_provider', type=validate_file_or_dict, help='educationSynchronizationDataProvider Expected '
                   'value: json-string/@json-file.')
        c.argument('display_name', type=str, help='')
        c.argument('expiration_date', help='')
        c.argument('handle_special_character_constraint', arg_type=get_three_state_flag(), help='')
        c.argument('identity_synchronization_configuration', type=validate_file_or_dict,
                   help='educationIdentitySynchronizationConfiguration Expected value: json-string/@json-file.')
        c.argument('licenses_to_assign', action=AddLicensesToAssign, nargs='+', help='')
        c.argument('state', arg_type=get_enum_type(['deleting', 'deletionFailed', 'provisioningFailed', 'provisioned',
                                                    'provisioning', 'unknownFutureValue']), help='')
        c.argument('errors', action=AddErrors, nargs='+', help='')
        c.argument('profile_status', action=AddProfileStatus, nargs='+', help='educationSynchronizationProfileStatus')

    with self.argument_context('education education create-user') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('related_contacts', action=AddRelatedContacts, nargs='+', help='Set of contacts related to the '
                   'user.  This optional property must be specified in a $select clause and can only be retrieved for '
                   'an individual user.')
        c.argument('account_enabled', arg_type=get_three_state_flag(), help='True if the account is enabled; '
                   'otherwise, false. This property is required when a user is created. Supports $filter.')
        c.argument('assigned_licenses', action=AddAssignedLicenses, nargs='+', help='The licenses that are assigned to '
                   'the user. Not nullable.')
        c.argument('assigned_plans', action=AddAssignedPlans, nargs='+', help='The plans that are assigned to the '
                   'user. Read-only. Not nullable.')
        c.argument('business_phones', nargs='+', help='The telephone numbers for the user. Note: Although this is a '
                   'string collection, only one number can be set for this property.')
        c.argument('department', type=str, help='The name for the department in which the user works. Supports '
                   '$filter.')
        c.argument('display_name', type=str, help='The name displayed in the address book for the user. This is '
                   'usually the combination of the user\'s first name, middle initial, and last name. This property is '
                   'required when a user is created and it cannot be cleared during updates. Supports $filter and '
                   '$orderby.')
        c.argument('external_source', arg_type=get_enum_type(['sis', 'manual', 'unknownFutureValue', 'lms']), help='')
        c.argument('external_source_detail', type=str, help='')
        c.argument('given_name', type=str, help='The given name (first name) of the user. Supports $filter.')
        c.argument('mail', type=str, help='The SMTP address for the user; for example, \'jeff@contoso.onmicrosoft.com\''
                   '. Read-Only. Supports $filter.')
        c.argument('mailing_address', action=AddMailingAddress, nargs='+', help='physicalAddress')
        c.argument('mail_nickname', type=str, help='The mail alias for the user. This property must be specified when '
                   'a user is created. Supports $filter.')
        c.argument('middle_name', type=str, help='The middle name of user.')
        c.argument('mobile_phone', type=str, help='The primary cellular telephone number for the user.')
        c.argument('office_location', type=str, help='')
        c.argument('password_policies', type=str, help='Specifies password policies for the user. This value is an '
                   'enumeration with one possible value being \'DisableStrongPassword\', which allows weaker passwords '
                   'than the default policy to be specified. \'DisablePasswordExpiration\' can also be specified. The '
                   'two can be specified together; for example: \'DisablePasswordExpiration, DisableStrongPassword\'.')
        c.argument('password_profile', action=AddPasswordProfile, nargs='+', help='passwordProfile')
        c.argument('preferred_language', type=str, help='The preferred language for the user. Should follow ISO 639-1 '
                   'Code; for example, \'en-US\'.')
        c.argument('primary_role', arg_type=get_enum_type(['student', 'teacher', 'none', 'unknownFutureValue',
                                                           'faculty']), help='')
        c.argument('provisioned_plans', action=AddProvisionedPlans, nargs='+', help='The plans that are provisioned '
                   'for the user. Read-only. Not nullable.')
        c.argument('refresh_tokens_valid_from_date_time', help='')
        c.argument('residence_address', action=AddMailingAddress, nargs='+', help='physicalAddress')
        c.argument('show_in_address_list', arg_type=get_three_state_flag(), help='')
        c.argument('student', action=AddStudent, nargs='+', help='educationStudent')
        c.argument('surname', type=str, help='The user\'s surname (family name or last name). Supports $filter.')
        c.argument('teacher', action=AddTeacher, nargs='+', help='educationTeacher')
        c.argument('usage_location', type=str, help='A two-letter country code (ISO standard 3166). Required for users '
                   'who will be assigned licenses due to a legal requirement to check for availability of services in '
                   'countries or regions. Examples include: \'US\', \'JP\', and \'GB\'. Not nullable. Supports '
                   '$filter.')
        c.argument('user_principal_name', type=str, help='The user principal name (UPN) of the user. The UPN is an '
                   'Internet-style login name for the user based on the Internet standard RFC 822. By convention, this '
                   'should map to the user\'s email name. The general format is alias@domain, where domain must be '
                   'present in the tenant\'s collection of verified domains. This property is required when a user is '
                   'created. The verified domains for the tenant can be accessed from the verifiedDomains property of '
                   'organization. Supports $filter and $orderby.')
        c.argument('user_type', type=str, help='A string value that can be used to classify user types in your '
                   'directory, such as \'Member\' and \'Guest\'. Supports $filter.')
        c.argument('assignments', type=validate_file_or_dict, help='List of assignments for the user. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('rubrics', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('classes', type=validate_file_or_dict, help='Classes to which the user belongs. Nullable. Expected '
                   'value: json-string/@json-file.')
        c.argument('schools', type=validate_file_or_dict, help='Schools to which the user belongs. Nullable. Expected '
                   'value: json-string/@json-file.')
        c.argument('taught_classes', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('user', type=validate_file_or_dict, help='Represents an Azure Active Directory user object. '
                   'Expected value: json-string/@json-file.')
        c.argument('immutable_id', type=str, help='', arg_group='On Premises Info')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')

    with self.argument_context('education education delete-class') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education delete-me') as c:
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education delete-school') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education delete-synchronization-profile') as c:
        c.argument('education_synchronization_profile_id', type=str,
                   help='key: id of educationSynchronizationProfile')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education delete-user') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education list-class') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education list-school') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education list-synchronization-profile') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education list-user') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education show-class') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education show-me') as c:
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education show-school') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education show-synchronization-profile') as c:
        c.argument('education_synchronization_profile_id', type=str,
                   help='key: id of educationSynchronizationProfile')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education show-user') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education update-class') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('class_code', type=str, help='Class code used by the school to identify the class.')
        c.argument('course', action=AddCourse, nargs='+', help='educationCourse')
        c.argument('description', type=str, help='Description of the class.')
        c.argument('display_name', type=str, help='Name of the class.')
        c.argument('external_id', type=str, help='ID of the class from the syncing system.')
        c.argument('external_name', type=str, help='Name of the class in the syncing system.')
        c.argument('external_source', arg_type=get_enum_type(['sis', 'manual', 'unknownFutureValue', 'lms']), help='')
        c.argument('external_source_detail', type=str, help='')
        c.argument('grade', type=str, help='')
        c.argument('mail_nickname', type=str, help='Mail name for sending email to all members, if this is enabled.')
        c.argument('term', action=AddTerm, nargs='+', help='educationTerm')
        c.argument('assignment_categories', action=AddAssignmentCategories, nargs='+', help='')
        c.argument('assignments', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('group', type=validate_file_or_dict, help='Represents an Azure Active Directory object. The '
                   'directoryObject type is the base type for many other directory entity types. Expected value: '
                   'json-string/@json-file.')
        c.argument('members', type=validate_file_or_dict, help='All users in the class. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('schools', type=validate_file_or_dict, help='All schools that this class is associated with. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('teachers', type=validate_file_or_dict, help='All teachers in the class. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('education education update-me') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('related_contacts', action=AddRelatedContacts, nargs='+', help='Set of contacts related to the '
                   'user.  This optional property must be specified in a $select clause and can only be retrieved for '
                   'an individual user.')
        c.argument('account_enabled', arg_type=get_three_state_flag(), help='True if the account is enabled; '
                   'otherwise, false. This property is required when a user is created. Supports $filter.')
        c.argument('assigned_licenses', action=AddAssignedLicenses, nargs='+', help='The licenses that are assigned to '
                   'the user. Not nullable.')
        c.argument('assigned_plans', action=AddAssignedPlans, nargs='+', help='The plans that are assigned to the '
                   'user. Read-only. Not nullable.')
        c.argument('business_phones', nargs='+', help='The telephone numbers for the user. Note: Although this is a '
                   'string collection, only one number can be set for this property.')
        c.argument('department', type=str, help='The name for the department in which the user works. Supports '
                   '$filter.')
        c.argument('display_name', type=str, help='The name displayed in the address book for the user. This is '
                   'usually the combination of the user\'s first name, middle initial, and last name. This property is '
                   'required when a user is created and it cannot be cleared during updates. Supports $filter and '
                   '$orderby.')
        c.argument('external_source', arg_type=get_enum_type(['sis', 'manual', 'unknownFutureValue', 'lms']), help='')
        c.argument('external_source_detail', type=str, help='')
        c.argument('given_name', type=str, help='The given name (first name) of the user. Supports $filter.')
        c.argument('mail', type=str, help='The SMTP address for the user; for example, \'jeff@contoso.onmicrosoft.com\''
                   '. Read-Only. Supports $filter.')
        c.argument('mailing_address', action=AddMailingAddress, nargs='+', help='physicalAddress')
        c.argument('mail_nickname', type=str, help='The mail alias for the user. This property must be specified when '
                   'a user is created. Supports $filter.')
        c.argument('middle_name', type=str, help='The middle name of user.')
        c.argument('mobile_phone', type=str, help='The primary cellular telephone number for the user.')
        c.argument('office_location', type=str, help='')
        c.argument('password_policies', type=str, help='Specifies password policies for the user. This value is an '
                   'enumeration with one possible value being \'DisableStrongPassword\', which allows weaker passwords '
                   'than the default policy to be specified. \'DisablePasswordExpiration\' can also be specified. The '
                   'two can be specified together; for example: \'DisablePasswordExpiration, DisableStrongPassword\'.')
        c.argument('password_profile', action=AddPasswordProfile, nargs='+', help='passwordProfile')
        c.argument('preferred_language', type=str, help='The preferred language for the user. Should follow ISO 639-1 '
                   'Code; for example, \'en-US\'.')
        c.argument('primary_role', arg_type=get_enum_type(['student', 'teacher', 'none', 'unknownFutureValue',
                                                           'faculty']), help='')
        c.argument('provisioned_plans', action=AddProvisionedPlans, nargs='+', help='The plans that are provisioned '
                   'for the user. Read-only. Not nullable.')
        c.argument('refresh_tokens_valid_from_date_time', help='')
        c.argument('residence_address', action=AddMailingAddress, nargs='+', help='physicalAddress')
        c.argument('show_in_address_list', arg_type=get_three_state_flag(), help='')
        c.argument('student', action=AddStudent, nargs='+', help='educationStudent')
        c.argument('surname', type=str, help='The user\'s surname (family name or last name). Supports $filter.')
        c.argument('teacher', action=AddTeacher, nargs='+', help='educationTeacher')
        c.argument('usage_location', type=str, help='A two-letter country code (ISO standard 3166). Required for users '
                   'who will be assigned licenses due to a legal requirement to check for availability of services in '
                   'countries or regions. Examples include: \'US\', \'JP\', and \'GB\'. Not nullable. Supports '
                   '$filter.')
        c.argument('user_principal_name', type=str, help='The user principal name (UPN) of the user. The UPN is an '
                   'Internet-style login name for the user based on the Internet standard RFC 822. By convention, this '
                   'should map to the user\'s email name. The general format is alias@domain, where domain must be '
                   'present in the tenant\'s collection of verified domains. This property is required when a user is '
                   'created. The verified domains for the tenant can be accessed from the verifiedDomains property of '
                   'organization. Supports $filter and $orderby.')
        c.argument('user_type', type=str, help='A string value that can be used to classify user types in your '
                   'directory, such as \'Member\' and \'Guest\'. Supports $filter.')
        c.argument('assignments', type=validate_file_or_dict, help='List of assignments for the user. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('rubrics', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('classes', type=validate_file_or_dict, help='Classes to which the user belongs. Nullable. Expected '
                   'value: json-string/@json-file.')
        c.argument('schools', type=validate_file_or_dict, help='Schools to which the user belongs. Nullable. Expected '
                   'value: json-string/@json-file.')
        c.argument('taught_classes', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('user', type=validate_file_or_dict, help='Represents an Azure Active Directory user object. '
                   'Expected value: json-string/@json-file.')
        c.argument('immutable_id', type=str, help='', arg_group='On Premises Info')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')

    with self.argument_context('education education update-school') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('description', type=str, help='Organization description.')
        c.argument('display_name', type=str, help='Organization display name.')
        c.argument('external_source', arg_type=get_enum_type(['sis', 'manual', 'unknownFutureValue', 'lms']), help='')
        c.argument('external_source_detail', type=str, help='')
        c.argument('address', action=AddMailingAddress, nargs='+', help='physicalAddress')
        c.argument('external_id', type=str, help='ID of school in syncing system.')
        c.argument('external_principal_id', type=str, help='ID of principal in syncing system.')
        c.argument('fax', type=str, help='')
        c.argument('highest_grade', type=str, help='Highest grade taught.')
        c.argument('lowest_grade', type=str, help='Lowest grade taught.')
        c.argument('phone', type=str, help='Phone number of school.')
        c.argument('principal_email', type=str, help='Email address of the principal.')
        c.argument('principal_name', type=str, help='Name of the principal.')
        c.argument('school_number', type=str, help='School Number.')
        c.argument('classes', type=validate_file_or_dict, help='Classes taught at the school. Nullable. Expected '
                   'value: json-string/@json-file.')
        c.argument('users', type=validate_file_or_dict, help='Users in the school. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Administrative Unit')
        c.argument('deleted_date_time', help='', arg_group='Administrative Unit')
        c.argument('microsoft_graph_administrative_unit_description', type=str, help='An optional description for the '
                   'administrative unit.', arg_group='Administrative Unit')
        c.argument('microsoft_graph_administrative_unit_display_name', type=str, help='Display name for the '
                   'administrative unit.', arg_group='Administrative Unit')
        c.argument('visibility', type=str, help='Controls whether the administrative unit and its members are hidden '
                   'or public. Can be set to HiddenMembership or Public. If not set, default behavior is Public. When '
                   'set to HiddenMembership, only members of the administrative unit can list other members of the '
                   'adminstrative unit.', arg_group='Administrative Unit')
        c.argument('members', action=AddMembers, nargs='+', help='Users and groups that are members of this '
                   'Adminsitrative Unit. HTTP Methods: GET (list members), POST (add members), DELETE (remove '
                   'members).', arg_group='Administrative Unit')
        c.argument('scoped_role_members', type=validate_file_or_dict, help='Scoped-role members of this Administrative '
                   'Unit.  HTTP Methods: GET (list scopedRoleMemberships), POST (add scopedRoleMembership), DELETE '
                   '(remove scopedRoleMembership). Expected value: json-string/@json-file.', arg_group='Administrative '
                   'Unit')
        c.argument('extensions', action=AddExtensions, nargs='+', help='', arg_group='Administrative Unit')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('education education update-synchronization-profile') as c:
        c.argument('education_synchronization_profile_id', type=str,
                   help='key: id of educationSynchronizationProfile')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('data_provider', type=validate_file_or_dict, help='educationSynchronizationDataProvider Expected '
                   'value: json-string/@json-file.')
        c.argument('display_name', type=str, help='')
        c.argument('expiration_date', help='')
        c.argument('handle_special_character_constraint', arg_type=get_three_state_flag(), help='')
        c.argument('identity_synchronization_configuration', type=validate_file_or_dict,
                   help='educationIdentitySynchronizationConfiguration Expected value: json-string/@json-file.')
        c.argument('licenses_to_assign', action=AddLicensesToAssign, nargs='+', help='')
        c.argument('state', arg_type=get_enum_type(['deleting', 'deletionFailed', 'provisioningFailed', 'provisioned',
                                                    'provisioning', 'unknownFutureValue']), help='')
        c.argument('errors', action=AddErrors, nargs='+', help='')
        c.argument('profile_status', action=AddProfileStatus, nargs='+', help='educationSynchronizationProfileStatus')

    with self.argument_context('education education update-user') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('related_contacts', action=AddRelatedContacts, nargs='+', help='Set of contacts related to the '
                   'user.  This optional property must be specified in a $select clause and can only be retrieved for '
                   'an individual user.')
        c.argument('account_enabled', arg_type=get_three_state_flag(), help='True if the account is enabled; '
                   'otherwise, false. This property is required when a user is created. Supports $filter.')
        c.argument('assigned_licenses', action=AddAssignedLicenses, nargs='+', help='The licenses that are assigned to '
                   'the user. Not nullable.')
        c.argument('assigned_plans', action=AddAssignedPlans, nargs='+', help='The plans that are assigned to the '
                   'user. Read-only. Not nullable.')
        c.argument('business_phones', nargs='+', help='The telephone numbers for the user. Note: Although this is a '
                   'string collection, only one number can be set for this property.')
        c.argument('department', type=str, help='The name for the department in which the user works. Supports '
                   '$filter.')
        c.argument('display_name', type=str, help='The name displayed in the address book for the user. This is '
                   'usually the combination of the user\'s first name, middle initial, and last name. This property is '
                   'required when a user is created and it cannot be cleared during updates. Supports $filter and '
                   '$orderby.')
        c.argument('external_source', arg_type=get_enum_type(['sis', 'manual', 'unknownFutureValue', 'lms']), help='')
        c.argument('external_source_detail', type=str, help='')
        c.argument('given_name', type=str, help='The given name (first name) of the user. Supports $filter.')
        c.argument('mail', type=str, help='The SMTP address for the user; for example, \'jeff@contoso.onmicrosoft.com\''
                   '. Read-Only. Supports $filter.')
        c.argument('mailing_address', action=AddMailingAddress, nargs='+', help='physicalAddress')
        c.argument('mail_nickname', type=str, help='The mail alias for the user. This property must be specified when '
                   'a user is created. Supports $filter.')
        c.argument('middle_name', type=str, help='The middle name of user.')
        c.argument('mobile_phone', type=str, help='The primary cellular telephone number for the user.')
        c.argument('office_location', type=str, help='')
        c.argument('password_policies', type=str, help='Specifies password policies for the user. This value is an '
                   'enumeration with one possible value being \'DisableStrongPassword\', which allows weaker passwords '
                   'than the default policy to be specified. \'DisablePasswordExpiration\' can also be specified. The '
                   'two can be specified together; for example: \'DisablePasswordExpiration, DisableStrongPassword\'.')
        c.argument('password_profile', action=AddPasswordProfile, nargs='+', help='passwordProfile')
        c.argument('preferred_language', type=str, help='The preferred language for the user. Should follow ISO 639-1 '
                   'Code; for example, \'en-US\'.')
        c.argument('primary_role', arg_type=get_enum_type(['student', 'teacher', 'none', 'unknownFutureValue',
                                                           'faculty']), help='')
        c.argument('provisioned_plans', action=AddProvisionedPlans, nargs='+', help='The plans that are provisioned '
                   'for the user. Read-only. Not nullable.')
        c.argument('refresh_tokens_valid_from_date_time', help='')
        c.argument('residence_address', action=AddMailingAddress, nargs='+', help='physicalAddress')
        c.argument('show_in_address_list', arg_type=get_three_state_flag(), help='')
        c.argument('student', action=AddStudent, nargs='+', help='educationStudent')
        c.argument('surname', type=str, help='The user\'s surname (family name or last name). Supports $filter.')
        c.argument('teacher', action=AddTeacher, nargs='+', help='educationTeacher')
        c.argument('usage_location', type=str, help='A two-letter country code (ISO standard 3166). Required for users '
                   'who will be assigned licenses due to a legal requirement to check for availability of services in '
                   'countries or regions. Examples include: \'US\', \'JP\', and \'GB\'. Not nullable. Supports '
                   '$filter.')
        c.argument('user_principal_name', type=str, help='The user principal name (UPN) of the user. The UPN is an '
                   'Internet-style login name for the user based on the Internet standard RFC 822. By convention, this '
                   'should map to the user\'s email name. The general format is alias@domain, where domain must be '
                   'present in the tenant\'s collection of verified domains. This property is required when a user is '
                   'created. The verified domains for the tenant can be accessed from the verifiedDomains property of '
                   'organization. Supports $filter and $orderby.')
        c.argument('user_type', type=str, help='A string value that can be used to classify user types in your '
                   'directory, such as \'Member\' and \'Guest\'. Supports $filter.')
        c.argument('assignments', type=validate_file_or_dict, help='List of assignments for the user. Nullable. '
                   'Expected value: json-string/@json-file.')
        c.argument('rubrics', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('classes', type=validate_file_or_dict, help='Classes to which the user belongs. Nullable. Expected '
                   'value: json-string/@json-file.')
        c.argument('schools', type=validate_file_or_dict, help='Schools to which the user belongs. Nullable. Expected '
                   'value: json-string/@json-file.')
        c.argument('taught_classes', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('user', type=validate_file_or_dict, help='Represents an Azure Active Directory user object. '
                   'Expected value: json-string/@json-file.')
        c.argument('immutable_id', type=str, help='', arg_group='On Premises Info')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')

    with self.argument_context('education education-class create-assignment') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allow_late_submissions', arg_type=get_three_state_flag(), help='')
        c.argument('allow_students_to_add_resources_to_submission', arg_type=get_three_state_flag(), help='')
        c.argument('assign_date_time', help='')
        c.argument('assigned_date_time', help='')
        c.argument('assign_to', type=validate_file_or_dict, help='educationAssignmentRecipient Expected value: '
                   'json-string/@json-file.')
        c.argument('class_id', type=str, help='')
        c.argument('close_date_time', help='')
        c.argument('created_date_time', help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_time', help='')
        c.argument('grading', type=validate_file_or_dict, help='educationAssignmentGradeType Expected value: '
                   'json-string/@json-file.')
        c.argument('instructions', action=AddInstructions, nargs='+', help='educationItemBody')
        c.argument('last_modified_date_time', help='')
        c.argument('status', arg_type=get_enum_type(['draft', 'published', 'assigned', 'unknownFutureValue']),
                   help='')
        c.argument('categories', action=AddCategories, nargs='+', help='')
        c.argument('resources', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('submissions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Rubric')
        c.argument('microsoft_graph_education_rubric_created_date_time_created_date_time', help='',
                   arg_group='Rubric')
        c.argument('description', action=AddInstructions, nargs='+', help='educationItemBody', arg_group='Rubric')
        c.argument('microsoft_graph_education_rubric_display_name', type=str, help='', arg_group='Rubric')
        c.argument('microsoft_graph_education_assignment_grade_type_grading', type=validate_file_or_dict,
                   help='educationAssignmentGradeType Expected value: json-string/@json-file.', arg_group='Rubric')
        c.argument('microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time', help='',
                   arg_group='Rubric')
        c.argument('levels', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.',
                   arg_group='Rubric')
        c.argument('qualities', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.',
                   arg_group='Rubric')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Rubric Last Modified '
                   'By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Rubric Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Rubric Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Rubric Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Rubric Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Rubric Created By')
        c.argument('application1', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device1', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user1', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('application2', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device2', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user2', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('education education-class create-assignment-category') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')

    with self.argument_context('education education-class create-ref-member') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-class create-ref-school') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-class create-ref-teacher') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-class delete-assignment') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-class delete-assignment-category') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_category_id', type=str, help='key: id of educationCategory')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-class delete-ref-group') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-class list-assignment') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class list-assignment-category') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class list-member') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class list-ref-member') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('education education-class list-ref-school') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('education education-class list-ref-teacher') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('education education-class list-school') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class list-teacher') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class set-ref-group') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-class show-assignment') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class show-assignment-category') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_category_id', type=str, help='key: id of educationCategory')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class show-group') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class show-ref-group') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')

    with self.argument_context('education education-class update-assignment') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allow_late_submissions', arg_type=get_three_state_flag(), help='')
        c.argument('allow_students_to_add_resources_to_submission', arg_type=get_three_state_flag(), help='')
        c.argument('assign_date_time', help='')
        c.argument('assigned_date_time', help='')
        c.argument('assign_to', type=validate_file_or_dict, help='educationAssignmentRecipient Expected value: '
                   'json-string/@json-file.')
        c.argument('class_id', type=str, help='')
        c.argument('close_date_time', help='')
        c.argument('created_date_time', help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_time', help='')
        c.argument('grading', type=validate_file_or_dict, help='educationAssignmentGradeType Expected value: '
                   'json-string/@json-file.')
        c.argument('instructions', action=AddInstructions, nargs='+', help='educationItemBody')
        c.argument('last_modified_date_time', help='')
        c.argument('status', arg_type=get_enum_type(['draft', 'published', 'assigned', 'unknownFutureValue']),
                   help='')
        c.argument('categories', action=AddCategories, nargs='+', help='')
        c.argument('resources', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('submissions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Rubric')
        c.argument('microsoft_graph_education_rubric_created_date_time_created_date_time', help='',
                   arg_group='Rubric')
        c.argument('description', action=AddInstructions, nargs='+', help='educationItemBody', arg_group='Rubric')
        c.argument('microsoft_graph_education_rubric_display_name', type=str, help='', arg_group='Rubric')
        c.argument('microsoft_graph_education_assignment_grade_type_grading', type=validate_file_or_dict,
                   help='educationAssignmentGradeType Expected value: json-string/@json-file.', arg_group='Rubric')
        c.argument('microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time', help='',
                   arg_group='Rubric')
        c.argument('levels', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.',
                   arg_group='Rubric')
        c.argument('qualities', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.',
                   arg_group='Rubric')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Rubric Last Modified '
                   'By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Rubric Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Rubric Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Rubric Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Rubric Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Rubric Created By')
        c.argument('application1', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device1', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user1', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('application2', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device2', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user2', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('education education-class update-assignment-category') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_category_id', type=str, help='key: id of educationCategory')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')

    with self.argument_context('education education-class-assignment create-category') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')

    with self.argument_context('education education-class-assignment create-resource') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('distribute_for_student_work', arg_type=get_three_state_flag(), help='')
        c.argument('created_by', type=validate_file_or_dict,
                   help='identitySet Expected value: json-string/@json-file.', arg_group='Resource')
        c.argument('created_date_time', help='', arg_group='Resource')
        c.argument('display_name', type=str, help='', arg_group='Resource')
        c.argument('last_modified_by', type=validate_file_or_dict, help='identitySet Expected value: '
                   'json-string/@json-file.', arg_group='Resource')
        c.argument('last_modified_date_time', help='', arg_group='Resource')

    with self.argument_context('education education-class-assignment create-submission') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('recipient', type=validate_file_or_dict, help='educationSubmissionRecipient Expected value: '
                   'json-string/@json-file.')
        c.argument('released_date_time', help='')
        c.argument('resources_folder_url', type=str, help='')
        c.argument('returned_date_time', help='')
        c.argument('status', arg_type=get_enum_type(['working', 'submitted', 'released', 'returned',
                                                     'unknownFutureValue']), help='')
        c.argument('submitted_date_time', help='')
        c.argument('unsubmitted_date_time', help='')
        c.argument('outcomes', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('resources', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('submitted_resources', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Unsubmitted By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Unsubmitted By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Unsubmitted By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Submitted By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Submitted By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Submitted By')
        c.argument('application1', action=AddApplication, nargs='+', help='identity', arg_group='Returned By')
        c.argument('device1', action=AddApplication, nargs='+', help='identity', arg_group='Returned By')
        c.argument('user1', action=AddApplication, nargs='+', help='identity', arg_group='Returned By')
        c.argument('application2', action=AddApplication, nargs='+', help='identity', arg_group='Released By')
        c.argument('device2', action=AddApplication, nargs='+', help='identity', arg_group='Released By')
        c.argument('user2', action=AddApplication, nargs='+', help='identity', arg_group='Released By')

    with self.argument_context('education education-class-assignment delete-category') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_category_id', type=str, help='key: id of educationCategory')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-class-assignment delete-resource') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_assignment_resource_id', type=str, help='key: id of educationAssignmentResource')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-class-assignment delete-rubric') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-class-assignment delete-submission') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-class-assignment list-category') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class-assignment list-resource') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class-assignment list-submission') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class-assignment publish') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')

    with self.argument_context('education education-class-assignment show-category') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_category_id', type=str, help='key: id of educationCategory')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class-assignment show-resource') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_assignment_resource_id', type=str, help='key: id of educationAssignmentResource')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class-assignment show-resource-folder-url') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')

    with self.argument_context('education education-class-assignment show-rubric') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class-assignment show-submission') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class-assignment update-category') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_category_id', type=str, help='key: id of educationCategory')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')

    with self.argument_context('education education-class-assignment update-resource') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_assignment_resource_id', type=str, help='key: id of educationAssignmentResource')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('distribute_for_student_work', arg_type=get_three_state_flag(), help='')
        c.argument('created_by', type=validate_file_or_dict,
                   help='identitySet Expected value: json-string/@json-file.', arg_group='Resource')
        c.argument('created_date_time', help='', arg_group='Resource')
        c.argument('display_name', type=str, help='', arg_group='Resource')
        c.argument('last_modified_by', type=validate_file_or_dict, help='identitySet Expected value: '
                   'json-string/@json-file.', arg_group='Resource')
        c.argument('last_modified_date_time', help='', arg_group='Resource')

    with self.argument_context('education education-class-assignment update-rubric') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='')
        c.argument('description', action=AddInstructions, nargs='+', help='educationItemBody')
        c.argument('display_name', type=str, help='')
        c.argument('grading', type=validate_file_or_dict, help='educationAssignmentGradeType Expected value: '
                   'json-string/@json-file.')
        c.argument('last_modified_date_time', help='')
        c.argument('levels', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('qualities', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')

    with self.argument_context('education education-class-assignment update-submission') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('recipient', type=validate_file_or_dict, help='educationSubmissionRecipient Expected value: '
                   'json-string/@json-file.')
        c.argument('released_date_time', help='')
        c.argument('resources_folder_url', type=str, help='')
        c.argument('returned_date_time', help='')
        c.argument('status', arg_type=get_enum_type(['working', 'submitted', 'released', 'returned',
                                                     'unknownFutureValue']), help='')
        c.argument('submitted_date_time', help='')
        c.argument('unsubmitted_date_time', help='')
        c.argument('outcomes', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('resources', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('submitted_resources', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Unsubmitted By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Unsubmitted By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Unsubmitted By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Submitted By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Submitted By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Submitted By')
        c.argument('application1', action=AddApplication, nargs='+', help='identity', arg_group='Returned By')
        c.argument('device1', action=AddApplication, nargs='+', help='identity', arg_group='Returned By')
        c.argument('user1', action=AddApplication, nargs='+', help='identity', arg_group='Returned By')
        c.argument('application2', action=AddApplication, nargs='+', help='identity', arg_group='Released By')
        c.argument('device2', action=AddApplication, nargs='+', help='identity', arg_group='Released By')
        c.argument('user2', action=AddApplication, nargs='+', help='identity', arg_group='Released By')

    with self.argument_context('education education-class-assignment-submission create-outcome') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('last_modified_date_time', help='')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')

    with self.argument_context('education education-class-assignment-submission create-resource') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('assignment_resource_url', type=str, help='')
        c.argument('created_by', type=validate_file_or_dict,
                   help='identitySet Expected value: json-string/@json-file.', arg_group='Resource')
        c.argument('created_date_time', help='', arg_group='Resource')
        c.argument('display_name', type=str, help='', arg_group='Resource')
        c.argument('last_modified_by', type=validate_file_or_dict, help='identitySet Expected value: '
                   'json-string/@json-file.', arg_group='Resource')
        c.argument('last_modified_date_time', help='', arg_group='Resource')

    with self.argument_context('education education-class-assignment-submission create-submitted-resource') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('assignment_resource_url', type=str, help='')
        c.argument('created_by', type=validate_file_or_dict,
                   help='identitySet Expected value: json-string/@json-file.', arg_group='Resource')
        c.argument('created_date_time', help='', arg_group='Resource')
        c.argument('display_name', type=str, help='', arg_group='Resource')
        c.argument('last_modified_by', type=validate_file_or_dict, help='identitySet Expected value: '
                   'json-string/@json-file.', arg_group='Resource')
        c.argument('last_modified_date_time', help='', arg_group='Resource')

    with self.argument_context('education education-class-assignment-submission delete-outcome') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_outcome_id', type=str, help='key: id of educationOutcome')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-class-assignment-submission delete-resource') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_submission_resource_id', type=str, help='key: id of educationSubmissionResource')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-class-assignment-submission delete-submitted-resource') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_submission_resource_id', type=str, help='key: id of educationSubmissionResource')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-class-assignment-submission list-outcome') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class-assignment-submission list-resource') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class-assignment-submission list-submitted-resource') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class-assignment-submission return') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')

    with self.argument_context('education education-class-assignment-submission show-outcome') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_outcome_id', type=str, help='key: id of educationOutcome')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class-assignment-submission show-resource') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_submission_resource_id', type=str, help='key: id of educationSubmissionResource')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class-assignment-submission show-submitted-resource') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_submission_resource_id', type=str, help='key: id of educationSubmissionResource')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class-assignment-submission submit') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')

    with self.argument_context('education education-class-assignment-submission unsubmit') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')

    with self.argument_context('education education-class-assignment-submission update-outcome') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_outcome_id', type=str, help='key: id of educationOutcome')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('last_modified_date_time', help='')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')

    with self.argument_context('education education-class-assignment-submission update-resource') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_submission_resource_id', type=str, help='key: id of educationSubmissionResource')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('assignment_resource_url', type=str, help='')
        c.argument('created_by', type=validate_file_or_dict,
                   help='identitySet Expected value: json-string/@json-file.', arg_group='Resource')
        c.argument('created_date_time', help='', arg_group='Resource')
        c.argument('display_name', type=str, help='', arg_group='Resource')
        c.argument('last_modified_by', type=validate_file_or_dict, help='identitySet Expected value: '
                   'json-string/@json-file.', arg_group='Resource')
        c.argument('last_modified_date_time', help='', arg_group='Resource')

    with self.argument_context('education education-class-assignment-submission update-submitted-resource') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_submission_resource_id', type=str, help='key: id of educationSubmissionResource')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('assignment_resource_url', type=str, help='')
        c.argument('created_by', type=validate_file_or_dict,
                   help='identitySet Expected value: json-string/@json-file.', arg_group='Resource')
        c.argument('created_date_time', help='', arg_group='Resource')
        c.argument('display_name', type=str, help='', arg_group='Resource')
        c.argument('last_modified_by', type=validate_file_or_dict, help='identitySet Expected value: '
                   'json-string/@json-file.', arg_group='Resource')
        c.argument('last_modified_date_time', help='', arg_group='Resource')

    with self.argument_context('education education-class-member delta') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')

    with self.argument_context('education education-class-school delta') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')

    with self.argument_context('education education-class-teacher delta') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')

    with self.argument_context('education education-me create-assignment') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allow_late_submissions', arg_type=get_three_state_flag(), help='')
        c.argument('allow_students_to_add_resources_to_submission', arg_type=get_three_state_flag(), help='')
        c.argument('assign_date_time', help='')
        c.argument('assigned_date_time', help='')
        c.argument('assign_to', type=validate_file_or_dict, help='educationAssignmentRecipient Expected value: '
                   'json-string/@json-file.')
        c.argument('class_id', type=str, help='')
        c.argument('close_date_time', help='')
        c.argument('created_date_time', help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_time', help='')
        c.argument('grading', type=validate_file_or_dict, help='educationAssignmentGradeType Expected value: '
                   'json-string/@json-file.')
        c.argument('instructions', action=AddInstructions, nargs='+', help='educationItemBody')
        c.argument('last_modified_date_time', help='')
        c.argument('status', arg_type=get_enum_type(['draft', 'published', 'assigned', 'unknownFutureValue']),
                   help='')
        c.argument('categories', action=AddCategories, nargs='+', help='')
        c.argument('resources', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('submissions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Rubric')
        c.argument('microsoft_graph_education_rubric_created_date_time_created_date_time', help='',
                   arg_group='Rubric')
        c.argument('description', action=AddInstructions, nargs='+', help='educationItemBody', arg_group='Rubric')
        c.argument('microsoft_graph_education_rubric_display_name', type=str, help='', arg_group='Rubric')
        c.argument('microsoft_graph_education_assignment_grade_type_grading', type=validate_file_or_dict,
                   help='educationAssignmentGradeType Expected value: json-string/@json-file.', arg_group='Rubric')
        c.argument('microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time', help='',
                   arg_group='Rubric')
        c.argument('levels', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.',
                   arg_group='Rubric')
        c.argument('qualities', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.',
                   arg_group='Rubric')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Rubric Last Modified '
                   'By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Rubric Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Rubric Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Rubric Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Rubric Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Rubric Created By')
        c.argument('application1', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device1', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user1', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('application2', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device2', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user2', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('education education-me create-ref-class') as c:
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-me create-ref-school') as c:
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-me create-ref-taught-class') as c:
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-me create-rubric') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='')
        c.argument('description', action=AddInstructions, nargs='+', help='educationItemBody')
        c.argument('display_name', type=str, help='')
        c.argument('grading', type=validate_file_or_dict, help='educationAssignmentGradeType Expected value: '
                   'json-string/@json-file.')
        c.argument('last_modified_date_time', help='')
        c.argument('levels', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('qualities', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')

    with self.argument_context('education education-me delete-assignment') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-me delete-ref-user') as c:
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-me delete-rubric') as c:
        c.argument('education_rubric_id', type=str, help='key: id of educationRubric')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-me list-assignment') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me list-class') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me list-ref-class') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('education education-me list-ref-school') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('education education-me list-ref-taught-class') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('education education-me list-rubric') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me list-school') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me list-taught-class') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me set-ref-user') as c:
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-me show-assignment') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me show-rubric') as c:
        c.argument('education_rubric_id', type=str, help='key: id of educationRubric')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me show-user') as c:
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me update-assignment') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allow_late_submissions', arg_type=get_three_state_flag(), help='')
        c.argument('allow_students_to_add_resources_to_submission', arg_type=get_three_state_flag(), help='')
        c.argument('assign_date_time', help='')
        c.argument('assigned_date_time', help='')
        c.argument('assign_to', type=validate_file_or_dict, help='educationAssignmentRecipient Expected value: '
                   'json-string/@json-file.')
        c.argument('class_id', type=str, help='')
        c.argument('close_date_time', help='')
        c.argument('created_date_time', help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_time', help='')
        c.argument('grading', type=validate_file_or_dict, help='educationAssignmentGradeType Expected value: '
                   'json-string/@json-file.')
        c.argument('instructions', action=AddInstructions, nargs='+', help='educationItemBody')
        c.argument('last_modified_date_time', help='')
        c.argument('status', arg_type=get_enum_type(['draft', 'published', 'assigned', 'unknownFutureValue']),
                   help='')
        c.argument('categories', action=AddCategories, nargs='+', help='')
        c.argument('resources', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('submissions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Rubric')
        c.argument('microsoft_graph_education_rubric_created_date_time_created_date_time', help='',
                   arg_group='Rubric')
        c.argument('description', action=AddInstructions, nargs='+', help='educationItemBody', arg_group='Rubric')
        c.argument('microsoft_graph_education_rubric_display_name', type=str, help='', arg_group='Rubric')
        c.argument('microsoft_graph_education_assignment_grade_type_grading', type=validate_file_or_dict,
                   help='educationAssignmentGradeType Expected value: json-string/@json-file.', arg_group='Rubric')
        c.argument('microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time', help='',
                   arg_group='Rubric')
        c.argument('levels', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.',
                   arg_group='Rubric')
        c.argument('qualities', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.',
                   arg_group='Rubric')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Rubric Last Modified '
                   'By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Rubric Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Rubric Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Rubric Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Rubric Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Rubric Created By')
        c.argument('application1', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device1', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user1', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('application2', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device2', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user2', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('education education-me update-rubric') as c:
        c.argument('education_rubric_id', type=str, help='key: id of educationRubric')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='')
        c.argument('description', action=AddInstructions, nargs='+', help='educationItemBody')
        c.argument('display_name', type=str, help='')
        c.argument('grading', type=validate_file_or_dict, help='educationAssignmentGradeType Expected value: '
                   'json-string/@json-file.')
        c.argument('last_modified_date_time', help='')
        c.argument('levels', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('qualities', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')

    with self.argument_context('education education-me-assignment create-category') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')

    with self.argument_context('education education-me-assignment create-resource') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('distribute_for_student_work', arg_type=get_three_state_flag(), help='')
        c.argument('created_by', type=validate_file_or_dict,
                   help='identitySet Expected value: json-string/@json-file.', arg_group='Resource')
        c.argument('created_date_time', help='', arg_group='Resource')
        c.argument('display_name', type=str, help='', arg_group='Resource')
        c.argument('last_modified_by', type=validate_file_or_dict, help='identitySet Expected value: '
                   'json-string/@json-file.', arg_group='Resource')
        c.argument('last_modified_date_time', help='', arg_group='Resource')

    with self.argument_context('education education-me-assignment create-submission') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('recipient', type=validate_file_or_dict, help='educationSubmissionRecipient Expected value: '
                   'json-string/@json-file.')
        c.argument('released_date_time', help='')
        c.argument('resources_folder_url', type=str, help='')
        c.argument('returned_date_time', help='')
        c.argument('status', arg_type=get_enum_type(['working', 'submitted', 'released', 'returned',
                                                     'unknownFutureValue']), help='')
        c.argument('submitted_date_time', help='')
        c.argument('unsubmitted_date_time', help='')
        c.argument('outcomes', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('resources', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('submitted_resources', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Unsubmitted By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Unsubmitted By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Unsubmitted By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Submitted By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Submitted By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Submitted By')
        c.argument('application1', action=AddApplication, nargs='+', help='identity', arg_group='Returned By')
        c.argument('device1', action=AddApplication, nargs='+', help='identity', arg_group='Returned By')
        c.argument('user1', action=AddApplication, nargs='+', help='identity', arg_group='Returned By')
        c.argument('application2', action=AddApplication, nargs='+', help='identity', arg_group='Released By')
        c.argument('device2', action=AddApplication, nargs='+', help='identity', arg_group='Released By')
        c.argument('user2', action=AddApplication, nargs='+', help='identity', arg_group='Released By')

    with self.argument_context('education education-me-assignment delete-category') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_category_id', type=str, help='key: id of educationCategory')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-me-assignment delete-resource') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_assignment_resource_id', type=str, help='key: id of educationAssignmentResource')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-me-assignment delete-rubric') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-me-assignment delete-submission') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-me-assignment list-category') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me-assignment list-resource') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me-assignment list-submission') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me-assignment publish') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')

    with self.argument_context('education education-me-assignment show-category') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_category_id', type=str, help='key: id of educationCategory')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me-assignment show-resource') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_assignment_resource_id', type=str, help='key: id of educationAssignmentResource')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me-assignment show-resource-folder-url') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')

    with self.argument_context('education education-me-assignment show-rubric') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me-assignment show-submission') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me-assignment update-category') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_category_id', type=str, help='key: id of educationCategory')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')

    with self.argument_context('education education-me-assignment update-resource') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_assignment_resource_id', type=str, help='key: id of educationAssignmentResource')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('distribute_for_student_work', arg_type=get_three_state_flag(), help='')
        c.argument('created_by', type=validate_file_or_dict,
                   help='identitySet Expected value: json-string/@json-file.', arg_group='Resource')
        c.argument('created_date_time', help='', arg_group='Resource')
        c.argument('display_name', type=str, help='', arg_group='Resource')
        c.argument('last_modified_by', type=validate_file_or_dict, help='identitySet Expected value: '
                   'json-string/@json-file.', arg_group='Resource')
        c.argument('last_modified_date_time', help='', arg_group='Resource')

    with self.argument_context('education education-me-assignment update-rubric') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='')
        c.argument('description', action=AddInstructions, nargs='+', help='educationItemBody')
        c.argument('display_name', type=str, help='')
        c.argument('grading', type=validate_file_or_dict, help='educationAssignmentGradeType Expected value: '
                   'json-string/@json-file.')
        c.argument('last_modified_date_time', help='')
        c.argument('levels', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('qualities', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')

    with self.argument_context('education education-me-assignment update-submission') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('recipient', type=validate_file_or_dict, help='educationSubmissionRecipient Expected value: '
                   'json-string/@json-file.')
        c.argument('released_date_time', help='')
        c.argument('resources_folder_url', type=str, help='')
        c.argument('returned_date_time', help='')
        c.argument('status', arg_type=get_enum_type(['working', 'submitted', 'released', 'returned',
                                                     'unknownFutureValue']), help='')
        c.argument('submitted_date_time', help='')
        c.argument('unsubmitted_date_time', help='')
        c.argument('outcomes', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('resources', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('submitted_resources', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Unsubmitted By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Unsubmitted By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Unsubmitted By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Submitted By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Submitted By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Submitted By')
        c.argument('application1', action=AddApplication, nargs='+', help='identity', arg_group='Returned By')
        c.argument('device1', action=AddApplication, nargs='+', help='identity', arg_group='Returned By')
        c.argument('user1', action=AddApplication, nargs='+', help='identity', arg_group='Returned By')
        c.argument('application2', action=AddApplication, nargs='+', help='identity', arg_group='Released By')
        c.argument('device2', action=AddApplication, nargs='+', help='identity', arg_group='Released By')
        c.argument('user2', action=AddApplication, nargs='+', help='identity', arg_group='Released By')

    with self.argument_context('education education-me-assignment-submission create-outcome') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('last_modified_date_time', help='')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')

    with self.argument_context('education education-me-assignment-submission create-resource') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('assignment_resource_url', type=str, help='')
        c.argument('created_by', type=validate_file_or_dict,
                   help='identitySet Expected value: json-string/@json-file.', arg_group='Resource')
        c.argument('created_date_time', help='', arg_group='Resource')
        c.argument('display_name', type=str, help='', arg_group='Resource')
        c.argument('last_modified_by', type=validate_file_or_dict, help='identitySet Expected value: '
                   'json-string/@json-file.', arg_group='Resource')
        c.argument('last_modified_date_time', help='', arg_group='Resource')

    with self.argument_context('education education-me-assignment-submission create-submitted-resource') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('assignment_resource_url', type=str, help='')
        c.argument('created_by', type=validate_file_or_dict,
                   help='identitySet Expected value: json-string/@json-file.', arg_group='Resource')
        c.argument('created_date_time', help='', arg_group='Resource')
        c.argument('display_name', type=str, help='', arg_group='Resource')
        c.argument('last_modified_by', type=validate_file_or_dict, help='identitySet Expected value: '
                   'json-string/@json-file.', arg_group='Resource')
        c.argument('last_modified_date_time', help='', arg_group='Resource')

    with self.argument_context('education education-me-assignment-submission delete-outcome') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_outcome_id', type=str, help='key: id of educationOutcome')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-me-assignment-submission delete-resource') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_submission_resource_id', type=str, help='key: id of educationSubmissionResource')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-me-assignment-submission delete-submitted-resource') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_submission_resource_id', type=str, help='key: id of educationSubmissionResource')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-me-assignment-submission list-outcome') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me-assignment-submission list-resource') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me-assignment-submission list-submitted-resource') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me-assignment-submission return') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')

    with self.argument_context('education education-me-assignment-submission show-outcome') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_outcome_id', type=str, help='key: id of educationOutcome')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me-assignment-submission show-resource') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_submission_resource_id', type=str, help='key: id of educationSubmissionResource')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me-assignment-submission show-submitted-resource') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_submission_resource_id', type=str, help='key: id of educationSubmissionResource')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me-assignment-submission submit') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')

    with self.argument_context('education education-me-assignment-submission unsubmit') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')

    with self.argument_context('education education-me-assignment-submission update-outcome') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_outcome_id', type=str, help='key: id of educationOutcome')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('last_modified_date_time', help='')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')

    with self.argument_context('education education-me-assignment-submission update-resource') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_submission_resource_id', type=str, help='key: id of educationSubmissionResource')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('assignment_resource_url', type=str, help='')
        c.argument('created_by', type=validate_file_or_dict,
                   help='identitySet Expected value: json-string/@json-file.', arg_group='Resource')
        c.argument('created_date_time', help='', arg_group='Resource')
        c.argument('display_name', type=str, help='', arg_group='Resource')
        c.argument('last_modified_by', type=validate_file_or_dict, help='identitySet Expected value: '
                   'json-string/@json-file.', arg_group='Resource')
        c.argument('last_modified_date_time', help='', arg_group='Resource')

    with self.argument_context('education education-me-assignment-submission update-submitted-resource') as c:
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_submission_resource_id', type=str, help='key: id of educationSubmissionResource')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('assignment_resource_url', type=str, help='')
        c.argument('created_by', type=validate_file_or_dict,
                   help='identitySet Expected value: json-string/@json-file.', arg_group='Resource')
        c.argument('created_date_time', help='', arg_group='Resource')
        c.argument('display_name', type=str, help='', arg_group='Resource')
        c.argument('last_modified_by', type=validate_file_or_dict, help='identitySet Expected value: '
                   'json-string/@json-file.', arg_group='Resource')
        c.argument('last_modified_date_time', help='', arg_group='Resource')

    with self.argument_context('education education-school create-ref-class') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-school create-ref-user') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-school delete-ref-administrative-unit') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-school list-class') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-school list-ref-class') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('education education-school list-ref-user') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('education education-school list-user') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-school set-ref-administrative-unit') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-school show-administrative-unit') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-school show-ref-administrative-unit') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')

    with self.argument_context('education education-school-class delta') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')

    with self.argument_context('education education-school-user delta') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')

    with self.argument_context('education education-synchronization-profile create-error') as c:
        c.argument('education_synchronization_profile_id', type=str,
                   help='key: id of educationSynchronizationProfile')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('entry_type', type=str, help='')
        c.argument('error_code', type=str, help='')
        c.argument('error_message', type=str, help='')
        c.argument('joining_value', type=str, help='')
        c.argument('recorded_date_time', help='')
        c.argument('reportable_identifier', type=str, help='')

    with self.argument_context('education education-synchronization-profile delete-error') as c:
        c.argument('education_synchronization_profile_id', type=str,
                   help='key: id of educationSynchronizationProfile')
        c.argument('education_synchronization_error_id', type=str, help='key: id of educationSynchronizationError')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-synchronization-profile delete-profile-status') as c:
        c.argument('education_synchronization_profile_id', type=str,
                   help='key: id of educationSynchronizationProfile')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-synchronization-profile list-error') as c:
        c.argument('education_synchronization_profile_id', type=str,
                   help='key: id of educationSynchronizationProfile')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-synchronization-profile pause') as c:
        c.argument('education_synchronization_profile_id', type=str,
                   help='key: id of educationSynchronizationProfile')

    with self.argument_context('education education-synchronization-profile reset') as c:
        c.argument('education_synchronization_profile_id', type=str,
                   help='key: id of educationSynchronizationProfile')

    with self.argument_context('education education-synchronization-profile resume') as c:
        c.argument('education_synchronization_profile_id', type=str,
                   help='key: id of educationSynchronizationProfile')

    with self.argument_context('education education-synchronization-profile show-error') as c:
        c.argument('education_synchronization_profile_id', type=str,
                   help='key: id of educationSynchronizationProfile')
        c.argument('education_synchronization_error_id', type=str, help='key: id of educationSynchronizationError')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-synchronization-profile show-profile-status') as c:
        c.argument('education_synchronization_profile_id', type=str,
                   help='key: id of educationSynchronizationProfile')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-synchronization-profile start') as c:
        c.argument('education_synchronization_profile_id', type=str,
                   help='key: id of educationSynchronizationProfile')

    with self.argument_context('education education-synchronization-profile update-error') as c:
        c.argument('education_synchronization_profile_id', type=str,
                   help='key: id of educationSynchronizationProfile')
        c.argument('education_synchronization_error_id', type=str, help='key: id of educationSynchronizationError')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('entry_type', type=str, help='')
        c.argument('error_code', type=str, help='')
        c.argument('error_message', type=str, help='')
        c.argument('joining_value', type=str, help='')
        c.argument('recorded_date_time', help='')
        c.argument('reportable_identifier', type=str, help='')

    with self.argument_context('education education-synchronization-profile update-profile-status') as c:
        c.argument('education_synchronization_profile_id', type=str,
                   help='key: id of educationSynchronizationProfile')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('last_synchronization_date_time', help='')
        c.argument('status', arg_type=get_enum_type(['paused', 'inProgress', 'success', 'error', 'validationError',
                                                     'quarantined', 'unknownFutureValue']), help='')

    with self.argument_context('education education-synchronization-profile upload-url') as c:
        c.argument('education_synchronization_profile_id', type=str,
                   help='key: id of educationSynchronizationProfile')

    with self.argument_context('education education-user create-assignment') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allow_late_submissions', arg_type=get_three_state_flag(), help='')
        c.argument('allow_students_to_add_resources_to_submission', arg_type=get_three_state_flag(), help='')
        c.argument('assign_date_time', help='')
        c.argument('assigned_date_time', help='')
        c.argument('assign_to', type=validate_file_or_dict, help='educationAssignmentRecipient Expected value: '
                   'json-string/@json-file.')
        c.argument('class_id', type=str, help='')
        c.argument('close_date_time', help='')
        c.argument('created_date_time', help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_time', help='')
        c.argument('grading', type=validate_file_or_dict, help='educationAssignmentGradeType Expected value: '
                   'json-string/@json-file.')
        c.argument('instructions', action=AddInstructions, nargs='+', help='educationItemBody')
        c.argument('last_modified_date_time', help='')
        c.argument('status', arg_type=get_enum_type(['draft', 'published', 'assigned', 'unknownFutureValue']),
                   help='')
        c.argument('categories', action=AddCategories, nargs='+', help='')
        c.argument('resources', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('submissions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Rubric')
        c.argument('microsoft_graph_education_rubric_created_date_time_created_date_time', help='',
                   arg_group='Rubric')
        c.argument('description', action=AddInstructions, nargs='+', help='educationItemBody', arg_group='Rubric')
        c.argument('microsoft_graph_education_rubric_display_name', type=str, help='', arg_group='Rubric')
        c.argument('microsoft_graph_education_assignment_grade_type_grading', type=validate_file_or_dict,
                   help='educationAssignmentGradeType Expected value: json-string/@json-file.', arg_group='Rubric')
        c.argument('microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time', help='',
                   arg_group='Rubric')
        c.argument('levels', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.',
                   arg_group='Rubric')
        c.argument('qualities', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.',
                   arg_group='Rubric')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Rubric Last Modified '
                   'By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Rubric Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Rubric Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Rubric Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Rubric Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Rubric Created By')
        c.argument('application1', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device1', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user1', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('application2', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device2', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user2', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('education education-user create-ref-class') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-user create-ref-school') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-user create-ref-taught-class') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-user create-rubric') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='')
        c.argument('description', action=AddInstructions, nargs='+', help='educationItemBody')
        c.argument('display_name', type=str, help='')
        c.argument('grading', type=validate_file_or_dict, help='educationAssignmentGradeType Expected value: '
                   'json-string/@json-file.')
        c.argument('last_modified_date_time', help='')
        c.argument('levels', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('qualities', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')

    with self.argument_context('education education-user delete-assignment') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-user delete-ref-user') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-user delete-rubric') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_rubric_id', type=str, help='key: id of educationRubric')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-user list-assignment') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user list-class') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user list-ref-class') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('education education-user list-ref-school') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('education education-user list-ref-taught-class') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('education education-user list-rubric') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user list-school') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user list-taught-class') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user set-ref-user') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-user show-assignment') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user show-ref-user') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')

    with self.argument_context('education education-user show-rubric') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_rubric_id', type=str, help='key: id of educationRubric')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user show-user') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user update-assignment') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allow_late_submissions', arg_type=get_three_state_flag(), help='')
        c.argument('allow_students_to_add_resources_to_submission', arg_type=get_three_state_flag(), help='')
        c.argument('assign_date_time', help='')
        c.argument('assigned_date_time', help='')
        c.argument('assign_to', type=validate_file_or_dict, help='educationAssignmentRecipient Expected value: '
                   'json-string/@json-file.')
        c.argument('class_id', type=str, help='')
        c.argument('close_date_time', help='')
        c.argument('created_date_time', help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_time', help='')
        c.argument('grading', type=validate_file_or_dict, help='educationAssignmentGradeType Expected value: '
                   'json-string/@json-file.')
        c.argument('instructions', action=AddInstructions, nargs='+', help='educationItemBody')
        c.argument('last_modified_date_time', help='')
        c.argument('status', arg_type=get_enum_type(['draft', 'published', 'assigned', 'unknownFutureValue']),
                   help='')
        c.argument('categories', action=AddCategories, nargs='+', help='')
        c.argument('resources', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('submissions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Rubric')
        c.argument('microsoft_graph_education_rubric_created_date_time_created_date_time', help='',
                   arg_group='Rubric')
        c.argument('description', action=AddInstructions, nargs='+', help='educationItemBody', arg_group='Rubric')
        c.argument('microsoft_graph_education_rubric_display_name', type=str, help='', arg_group='Rubric')
        c.argument('microsoft_graph_education_assignment_grade_type_grading', type=validate_file_or_dict,
                   help='educationAssignmentGradeType Expected value: json-string/@json-file.', arg_group='Rubric')
        c.argument('microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time', help='',
                   arg_group='Rubric')
        c.argument('levels', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.',
                   arg_group='Rubric')
        c.argument('qualities', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.',
                   arg_group='Rubric')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Rubric Last Modified '
                   'By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Rubric Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Rubric Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Rubric Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Rubric Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Rubric Created By')
        c.argument('application1', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device1', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user1', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('application2', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device2', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user2', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('education education-user update-rubric') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_rubric_id', type=str, help='key: id of educationRubric')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='')
        c.argument('description', action=AddInstructions, nargs='+', help='educationItemBody')
        c.argument('display_name', type=str, help='')
        c.argument('grading', type=validate_file_or_dict, help='educationAssignmentGradeType Expected value: '
                   'json-string/@json-file.')
        c.argument('last_modified_date_time', help='')
        c.argument('levels', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('qualities', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')

    with self.argument_context('education education-user-assignment create-category') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')

    with self.argument_context('education education-user-assignment create-resource') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('distribute_for_student_work', arg_type=get_three_state_flag(), help='')
        c.argument('created_by', type=validate_file_or_dict,
                   help='identitySet Expected value: json-string/@json-file.', arg_group='Resource')
        c.argument('created_date_time', help='', arg_group='Resource')
        c.argument('display_name', type=str, help='', arg_group='Resource')
        c.argument('last_modified_by', type=validate_file_or_dict, help='identitySet Expected value: '
                   'json-string/@json-file.', arg_group='Resource')
        c.argument('last_modified_date_time', help='', arg_group='Resource')

    with self.argument_context('education education-user-assignment create-submission') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('recipient', type=validate_file_or_dict, help='educationSubmissionRecipient Expected value: '
                   'json-string/@json-file.')
        c.argument('released_date_time', help='')
        c.argument('resources_folder_url', type=str, help='')
        c.argument('returned_date_time', help='')
        c.argument('status', arg_type=get_enum_type(['working', 'submitted', 'released', 'returned',
                                                     'unknownFutureValue']), help='')
        c.argument('submitted_date_time', help='')
        c.argument('unsubmitted_date_time', help='')
        c.argument('outcomes', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('resources', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('submitted_resources', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Unsubmitted By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Unsubmitted By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Unsubmitted By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Submitted By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Submitted By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Submitted By')
        c.argument('application1', action=AddApplication, nargs='+', help='identity', arg_group='Returned By')
        c.argument('device1', action=AddApplication, nargs='+', help='identity', arg_group='Returned By')
        c.argument('user1', action=AddApplication, nargs='+', help='identity', arg_group='Returned By')
        c.argument('application2', action=AddApplication, nargs='+', help='identity', arg_group='Released By')
        c.argument('device2', action=AddApplication, nargs='+', help='identity', arg_group='Released By')
        c.argument('user2', action=AddApplication, nargs='+', help='identity', arg_group='Released By')

    with self.argument_context('education education-user-assignment delete-category') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_category_id', type=str, help='key: id of educationCategory')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-user-assignment delete-resource') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_assignment_resource_id', type=str, help='key: id of educationAssignmentResource')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-user-assignment delete-rubric') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-user-assignment delete-submission') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-user-assignment list-category') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user-assignment list-resource') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user-assignment list-submission') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user-assignment publish') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')

    with self.argument_context('education education-user-assignment show-category') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_category_id', type=str, help='key: id of educationCategory')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user-assignment show-resource') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_assignment_resource_id', type=str, help='key: id of educationAssignmentResource')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user-assignment show-resource-folder-url') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')

    with self.argument_context('education education-user-assignment show-rubric') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user-assignment show-submission') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user-assignment update-category') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_category_id', type=str, help='key: id of educationCategory')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')

    with self.argument_context('education education-user-assignment update-resource') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_assignment_resource_id', type=str, help='key: id of educationAssignmentResource')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('distribute_for_student_work', arg_type=get_three_state_flag(), help='')
        c.argument('created_by', type=validate_file_or_dict,
                   help='identitySet Expected value: json-string/@json-file.', arg_group='Resource')
        c.argument('created_date_time', help='', arg_group='Resource')
        c.argument('display_name', type=str, help='', arg_group='Resource')
        c.argument('last_modified_by', type=validate_file_or_dict, help='identitySet Expected value: '
                   'json-string/@json-file.', arg_group='Resource')
        c.argument('last_modified_date_time', help='', arg_group='Resource')

    with self.argument_context('education education-user-assignment update-rubric') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='')
        c.argument('description', action=AddInstructions, nargs='+', help='educationItemBody')
        c.argument('display_name', type=str, help='')
        c.argument('grading', type=validate_file_or_dict, help='educationAssignmentGradeType Expected value: '
                   'json-string/@json-file.')
        c.argument('last_modified_date_time', help='')
        c.argument('levels', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('qualities', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')

    with self.argument_context('education education-user-assignment update-submission') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('recipient', type=validate_file_or_dict, help='educationSubmissionRecipient Expected value: '
                   'json-string/@json-file.')
        c.argument('released_date_time', help='')
        c.argument('resources_folder_url', type=str, help='')
        c.argument('returned_date_time', help='')
        c.argument('status', arg_type=get_enum_type(['working', 'submitted', 'released', 'returned',
                                                     'unknownFutureValue']), help='')
        c.argument('submitted_date_time', help='')
        c.argument('unsubmitted_date_time', help='')
        c.argument('outcomes', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('resources', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('submitted_resources', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Unsubmitted By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Unsubmitted By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Unsubmitted By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Submitted By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Submitted By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Submitted By')
        c.argument('application1', action=AddApplication, nargs='+', help='identity', arg_group='Returned By')
        c.argument('device1', action=AddApplication, nargs='+', help='identity', arg_group='Returned By')
        c.argument('user1', action=AddApplication, nargs='+', help='identity', arg_group='Returned By')
        c.argument('application2', action=AddApplication, nargs='+', help='identity', arg_group='Released By')
        c.argument('device2', action=AddApplication, nargs='+', help='identity', arg_group='Released By')
        c.argument('user2', action=AddApplication, nargs='+', help='identity', arg_group='Released By')

    with self.argument_context('education education-user-assignment-submission create-outcome') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('last_modified_date_time', help='')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')

    with self.argument_context('education education-user-assignment-submission create-resource') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('assignment_resource_url', type=str, help='')
        c.argument('created_by', type=validate_file_or_dict,
                   help='identitySet Expected value: json-string/@json-file.', arg_group='Resource')
        c.argument('created_date_time', help='', arg_group='Resource')
        c.argument('display_name', type=str, help='', arg_group='Resource')
        c.argument('last_modified_by', type=validate_file_or_dict, help='identitySet Expected value: '
                   'json-string/@json-file.', arg_group='Resource')
        c.argument('last_modified_date_time', help='', arg_group='Resource')

    with self.argument_context('education education-user-assignment-submission create-submitted-resource') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('assignment_resource_url', type=str, help='')
        c.argument('created_by', type=validate_file_or_dict,
                   help='identitySet Expected value: json-string/@json-file.', arg_group='Resource')
        c.argument('created_date_time', help='', arg_group='Resource')
        c.argument('display_name', type=str, help='', arg_group='Resource')
        c.argument('last_modified_by', type=validate_file_or_dict, help='identitySet Expected value: '
                   'json-string/@json-file.', arg_group='Resource')
        c.argument('last_modified_date_time', help='', arg_group='Resource')

    with self.argument_context('education education-user-assignment-submission delete-outcome') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_outcome_id', type=str, help='key: id of educationOutcome')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-user-assignment-submission delete-resource') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_submission_resource_id', type=str, help='key: id of educationSubmissionResource')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-user-assignment-submission delete-submitted-resource') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_submission_resource_id', type=str, help='key: id of educationSubmissionResource')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-user-assignment-submission list-outcome') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user-assignment-submission list-resource') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user-assignment-submission list-submitted-resource') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user-assignment-submission return') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')

    with self.argument_context('education education-user-assignment-submission show-outcome') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_outcome_id', type=str, help='key: id of educationOutcome')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user-assignment-submission show-resource') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_submission_resource_id', type=str, help='key: id of educationSubmissionResource')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user-assignment-submission show-submitted-resource') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_submission_resource_id', type=str, help='key: id of educationSubmissionResource')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user-assignment-submission submit') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')

    with self.argument_context('education education-user-assignment-submission unsubmit') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')

    with self.argument_context('education education-user-assignment-submission update-outcome') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_outcome_id', type=str, help='key: id of educationOutcome')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('last_modified_date_time', help='')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')

    with self.argument_context('education education-user-assignment-submission update-resource') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_submission_resource_id', type=str, help='key: id of educationSubmissionResource')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('assignment_resource_url', type=str, help='')
        c.argument('created_by', type=validate_file_or_dict,
                   help='identitySet Expected value: json-string/@json-file.', arg_group='Resource')
        c.argument('created_date_time', help='', arg_group='Resource')
        c.argument('display_name', type=str, help='', arg_group='Resource')
        c.argument('last_modified_by', type=validate_file_or_dict, help='identitySet Expected value: '
                   'json-string/@json-file.', arg_group='Resource')
        c.argument('last_modified_date_time', help='', arg_group='Resource')

    with self.argument_context('education education-user-assignment-submission update-submitted-resource') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('education_assignment_id', type=str, help='key: id of educationAssignment')
        c.argument('education_submission_id', type=str, help='key: id of educationSubmission')
        c.argument('education_submission_resource_id', type=str, help='key: id of educationSubmissionResource')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('assignment_resource_url', type=str, help='')
        c.argument('created_by', type=validate_file_or_dict,
                   help='identitySet Expected value: json-string/@json-file.', arg_group='Resource')
        c.argument('created_date_time', help='', arg_group='Resource')
        c.argument('display_name', type=str, help='', arg_group='Resource')
        c.argument('last_modified_by', type=validate_file_or_dict, help='identitySet Expected value: '
                   'json-string/@json-file.', arg_group='Resource')
        c.argument('last_modified_date_time', help='', arg_group='Resource')

    with self.argument_context('education education-user-class delta') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')

    with self.argument_context('education education-user-school delta') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')

    with self.argument_context('education education-user-taught-class delta') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
