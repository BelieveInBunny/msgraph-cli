# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class Enum19(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACTIVITYDATETIME = "activityDateTime"
    ACTIVITYDISPLAYNAME = "activityDisplayName"
    ADDITIONALDETAILS = "additionalDetails"
    CATEGORY = "category"
    CORRELATIONID = "correlationId"
    INITIATEDBY = "initiatedBy"
    LOGGEDBYSERVICE = "loggedByService"
    OPERATIONTYPE = "operationType"
    RESULT = "result"
    RESULTREASON = "resultReason"
    TARGETRESOURCES = "targetResources"

class Enum20(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ACTION = "action"
    ACTIONDESC = "action desc"
    ACTIVITYDATETIME = "activityDateTime"
    ACTIVITYDATETIMEDESC = "activityDateTime desc"
    CHANGEID = "changeId"
    CHANGEIDDESC = "changeId desc"
    CYCLEID = "cycleId"
    CYCLEIDDESC = "cycleId desc"
    DURATIONINMILLISECONDS = "durationInMilliseconds"
    DURATIONINMILLISECONDSDESC = "durationInMilliseconds desc"
    INITIATEDBY = "initiatedBy"
    INITIATEDBYDESC = "initiatedBy desc"
    JOBID = "jobId"
    JOBIDDESC = "jobId desc"
    MODIFIEDPROPERTIES = "modifiedProperties"
    MODIFIEDPROPERTIESDESC = "modifiedProperties desc"
    PROVISIONINGSTEPS = "provisioningSteps"
    PROVISIONINGSTEPSDESC = "provisioningSteps desc"
    SERVICEPRINCIPAL = "servicePrincipal"
    SERVICEPRINCIPALDESC = "servicePrincipal desc"
    SOURCEIDENTITY = "sourceIdentity"
    SOURCEIDENTITYDESC = "sourceIdentity desc"
    SOURCESYSTEM = "sourceSystem"
    SOURCESYSTEMDESC = "sourceSystem desc"
    STATUSINFO = "statusInfo"
    STATUSINFODESC = "statusInfo desc"
    TARGETIDENTITY = "targetIdentity"
    TARGETIDENTITYDESC = "targetIdentity desc"
    TARGETSYSTEM = "targetSystem"
    TARGETSYSTEMDESC = "targetSystem desc"
    TENANTID = "tenantId"
    TENANTIDDESC = "tenantId desc"

class Enum21(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACTION = "action"
    ACTIVITYDATETIME = "activityDateTime"
    CHANGEID = "changeId"
    CYCLEID = "cycleId"
    DURATIONINMILLISECONDS = "durationInMilliseconds"
    INITIATEDBY = "initiatedBy"
    JOBID = "jobId"
    MODIFIEDPROPERTIES = "modifiedProperties"
    PROVISIONINGSTEPS = "provisioningSteps"
    SERVICEPRINCIPAL = "servicePrincipal"
    SOURCEIDENTITY = "sourceIdentity"
    SOURCESYSTEM = "sourceSystem"
    STATUSINFO = "statusInfo"
    TARGETIDENTITY = "targetIdentity"
    TARGETSYSTEM = "targetSystem"
    TENANTID = "tenantId"

class Enum22(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACTION = "action"
    ACTIVITYDATETIME = "activityDateTime"
    CHANGEID = "changeId"
    CYCLEID = "cycleId"
    DURATIONINMILLISECONDS = "durationInMilliseconds"
    INITIATEDBY = "initiatedBy"
    JOBID = "jobId"
    MODIFIEDPROPERTIES = "modifiedProperties"
    PROVISIONINGSTEPS = "provisioningSteps"
    SERVICEPRINCIPAL = "servicePrincipal"
    SOURCEIDENTITY = "sourceIdentity"
    SOURCESYSTEM = "sourceSystem"
    STATUSINFO = "statusInfo"
    TARGETIDENTITY = "targetIdentity"
    TARGETSYSTEM = "targetSystem"
    TENANTID = "tenantId"

class Enum23(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ACTION = "action"
    ACTIONDESC = "action desc"
    ACTIVITYDATETIME = "activityDateTime"
    ACTIVITYDATETIMEDESC = "activityDateTime desc"
    CHANGEID = "changeId"
    CHANGEIDDESC = "changeId desc"
    CYCLEID = "cycleId"
    CYCLEIDDESC = "cycleId desc"
    DURATIONINMILLISECONDS = "durationInMilliseconds"
    DURATIONINMILLISECONDSDESC = "durationInMilliseconds desc"
    INITIATEDBY = "initiatedBy"
    INITIATEDBYDESC = "initiatedBy desc"
    JOBID = "jobId"
    JOBIDDESC = "jobId desc"
    MODIFIEDPROPERTIES = "modifiedProperties"
    MODIFIEDPROPERTIESDESC = "modifiedProperties desc"
    PROVISIONINGSTEPS = "provisioningSteps"
    PROVISIONINGSTEPSDESC = "provisioningSteps desc"
    SERVICEPRINCIPAL = "servicePrincipal"
    SERVICEPRINCIPALDESC = "servicePrincipal desc"
    SOURCEIDENTITY = "sourceIdentity"
    SOURCEIDENTITYDESC = "sourceIdentity desc"
    SOURCESYSTEM = "sourceSystem"
    SOURCESYSTEMDESC = "sourceSystem desc"
    STATUSINFO = "statusInfo"
    STATUSINFODESC = "statusInfo desc"
    TARGETIDENTITY = "targetIdentity"
    TARGETIDENTITYDESC = "targetIdentity desc"
    TARGETSYSTEM = "targetSystem"
    TARGETSYSTEMDESC = "targetSystem desc"
    TENANTID = "tenantId"
    TENANTIDDESC = "tenantId desc"

class Enum24(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACTION = "action"
    ACTIVITYDATETIME = "activityDateTime"
    CHANGEID = "changeId"
    CYCLEID = "cycleId"
    DURATIONINMILLISECONDS = "durationInMilliseconds"
    INITIATEDBY = "initiatedBy"
    JOBID = "jobId"
    MODIFIEDPROPERTIES = "modifiedProperties"
    PROVISIONINGSTEPS = "provisioningSteps"
    SERVICEPRINCIPAL = "servicePrincipal"
    SOURCEIDENTITY = "sourceIdentity"
    SOURCESYSTEM = "sourceSystem"
    STATUSINFO = "statusInfo"
    TARGETIDENTITY = "targetIdentity"
    TARGETSYSTEM = "targetSystem"
    TENANTID = "tenantId"

class Enum25(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACTION = "action"
    ACTIVITYDATETIME = "activityDateTime"
    CHANGEID = "changeId"
    CYCLEID = "cycleId"
    DURATIONINMILLISECONDS = "durationInMilliseconds"
    INITIATEDBY = "initiatedBy"
    JOBID = "jobId"
    MODIFIEDPROPERTIES = "modifiedProperties"
    PROVISIONINGSTEPS = "provisioningSteps"
    SERVICEPRINCIPAL = "servicePrincipal"
    SOURCEIDENTITY = "sourceIdentity"
    SOURCESYSTEM = "sourceSystem"
    STATUSINFO = "statusInfo"
    TARGETIDENTITY = "targetIdentity"
    TARGETSYSTEM = "targetSystem"
    TENANTID = "tenantId"

class Enum26(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ALTERNATESIGNINNAME = "alternateSignInName"
    ALTERNATESIGNINNAMEDESC = "alternateSignInName desc"
    APPDISPLAYNAME = "appDisplayName"
    APPDISPLAYNAMEDESC = "appDisplayName desc"
    APPID = "appId"
    APPIDDESC = "appId desc"
    APPLIEDCONDITIONALACCESSPOLICIES = "appliedConditionalAccessPolicies"
    APPLIEDCONDITIONALACCESSPOLICIESDESC = "appliedConditionalAccessPolicies desc"
    AUTHENTICATIONDETAILS = "authenticationDetails"
    AUTHENTICATIONDETAILSDESC = "authenticationDetails desc"
    AUTHENTICATIONMETHODSUSED = "authenticationMethodsUsed"
    AUTHENTICATIONMETHODSUSEDDESC = "authenticationMethodsUsed desc"
    AUTHENTICATIONPROCESSINGDETAILS = "authenticationProcessingDetails"
    AUTHENTICATIONPROCESSINGDETAILSDESC = "authenticationProcessingDetails desc"
    AUTHENTICATIONREQUIREMENT = "authenticationRequirement"
    AUTHENTICATIONREQUIREMENTDESC = "authenticationRequirement desc"
    AUTHENTICATIONREQUIREMENTPOLICIES = "authenticationRequirementPolicies"
    AUTHENTICATIONREQUIREMENTPOLICIESDESC = "authenticationRequirementPolicies desc"
    CLIENTAPPUSED = "clientAppUsed"
    CLIENTAPPUSEDDESC = "clientAppUsed desc"
    CONDITIONALACCESSSTATUS = "conditionalAccessStatus"
    CONDITIONALACCESSSTATUSDESC = "conditionalAccessStatus desc"
    CORRELATIONID = "correlationId"
    CORRELATIONIDDESC = "correlationId desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"
    DEVICEDETAIL = "deviceDetail"
    DEVICEDETAILDESC = "deviceDetail desc"
    IPADDRESS = "ipAddress"
    IPADDRESSDESC = "ipAddress desc"
    ISINTERACTIVE = "isInteractive"
    ISINTERACTIVEDESC = "isInteractive desc"
    LOCATION = "location"
    LOCATIONDESC = "location desc"
    MFADETAIL = "mfaDetail"
    MFADETAILDESC = "mfaDetail desc"
    NETWORKLOCATIONDETAILS = "networkLocationDetails"
    NETWORKLOCATIONDETAILSDESC = "networkLocationDetails desc"
    ORIGINALREQUESTID = "originalRequestId"
    ORIGINALREQUESTIDDESC = "originalRequestId desc"
    PROCESSINGTIMEINMILLISECONDS = "processingTimeInMilliseconds"
    PROCESSINGTIMEINMILLISECONDSDESC = "processingTimeInMilliseconds desc"
    RESOURCEDISPLAYNAME = "resourceDisplayName"
    RESOURCEDISPLAYNAMEDESC = "resourceDisplayName desc"
    RESOURCEID = "resourceId"
    RESOURCEIDDESC = "resourceId desc"
    RESOURCETENANTID = "resourceTenantId"
    RESOURCETENANTIDDESC = "resourceTenantId desc"
    RISKDETAIL = "riskDetail"
    RISKDETAILDESC = "riskDetail desc"
    RISKEVENTTYPES = "riskEventTypes"
    RISKEVENTTYPESDESC = "riskEventTypes desc"
    RISKEVENTTYPESV2 = "riskEventTypes_v2"
    RISKEVENTTYPESV2DESC = "riskEventTypes_v2 desc"
    RISKLEVELAGGREGATED = "riskLevelAggregated"
    RISKLEVELAGGREGATEDDESC = "riskLevelAggregated desc"
    RISKLEVELDURINGSIGNIN = "riskLevelDuringSignIn"
    RISKLEVELDURINGSIGNINDESC = "riskLevelDuringSignIn desc"
    RISKSTATE = "riskState"
    RISKSTATEDESC = "riskState desc"
    SERVICEPRINCIPALID = "servicePrincipalId"
    SERVICEPRINCIPALIDDESC = "servicePrincipalId desc"
    SERVICEPRINCIPALNAME = "servicePrincipalName"
    SERVICEPRINCIPALNAMEDESC = "servicePrincipalName desc"
    SIGNINEVENTTYPES = "signInEventTypes"
    SIGNINEVENTTYPESDESC = "signInEventTypes desc"
    STATUS = "status"
    STATUSDESC = "status desc"
    TOKENISSUERNAME = "tokenIssuerName"
    TOKENISSUERNAMEDESC = "tokenIssuerName desc"
    TOKENISSUERTYPE = "tokenIssuerType"
    TOKENISSUERTYPEDESC = "tokenIssuerType desc"
    USERAGENT = "userAgent"
    USERAGENTDESC = "userAgent desc"
    USERDISPLAYNAME = "userDisplayName"
    USERDISPLAYNAMEDESC = "userDisplayName desc"
    USERID = "userId"
    USERIDDESC = "userId desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"
    TARGETTENANTID = "targetTenantId"
    TARGETTENANTIDDESC = "targetTenantId desc"

class Enum27(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ALTERNATESIGNINNAME = "alternateSignInName"
    APPDISPLAYNAME = "appDisplayName"
    APPID = "appId"
    APPLIEDCONDITIONALACCESSPOLICIES = "appliedConditionalAccessPolicies"
    AUTHENTICATIONDETAILS = "authenticationDetails"
    AUTHENTICATIONMETHODSUSED = "authenticationMethodsUsed"
    AUTHENTICATIONPROCESSINGDETAILS = "authenticationProcessingDetails"
    AUTHENTICATIONREQUIREMENT = "authenticationRequirement"
    AUTHENTICATIONREQUIREMENTPOLICIES = "authenticationRequirementPolicies"
    CLIENTAPPUSED = "clientAppUsed"
    CONDITIONALACCESSSTATUS = "conditionalAccessStatus"
    CORRELATIONID = "correlationId"
    CREATEDDATETIME = "createdDateTime"
    DEVICEDETAIL = "deviceDetail"
    IPADDRESS = "ipAddress"
    ISINTERACTIVE = "isInteractive"
    LOCATION = "location"
    MFADETAIL = "mfaDetail"
    NETWORKLOCATIONDETAILS = "networkLocationDetails"
    ORIGINALREQUESTID = "originalRequestId"
    PROCESSINGTIMEINMILLISECONDS = "processingTimeInMilliseconds"
    RESOURCEDISPLAYNAME = "resourceDisplayName"
    RESOURCEID = "resourceId"
    RESOURCETENANTID = "resourceTenantId"
    RISKDETAIL = "riskDetail"
    RISKEVENTTYPES = "riskEventTypes"
    RISKEVENTTYPESV2 = "riskEventTypes_v2"
    RISKLEVELAGGREGATED = "riskLevelAggregated"
    RISKLEVELDURINGSIGNIN = "riskLevelDuringSignIn"
    RISKSTATE = "riskState"
    SERVICEPRINCIPALID = "servicePrincipalId"
    SERVICEPRINCIPALNAME = "servicePrincipalName"
    SIGNINEVENTTYPES = "signInEventTypes"
    STATUS = "status"
    TOKENISSUERNAME = "tokenIssuerName"
    TOKENISSUERTYPE = "tokenIssuerType"
    USERAGENT = "userAgent"
    USERDISPLAYNAME = "userDisplayName"
    USERID = "userId"
    USERPRINCIPALNAME = "userPrincipalName"
    TARGETTENANTID = "targetTenantId"

class Enum28(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ALTERNATESIGNINNAME = "alternateSignInName"
    APPDISPLAYNAME = "appDisplayName"
    APPID = "appId"
    APPLIEDCONDITIONALACCESSPOLICIES = "appliedConditionalAccessPolicies"
    AUTHENTICATIONDETAILS = "authenticationDetails"
    AUTHENTICATIONMETHODSUSED = "authenticationMethodsUsed"
    AUTHENTICATIONPROCESSINGDETAILS = "authenticationProcessingDetails"
    AUTHENTICATIONREQUIREMENT = "authenticationRequirement"
    AUTHENTICATIONREQUIREMENTPOLICIES = "authenticationRequirementPolicies"
    CLIENTAPPUSED = "clientAppUsed"
    CONDITIONALACCESSSTATUS = "conditionalAccessStatus"
    CORRELATIONID = "correlationId"
    CREATEDDATETIME = "createdDateTime"
    DEVICEDETAIL = "deviceDetail"
    IPADDRESS = "ipAddress"
    ISINTERACTIVE = "isInteractive"
    LOCATION = "location"
    MFADETAIL = "mfaDetail"
    NETWORKLOCATIONDETAILS = "networkLocationDetails"
    ORIGINALREQUESTID = "originalRequestId"
    PROCESSINGTIMEINMILLISECONDS = "processingTimeInMilliseconds"
    RESOURCEDISPLAYNAME = "resourceDisplayName"
    RESOURCEID = "resourceId"
    RESOURCETENANTID = "resourceTenantId"
    RISKDETAIL = "riskDetail"
    RISKEVENTTYPES = "riskEventTypes"
    RISKEVENTTYPESV2 = "riskEventTypes_v2"
    RISKLEVELAGGREGATED = "riskLevelAggregated"
    RISKLEVELDURINGSIGNIN = "riskLevelDuringSignIn"
    RISKSTATE = "riskState"
    SERVICEPRINCIPALID = "servicePrincipalId"
    SERVICEPRINCIPALNAME = "servicePrincipalName"
    SIGNINEVENTTYPES = "signInEventTypes"
    STATUS = "status"
    TOKENISSUERNAME = "tokenIssuerName"
    TOKENISSUERTYPE = "tokenIssuerType"
    USERAGENT = "userAgent"
    USERDISPLAYNAME = "userDisplayName"
    USERID = "userId"
    USERPRINCIPALNAME = "userPrincipalName"
    TARGETTENANTID = "targetTenantId"

class Enum29(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ALTERNATESIGNINNAME = "alternateSignInName"
    ALTERNATESIGNINNAMEDESC = "alternateSignInName desc"
    APPDISPLAYNAME = "appDisplayName"
    APPDISPLAYNAMEDESC = "appDisplayName desc"
    APPID = "appId"
    APPIDDESC = "appId desc"
    APPLIEDCONDITIONALACCESSPOLICIES = "appliedConditionalAccessPolicies"
    APPLIEDCONDITIONALACCESSPOLICIESDESC = "appliedConditionalAccessPolicies desc"
    AUTHENTICATIONDETAILS = "authenticationDetails"
    AUTHENTICATIONDETAILSDESC = "authenticationDetails desc"
    AUTHENTICATIONMETHODSUSED = "authenticationMethodsUsed"
    AUTHENTICATIONMETHODSUSEDDESC = "authenticationMethodsUsed desc"
    AUTHENTICATIONPROCESSINGDETAILS = "authenticationProcessingDetails"
    AUTHENTICATIONPROCESSINGDETAILSDESC = "authenticationProcessingDetails desc"
    AUTHENTICATIONREQUIREMENT = "authenticationRequirement"
    AUTHENTICATIONREQUIREMENTDESC = "authenticationRequirement desc"
    AUTHENTICATIONREQUIREMENTPOLICIES = "authenticationRequirementPolicies"
    AUTHENTICATIONREQUIREMENTPOLICIESDESC = "authenticationRequirementPolicies desc"
    CLIENTAPPUSED = "clientAppUsed"
    CLIENTAPPUSEDDESC = "clientAppUsed desc"
    CONDITIONALACCESSSTATUS = "conditionalAccessStatus"
    CONDITIONALACCESSSTATUSDESC = "conditionalAccessStatus desc"
    CORRELATIONID = "correlationId"
    CORRELATIONIDDESC = "correlationId desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"
    DEVICEDETAIL = "deviceDetail"
    DEVICEDETAILDESC = "deviceDetail desc"
    IPADDRESS = "ipAddress"
    IPADDRESSDESC = "ipAddress desc"
    ISINTERACTIVE = "isInteractive"
    ISINTERACTIVEDESC = "isInteractive desc"
    LOCATION = "location"
    LOCATIONDESC = "location desc"
    MFADETAIL = "mfaDetail"
    MFADETAILDESC = "mfaDetail desc"
    NETWORKLOCATIONDETAILS = "networkLocationDetails"
    NETWORKLOCATIONDETAILSDESC = "networkLocationDetails desc"
    ORIGINALREQUESTID = "originalRequestId"
    ORIGINALREQUESTIDDESC = "originalRequestId desc"
    PROCESSINGTIMEINMILLISECONDS = "processingTimeInMilliseconds"
    PROCESSINGTIMEINMILLISECONDSDESC = "processingTimeInMilliseconds desc"
    RESOURCEDISPLAYNAME = "resourceDisplayName"
    RESOURCEDISPLAYNAMEDESC = "resourceDisplayName desc"
    RESOURCEID = "resourceId"
    RESOURCEIDDESC = "resourceId desc"
    RESOURCETENANTID = "resourceTenantId"
    RESOURCETENANTIDDESC = "resourceTenantId desc"
    RISKDETAIL = "riskDetail"
    RISKDETAILDESC = "riskDetail desc"
    RISKEVENTTYPES = "riskEventTypes"
    RISKEVENTTYPESDESC = "riskEventTypes desc"
    RISKEVENTTYPESV2 = "riskEventTypes_v2"
    RISKEVENTTYPESV2DESC = "riskEventTypes_v2 desc"
    RISKLEVELAGGREGATED = "riskLevelAggregated"
    RISKLEVELAGGREGATEDDESC = "riskLevelAggregated desc"
    RISKLEVELDURINGSIGNIN = "riskLevelDuringSignIn"
    RISKLEVELDURINGSIGNINDESC = "riskLevelDuringSignIn desc"
    RISKSTATE = "riskState"
    RISKSTATEDESC = "riskState desc"
    SERVICEPRINCIPALID = "servicePrincipalId"
    SERVICEPRINCIPALIDDESC = "servicePrincipalId desc"
    SERVICEPRINCIPALNAME = "servicePrincipalName"
    SERVICEPRINCIPALNAMEDESC = "servicePrincipalName desc"
    SIGNINEVENTTYPES = "signInEventTypes"
    SIGNINEVENTTYPESDESC = "signInEventTypes desc"
    STATUS = "status"
    STATUSDESC = "status desc"
    TOKENISSUERNAME = "tokenIssuerName"
    TOKENISSUERNAMEDESC = "tokenIssuerName desc"
    TOKENISSUERTYPE = "tokenIssuerType"
    TOKENISSUERTYPEDESC = "tokenIssuerType desc"
    USERAGENT = "userAgent"
    USERAGENTDESC = "userAgent desc"
    USERDISPLAYNAME = "userDisplayName"
    USERDISPLAYNAMEDESC = "userDisplayName desc"
    USERID = "userId"
    USERIDDESC = "userId desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"

class Enum30(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ALTERNATESIGNINNAME = "alternateSignInName"
    APPDISPLAYNAME = "appDisplayName"
    APPID = "appId"
    APPLIEDCONDITIONALACCESSPOLICIES = "appliedConditionalAccessPolicies"
    AUTHENTICATIONDETAILS = "authenticationDetails"
    AUTHENTICATIONMETHODSUSED = "authenticationMethodsUsed"
    AUTHENTICATIONPROCESSINGDETAILS = "authenticationProcessingDetails"
    AUTHENTICATIONREQUIREMENT = "authenticationRequirement"
    AUTHENTICATIONREQUIREMENTPOLICIES = "authenticationRequirementPolicies"
    CLIENTAPPUSED = "clientAppUsed"
    CONDITIONALACCESSSTATUS = "conditionalAccessStatus"
    CORRELATIONID = "correlationId"
    CREATEDDATETIME = "createdDateTime"
    DEVICEDETAIL = "deviceDetail"
    IPADDRESS = "ipAddress"
    ISINTERACTIVE = "isInteractive"
    LOCATION = "location"
    MFADETAIL = "mfaDetail"
    NETWORKLOCATIONDETAILS = "networkLocationDetails"
    ORIGINALREQUESTID = "originalRequestId"
    PROCESSINGTIMEINMILLISECONDS = "processingTimeInMilliseconds"
    RESOURCEDISPLAYNAME = "resourceDisplayName"
    RESOURCEID = "resourceId"
    RESOURCETENANTID = "resourceTenantId"
    RISKDETAIL = "riskDetail"
    RISKEVENTTYPES = "riskEventTypes"
    RISKEVENTTYPESV2 = "riskEventTypes_v2"
    RISKLEVELAGGREGATED = "riskLevelAggregated"
    RISKLEVELDURINGSIGNIN = "riskLevelDuringSignIn"
    RISKSTATE = "riskState"
    SERVICEPRINCIPALID = "servicePrincipalId"
    SERVICEPRINCIPALNAME = "servicePrincipalName"
    SIGNINEVENTTYPES = "signInEventTypes"
    STATUS = "status"
    TOKENISSUERNAME = "tokenIssuerName"
    TOKENISSUERTYPE = "tokenIssuerType"
    USERAGENT = "userAgent"
    USERDISPLAYNAME = "userDisplayName"
    USERID = "userId"
    USERPRINCIPALNAME = "userPrincipalName"

class Enum31(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ALTERNATESIGNINNAME = "alternateSignInName"
    APPDISPLAYNAME = "appDisplayName"
    APPID = "appId"
    APPLIEDCONDITIONALACCESSPOLICIES = "appliedConditionalAccessPolicies"
    AUTHENTICATIONDETAILS = "authenticationDetails"
    AUTHENTICATIONMETHODSUSED = "authenticationMethodsUsed"
    AUTHENTICATIONPROCESSINGDETAILS = "authenticationProcessingDetails"
    AUTHENTICATIONREQUIREMENT = "authenticationRequirement"
    AUTHENTICATIONREQUIREMENTPOLICIES = "authenticationRequirementPolicies"
    CLIENTAPPUSED = "clientAppUsed"
    CONDITIONALACCESSSTATUS = "conditionalAccessStatus"
    CORRELATIONID = "correlationId"
    CREATEDDATETIME = "createdDateTime"
    DEVICEDETAIL = "deviceDetail"
    IPADDRESS = "ipAddress"
    ISINTERACTIVE = "isInteractive"
    LOCATION = "location"
    MFADETAIL = "mfaDetail"
    NETWORKLOCATIONDETAILS = "networkLocationDetails"
    ORIGINALREQUESTID = "originalRequestId"
    PROCESSINGTIMEINMILLISECONDS = "processingTimeInMilliseconds"
    RESOURCEDISPLAYNAME = "resourceDisplayName"
    RESOURCEID = "resourceId"
    RESOURCETENANTID = "resourceTenantId"
    RISKDETAIL = "riskDetail"
    RISKEVENTTYPES = "riskEventTypes"
    RISKEVENTTYPESV2 = "riskEventTypes_v2"
    RISKLEVELAGGREGATED = "riskLevelAggregated"
    RISKLEVELDURINGSIGNIN = "riskLevelDuringSignIn"
    RISKSTATE = "riskState"
    SERVICEPRINCIPALID = "servicePrincipalId"
    SERVICEPRINCIPALNAME = "servicePrincipalName"
    SIGNINEVENTTYPES = "signInEventTypes"
    STATUS = "status"
    TOKENISSUERNAME = "tokenIssuerName"
    TOKENISSUERTYPE = "tokenIssuerType"
    USERAGENT = "userAgent"
    USERDISPLAYNAME = "userDisplayName"
    USERID = "userId"
    USERPRINCIPALNAME = "userPrincipalName"

class Enum32(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    APPLICATIONSIGNINDETAILEDSUMMARY = "applicationSignInDetailedSummary"
    CREDENTIALUSERREGISTRATIONDETAILS = "credentialUserRegistrationDetails"
    USERCREDENTIALUSAGEDETAILS = "userCredentialUsageDetails"
    DAILYPRINTUSAGESUMMARIESBYPRINTER = "dailyPrintUsageSummariesByPrinter"
    DAILYPRINTUSAGESUMMARIESBYUSER = "dailyPrintUsageSummariesByUser"
    MONTHLYPRINTUSAGESUMMARIESBYPRINTER = "monthlyPrintUsageSummariesByPrinter"
    MONTHLYPRINTUSAGESUMMARIESBYUSER = "monthlyPrintUsageSummariesByUser"

class Enum33(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLICATIONSIGNINDETAILEDSUMMARY = "applicationSignInDetailedSummary"
    CREDENTIALUSERREGISTRATIONDETAILS = "credentialUserRegistrationDetails"
    USERCREDENTIALUSAGEDETAILS = "userCredentialUsageDetails"
    DAILYPRINTUSAGESUMMARIESBYPRINTER = "dailyPrintUsageSummariesByPrinter"
    DAILYPRINTUSAGESUMMARIESBYUSER = "dailyPrintUsageSummariesByUser"
    MONTHLYPRINTUSAGESUMMARIESBYPRINTER = "monthlyPrintUsageSummariesByPrinter"
    MONTHLYPRINTUSAGESUMMARIESBYUSER = "monthlyPrintUsageSummariesByUser"

class Enum37(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    AGGREGATEDEVENTDATETIME = "aggregatedEventDateTime"
    AGGREGATEDEVENTDATETIMEDESC = "aggregatedEventDateTime desc"
    APPDISPLAYNAME = "appDisplayName"
    APPDISPLAYNAMEDESC = "appDisplayName desc"
    APPID = "appId"
    APPIDDESC = "appId desc"
    SIGNINCOUNT = "signInCount"
    SIGNINCOUNTDESC = "signInCount desc"
    STATUS = "status"
    STATUSDESC = "status desc"

class Enum38(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    AGGREGATEDEVENTDATETIME = "aggregatedEventDateTime"
    APPDISPLAYNAME = "appDisplayName"
    APPID = "appId"
    SIGNINCOUNT = "signInCount"
    STATUS = "status"

class Enum39(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    AGGREGATEDEVENTDATETIME = "aggregatedEventDateTime"
    APPDISPLAYNAME = "appDisplayName"
    APPID = "appId"
    SIGNINCOUNT = "signInCount"
    STATUS = "status"

class Enum40(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    AUTHMETHODS = "authMethods"
    AUTHMETHODSDESC = "authMethods desc"
    ISCAPABLE = "isCapable"
    ISCAPABLEDESC = "isCapable desc"
    ISENABLED = "isEnabled"
    ISENABLEDDESC = "isEnabled desc"
    ISMFAREGISTERED = "isMfaRegistered"
    ISMFAREGISTEREDDESC = "isMfaRegistered desc"
    ISREGISTERED = "isRegistered"
    ISREGISTEREDDESC = "isRegistered desc"
    USERDISPLAYNAME = "userDisplayName"
    USERDISPLAYNAMEDESC = "userDisplayName desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"

class Enum41(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    AUTHMETHODS = "authMethods"
    ISCAPABLE = "isCapable"
    ISENABLED = "isEnabled"
    ISMFAREGISTERED = "isMfaRegistered"
    ISREGISTERED = "isRegistered"
    USERDISPLAYNAME = "userDisplayName"
    USERPRINCIPALNAME = "userPrincipalName"

class Enum42(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    AUTHMETHODS = "authMethods"
    ISCAPABLE = "isCapable"
    ISENABLED = "isEnabled"
    ISMFAREGISTERED = "isMfaRegistered"
    ISREGISTERED = "isRegistered"
    USERDISPLAYNAME = "userDisplayName"
    USERPRINCIPALNAME = "userPrincipalName"

class Enum43(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    COMPLETEDBLACKANDWHITEJOBCOUNT = "completedBlackAndWhiteJobCount"
    COMPLETEDBLACKANDWHITEJOBCOUNTDESC = "completedBlackAndWhiteJobCount desc"
    COMPLETEDCOLORJOBCOUNT = "completedColorJobCount"
    COMPLETEDCOLORJOBCOUNTDESC = "completedColorJobCount desc"
    INCOMPLETEJOBCOUNT = "incompleteJobCount"
    INCOMPLETEJOBCOUNTDESC = "incompleteJobCount desc"
    PRINTERID = "printerId"
    PRINTERIDDESC = "printerId desc"
    USAGEDATE = "usageDate"
    USAGEDATEDESC = "usageDate desc"

class Enum44(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    COMPLETEDBLACKANDWHITEJOBCOUNT = "completedBlackAndWhiteJobCount"
    COMPLETEDCOLORJOBCOUNT = "completedColorJobCount"
    INCOMPLETEJOBCOUNT = "incompleteJobCount"
    PRINTERID = "printerId"
    USAGEDATE = "usageDate"

class Enum45(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    COMPLETEDBLACKANDWHITEJOBCOUNT = "completedBlackAndWhiteJobCount"
    COMPLETEDCOLORJOBCOUNT = "completedColorJobCount"
    INCOMPLETEJOBCOUNT = "incompleteJobCount"
    PRINTERID = "printerId"
    USAGEDATE = "usageDate"

class Enum46(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    COMPLETEDBLACKANDWHITEJOBCOUNT = "completedBlackAndWhiteJobCount"
    COMPLETEDBLACKANDWHITEJOBCOUNTDESC = "completedBlackAndWhiteJobCount desc"
    COMPLETEDCOLORJOBCOUNT = "completedColorJobCount"
    COMPLETEDCOLORJOBCOUNTDESC = "completedColorJobCount desc"
    INCOMPLETEJOBCOUNT = "incompleteJobCount"
    INCOMPLETEJOBCOUNTDESC = "incompleteJobCount desc"
    USAGEDATE = "usageDate"
    USAGEDATEDESC = "usageDate desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"

class Enum47(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    COMPLETEDBLACKANDWHITEJOBCOUNT = "completedBlackAndWhiteJobCount"
    COMPLETEDCOLORJOBCOUNT = "completedColorJobCount"
    INCOMPLETEJOBCOUNT = "incompleteJobCount"
    USAGEDATE = "usageDate"
    USERPRINCIPALNAME = "userPrincipalName"

class Enum48(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    COMPLETEDBLACKANDWHITEJOBCOUNT = "completedBlackAndWhiteJobCount"
    COMPLETEDCOLORJOBCOUNT = "completedColorJobCount"
    INCOMPLETEJOBCOUNT = "incompleteJobCount"
    USAGEDATE = "usageDate"
    USERPRINCIPALNAME = "userPrincipalName"

class Enum52(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    COMPLETEDBLACKANDWHITEJOBCOUNT = "completedBlackAndWhiteJobCount"
    COMPLETEDBLACKANDWHITEJOBCOUNTDESC = "completedBlackAndWhiteJobCount desc"
    COMPLETEDCOLORJOBCOUNT = "completedColorJobCount"
    COMPLETEDCOLORJOBCOUNTDESC = "completedColorJobCount desc"
    INCOMPLETEJOBCOUNT = "incompleteJobCount"
    INCOMPLETEJOBCOUNTDESC = "incompleteJobCount desc"
    PRINTERID = "printerId"
    PRINTERIDDESC = "printerId desc"
    USAGEDATE = "usageDate"
    USAGEDATEDESC = "usageDate desc"

class Enum53(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    COMPLETEDBLACKANDWHITEJOBCOUNT = "completedBlackAndWhiteJobCount"
    COMPLETEDCOLORJOBCOUNT = "completedColorJobCount"
    INCOMPLETEJOBCOUNT = "incompleteJobCount"
    PRINTERID = "printerId"
    USAGEDATE = "usageDate"

class Enum54(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    COMPLETEDBLACKANDWHITEJOBCOUNT = "completedBlackAndWhiteJobCount"
    COMPLETEDCOLORJOBCOUNT = "completedColorJobCount"
    INCOMPLETEJOBCOUNT = "incompleteJobCount"
    PRINTERID = "printerId"
    USAGEDATE = "usageDate"

class Enum55(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    COMPLETEDBLACKANDWHITEJOBCOUNT = "completedBlackAndWhiteJobCount"
    COMPLETEDBLACKANDWHITEJOBCOUNTDESC = "completedBlackAndWhiteJobCount desc"
    COMPLETEDCOLORJOBCOUNT = "completedColorJobCount"
    COMPLETEDCOLORJOBCOUNTDESC = "completedColorJobCount desc"
    INCOMPLETEJOBCOUNT = "incompleteJobCount"
    INCOMPLETEJOBCOUNTDESC = "incompleteJobCount desc"
    USAGEDATE = "usageDate"
    USAGEDATEDESC = "usageDate desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"

class Enum56(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    COMPLETEDBLACKANDWHITEJOBCOUNT = "completedBlackAndWhiteJobCount"
    COMPLETEDCOLORJOBCOUNT = "completedColorJobCount"
    INCOMPLETEJOBCOUNT = "incompleteJobCount"
    USAGEDATE = "usageDate"
    USERPRINCIPALNAME = "userPrincipalName"

class Enum57(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    COMPLETEDBLACKANDWHITEJOBCOUNT = "completedBlackAndWhiteJobCount"
    COMPLETEDCOLORJOBCOUNT = "completedColorJobCount"
    INCOMPLETEJOBCOUNT = "incompleteJobCount"
    USAGEDATE = "usageDate"
    USERPRINCIPALNAME = "userPrincipalName"

class Enum58(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    AUTHMETHOD = "authMethod"
    AUTHMETHODDESC = "authMethod desc"
    EVENTDATETIME = "eventDateTime"
    EVENTDATETIMEDESC = "eventDateTime desc"
    FAILUREREASON = "failureReason"
    FAILUREREASONDESC = "failureReason desc"
    FEATURE = "feature"
    FEATUREDESC = "feature desc"
    ISSUCCESS = "isSuccess"
    ISSUCCESSDESC = "isSuccess desc"
    USERDISPLAYNAME = "userDisplayName"
    USERDISPLAYNAMEDESC = "userDisplayName desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"

class Enum59(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    AUTHMETHOD = "authMethod"
    EVENTDATETIME = "eventDateTime"
    FAILUREREASON = "failureReason"
    FEATURE = "feature"
    ISSUCCESS = "isSuccess"
    USERDISPLAYNAME = "userDisplayName"
    USERPRINCIPALNAME = "userPrincipalName"

class Enum60(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    AUTHMETHOD = "authMethod"
    EVENTDATETIME = "eventDateTime"
    FAILUREREASON = "failureReason"
    FEATURE = "feature"
    ISSUCCESS = "isSuccess"
    USERDISPLAYNAME = "userDisplayName"
    USERPRINCIPALNAME = "userPrincipalName"

class Get0itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DIRECTORYAUDITS = "directoryAudits"
    DIRECTORYPROVISIONING = "directoryProvisioning"
    PROVISIONING = "provisioning"
    RESTRICTEDSIGNINS = "restrictedSignIns"
    SIGNINS = "signIns"

class Get1itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    DIRECTORYAUDITS = "directoryAudits"
    DIRECTORYPROVISIONING = "directoryProvisioning"
    PROVISIONING = "provisioning"
    RESTRICTEDSIGNINS = "restrictedSignIns"
    SIGNINS = "signIns"

class Get5itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ACTIVITYDATETIME = "activityDateTime"
    ACTIVITYDATETIMEDESC = "activityDateTime desc"
    ACTIVITYDISPLAYNAME = "activityDisplayName"
    ACTIVITYDISPLAYNAMEDESC = "activityDisplayName desc"
    ADDITIONALDETAILS = "additionalDetails"
    ADDITIONALDETAILSDESC = "additionalDetails desc"
    CATEGORY = "category"
    CATEGORYDESC = "category desc"
    CORRELATIONID = "correlationId"
    CORRELATIONIDDESC = "correlationId desc"
    INITIATEDBY = "initiatedBy"
    INITIATEDBYDESC = "initiatedBy desc"
    LOGGEDBYSERVICE = "loggedByService"
    LOGGEDBYSERVICEDESC = "loggedByService desc"
    OPERATIONTYPE = "operationType"
    OPERATIONTYPEDESC = "operationType desc"
    RESULT = "result"
    RESULTDESC = "result desc"
    RESULTREASON = "resultReason"
    RESULTREASONDESC = "resultReason desc"
    TARGETRESOURCES = "targetResources"
    TARGETRESOURCESDESC = "targetResources desc"

class Get6itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACTIVITYDATETIME = "activityDateTime"
    ACTIVITYDISPLAYNAME = "activityDisplayName"
    ADDITIONALDETAILS = "additionalDetails"
    CATEGORY = "category"
    CORRELATIONID = "correlationId"
    INITIATEDBY = "initiatedBy"
    LOGGEDBYSERVICE = "loggedByService"
    OPERATIONTYPE = "operationType"
    RESULT = "result"
    RESULTREASON = "resultReason"
    TARGETRESOURCES = "targetResources"

class Microsoftgraphappliedconditionalaccesspolicyresult(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SUCCESS = "success"
    FAILURE = "failure"
    NOTAPPLIED = "notApplied"
    NOTENABLED = "notEnabled"
    UNKNOWN = "unknown"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"
    REPORTONLYSUCCESS = "reportOnlySuccess"
    REPORTONLYFAILURE = "reportOnlyFailure"
    REPORTONLYNOTAPPLIED = "reportOnlyNotApplied"
    REPORTONLYINTERRUPTED = "reportOnlyInterrupted"

class Microsoftgraphazureadlicensetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    FREE = "free"
    BASIC = "basic"
    PREMIUMP1 = "premiumP1"
    PREMIUMP2 = "premiumP2"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphconditionalaccessconditions(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    APPLICATION = "application"
    USERS = "users"
    DEVICEPLATFORM = "devicePlatform"
    LOCATION = "location"
    CLIENTTYPE = "clientType"
    SIGNINRISK = "signInRisk"
    USERRISK = "userRisk"
    TIME = "time"
    DEVICESTATE = "deviceState"
    CLIENT = "client"

class Microsoftgraphconditionalaccessstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SUCCESS = "success"
    FAILURE = "failure"
    NOTAPPLIED = "notApplied"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphfeaturetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    REGISTRATION = "registration"
    RESET = "reset"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphgrouptype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNIFIEDGROUPS = "unifiedGroups"
    AZUREAD = "azureAD"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphinitiatortype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    USER = "user"
    APP = "app"
    SYSTEM = "system"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphmigrationstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    READY = "ready"
    NEEDSREVIEW = "needsReview"
    ADDITIONALSTEPSREQUIRED = "additionalStepsRequired"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphnetworktype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INTRANET = "intranet"
    EXTRANET = "extranet"
    NAMEDNETWORK = "namedNetwork"
    TRUSTED = "trusted"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphoperationresult(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SUCCESS = "success"
    FAILURE = "failure"
    TIMEOUT = "timeout"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphprovisioningresult(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SUCCESS = "success"
    FAILURE = "failure"
    SKIPPED = "skipped"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphprovisioningsteptype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    IMPORT_ENUM = "import"
    SCOPING = "scoping"
    MATCHING = "matching"
    PROCESSING = "processing"
    REFERENCERESOLUTION = "referenceResolution"
    EXPORT = "export"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphregistrationauthmethod(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EMAIL = "email"
    MOBILEPHONE = "mobilePhone"
    OFFICEPHONE = "officePhone"
    SECURITYQUESTION = "securityQuestion"
    APPNOTIFICATION = "appNotification"
    APPCODE = "appCode"
    ALTERNATEMOBILEPHONE = "alternateMobilePhone"
    FIDO = "fido"
    APPPASSWORD = "appPassword"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphregistrationstatustype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    REGISTERED = "registered"
    ENABLED = "enabled"
    CAPABLE = "capable"
    MFAREGISTERED = "mfaRegistered"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphrequirementprovider(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MFA = "MFA"
    CA = "CA"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphriskdetail(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ADMINGENERATEDTEMPORARYPASSWORD = "adminGeneratedTemporaryPassword"
    USERPERFORMEDSECUREDPASSWORDCHANGE = "userPerformedSecuredPasswordChange"
    USERPERFORMEDSECUREDPASSWORDRESET = "userPerformedSecuredPasswordReset"
    ADMINCONFIRMEDSIGNINSAFE = "adminConfirmedSigninSafe"
    AICONFIRMEDSIGNINSAFE = "aiConfirmedSigninSafe"
    USERPASSEDMFADRIVENBYRISKBASEDPOLICY = "userPassedMFADrivenByRiskBasedPolicy"
    ADMINDISMISSEDALLRISKFORUSER = "adminDismissedAllRiskForUser"
    ADMINCONFIRMEDSIGNINCOMPROMISED = "adminConfirmedSigninCompromised"
    HIDDEN = "hidden"
    ADMINCONFIRMEDUSERCOMPROMISED = "adminConfirmedUserCompromised"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphriskeventtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNLIKELYTRAVEL = "unlikelyTravel"
    ANONYMIZEDIPADDRESS = "anonymizedIPAddress"
    MALICIOUSIPADDRESS = "maliciousIPAddress"
    UNFAMILIARFEATURES = "unfamiliarFeatures"
    MALWAREINFECTEDIPADDRESS = "malwareInfectedIPAddress"
    SUSPICIOUSIPADDRESS = "suspiciousIPAddress"
    LEAKEDCREDENTIALS = "leakedCredentials"
    INVESTIGATIONSTHREATINTELLIGENCE = "investigationsThreatIntelligence"
    GENERIC = "generic"
    ADMINCONFIRMEDUSERCOMPROMISED = "adminConfirmedUserCompromised"
    MCASIMPOSSIBLETRAVEL = "mcasImpossibleTravel"
    MCASSUSPICIOUSINBOXMANIPULATIONRULES = "mcasSuspiciousInboxManipulationRules"
    INVESTIGATIONSTHREATINTELLIGENCESIGNINLINKED = "investigationsThreatIntelligenceSigninLinked"
    MALICIOUSIPADDRESSVALIDCREDENTIALSBLOCKEDIP = "maliciousIPAddressValidCredentialsBlockedIP"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphrisklevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    HIDDEN = "hidden"
    NONE = "none"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphriskstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    CONFIRMEDSAFE = "confirmedSafe"
    REMEDIATED = "remediated"
    DISMISSED = "dismissed"
    ATRISK = "atRisk"
    CONFIRMEDCOMPROMISED = "confirmedCompromised"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphtokenissuertype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AZUREAD = "AzureAD"
    ADFEDERATIONSERVICES = "ADFederationServices"
    UNKNOWNFUTUREVALUE = "UnknownFutureValue"

class Microsoftgraphusageauthmethod(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EMAIL = "email"
    MOBILESMS = "mobileSMS"
    MOBILECALL = "mobileCall"
    OFFICEPHONE = "officePhone"
    SECURITYQUESTION = "securityQuestion"
    APPNOTIFICATION = "appNotification"
    APPCODE = "appCode"
    ALTERNATEMOBILECALL = "alternateMobileCall"
    FIDO = "fido"
    APPPASSWORD = "appPassword"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"
