# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class AuditLogOperations(object):
    """AuditLogOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~reports.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_directory_audit(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Get5ItemsItem"]]]
        select=None,  # type: Optional[List[Union[str, "models.Get6ItemsItem"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfDirectoryAudit"]
        """Get directoryAudits from auditLogs.

        Get directoryAudits from auditLogs.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~reports.models.Get5ItemsItem]
        :param select: Select properties to be returned.
        :type select: list[str or ~reports.models.Get6ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfDirectoryAudit or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~reports.models.CollectionOfDirectoryAudit]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfDirectoryAudit"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_directory_audit.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfDirectoryAudit', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_directory_audit.metadata = {'url': '/auditLogs/directoryAudits'}  # type: ignore

    def create_directory_audit(
        self,
        id=None,  # type: Optional[str]
        activity_date_time=None,  # type: Optional[datetime.datetime]
        activity_display_name=None,  # type: Optional[str]
        additional_details=None,  # type: Optional[List["models.MicrosoftGraphKeyValue"]]
        category=None,  # type: Optional[str]
        correlation_id=None,  # type: Optional[str]
        logged_by_service=None,  # type: Optional[str]
        operation_type=None,  # type: Optional[str]
        result=None,  # type: Optional[Union[str, "models.MicrosoftGraphOperationResult"]]
        result_reason=None,  # type: Optional[str]
        target_resources=None,  # type: Optional[List["models.MicrosoftGraphTargetResource"]]
        app=None,  # type: Optional["models.MicrosoftGraphAppIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphUserIdentity"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphDirectoryAudit"
        """Create new navigation property to directoryAudits for auditLogs.

        Create new navigation property to directoryAudits for auditLogs.

        :param id: Read-only.
        :type id: str
        :param activity_date_time: Indicates the date and time the activity was performed. The
         Timestamp type is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type activity_date_time: ~datetime.datetime
        :param activity_display_name: Indicates the activity name or the operation name (examples:
         'Create User' and 'Add member to group'). For full list, see Azure AD activity list.
        :type activity_display_name: str
        :param additional_details: Indicates additional details on the activity.
        :type additional_details: list[~reports.models.MicrosoftGraphKeyValue]
        :param category: Indicates which resource category that's targeted by the activity. (For
         example: User Management, Group Management etc..).
        :type category: str
        :param correlation_id: Indicates a unique ID that helps correlate activities that span across
         various services. Can be used to trace logs across services.
        :type correlation_id: str
        :param logged_by_service: Indicates information on which service initiated the activity (For
         example: Self-service Password Management, Core Directory, B2C, Invited Users, Microsoft
         Identity Manager, Privileged Identity Management.
        :type logged_by_service: str
        :param operation_type:
        :type operation_type: str
        :param result:
        :type result: str or ~reports.models.MicrosoftGraphOperationResult
        :param result_reason: Describes cause of 'failure' or 'timeout' results.
        :type result_reason: str
        :param target_resources: Indicates information on which resource was changed due to the
         activity. Target Resource Type can be User, Device, Directory, App, Role, Group, Policy or
         Other.
        :type target_resources: list[~reports.models.MicrosoftGraphTargetResource]
        :param app: appIdentity.
        :type app: ~reports.models.MicrosoftGraphAppIdentity
        :param user: userIdentity.
        :type user: ~reports.models.MicrosoftGraphUserIdentity
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphDirectoryAudit, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphDirectoryAudit
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphDirectoryAudit"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphDirectoryAudit(id=id, activity_date_time=activity_date_time, activity_display_name=activity_display_name, additional_details=additional_details, category=category, correlation_id=correlation_id, logged_by_service=logged_by_service, operation_type=operation_type, result=result, result_reason=result_reason, target_resources=target_resources, app=app, user=user)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_directory_audit.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphDirectoryAudit')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphDirectoryAudit', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_directory_audit.metadata = {'url': '/auditLogs/directoryAudits'}  # type: ignore

    def get_directory_audit(
        self,
        directory_audit_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum19"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphDirectoryAudit"
        """Get directoryAudits from auditLogs.

        Get directoryAudits from auditLogs.

        :param directory_audit_id: key: id of directoryAudit.
        :type directory_audit_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~reports.models.Enum19]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphDirectoryAudit, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphDirectoryAudit
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphDirectoryAudit"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_directory_audit.metadata['url']  # type: ignore
        path_format_arguments = {
            'directoryAudit-id': self._serialize.url("directory_audit_id", directory_audit_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphDirectoryAudit', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_directory_audit.metadata = {'url': '/auditLogs/directoryAudits/{directoryAudit-id}'}  # type: ignore

    def update_directory_audit(
        self,
        directory_audit_id,  # type: str
        id=None,  # type: Optional[str]
        activity_date_time=None,  # type: Optional[datetime.datetime]
        activity_display_name=None,  # type: Optional[str]
        additional_details=None,  # type: Optional[List["models.MicrosoftGraphKeyValue"]]
        category=None,  # type: Optional[str]
        correlation_id=None,  # type: Optional[str]
        logged_by_service=None,  # type: Optional[str]
        operation_type=None,  # type: Optional[str]
        result=None,  # type: Optional[Union[str, "models.MicrosoftGraphOperationResult"]]
        result_reason=None,  # type: Optional[str]
        target_resources=None,  # type: Optional[List["models.MicrosoftGraphTargetResource"]]
        app=None,  # type: Optional["models.MicrosoftGraphAppIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphUserIdentity"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property directoryAudits in auditLogs.

        Update the navigation property directoryAudits in auditLogs.

        :param directory_audit_id: key: id of directoryAudit.
        :type directory_audit_id: str
        :param id: Read-only.
        :type id: str
        :param activity_date_time: Indicates the date and time the activity was performed. The
         Timestamp type is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type activity_date_time: ~datetime.datetime
        :param activity_display_name: Indicates the activity name or the operation name (examples:
         'Create User' and 'Add member to group'). For full list, see Azure AD activity list.
        :type activity_display_name: str
        :param additional_details: Indicates additional details on the activity.
        :type additional_details: list[~reports.models.MicrosoftGraphKeyValue]
        :param category: Indicates which resource category that's targeted by the activity. (For
         example: User Management, Group Management etc..).
        :type category: str
        :param correlation_id: Indicates a unique ID that helps correlate activities that span across
         various services. Can be used to trace logs across services.
        :type correlation_id: str
        :param logged_by_service: Indicates information on which service initiated the activity (For
         example: Self-service Password Management, Core Directory, B2C, Invited Users, Microsoft
         Identity Manager, Privileged Identity Management.
        :type logged_by_service: str
        :param operation_type:
        :type operation_type: str
        :param result:
        :type result: str or ~reports.models.MicrosoftGraphOperationResult
        :param result_reason: Describes cause of 'failure' or 'timeout' results.
        :type result_reason: str
        :param target_resources: Indicates information on which resource was changed due to the
         activity. Target Resource Type can be User, Device, Directory, App, Role, Group, Policy or
         Other.
        :type target_resources: list[~reports.models.MicrosoftGraphTargetResource]
        :param app: appIdentity.
        :type app: ~reports.models.MicrosoftGraphAppIdentity
        :param user: userIdentity.
        :type user: ~reports.models.MicrosoftGraphUserIdentity
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphDirectoryAudit(id=id, activity_date_time=activity_date_time, activity_display_name=activity_display_name, additional_details=additional_details, category=category, correlation_id=correlation_id, logged_by_service=logged_by_service, operation_type=operation_type, result=result, result_reason=result_reason, target_resources=target_resources, app=app, user=user)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_directory_audit.metadata['url']  # type: ignore
        path_format_arguments = {
            'directoryAudit-id': self._serialize.url("directory_audit_id", directory_audit_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphDirectoryAudit')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_directory_audit.metadata = {'url': '/auditLogs/directoryAudits/{directoryAudit-id}'}  # type: ignore

    def delete_directory_audit(
        self,
        directory_audit_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property directoryAudits for auditLogs.

        Delete navigation property directoryAudits for auditLogs.

        :param directory_audit_id: key: id of directoryAudit.
        :type directory_audit_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_directory_audit.metadata['url']  # type: ignore
        path_format_arguments = {
            'directoryAudit-id': self._serialize.url("directory_audit_id", directory_audit_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_directory_audit.metadata = {'url': '/auditLogs/directoryAudits/{directoryAudit-id}'}  # type: ignore

    def list_directory_provisioning(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum20"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum21"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfProvisioningObjectSummary"]
        """Get directoryProvisioning from auditLogs.

        Get directoryProvisioning from auditLogs.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~reports.models.Enum20]
        :param select: Select properties to be returned.
        :type select: list[str or ~reports.models.Enum21]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfProvisioningObjectSummary or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~reports.models.CollectionOfProvisioningObjectSummary]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfProvisioningObjectSummary"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_directory_provisioning.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfProvisioningObjectSummary', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_directory_provisioning.metadata = {'url': '/auditLogs/directoryProvisioning'}  # type: ignore

    def create_directory_provisioning(
        self,
        id=None,  # type: Optional[str]
        action=None,  # type: Optional[str]
        activity_date_time=None,  # type: Optional[datetime.datetime]
        change_id=None,  # type: Optional[str]
        cycle_id=None,  # type: Optional[str]
        duration_in_milliseconds=None,  # type: Optional[int]
        initiated_by=None,  # type: Optional["models.MicrosoftGraphInitiator"]
        job_id=None,  # type: Optional[str]
        modified_properties=None,  # type: Optional[List["models.MicrosoftGraphModifiedProperty"]]
        provisioning_steps=None,  # type: Optional[List["models.MicrosoftGraphProvisioningStep"]]
        service_principal=None,  # type: Optional["models.MicrosoftGraphProvisioningServicePrincipal"]
        tenant_id=None,  # type: Optional[str]
        details=None,  # type: Optional[Dict[str, object]]
        display_name=None,  # type: Optional[str]
        microsoft_graph_provisioning_system_details_id=None,  # type: Optional[str]
        microsoft_graph_details_info_details=None,  # type: Optional[Dict[str, object]]
        microsoft_graph_provisioned_identity_display_name=None,  # type: Optional[str]
        microsoft_graph_provisioned_identity_id=None,  # type: Optional[str]
        identity_type=None,  # type: Optional[str]
        status=None,  # type: Optional[Union[str, "models.MicrosoftGraphProvisioningResult"]]
        details1=None,  # type: Optional[Dict[str, object]]
        microsoft_graph_provisioning_system_details_display_name=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        details2=None,  # type: Optional[Dict[str, object]]
        display_name1=None,  # type: Optional[str]
        id2=None,  # type: Optional[str]
        microsoft_graph_provisioned_identity_type=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphProvisioningObjectSummary"
        """Create new navigation property to directoryProvisioning for auditLogs.

        Create new navigation property to directoryProvisioning for auditLogs.

        :param id: Read-only.
        :type id: str
        :param action:
        :type action: str
        :param activity_date_time:
        :type activity_date_time: ~datetime.datetime
        :param change_id:
        :type change_id: str
        :param cycle_id:
        :type cycle_id: str
        :param duration_in_milliseconds:
        :type duration_in_milliseconds: int
        :param initiated_by: initiator.
        :type initiated_by: ~reports.models.MicrosoftGraphInitiator
        :param job_id:
        :type job_id: str
        :param modified_properties:
        :type modified_properties: list[~reports.models.MicrosoftGraphModifiedProperty]
        :param provisioning_steps:
        :type provisioning_steps: list[~reports.models.MicrosoftGraphProvisioningStep]
        :param service_principal: provisioningServicePrincipal.
        :type service_principal: ~reports.models.MicrosoftGraphProvisioningServicePrincipal
        :param tenant_id:
        :type tenant_id: str
        :param details: detailsInfo.
        :type details: dict[str, object]
        :param display_name:
        :type display_name: str
        :param microsoft_graph_provisioning_system_details_id:
        :type microsoft_graph_provisioning_system_details_id: str
        :param microsoft_graph_details_info_details: detailsInfo.
        :type microsoft_graph_details_info_details: dict[str, object]
        :param microsoft_graph_provisioned_identity_display_name:
        :type microsoft_graph_provisioned_identity_display_name: str
        :param microsoft_graph_provisioned_identity_id:
        :type microsoft_graph_provisioned_identity_id: str
        :param identity_type:
        :type identity_type: str
        :param status:
        :type status: str or ~reports.models.MicrosoftGraphProvisioningResult
        :param details1: detailsInfo.
        :type details1: dict[str, object]
        :param microsoft_graph_provisioning_system_details_display_name:
        :type microsoft_graph_provisioning_system_details_display_name: str
        :param id1:
        :type id1: str
        :param details2: detailsInfo.
        :type details2: dict[str, object]
        :param display_name1:
        :type display_name1: str
        :param id2:
        :type id2: str
        :param microsoft_graph_provisioned_identity_type:
        :type microsoft_graph_provisioned_identity_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphProvisioningObjectSummary, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphProvisioningObjectSummary
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphProvisioningObjectSummary"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphProvisioningObjectSummary(id=id, action=action, activity_date_time=activity_date_time, change_id=change_id, cycle_id=cycle_id, duration_in_milliseconds=duration_in_milliseconds, initiated_by=initiated_by, job_id=job_id, modified_properties=modified_properties, provisioning_steps=provisioning_steps, service_principal=service_principal, tenant_id=tenant_id, details_target_system_details=details, display_name_target_system_display_name=display_name, id_target_system_id=microsoft_graph_provisioning_system_details_id, details_target_identity_details=microsoft_graph_details_info_details, display_name_target_identity_display_name=microsoft_graph_provisioned_identity_display_name, id_target_identity_id=microsoft_graph_provisioned_identity_id, identity_type_target_identity_type=identity_type, status=status, details_source_system_details=details1, display_name_source_system_display_name=microsoft_graph_provisioning_system_details_display_name, id_source_system_id=id1, details_source_identity_details=details2, display_name_source_identity_display_name=display_name1, id_source_identity_id=id2, identity_type_source_identity_type=microsoft_graph_provisioned_identity_type)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_directory_provisioning.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphProvisioningObjectSummary')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphProvisioningObjectSummary', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_directory_provisioning.metadata = {'url': '/auditLogs/directoryProvisioning'}  # type: ignore

    def get_directory_provisioning(
        self,
        provisioning_object_summary_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum22"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphProvisioningObjectSummary"
        """Get directoryProvisioning from auditLogs.

        Get directoryProvisioning from auditLogs.

        :param provisioning_object_summary_id: key: id of provisioningObjectSummary.
        :type provisioning_object_summary_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~reports.models.Enum22]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphProvisioningObjectSummary, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphProvisioningObjectSummary
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphProvisioningObjectSummary"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_directory_provisioning.metadata['url']  # type: ignore
        path_format_arguments = {
            'provisioningObjectSummary-id': self._serialize.url("provisioning_object_summary_id", provisioning_object_summary_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphProvisioningObjectSummary', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_directory_provisioning.metadata = {'url': '/auditLogs/directoryProvisioning/{provisioningObjectSummary-id}'}  # type: ignore

    def update_directory_provisioning(
        self,
        provisioning_object_summary_id,  # type: str
        id=None,  # type: Optional[str]
        action=None,  # type: Optional[str]
        activity_date_time=None,  # type: Optional[datetime.datetime]
        change_id=None,  # type: Optional[str]
        cycle_id=None,  # type: Optional[str]
        duration_in_milliseconds=None,  # type: Optional[int]
        initiated_by=None,  # type: Optional["models.MicrosoftGraphInitiator"]
        job_id=None,  # type: Optional[str]
        modified_properties=None,  # type: Optional[List["models.MicrosoftGraphModifiedProperty"]]
        provisioning_steps=None,  # type: Optional[List["models.MicrosoftGraphProvisioningStep"]]
        service_principal=None,  # type: Optional["models.MicrosoftGraphProvisioningServicePrincipal"]
        tenant_id=None,  # type: Optional[str]
        details=None,  # type: Optional[Dict[str, object]]
        display_name=None,  # type: Optional[str]
        microsoft_graph_provisioning_system_details_id=None,  # type: Optional[str]
        microsoft_graph_details_info_details=None,  # type: Optional[Dict[str, object]]
        microsoft_graph_provisioned_identity_display_name=None,  # type: Optional[str]
        microsoft_graph_provisioned_identity_id=None,  # type: Optional[str]
        identity_type=None,  # type: Optional[str]
        status=None,  # type: Optional[Union[str, "models.MicrosoftGraphProvisioningResult"]]
        details1=None,  # type: Optional[Dict[str, object]]
        microsoft_graph_provisioning_system_details_display_name=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        details2=None,  # type: Optional[Dict[str, object]]
        display_name1=None,  # type: Optional[str]
        id2=None,  # type: Optional[str]
        microsoft_graph_provisioned_identity_type=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property directoryProvisioning in auditLogs.

        Update the navigation property directoryProvisioning in auditLogs.

        :param provisioning_object_summary_id: key: id of provisioningObjectSummary.
        :type provisioning_object_summary_id: str
        :param id: Read-only.
        :type id: str
        :param action:
        :type action: str
        :param activity_date_time:
        :type activity_date_time: ~datetime.datetime
        :param change_id:
        :type change_id: str
        :param cycle_id:
        :type cycle_id: str
        :param duration_in_milliseconds:
        :type duration_in_milliseconds: int
        :param initiated_by: initiator.
        :type initiated_by: ~reports.models.MicrosoftGraphInitiator
        :param job_id:
        :type job_id: str
        :param modified_properties:
        :type modified_properties: list[~reports.models.MicrosoftGraphModifiedProperty]
        :param provisioning_steps:
        :type provisioning_steps: list[~reports.models.MicrosoftGraphProvisioningStep]
        :param service_principal: provisioningServicePrincipal.
        :type service_principal: ~reports.models.MicrosoftGraphProvisioningServicePrincipal
        :param tenant_id:
        :type tenant_id: str
        :param details: detailsInfo.
        :type details: dict[str, object]
        :param display_name:
        :type display_name: str
        :param microsoft_graph_provisioning_system_details_id:
        :type microsoft_graph_provisioning_system_details_id: str
        :param microsoft_graph_details_info_details: detailsInfo.
        :type microsoft_graph_details_info_details: dict[str, object]
        :param microsoft_graph_provisioned_identity_display_name:
        :type microsoft_graph_provisioned_identity_display_name: str
        :param microsoft_graph_provisioned_identity_id:
        :type microsoft_graph_provisioned_identity_id: str
        :param identity_type:
        :type identity_type: str
        :param status:
        :type status: str or ~reports.models.MicrosoftGraphProvisioningResult
        :param details1: detailsInfo.
        :type details1: dict[str, object]
        :param microsoft_graph_provisioning_system_details_display_name:
        :type microsoft_graph_provisioning_system_details_display_name: str
        :param id1:
        :type id1: str
        :param details2: detailsInfo.
        :type details2: dict[str, object]
        :param display_name1:
        :type display_name1: str
        :param id2:
        :type id2: str
        :param microsoft_graph_provisioned_identity_type:
        :type microsoft_graph_provisioned_identity_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphProvisioningObjectSummary(id=id, action=action, activity_date_time=activity_date_time, change_id=change_id, cycle_id=cycle_id, duration_in_milliseconds=duration_in_milliseconds, initiated_by=initiated_by, job_id=job_id, modified_properties=modified_properties, provisioning_steps=provisioning_steps, service_principal=service_principal, tenant_id=tenant_id, details_target_system_details=details, display_name_target_system_display_name=display_name, id_target_system_id=microsoft_graph_provisioning_system_details_id, details_target_identity_details=microsoft_graph_details_info_details, display_name_target_identity_display_name=microsoft_graph_provisioned_identity_display_name, id_target_identity_id=microsoft_graph_provisioned_identity_id, identity_type_target_identity_type=identity_type, status=status, details_source_system_details=details1, display_name_source_system_display_name=microsoft_graph_provisioning_system_details_display_name, id_source_system_id=id1, details_source_identity_details=details2, display_name_source_identity_display_name=display_name1, id_source_identity_id=id2, identity_type_source_identity_type=microsoft_graph_provisioned_identity_type)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_directory_provisioning.metadata['url']  # type: ignore
        path_format_arguments = {
            'provisioningObjectSummary-id': self._serialize.url("provisioning_object_summary_id", provisioning_object_summary_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphProvisioningObjectSummary')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_directory_provisioning.metadata = {'url': '/auditLogs/directoryProvisioning/{provisioningObjectSummary-id}'}  # type: ignore

    def delete_directory_provisioning(
        self,
        provisioning_object_summary_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property directoryProvisioning for auditLogs.

        Delete navigation property directoryProvisioning for auditLogs.

        :param provisioning_object_summary_id: key: id of provisioningObjectSummary.
        :type provisioning_object_summary_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_directory_provisioning.metadata['url']  # type: ignore
        path_format_arguments = {
            'provisioningObjectSummary-id': self._serialize.url("provisioning_object_summary_id", provisioning_object_summary_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_directory_provisioning.metadata = {'url': '/auditLogs/directoryProvisioning/{provisioningObjectSummary-id}'}  # type: ignore

    def list_provisioning(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum23"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum24"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfProvisioningObjectSummary0"]
        """Get provisioning from auditLogs.

        Get provisioning from auditLogs.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~reports.models.Enum23]
        :param select: Select properties to be returned.
        :type select: list[str or ~reports.models.Enum24]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfProvisioningObjectSummary0 or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~reports.models.CollectionOfProvisioningObjectSummary0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfProvisioningObjectSummary0"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_provisioning.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfProvisioningObjectSummary0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_provisioning.metadata = {'url': '/auditLogs/provisioning'}  # type: ignore

    def create_provisioning(
        self,
        id=None,  # type: Optional[str]
        action=None,  # type: Optional[str]
        activity_date_time=None,  # type: Optional[datetime.datetime]
        change_id=None,  # type: Optional[str]
        cycle_id=None,  # type: Optional[str]
        duration_in_milliseconds=None,  # type: Optional[int]
        initiated_by=None,  # type: Optional["models.MicrosoftGraphInitiator"]
        job_id=None,  # type: Optional[str]
        modified_properties=None,  # type: Optional[List["models.MicrosoftGraphModifiedProperty"]]
        provisioning_steps=None,  # type: Optional[List["models.MicrosoftGraphProvisioningStep"]]
        service_principal=None,  # type: Optional["models.MicrosoftGraphProvisioningServicePrincipal"]
        tenant_id=None,  # type: Optional[str]
        details=None,  # type: Optional[Dict[str, object]]
        display_name=None,  # type: Optional[str]
        microsoft_graph_provisioning_system_details_id=None,  # type: Optional[str]
        microsoft_graph_details_info_details=None,  # type: Optional[Dict[str, object]]
        microsoft_graph_provisioned_identity_display_name=None,  # type: Optional[str]
        microsoft_graph_provisioned_identity_id=None,  # type: Optional[str]
        identity_type=None,  # type: Optional[str]
        status=None,  # type: Optional[Union[str, "models.MicrosoftGraphProvisioningResult"]]
        details1=None,  # type: Optional[Dict[str, object]]
        microsoft_graph_provisioning_system_details_display_name=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        details2=None,  # type: Optional[Dict[str, object]]
        display_name1=None,  # type: Optional[str]
        id2=None,  # type: Optional[str]
        microsoft_graph_provisioned_identity_type=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphProvisioningObjectSummary"
        """Create new navigation property to provisioning for auditLogs.

        Create new navigation property to provisioning for auditLogs.

        :param id: Read-only.
        :type id: str
        :param action:
        :type action: str
        :param activity_date_time:
        :type activity_date_time: ~datetime.datetime
        :param change_id:
        :type change_id: str
        :param cycle_id:
        :type cycle_id: str
        :param duration_in_milliseconds:
        :type duration_in_milliseconds: int
        :param initiated_by: initiator.
        :type initiated_by: ~reports.models.MicrosoftGraphInitiator
        :param job_id:
        :type job_id: str
        :param modified_properties:
        :type modified_properties: list[~reports.models.MicrosoftGraphModifiedProperty]
        :param provisioning_steps:
        :type provisioning_steps: list[~reports.models.MicrosoftGraphProvisioningStep]
        :param service_principal: provisioningServicePrincipal.
        :type service_principal: ~reports.models.MicrosoftGraphProvisioningServicePrincipal
        :param tenant_id:
        :type tenant_id: str
        :param details: detailsInfo.
        :type details: dict[str, object]
        :param display_name:
        :type display_name: str
        :param microsoft_graph_provisioning_system_details_id:
        :type microsoft_graph_provisioning_system_details_id: str
        :param microsoft_graph_details_info_details: detailsInfo.
        :type microsoft_graph_details_info_details: dict[str, object]
        :param microsoft_graph_provisioned_identity_display_name:
        :type microsoft_graph_provisioned_identity_display_name: str
        :param microsoft_graph_provisioned_identity_id:
        :type microsoft_graph_provisioned_identity_id: str
        :param identity_type:
        :type identity_type: str
        :param status:
        :type status: str or ~reports.models.MicrosoftGraphProvisioningResult
        :param details1: detailsInfo.
        :type details1: dict[str, object]
        :param microsoft_graph_provisioning_system_details_display_name:
        :type microsoft_graph_provisioning_system_details_display_name: str
        :param id1:
        :type id1: str
        :param details2: detailsInfo.
        :type details2: dict[str, object]
        :param display_name1:
        :type display_name1: str
        :param id2:
        :type id2: str
        :param microsoft_graph_provisioned_identity_type:
        :type microsoft_graph_provisioned_identity_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphProvisioningObjectSummary, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphProvisioningObjectSummary
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphProvisioningObjectSummary"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphProvisioningObjectSummary(id=id, action=action, activity_date_time=activity_date_time, change_id=change_id, cycle_id=cycle_id, duration_in_milliseconds=duration_in_milliseconds, initiated_by=initiated_by, job_id=job_id, modified_properties=modified_properties, provisioning_steps=provisioning_steps, service_principal=service_principal, tenant_id=tenant_id, details_target_system_details=details, display_name_target_system_display_name=display_name, id_target_system_id=microsoft_graph_provisioning_system_details_id, details_target_identity_details=microsoft_graph_details_info_details, display_name_target_identity_display_name=microsoft_graph_provisioned_identity_display_name, id_target_identity_id=microsoft_graph_provisioned_identity_id, identity_type_target_identity_type=identity_type, status=status, details_source_system_details=details1, display_name_source_system_display_name=microsoft_graph_provisioning_system_details_display_name, id_source_system_id=id1, details_source_identity_details=details2, display_name_source_identity_display_name=display_name1, id_source_identity_id=id2, identity_type_source_identity_type=microsoft_graph_provisioned_identity_type)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_provisioning.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphProvisioningObjectSummary')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphProvisioningObjectSummary', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_provisioning.metadata = {'url': '/auditLogs/provisioning'}  # type: ignore

    def get_provisioning(
        self,
        provisioning_object_summary_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum25"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphProvisioningObjectSummary"
        """Get provisioning from auditLogs.

        Get provisioning from auditLogs.

        :param provisioning_object_summary_id: key: id of provisioningObjectSummary.
        :type provisioning_object_summary_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~reports.models.Enum25]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphProvisioningObjectSummary, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphProvisioningObjectSummary
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphProvisioningObjectSummary"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_provisioning.metadata['url']  # type: ignore
        path_format_arguments = {
            'provisioningObjectSummary-id': self._serialize.url("provisioning_object_summary_id", provisioning_object_summary_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphProvisioningObjectSummary', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_provisioning.metadata = {'url': '/auditLogs/provisioning/{provisioningObjectSummary-id}'}  # type: ignore

    def update_provisioning(
        self,
        provisioning_object_summary_id,  # type: str
        id=None,  # type: Optional[str]
        action=None,  # type: Optional[str]
        activity_date_time=None,  # type: Optional[datetime.datetime]
        change_id=None,  # type: Optional[str]
        cycle_id=None,  # type: Optional[str]
        duration_in_milliseconds=None,  # type: Optional[int]
        initiated_by=None,  # type: Optional["models.MicrosoftGraphInitiator"]
        job_id=None,  # type: Optional[str]
        modified_properties=None,  # type: Optional[List["models.MicrosoftGraphModifiedProperty"]]
        provisioning_steps=None,  # type: Optional[List["models.MicrosoftGraphProvisioningStep"]]
        service_principal=None,  # type: Optional["models.MicrosoftGraphProvisioningServicePrincipal"]
        tenant_id=None,  # type: Optional[str]
        details=None,  # type: Optional[Dict[str, object]]
        display_name=None,  # type: Optional[str]
        microsoft_graph_provisioning_system_details_id=None,  # type: Optional[str]
        microsoft_graph_details_info_details=None,  # type: Optional[Dict[str, object]]
        microsoft_graph_provisioned_identity_display_name=None,  # type: Optional[str]
        microsoft_graph_provisioned_identity_id=None,  # type: Optional[str]
        identity_type=None,  # type: Optional[str]
        status=None,  # type: Optional[Union[str, "models.MicrosoftGraphProvisioningResult"]]
        details1=None,  # type: Optional[Dict[str, object]]
        microsoft_graph_provisioning_system_details_display_name=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        details2=None,  # type: Optional[Dict[str, object]]
        display_name1=None,  # type: Optional[str]
        id2=None,  # type: Optional[str]
        microsoft_graph_provisioned_identity_type=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property provisioning in auditLogs.

        Update the navigation property provisioning in auditLogs.

        :param provisioning_object_summary_id: key: id of provisioningObjectSummary.
        :type provisioning_object_summary_id: str
        :param id: Read-only.
        :type id: str
        :param action:
        :type action: str
        :param activity_date_time:
        :type activity_date_time: ~datetime.datetime
        :param change_id:
        :type change_id: str
        :param cycle_id:
        :type cycle_id: str
        :param duration_in_milliseconds:
        :type duration_in_milliseconds: int
        :param initiated_by: initiator.
        :type initiated_by: ~reports.models.MicrosoftGraphInitiator
        :param job_id:
        :type job_id: str
        :param modified_properties:
        :type modified_properties: list[~reports.models.MicrosoftGraphModifiedProperty]
        :param provisioning_steps:
        :type provisioning_steps: list[~reports.models.MicrosoftGraphProvisioningStep]
        :param service_principal: provisioningServicePrincipal.
        :type service_principal: ~reports.models.MicrosoftGraphProvisioningServicePrincipal
        :param tenant_id:
        :type tenant_id: str
        :param details: detailsInfo.
        :type details: dict[str, object]
        :param display_name:
        :type display_name: str
        :param microsoft_graph_provisioning_system_details_id:
        :type microsoft_graph_provisioning_system_details_id: str
        :param microsoft_graph_details_info_details: detailsInfo.
        :type microsoft_graph_details_info_details: dict[str, object]
        :param microsoft_graph_provisioned_identity_display_name:
        :type microsoft_graph_provisioned_identity_display_name: str
        :param microsoft_graph_provisioned_identity_id:
        :type microsoft_graph_provisioned_identity_id: str
        :param identity_type:
        :type identity_type: str
        :param status:
        :type status: str or ~reports.models.MicrosoftGraphProvisioningResult
        :param details1: detailsInfo.
        :type details1: dict[str, object]
        :param microsoft_graph_provisioning_system_details_display_name:
        :type microsoft_graph_provisioning_system_details_display_name: str
        :param id1:
        :type id1: str
        :param details2: detailsInfo.
        :type details2: dict[str, object]
        :param display_name1:
        :type display_name1: str
        :param id2:
        :type id2: str
        :param microsoft_graph_provisioned_identity_type:
        :type microsoft_graph_provisioned_identity_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphProvisioningObjectSummary(id=id, action=action, activity_date_time=activity_date_time, change_id=change_id, cycle_id=cycle_id, duration_in_milliseconds=duration_in_milliseconds, initiated_by=initiated_by, job_id=job_id, modified_properties=modified_properties, provisioning_steps=provisioning_steps, service_principal=service_principal, tenant_id=tenant_id, details_target_system_details=details, display_name_target_system_display_name=display_name, id_target_system_id=microsoft_graph_provisioning_system_details_id, details_target_identity_details=microsoft_graph_details_info_details, display_name_target_identity_display_name=microsoft_graph_provisioned_identity_display_name, id_target_identity_id=microsoft_graph_provisioned_identity_id, identity_type_target_identity_type=identity_type, status=status, details_source_system_details=details1, display_name_source_system_display_name=microsoft_graph_provisioning_system_details_display_name, id_source_system_id=id1, details_source_identity_details=details2, display_name_source_identity_display_name=display_name1, id_source_identity_id=id2, identity_type_source_identity_type=microsoft_graph_provisioned_identity_type)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_provisioning.metadata['url']  # type: ignore
        path_format_arguments = {
            'provisioningObjectSummary-id': self._serialize.url("provisioning_object_summary_id", provisioning_object_summary_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphProvisioningObjectSummary')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_provisioning.metadata = {'url': '/auditLogs/provisioning/{provisioningObjectSummary-id}'}  # type: ignore

    def delete_provisioning(
        self,
        provisioning_object_summary_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property provisioning for auditLogs.

        Delete navigation property provisioning for auditLogs.

        :param provisioning_object_summary_id: key: id of provisioningObjectSummary.
        :type provisioning_object_summary_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_provisioning.metadata['url']  # type: ignore
        path_format_arguments = {
            'provisioningObjectSummary-id': self._serialize.url("provisioning_object_summary_id", provisioning_object_summary_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_provisioning.metadata = {'url': '/auditLogs/provisioning/{provisioningObjectSummary-id}'}  # type: ignore

    def list_restricted_sign_in(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum26"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum27"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfRestrictedSignIn"]
        """Get restrictedSignIns from auditLogs.

        Get restrictedSignIns from auditLogs.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~reports.models.Enum26]
        :param select: Select properties to be returned.
        :type select: list[str or ~reports.models.Enum27]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfRestrictedSignIn or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~reports.models.CollectionOfRestrictedSignIn]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfRestrictedSignIn"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_restricted_sign_in.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfRestrictedSignIn', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_restricted_sign_in.metadata = {'url': '/auditLogs/restrictedSignIns'}  # type: ignore

    def create_restricted_sign_in(
        self,
        id=None,  # type: Optional[str]
        alternate_sign_in_name=None,  # type: Optional[str]
        app_display_name=None,  # type: Optional[str]
        app_id=None,  # type: Optional[str]
        applied_conditional_access_policies=None,  # type: Optional[List["models.MicrosoftGraphAppliedConditionalAccessPolicy"]]
        authentication_details=None,  # type: Optional[List["models.MicrosoftGraphAuthenticationDetail"]]
        authentication_methods_used=None,  # type: Optional[List[str]]
        authentication_processing_details=None,  # type: Optional[List["models.MicrosoftGraphKeyValue"]]
        authentication_requirement=None,  # type: Optional[str]
        authentication_requirement_policies=None,  # type: Optional[List["models.MicrosoftGraphAuthenticationRequirementPolicy"]]
        client_app_used=None,  # type: Optional[str]
        conditional_access_status=None,  # type: Optional[Union[str, "models.MicrosoftGraphConditionalAccessStatus"]]
        correlation_id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        device_detail=None,  # type: Optional["models.MicrosoftGraphDeviceDetail"]
        ip_address=None,  # type: Optional[str]
        is_interactive=None,  # type: Optional[bool]
        mfa_detail=None,  # type: Optional["models.MicrosoftGraphMfaDetail"]
        network_location_details=None,  # type: Optional[List["models.MicrosoftGraphNetworkLocationDetail"]]
        original_request_id=None,  # type: Optional[str]
        processing_time_in_milliseconds=None,  # type: Optional[int]
        resource_display_name=None,  # type: Optional[str]
        resource_id=None,  # type: Optional[str]
        resource_tenant_id=None,  # type: Optional[str]
        risk_detail=None,  # type: Optional[Union[str, "models.MicrosoftGraphRiskDetail"]]
        risk_event_types=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphRiskEventType"]]]
        risk_event_types_v2=None,  # type: Optional[List[str]]
        risk_level_aggregated=None,  # type: Optional[Union[str, "models.MicrosoftGraphRiskLevel"]]
        risk_level_during_sign_in=None,  # type: Optional[Union[str, "models.MicrosoftGraphRiskLevel"]]
        risk_state=None,  # type: Optional[Union[str, "models.MicrosoftGraphRiskState"]]
        service_principal_id=None,  # type: Optional[str]
        service_principal_name=None,  # type: Optional[str]
        sign_in_event_types=None,  # type: Optional[List[str]]
        status=None,  # type: Optional["models.MicrosoftGraphSignInStatus"]
        token_issuer_name=None,  # type: Optional[str]
        token_issuer_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphTokenIssuerType"]]
        user_agent_parameter=None,  # type: Optional[str]
        user_display_name=None,  # type: Optional[str]
        user_id=None,  # type: Optional[str]
        user_principal_name=None,  # type: Optional[str]
        city=None,  # type: Optional[str]
        country_or_region=None,  # type: Optional[str]
        geo_coordinates=None,  # type: Optional["models.MicrosoftGraphGeoCoordinates"]
        state=None,  # type: Optional[str]
        target_tenant_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphRestrictedSignIn"
        """Create new navigation property to restrictedSignIns for auditLogs.

        Create new navigation property to restrictedSignIns for auditLogs.

        :param id: Read-only.
        :type id: str
        :param alternate_sign_in_name:
        :type alternate_sign_in_name: str
        :param app_display_name: App name displayed in the Azure Portal.
        :type app_display_name: str
        :param app_id: Unique GUID representing the app ID in the Azure Active Directory.
        :type app_id: str
        :param applied_conditional_access_policies:
        :type applied_conditional_access_policies: list[~reports.models.MicrosoftGraphAppliedConditionalAccessPolicy]
        :param authentication_details:
        :type authentication_details: list[~reports.models.MicrosoftGraphAuthenticationDetail]
        :param authentication_methods_used:
        :type authentication_methods_used: list[str]
        :param authentication_processing_details:
        :type authentication_processing_details: list[~reports.models.MicrosoftGraphKeyValue]
        :param authentication_requirement:
        :type authentication_requirement: str
        :param authentication_requirement_policies:
        :type authentication_requirement_policies: list[~reports.models.MicrosoftGraphAuthenticationRequirementPolicy]
        :param client_app_used: Identifies the legacy client used for sign-in activity.  Includes
         Browser, Exchange Active Sync, modern clients, IMAP, MAPI, SMTP, and POP.
        :type client_app_used: str
        :param conditional_access_status:
        :type conditional_access_status: str or ~reports.models.MicrosoftGraphConditionalAccessStatus
        :param correlation_id: The request ID sent from the client when the sign-in is initiated; used
         to troubleshoot sign-in activity.
        :type correlation_id: str
        :param created_date_time: Date and time (UTC) the sign-in was initiated. Example: midnight on
         Jan 1, 2014 is reported as '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param device_detail: deviceDetail.
        :type device_detail: ~reports.models.MicrosoftGraphDeviceDetail
        :param ip_address: IP address of the client used to sign in.
        :type ip_address: str
        :param is_interactive: Indicates if a sign-in is interactive or not.
        :type is_interactive: bool
        :param mfa_detail: mfaDetail.
        :type mfa_detail: ~reports.models.MicrosoftGraphMfaDetail
        :param network_location_details:
        :type network_location_details: list[~reports.models.MicrosoftGraphNetworkLocationDetail]
        :param original_request_id:
        :type original_request_id: str
        :param processing_time_in_milliseconds:
        :type processing_time_in_milliseconds: int
        :param resource_display_name: Name of the resource the user signed into.
        :type resource_display_name: str
        :param resource_id: ID of the resource that the user signed into.
        :type resource_id: str
        :param resource_tenant_id:
        :type resource_tenant_id: str
        :param risk_detail:
        :type risk_detail: str or ~reports.models.MicrosoftGraphRiskDetail
        :param risk_event_types: Risk event types associated with the sign-in. The possible values are:
         unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures,
         malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials,
         investigationsThreatIntelligence,  generic, and unknownFutureValue.
        :type risk_event_types: list[str or ~reports.models.MicrosoftGraphRiskEventType]
        :param risk_event_types_v2: The list of risk event types associated with the sign-in. Possible
         values: unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures,
         malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials,
         investigationsThreatIntelligence,  generic, or unknownFutureValue.
        :type risk_event_types_v2: list[str]
        :param risk_level_aggregated:
        :type risk_level_aggregated: str or ~reports.models.MicrosoftGraphRiskLevel
        :param risk_level_during_sign_in:
        :type risk_level_during_sign_in: str or ~reports.models.MicrosoftGraphRiskLevel
        :param risk_state:
        :type risk_state: str or ~reports.models.MicrosoftGraphRiskState
        :param service_principal_id:
        :type service_principal_id: str
        :param service_principal_name:
        :type service_principal_name: str
        :param sign_in_event_types:
        :type sign_in_event_types: list[str]
        :param status: signInStatus.
        :type status: ~reports.models.MicrosoftGraphSignInStatus
        :param token_issuer_name:
        :type token_issuer_name: str
        :param token_issuer_type:
        :type token_issuer_type: str or ~reports.models.MicrosoftGraphTokenIssuerType
        :param user_agent_parameter:
        :type user_agent_parameter: str
        :param user_display_name: Display name of the user that initiated the sign-in.
        :type user_display_name: str
        :param user_id: ID of the user that initiated the sign-in.
        :type user_id: str
        :param user_principal_name: User principal name of the user that initiated the sign-in.
        :type user_principal_name: str
        :param city: Provides the city where the sign-in originated. This is calculated using
         latitude/longitude information from the sign-in activity.
        :type city: str
        :param country_or_region: Provides the country code info (2 letter code) where the sign-in
         originated.  This is calculated using latitude/longitude information from the sign-in activity.
        :type country_or_region: str
        :param geo_coordinates: geoCoordinates.
        :type geo_coordinates: ~reports.models.MicrosoftGraphGeoCoordinates
        :param state: Provides the State where the sign-in originated. This is calculated using
         latitude/longitude information from the sign-in activity.
        :type state: str
        :param target_tenant_id:
        :type target_tenant_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphRestrictedSignIn, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphRestrictedSignIn
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphRestrictedSignIn"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphRestrictedSignIn(id=id, alternate_sign_in_name=alternate_sign_in_name, app_display_name=app_display_name, app_id=app_id, applied_conditional_access_policies=applied_conditional_access_policies, authentication_details=authentication_details, authentication_methods_used=authentication_methods_used, authentication_processing_details=authentication_processing_details, authentication_requirement=authentication_requirement, authentication_requirement_policies=authentication_requirement_policies, client_app_used=client_app_used, conditional_access_status=conditional_access_status, correlation_id=correlation_id, created_date_time=created_date_time, device_detail=device_detail, ip_address=ip_address, is_interactive=is_interactive, mfa_detail=mfa_detail, network_location_details=network_location_details, original_request_id=original_request_id, processing_time_in_milliseconds=processing_time_in_milliseconds, resource_display_name=resource_display_name, resource_id=resource_id, resource_tenant_id=resource_tenant_id, risk_detail=risk_detail, risk_event_types=risk_event_types, risk_event_types_v2=risk_event_types_v2, risk_level_aggregated=risk_level_aggregated, risk_level_during_sign_in=risk_level_during_sign_in, risk_state=risk_state, service_principal_id=service_principal_id, service_principal_name=service_principal_name, sign_in_event_types=sign_in_event_types, status=status, token_issuer_name=token_issuer_name, token_issuer_type=token_issuer_type, user_agent=user_agent_parameter, user_display_name=user_display_name, user_id=user_id, user_principal_name=user_principal_name, city=city, country_or_region=country_or_region, geo_coordinates=geo_coordinates, state=state, target_tenant_id=target_tenant_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_restricted_sign_in.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphRestrictedSignIn')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphRestrictedSignIn', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_restricted_sign_in.metadata = {'url': '/auditLogs/restrictedSignIns'}  # type: ignore

    def get_restricted_sign_in(
        self,
        restricted_sign_in_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum28"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphRestrictedSignIn"
        """Get restrictedSignIns from auditLogs.

        Get restrictedSignIns from auditLogs.

        :param restricted_sign_in_id: key: id of restrictedSignIn.
        :type restricted_sign_in_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~reports.models.Enum28]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphRestrictedSignIn, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphRestrictedSignIn
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphRestrictedSignIn"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_restricted_sign_in.metadata['url']  # type: ignore
        path_format_arguments = {
            'restrictedSignIn-id': self._serialize.url("restricted_sign_in_id", restricted_sign_in_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphRestrictedSignIn', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_restricted_sign_in.metadata = {'url': '/auditLogs/restrictedSignIns/{restrictedSignIn-id}'}  # type: ignore

    def update_restricted_sign_in(
        self,
        restricted_sign_in_id,  # type: str
        id=None,  # type: Optional[str]
        alternate_sign_in_name=None,  # type: Optional[str]
        app_display_name=None,  # type: Optional[str]
        app_id=None,  # type: Optional[str]
        applied_conditional_access_policies=None,  # type: Optional[List["models.MicrosoftGraphAppliedConditionalAccessPolicy"]]
        authentication_details=None,  # type: Optional[List["models.MicrosoftGraphAuthenticationDetail"]]
        authentication_methods_used=None,  # type: Optional[List[str]]
        authentication_processing_details=None,  # type: Optional[List["models.MicrosoftGraphKeyValue"]]
        authentication_requirement=None,  # type: Optional[str]
        authentication_requirement_policies=None,  # type: Optional[List["models.MicrosoftGraphAuthenticationRequirementPolicy"]]
        client_app_used=None,  # type: Optional[str]
        conditional_access_status=None,  # type: Optional[Union[str, "models.MicrosoftGraphConditionalAccessStatus"]]
        correlation_id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        device_detail=None,  # type: Optional["models.MicrosoftGraphDeviceDetail"]
        ip_address=None,  # type: Optional[str]
        is_interactive=None,  # type: Optional[bool]
        mfa_detail=None,  # type: Optional["models.MicrosoftGraphMfaDetail"]
        network_location_details=None,  # type: Optional[List["models.MicrosoftGraphNetworkLocationDetail"]]
        original_request_id=None,  # type: Optional[str]
        processing_time_in_milliseconds=None,  # type: Optional[int]
        resource_display_name=None,  # type: Optional[str]
        resource_id=None,  # type: Optional[str]
        resource_tenant_id=None,  # type: Optional[str]
        risk_detail=None,  # type: Optional[Union[str, "models.MicrosoftGraphRiskDetail"]]
        risk_event_types=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphRiskEventType"]]]
        risk_event_types_v2=None,  # type: Optional[List[str]]
        risk_level_aggregated=None,  # type: Optional[Union[str, "models.MicrosoftGraphRiskLevel"]]
        risk_level_during_sign_in=None,  # type: Optional[Union[str, "models.MicrosoftGraphRiskLevel"]]
        risk_state=None,  # type: Optional[Union[str, "models.MicrosoftGraphRiskState"]]
        service_principal_id=None,  # type: Optional[str]
        service_principal_name=None,  # type: Optional[str]
        sign_in_event_types=None,  # type: Optional[List[str]]
        status=None,  # type: Optional["models.MicrosoftGraphSignInStatus"]
        token_issuer_name=None,  # type: Optional[str]
        token_issuer_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphTokenIssuerType"]]
        user_agent_parameter=None,  # type: Optional[str]
        user_display_name=None,  # type: Optional[str]
        user_id=None,  # type: Optional[str]
        user_principal_name=None,  # type: Optional[str]
        city=None,  # type: Optional[str]
        country_or_region=None,  # type: Optional[str]
        geo_coordinates=None,  # type: Optional["models.MicrosoftGraphGeoCoordinates"]
        state=None,  # type: Optional[str]
        target_tenant_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property restrictedSignIns in auditLogs.

        Update the navigation property restrictedSignIns in auditLogs.

        :param restricted_sign_in_id: key: id of restrictedSignIn.
        :type restricted_sign_in_id: str
        :param id: Read-only.
        :type id: str
        :param alternate_sign_in_name:
        :type alternate_sign_in_name: str
        :param app_display_name: App name displayed in the Azure Portal.
        :type app_display_name: str
        :param app_id: Unique GUID representing the app ID in the Azure Active Directory.
        :type app_id: str
        :param applied_conditional_access_policies:
        :type applied_conditional_access_policies: list[~reports.models.MicrosoftGraphAppliedConditionalAccessPolicy]
        :param authentication_details:
        :type authentication_details: list[~reports.models.MicrosoftGraphAuthenticationDetail]
        :param authentication_methods_used:
        :type authentication_methods_used: list[str]
        :param authentication_processing_details:
        :type authentication_processing_details: list[~reports.models.MicrosoftGraphKeyValue]
        :param authentication_requirement:
        :type authentication_requirement: str
        :param authentication_requirement_policies:
        :type authentication_requirement_policies: list[~reports.models.MicrosoftGraphAuthenticationRequirementPolicy]
        :param client_app_used: Identifies the legacy client used for sign-in activity.  Includes
         Browser, Exchange Active Sync, modern clients, IMAP, MAPI, SMTP, and POP.
        :type client_app_used: str
        :param conditional_access_status:
        :type conditional_access_status: str or ~reports.models.MicrosoftGraphConditionalAccessStatus
        :param correlation_id: The request ID sent from the client when the sign-in is initiated; used
         to troubleshoot sign-in activity.
        :type correlation_id: str
        :param created_date_time: Date and time (UTC) the sign-in was initiated. Example: midnight on
         Jan 1, 2014 is reported as '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param device_detail: deviceDetail.
        :type device_detail: ~reports.models.MicrosoftGraphDeviceDetail
        :param ip_address: IP address of the client used to sign in.
        :type ip_address: str
        :param is_interactive: Indicates if a sign-in is interactive or not.
        :type is_interactive: bool
        :param mfa_detail: mfaDetail.
        :type mfa_detail: ~reports.models.MicrosoftGraphMfaDetail
        :param network_location_details:
        :type network_location_details: list[~reports.models.MicrosoftGraphNetworkLocationDetail]
        :param original_request_id:
        :type original_request_id: str
        :param processing_time_in_milliseconds:
        :type processing_time_in_milliseconds: int
        :param resource_display_name: Name of the resource the user signed into.
        :type resource_display_name: str
        :param resource_id: ID of the resource that the user signed into.
        :type resource_id: str
        :param resource_tenant_id:
        :type resource_tenant_id: str
        :param risk_detail:
        :type risk_detail: str or ~reports.models.MicrosoftGraphRiskDetail
        :param risk_event_types: Risk event types associated with the sign-in. The possible values are:
         unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures,
         malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials,
         investigationsThreatIntelligence,  generic, and unknownFutureValue.
        :type risk_event_types: list[str or ~reports.models.MicrosoftGraphRiskEventType]
        :param risk_event_types_v2: The list of risk event types associated with the sign-in. Possible
         values: unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures,
         malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials,
         investigationsThreatIntelligence,  generic, or unknownFutureValue.
        :type risk_event_types_v2: list[str]
        :param risk_level_aggregated:
        :type risk_level_aggregated: str or ~reports.models.MicrosoftGraphRiskLevel
        :param risk_level_during_sign_in:
        :type risk_level_during_sign_in: str or ~reports.models.MicrosoftGraphRiskLevel
        :param risk_state:
        :type risk_state: str or ~reports.models.MicrosoftGraphRiskState
        :param service_principal_id:
        :type service_principal_id: str
        :param service_principal_name:
        :type service_principal_name: str
        :param sign_in_event_types:
        :type sign_in_event_types: list[str]
        :param status: signInStatus.
        :type status: ~reports.models.MicrosoftGraphSignInStatus
        :param token_issuer_name:
        :type token_issuer_name: str
        :param token_issuer_type:
        :type token_issuer_type: str or ~reports.models.MicrosoftGraphTokenIssuerType
        :param user_agent_parameter:
        :type user_agent_parameter: str
        :param user_display_name: Display name of the user that initiated the sign-in.
        :type user_display_name: str
        :param user_id: ID of the user that initiated the sign-in.
        :type user_id: str
        :param user_principal_name: User principal name of the user that initiated the sign-in.
        :type user_principal_name: str
        :param city: Provides the city where the sign-in originated. This is calculated using
         latitude/longitude information from the sign-in activity.
        :type city: str
        :param country_or_region: Provides the country code info (2 letter code) where the sign-in
         originated.  This is calculated using latitude/longitude information from the sign-in activity.
        :type country_or_region: str
        :param geo_coordinates: geoCoordinates.
        :type geo_coordinates: ~reports.models.MicrosoftGraphGeoCoordinates
        :param state: Provides the State where the sign-in originated. This is calculated using
         latitude/longitude information from the sign-in activity.
        :type state: str
        :param target_tenant_id:
        :type target_tenant_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphRestrictedSignIn(id=id, alternate_sign_in_name=alternate_sign_in_name, app_display_name=app_display_name, app_id=app_id, applied_conditional_access_policies=applied_conditional_access_policies, authentication_details=authentication_details, authentication_methods_used=authentication_methods_used, authentication_processing_details=authentication_processing_details, authentication_requirement=authentication_requirement, authentication_requirement_policies=authentication_requirement_policies, client_app_used=client_app_used, conditional_access_status=conditional_access_status, correlation_id=correlation_id, created_date_time=created_date_time, device_detail=device_detail, ip_address=ip_address, is_interactive=is_interactive, mfa_detail=mfa_detail, network_location_details=network_location_details, original_request_id=original_request_id, processing_time_in_milliseconds=processing_time_in_milliseconds, resource_display_name=resource_display_name, resource_id=resource_id, resource_tenant_id=resource_tenant_id, risk_detail=risk_detail, risk_event_types=risk_event_types, risk_event_types_v2=risk_event_types_v2, risk_level_aggregated=risk_level_aggregated, risk_level_during_sign_in=risk_level_during_sign_in, risk_state=risk_state, service_principal_id=service_principal_id, service_principal_name=service_principal_name, sign_in_event_types=sign_in_event_types, status=status, token_issuer_name=token_issuer_name, token_issuer_type=token_issuer_type, user_agent=user_agent_parameter, user_display_name=user_display_name, user_id=user_id, user_principal_name=user_principal_name, city=city, country_or_region=country_or_region, geo_coordinates=geo_coordinates, state=state, target_tenant_id=target_tenant_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_restricted_sign_in.metadata['url']  # type: ignore
        path_format_arguments = {
            'restrictedSignIn-id': self._serialize.url("restricted_sign_in_id", restricted_sign_in_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphRestrictedSignIn')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_restricted_sign_in.metadata = {'url': '/auditLogs/restrictedSignIns/{restrictedSignIn-id}'}  # type: ignore

    def delete_restricted_sign_in(
        self,
        restricted_sign_in_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property restrictedSignIns for auditLogs.

        Delete navigation property restrictedSignIns for auditLogs.

        :param restricted_sign_in_id: key: id of restrictedSignIn.
        :type restricted_sign_in_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_restricted_sign_in.metadata['url']  # type: ignore
        path_format_arguments = {
            'restrictedSignIn-id': self._serialize.url("restricted_sign_in_id", restricted_sign_in_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_restricted_sign_in.metadata = {'url': '/auditLogs/restrictedSignIns/{restrictedSignIn-id}'}  # type: ignore

    def list_sign_in(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum29"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum30"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfSignIn"]
        """Get signIns from auditLogs.

        Get signIns from auditLogs.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~reports.models.Enum29]
        :param select: Select properties to be returned.
        :type select: list[str or ~reports.models.Enum30]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfSignIn or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~reports.models.CollectionOfSignIn]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfSignIn"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_sign_in.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfSignIn', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_sign_in.metadata = {'url': '/auditLogs/signIns'}  # type: ignore

    def create_sign_in(
        self,
        id=None,  # type: Optional[str]
        alternate_sign_in_name=None,  # type: Optional[str]
        app_display_name=None,  # type: Optional[str]
        app_id=None,  # type: Optional[str]
        applied_conditional_access_policies=None,  # type: Optional[List["models.MicrosoftGraphAppliedConditionalAccessPolicy"]]
        authentication_details=None,  # type: Optional[List["models.MicrosoftGraphAuthenticationDetail"]]
        authentication_methods_used=None,  # type: Optional[List[str]]
        authentication_processing_details=None,  # type: Optional[List["models.MicrosoftGraphKeyValue"]]
        authentication_requirement=None,  # type: Optional[str]
        authentication_requirement_policies=None,  # type: Optional[List["models.MicrosoftGraphAuthenticationRequirementPolicy"]]
        client_app_used=None,  # type: Optional[str]
        conditional_access_status=None,  # type: Optional[Union[str, "models.MicrosoftGraphConditionalAccessStatus"]]
        correlation_id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        device_detail=None,  # type: Optional["models.MicrosoftGraphDeviceDetail"]
        ip_address=None,  # type: Optional[str]
        is_interactive=None,  # type: Optional[bool]
        mfa_detail=None,  # type: Optional["models.MicrosoftGraphMfaDetail"]
        network_location_details=None,  # type: Optional[List["models.MicrosoftGraphNetworkLocationDetail"]]
        original_request_id=None,  # type: Optional[str]
        processing_time_in_milliseconds=None,  # type: Optional[int]
        resource_display_name=None,  # type: Optional[str]
        resource_id=None,  # type: Optional[str]
        resource_tenant_id=None,  # type: Optional[str]
        risk_detail=None,  # type: Optional[Union[str, "models.MicrosoftGraphRiskDetail"]]
        risk_event_types=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphRiskEventType"]]]
        risk_event_types_v2=None,  # type: Optional[List[str]]
        risk_level_aggregated=None,  # type: Optional[Union[str, "models.MicrosoftGraphRiskLevel"]]
        risk_level_during_sign_in=None,  # type: Optional[Union[str, "models.MicrosoftGraphRiskLevel"]]
        risk_state=None,  # type: Optional[Union[str, "models.MicrosoftGraphRiskState"]]
        service_principal_id=None,  # type: Optional[str]
        service_principal_name=None,  # type: Optional[str]
        sign_in_event_types=None,  # type: Optional[List[str]]
        status=None,  # type: Optional["models.MicrosoftGraphSignInStatus"]
        token_issuer_name=None,  # type: Optional[str]
        token_issuer_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphTokenIssuerType"]]
        user_agent_parameter=None,  # type: Optional[str]
        user_display_name=None,  # type: Optional[str]
        user_id=None,  # type: Optional[str]
        user_principal_name=None,  # type: Optional[str]
        city=None,  # type: Optional[str]
        country_or_region=None,  # type: Optional[str]
        geo_coordinates=None,  # type: Optional["models.MicrosoftGraphGeoCoordinates"]
        state=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphSignIn"
        """Create new navigation property to signIns for auditLogs.

        Create new navigation property to signIns for auditLogs.

        :param id: Read-only.
        :type id: str
        :param alternate_sign_in_name:
        :type alternate_sign_in_name: str
        :param app_display_name: App name displayed in the Azure Portal.
        :type app_display_name: str
        :param app_id: Unique GUID representing the app ID in the Azure Active Directory.
        :type app_id: str
        :param applied_conditional_access_policies:
        :type applied_conditional_access_policies: list[~reports.models.MicrosoftGraphAppliedConditionalAccessPolicy]
        :param authentication_details:
        :type authentication_details: list[~reports.models.MicrosoftGraphAuthenticationDetail]
        :param authentication_methods_used:
        :type authentication_methods_used: list[str]
        :param authentication_processing_details:
        :type authentication_processing_details: list[~reports.models.MicrosoftGraphKeyValue]
        :param authentication_requirement:
        :type authentication_requirement: str
        :param authentication_requirement_policies:
        :type authentication_requirement_policies: list[~reports.models.MicrosoftGraphAuthenticationRequirementPolicy]
        :param client_app_used: Identifies the legacy client used for sign-in activity.  Includes
         Browser, Exchange Active Sync, modern clients, IMAP, MAPI, SMTP, and POP.
        :type client_app_used: str
        :param conditional_access_status:
        :type conditional_access_status: str or ~reports.models.MicrosoftGraphConditionalAccessStatus
        :param correlation_id: The request ID sent from the client when the sign-in is initiated; used
         to troubleshoot sign-in activity.
        :type correlation_id: str
        :param created_date_time: Date and time (UTC) the sign-in was initiated. Example: midnight on
         Jan 1, 2014 is reported as '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param device_detail: deviceDetail.
        :type device_detail: ~reports.models.MicrosoftGraphDeviceDetail
        :param ip_address: IP address of the client used to sign in.
        :type ip_address: str
        :param is_interactive: Indicates if a sign-in is interactive or not.
        :type is_interactive: bool
        :param mfa_detail: mfaDetail.
        :type mfa_detail: ~reports.models.MicrosoftGraphMfaDetail
        :param network_location_details:
        :type network_location_details: list[~reports.models.MicrosoftGraphNetworkLocationDetail]
        :param original_request_id:
        :type original_request_id: str
        :param processing_time_in_milliseconds:
        :type processing_time_in_milliseconds: int
        :param resource_display_name: Name of the resource the user signed into.
        :type resource_display_name: str
        :param resource_id: ID of the resource that the user signed into.
        :type resource_id: str
        :param resource_tenant_id:
        :type resource_tenant_id: str
        :param risk_detail:
        :type risk_detail: str or ~reports.models.MicrosoftGraphRiskDetail
        :param risk_event_types: Risk event types associated with the sign-in. The possible values are:
         unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures,
         malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials,
         investigationsThreatIntelligence,  generic, and unknownFutureValue.
        :type risk_event_types: list[str or ~reports.models.MicrosoftGraphRiskEventType]
        :param risk_event_types_v2: The list of risk event types associated with the sign-in. Possible
         values: unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures,
         malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials,
         investigationsThreatIntelligence,  generic, or unknownFutureValue.
        :type risk_event_types_v2: list[str]
        :param risk_level_aggregated:
        :type risk_level_aggregated: str or ~reports.models.MicrosoftGraphRiskLevel
        :param risk_level_during_sign_in:
        :type risk_level_during_sign_in: str or ~reports.models.MicrosoftGraphRiskLevel
        :param risk_state:
        :type risk_state: str or ~reports.models.MicrosoftGraphRiskState
        :param service_principal_id:
        :type service_principal_id: str
        :param service_principal_name:
        :type service_principal_name: str
        :param sign_in_event_types:
        :type sign_in_event_types: list[str]
        :param status: signInStatus.
        :type status: ~reports.models.MicrosoftGraphSignInStatus
        :param token_issuer_name:
        :type token_issuer_name: str
        :param token_issuer_type:
        :type token_issuer_type: str or ~reports.models.MicrosoftGraphTokenIssuerType
        :param user_agent_parameter:
        :type user_agent_parameter: str
        :param user_display_name: Display name of the user that initiated the sign-in.
        :type user_display_name: str
        :param user_id: ID of the user that initiated the sign-in.
        :type user_id: str
        :param user_principal_name: User principal name of the user that initiated the sign-in.
        :type user_principal_name: str
        :param city: Provides the city where the sign-in originated. This is calculated using
         latitude/longitude information from the sign-in activity.
        :type city: str
        :param country_or_region: Provides the country code info (2 letter code) where the sign-in
         originated.  This is calculated using latitude/longitude information from the sign-in activity.
        :type country_or_region: str
        :param geo_coordinates: geoCoordinates.
        :type geo_coordinates: ~reports.models.MicrosoftGraphGeoCoordinates
        :param state: Provides the State where the sign-in originated. This is calculated using
         latitude/longitude information from the sign-in activity.
        :type state: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSignIn, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphSignIn
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSignIn"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphSignIn(id=id, alternate_sign_in_name=alternate_sign_in_name, app_display_name=app_display_name, app_id=app_id, applied_conditional_access_policies=applied_conditional_access_policies, authentication_details=authentication_details, authentication_methods_used=authentication_methods_used, authentication_processing_details=authentication_processing_details, authentication_requirement=authentication_requirement, authentication_requirement_policies=authentication_requirement_policies, client_app_used=client_app_used, conditional_access_status=conditional_access_status, correlation_id=correlation_id, created_date_time=created_date_time, device_detail=device_detail, ip_address=ip_address, is_interactive=is_interactive, mfa_detail=mfa_detail, network_location_details=network_location_details, original_request_id=original_request_id, processing_time_in_milliseconds=processing_time_in_milliseconds, resource_display_name=resource_display_name, resource_id=resource_id, resource_tenant_id=resource_tenant_id, risk_detail=risk_detail, risk_event_types=risk_event_types, risk_event_types_v2=risk_event_types_v2, risk_level_aggregated=risk_level_aggregated, risk_level_during_sign_in=risk_level_during_sign_in, risk_state=risk_state, service_principal_id=service_principal_id, service_principal_name=service_principal_name, sign_in_event_types=sign_in_event_types, status=status, token_issuer_name=token_issuer_name, token_issuer_type=token_issuer_type, user_agent=user_agent_parameter, user_display_name=user_display_name, user_id=user_id, user_principal_name=user_principal_name, city=city, country_or_region=country_or_region, geo_coordinates=geo_coordinates, state=state)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_sign_in.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphSignIn')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSignIn', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_sign_in.metadata = {'url': '/auditLogs/signIns'}  # type: ignore

    def get_sign_in(
        self,
        sign_in_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum31"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphSignIn"
        """Get signIns from auditLogs.

        Get signIns from auditLogs.

        :param sign_in_id: key: id of signIn.
        :type sign_in_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~reports.models.Enum31]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSignIn, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphSignIn
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSignIn"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_sign_in.metadata['url']  # type: ignore
        path_format_arguments = {
            'signIn-id': self._serialize.url("sign_in_id", sign_in_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSignIn', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_sign_in.metadata = {'url': '/auditLogs/signIns/{signIn-id}'}  # type: ignore

    def update_sign_in(
        self,
        sign_in_id,  # type: str
        id=None,  # type: Optional[str]
        alternate_sign_in_name=None,  # type: Optional[str]
        app_display_name=None,  # type: Optional[str]
        app_id=None,  # type: Optional[str]
        applied_conditional_access_policies=None,  # type: Optional[List["models.MicrosoftGraphAppliedConditionalAccessPolicy"]]
        authentication_details=None,  # type: Optional[List["models.MicrosoftGraphAuthenticationDetail"]]
        authentication_methods_used=None,  # type: Optional[List[str]]
        authentication_processing_details=None,  # type: Optional[List["models.MicrosoftGraphKeyValue"]]
        authentication_requirement=None,  # type: Optional[str]
        authentication_requirement_policies=None,  # type: Optional[List["models.MicrosoftGraphAuthenticationRequirementPolicy"]]
        client_app_used=None,  # type: Optional[str]
        conditional_access_status=None,  # type: Optional[Union[str, "models.MicrosoftGraphConditionalAccessStatus"]]
        correlation_id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        device_detail=None,  # type: Optional["models.MicrosoftGraphDeviceDetail"]
        ip_address=None,  # type: Optional[str]
        is_interactive=None,  # type: Optional[bool]
        mfa_detail=None,  # type: Optional["models.MicrosoftGraphMfaDetail"]
        network_location_details=None,  # type: Optional[List["models.MicrosoftGraphNetworkLocationDetail"]]
        original_request_id=None,  # type: Optional[str]
        processing_time_in_milliseconds=None,  # type: Optional[int]
        resource_display_name=None,  # type: Optional[str]
        resource_id=None,  # type: Optional[str]
        resource_tenant_id=None,  # type: Optional[str]
        risk_detail=None,  # type: Optional[Union[str, "models.MicrosoftGraphRiskDetail"]]
        risk_event_types=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphRiskEventType"]]]
        risk_event_types_v2=None,  # type: Optional[List[str]]
        risk_level_aggregated=None,  # type: Optional[Union[str, "models.MicrosoftGraphRiskLevel"]]
        risk_level_during_sign_in=None,  # type: Optional[Union[str, "models.MicrosoftGraphRiskLevel"]]
        risk_state=None,  # type: Optional[Union[str, "models.MicrosoftGraphRiskState"]]
        service_principal_id=None,  # type: Optional[str]
        service_principal_name=None,  # type: Optional[str]
        sign_in_event_types=None,  # type: Optional[List[str]]
        status=None,  # type: Optional["models.MicrosoftGraphSignInStatus"]
        token_issuer_name=None,  # type: Optional[str]
        token_issuer_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphTokenIssuerType"]]
        user_agent_parameter=None,  # type: Optional[str]
        user_display_name=None,  # type: Optional[str]
        user_id=None,  # type: Optional[str]
        user_principal_name=None,  # type: Optional[str]
        city=None,  # type: Optional[str]
        country_or_region=None,  # type: Optional[str]
        geo_coordinates=None,  # type: Optional["models.MicrosoftGraphGeoCoordinates"]
        state=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property signIns in auditLogs.

        Update the navigation property signIns in auditLogs.

        :param sign_in_id: key: id of signIn.
        :type sign_in_id: str
        :param id: Read-only.
        :type id: str
        :param alternate_sign_in_name:
        :type alternate_sign_in_name: str
        :param app_display_name: App name displayed in the Azure Portal.
        :type app_display_name: str
        :param app_id: Unique GUID representing the app ID in the Azure Active Directory.
        :type app_id: str
        :param applied_conditional_access_policies:
        :type applied_conditional_access_policies: list[~reports.models.MicrosoftGraphAppliedConditionalAccessPolicy]
        :param authentication_details:
        :type authentication_details: list[~reports.models.MicrosoftGraphAuthenticationDetail]
        :param authentication_methods_used:
        :type authentication_methods_used: list[str]
        :param authentication_processing_details:
        :type authentication_processing_details: list[~reports.models.MicrosoftGraphKeyValue]
        :param authentication_requirement:
        :type authentication_requirement: str
        :param authentication_requirement_policies:
        :type authentication_requirement_policies: list[~reports.models.MicrosoftGraphAuthenticationRequirementPolicy]
        :param client_app_used: Identifies the legacy client used for sign-in activity.  Includes
         Browser, Exchange Active Sync, modern clients, IMAP, MAPI, SMTP, and POP.
        :type client_app_used: str
        :param conditional_access_status:
        :type conditional_access_status: str or ~reports.models.MicrosoftGraphConditionalAccessStatus
        :param correlation_id: The request ID sent from the client when the sign-in is initiated; used
         to troubleshoot sign-in activity.
        :type correlation_id: str
        :param created_date_time: Date and time (UTC) the sign-in was initiated. Example: midnight on
         Jan 1, 2014 is reported as '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param device_detail: deviceDetail.
        :type device_detail: ~reports.models.MicrosoftGraphDeviceDetail
        :param ip_address: IP address of the client used to sign in.
        :type ip_address: str
        :param is_interactive: Indicates if a sign-in is interactive or not.
        :type is_interactive: bool
        :param mfa_detail: mfaDetail.
        :type mfa_detail: ~reports.models.MicrosoftGraphMfaDetail
        :param network_location_details:
        :type network_location_details: list[~reports.models.MicrosoftGraphNetworkLocationDetail]
        :param original_request_id:
        :type original_request_id: str
        :param processing_time_in_milliseconds:
        :type processing_time_in_milliseconds: int
        :param resource_display_name: Name of the resource the user signed into.
        :type resource_display_name: str
        :param resource_id: ID of the resource that the user signed into.
        :type resource_id: str
        :param resource_tenant_id:
        :type resource_tenant_id: str
        :param risk_detail:
        :type risk_detail: str or ~reports.models.MicrosoftGraphRiskDetail
        :param risk_event_types: Risk event types associated with the sign-in. The possible values are:
         unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures,
         malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials,
         investigationsThreatIntelligence,  generic, and unknownFutureValue.
        :type risk_event_types: list[str or ~reports.models.MicrosoftGraphRiskEventType]
        :param risk_event_types_v2: The list of risk event types associated with the sign-in. Possible
         values: unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures,
         malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials,
         investigationsThreatIntelligence,  generic, or unknownFutureValue.
        :type risk_event_types_v2: list[str]
        :param risk_level_aggregated:
        :type risk_level_aggregated: str or ~reports.models.MicrosoftGraphRiskLevel
        :param risk_level_during_sign_in:
        :type risk_level_during_sign_in: str or ~reports.models.MicrosoftGraphRiskLevel
        :param risk_state:
        :type risk_state: str or ~reports.models.MicrosoftGraphRiskState
        :param service_principal_id:
        :type service_principal_id: str
        :param service_principal_name:
        :type service_principal_name: str
        :param sign_in_event_types:
        :type sign_in_event_types: list[str]
        :param status: signInStatus.
        :type status: ~reports.models.MicrosoftGraphSignInStatus
        :param token_issuer_name:
        :type token_issuer_name: str
        :param token_issuer_type:
        :type token_issuer_type: str or ~reports.models.MicrosoftGraphTokenIssuerType
        :param user_agent_parameter:
        :type user_agent_parameter: str
        :param user_display_name: Display name of the user that initiated the sign-in.
        :type user_display_name: str
        :param user_id: ID of the user that initiated the sign-in.
        :type user_id: str
        :param user_principal_name: User principal name of the user that initiated the sign-in.
        :type user_principal_name: str
        :param city: Provides the city where the sign-in originated. This is calculated using
         latitude/longitude information from the sign-in activity.
        :type city: str
        :param country_or_region: Provides the country code info (2 letter code) where the sign-in
         originated.  This is calculated using latitude/longitude information from the sign-in activity.
        :type country_or_region: str
        :param geo_coordinates: geoCoordinates.
        :type geo_coordinates: ~reports.models.MicrosoftGraphGeoCoordinates
        :param state: Provides the State where the sign-in originated. This is calculated using
         latitude/longitude information from the sign-in activity.
        :type state: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphSignIn(id=id, alternate_sign_in_name=alternate_sign_in_name, app_display_name=app_display_name, app_id=app_id, applied_conditional_access_policies=applied_conditional_access_policies, authentication_details=authentication_details, authentication_methods_used=authentication_methods_used, authentication_processing_details=authentication_processing_details, authentication_requirement=authentication_requirement, authentication_requirement_policies=authentication_requirement_policies, client_app_used=client_app_used, conditional_access_status=conditional_access_status, correlation_id=correlation_id, created_date_time=created_date_time, device_detail=device_detail, ip_address=ip_address, is_interactive=is_interactive, mfa_detail=mfa_detail, network_location_details=network_location_details, original_request_id=original_request_id, processing_time_in_milliseconds=processing_time_in_milliseconds, resource_display_name=resource_display_name, resource_id=resource_id, resource_tenant_id=resource_tenant_id, risk_detail=risk_detail, risk_event_types=risk_event_types, risk_event_types_v2=risk_event_types_v2, risk_level_aggregated=risk_level_aggregated, risk_level_during_sign_in=risk_level_during_sign_in, risk_state=risk_state, service_principal_id=service_principal_id, service_principal_name=service_principal_name, sign_in_event_types=sign_in_event_types, status=status, token_issuer_name=token_issuer_name, token_issuer_type=token_issuer_type, user_agent=user_agent_parameter, user_display_name=user_display_name, user_id=user_id, user_principal_name=user_principal_name, city=city, country_or_region=country_or_region, geo_coordinates=geo_coordinates, state=state)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_sign_in.metadata['url']  # type: ignore
        path_format_arguments = {
            'signIn-id': self._serialize.url("sign_in_id", sign_in_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphSignIn')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_sign_in.metadata = {'url': '/auditLogs/signIns/{signIn-id}'}  # type: ignore

    def delete_sign_in(
        self,
        sign_in_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property signIns for auditLogs.

        Delete navigation property signIns for auditLogs.

        :param sign_in_id: key: id of signIn.
        :type sign_in_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_sign_in.metadata['url']  # type: ignore
        path_format_arguments = {
            'signIn-id': self._serialize.url("sign_in_id", sign_in_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_sign_in.metadata = {'url': '/auditLogs/signIns/{signIn-id}'}  # type: ignore
