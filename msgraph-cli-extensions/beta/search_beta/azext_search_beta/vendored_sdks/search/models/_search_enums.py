# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class Enum13(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONFIGURATION = "configuration"
    DESCRIPTION = "description"
    NAME = "name"
    STATE = "state"
    GROUPS = "groups"
    ITEMS = "items"
    OPERATIONS = "operations"
    SCHEMA = "schema"

class Get1ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CONNECTIONS = "connections"

class Get2ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    GROUPS = "groups"
    ITEMS = "items"
    OPERATIONS = "operations"
    SCHEMA = "schema"

class Get5ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CONFIGURATION = "configuration"
    CONFIGURATION_DESC = "configuration desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    NAME = "name"
    NAME_DESC = "name desc"
    STATE = "state"
    STATE_DESC = "state desc"

class Get6ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONFIGURATION = "configuration"
    DESCRIPTION = "description"
    NAME = "name"
    STATE = "state"
    GROUPS = "groups"
    ITEMS = "items"
    OPERATIONS = "operations"
    SCHEMA = "schema"

class Get7ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    GROUPS = "groups"
    ITEMS = "items"
    OPERATIONS = "operations"
    SCHEMA = "schema"

class MicrosoftGraphAccessType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    GRANT = "grant"
    DENY = "deny"

class MicrosoftGraphAclType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    USER = "user"
    GROUP = "group"
    EVERYONE = "everyone"
    EVERYONE_EXCEPT_GUESTS = "everyoneExceptGuests"

class MicrosoftGraphBucketAggregationSortProperty(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    COUNT = "count"
    KEY_AS_STRING = "keyAsString"
    KEY_AS_NUMBER = "keyAsNumber"

class MicrosoftGraphConnectionOperationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNSPECIFIED = "unspecified"
    INPROGRESS = "inprogress"
    COMPLETED = "completed"
    FAILED = "failed"

class MicrosoftGraphConnectionState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DRAFT = "draft"
    READY = "ready"
    OBSOLETE = "obsolete"
    LIMIT_EXCEEDED = "limitExceeded"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphEntityType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EVENT = "event"
    MESSAGE = "message"
    DRIVE_ITEM = "driveItem"
    EXTERNAL_ITEM = "externalItem"
    SITE = "site"
    LIST = "list"
    LIST_ITEM = "listItem"
    DRIVE = "drive"
    UNKNOWNFUTUREVALUE = "unknownfuturevalue"

class MicrosoftGraphExternalGroupMemberType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    USER = "user"
    GROUP = "group"

class MicrosoftGraphExternalItemContentType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    TEXT = "text"
    HTML = "html"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphIdentitySourceType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AZURE_ACTIVE_DIRECTORY = "azureActiveDirectory"
    EXTERNAL = "external"

class MicrosoftGraphLabel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    TITLE = "title"
    URL = "url"
    CREATED_BY = "createdBy"
    LAST_MODIFIED_BY = "lastModifiedBy"
    AUTHORS = "authors"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    FILE_NAME = "fileName"
    FILE_EXTENSION = "fileExtension"

class MicrosoftGraphPropertyType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STRING = "String"
    INT64 = "Int64"
    DOUBLE = "Double"
    DATE_TIME = "DateTime"
    BOOLEAN = "Boolean"
    STRING_COLLECTION = "StringCollection"
    INT64_COLLECTION = "Int64Collection"
    DOUBLE_COLLECTION = "DoubleCollection"
    DATE_TIME_COLLECTION = "DateTimeCollection"
