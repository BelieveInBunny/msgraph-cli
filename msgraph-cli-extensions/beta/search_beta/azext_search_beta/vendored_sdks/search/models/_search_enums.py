# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class Enum13(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONFIGURATION = "configuration"
    DESCRIPTION = "description"
    NAME = "name"
    STATE = "state"
    GROUPS = "groups"
    ITEMS = "items"
    OPERATIONS = "operations"
    SCHEMA = "schema"

class Get1itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CONNECTIONS = "connections"

class Get2itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    GROUPS = "groups"
    ITEMS = "items"
    OPERATIONS = "operations"
    SCHEMA = "schema"

class Get5itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CONFIGURATION = "configuration"
    CONFIGURATIONDESC = "configuration desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    NAME = "name"
    NAMEDESC = "name desc"
    STATE = "state"
    STATEDESC = "state desc"

class Get6itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONFIGURATION = "configuration"
    DESCRIPTION = "description"
    NAME = "name"
    STATE = "state"
    GROUPS = "groups"
    ITEMS = "items"
    OPERATIONS = "operations"
    SCHEMA = "schema"

class Get7itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    GROUPS = "groups"
    ITEMS = "items"
    OPERATIONS = "operations"
    SCHEMA = "schema"

class Microsoftgraphaccesstype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    GRANT = "grant"
    DENY = "deny"

class Microsoftgraphacltype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    USER = "user"
    GROUP = "group"
    EVERYONE = "everyone"
    EVERYONEEXCEPTGUESTS = "everyoneExceptGuests"

class Microsoftgraphbucketaggregationsortproperty(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    COUNT = "count"
    KEYASSTRING = "keyAsString"
    KEYASNUMBER = "keyAsNumber"

class Microsoftgraphconnectionoperationstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNSPECIFIED = "unspecified"
    INPROGRESS = "inprogress"
    COMPLETED = "completed"
    FAILED = "failed"

class Microsoftgraphconnectionstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DRAFT = "draft"
    READY = "ready"
    OBSOLETE = "obsolete"
    LIMITEXCEEDED = "limitExceeded"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphentitytype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EVENT = "event"
    MESSAGE = "message"
    DRIVEITEM = "driveItem"
    EXTERNALITEM = "externalItem"
    SITE = "site"
    LIST = "list"
    LISTITEM = "listItem"
    DRIVE = "drive"
    UNKNOWNFUTUREVALUE = "unknownfuturevalue"

class Microsoftgraphexternalgroupmembertype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    USER = "user"
    GROUP = "group"

class Microsoftgraphexternalitemcontenttype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    TEXT = "text"
    HTML = "html"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphidentitysourcetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AZUREACTIVEDIRECTORY = "azureActiveDirectory"
    EXTERNAL = "external"

class Microsoftgraphlabel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    TITLE = "title"
    URL = "url"
    CREATEDBY = "createdBy"
    LASTMODIFIEDBY = "lastModifiedBy"
    AUTHORS = "authors"
    CREATEDDATETIME = "createdDateTime"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    FILENAME = "fileName"
    FILEEXTENSION = "fileExtension"

class Microsoftgraphpropertytype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STRING = "String"
    INT64 = "Int64"
    DOUBLE = "Double"
    DATETIME = "DateTime"
    BOOLEAN = "Boolean"
    STRINGCOLLECTION = "StringCollection"
    INT64COLLECTION = "Int64Collection"
    DOUBLECOLLECTION = "DoubleCollection"
    DATETIMECOLLECTION = "DateTimeCollection"
