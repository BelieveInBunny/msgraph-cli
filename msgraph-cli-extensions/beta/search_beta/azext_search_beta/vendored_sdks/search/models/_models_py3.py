# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._search_enums import *


class CollectionOfExternalConnection(msrest.serialization.Model):
    """Collection of externalConnection.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~search.models.MicrosoftGraphExternalConnection]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphExternalConnection]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphExternalConnection"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfExternalConnection, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class MicrosoftGraphAcl(msrest.serialization.Model):
    """acl.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param access_type:  Possible values include: "grant", "deny".
    :type access_type: str or ~search.models.MicrosoftGraphAccessType
    :param identity_source:
    :type identity_source: str
    :param type:  Possible values include: "user", "group", "everyone", "everyoneExceptGuests".
    :type type: str or ~search.models.MicrosoftGraphAclType
    :param value:
    :type value: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'access_type': {'key': 'accessType', 'type': 'str'},
        'identity_source': {'key': 'identitySource', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        access_type: Optional[Union[str, "MicrosoftGraphAccessType"]] = None,
        identity_source: Optional[str] = None,
        type: Optional[Union[str, "MicrosoftGraphAclType"]] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphAcl, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.access_type = access_type
        self.identity_source = identity_source
        self.type = type
        self.value = value


class MicrosoftGraphAggregationOption(msrest.serialization.Model):
    """aggregationOption.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param bucket_definition: bucketAggregationDefinition.
    :type bucket_definition: ~search.models.MicrosoftGraphBucketAggregationDefinition
    :param field:
    :type field: str
    :param size:
    :type size: int
    """

    _validation = {
        'size': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'bucket_definition': {'key': 'bucketDefinition', 'type': 'MicrosoftGraphBucketAggregationDefinition'},
        'field': {'key': 'field', 'type': 'str'},
        'size': {'key': 'size', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        bucket_definition: Optional["MicrosoftGraphBucketAggregationDefinition"] = None,
        field: Optional[str] = None,
        size: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphAggregationOption, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.bucket_definition = bucket_definition
        self.field = field
        self.size = size


class MicrosoftGraphBucketAggregationDefinition(msrest.serialization.Model):
    """bucketAggregationDefinition.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param is_descending:
    :type is_descending: bool
    :param minimum_count:
    :type minimum_count: int
    :param prefix_filter:
    :type prefix_filter: str
    :param ranges:
    :type ranges: list[~search.models.MicrosoftGraphBucketAggregationRange]
    :param sort_by:  Possible values include: "count", "keyAsString", "keyAsNumber".
    :type sort_by: str or ~search.models.MicrosoftGraphBucketAggregationSortProperty
    """

    _validation = {
        'minimum_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'is_descending': {'key': 'isDescending', 'type': 'bool'},
        'minimum_count': {'key': 'minimumCount', 'type': 'int'},
        'prefix_filter': {'key': 'prefixFilter', 'type': 'str'},
        'ranges': {'key': 'ranges', 'type': '[MicrosoftGraphBucketAggregationRange]'},
        'sort_by': {'key': 'sortBy', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        is_descending: Optional[bool] = None,
        minimum_count: Optional[int] = None,
        prefix_filter: Optional[str] = None,
        ranges: Optional[List["MicrosoftGraphBucketAggregationRange"]] = None,
        sort_by: Optional[Union[str, "MicrosoftGraphBucketAggregationSortProperty"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphBucketAggregationDefinition, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.is_descending = is_descending
        self.minimum_count = minimum_count
        self.prefix_filter = prefix_filter
        self.ranges = ranges
        self.sort_by = sort_by


class MicrosoftGraphBucketAggregationRange(msrest.serialization.Model):
    """bucketAggregationRange.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param from_property:
    :type from_property: str
    :param to:
    :type to: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'from_property': {'key': 'from', 'type': 'str'},
        'to': {'key': 'to', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        from_property: Optional[str] = None,
        to: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphBucketAggregationRange, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.from_property = from_property
        self.to = to


class MicrosoftGraphConfiguration(msrest.serialization.Model):
    """configuration.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param authorized_apps:
    :type authorized_apps: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'authorized_apps': {'key': 'authorizedApps', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        authorized_apps: Optional[List[str]] = None,
        **kwargs
    ):
        super(MicrosoftGraphConfiguration, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.authorized_apps = authorized_apps


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.id = id


class MicrosoftGraphConnectionOperation(MicrosoftGraphEntity):
    """connectionOperation.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error: errorDetail.
    :type error: ~search.models.MicrosoftGraphErrorDetail
    :param status:  Possible values include: "unspecified", "inprogress", "completed", "failed".
    :type status: str or ~search.models.MicrosoftGraphConnectionOperationStatus
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'error': {'key': 'error', 'type': 'MicrosoftGraphErrorDetail'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        error: Optional["MicrosoftGraphErrorDetail"] = None,
        status: Optional[Union[str, "MicrosoftGraphConnectionOperationStatus"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphConnectionOperation, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.error = error
        self.status = status


class MicrosoftGraphErrorDetail(msrest.serialization.Model):
    """errorDetail.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param details:
    :type details: list[~search.models.MicrosoftGraphInnerErrorDetail]
    :param error_code:
    :type error_code: str
    :param message:
    :type message: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'details': {'key': 'details', 'type': '[MicrosoftGraphInnerErrorDetail]'},
        'error_code': {'key': 'errorCode', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        details: Optional[List["MicrosoftGraphInnerErrorDetail"]] = None,
        error_code: Optional[str] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphErrorDetail, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.details = details
        self.error_code = error_code
        self.message = message


class MicrosoftGraphExternal(msrest.serialization.Model):
    """external.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param connections:
    :type connections: list[~search.models.MicrosoftGraphExternalConnection]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'connections': {'key': 'connections', 'type': '[MicrosoftGraphExternalConnection]'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        connections: Optional[List["MicrosoftGraphExternalConnection"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphExternal, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.connections = connections


class MicrosoftGraphExternalConnection(MicrosoftGraphEntity):
    """externalConnection.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param configuration: configuration.
    :type configuration: ~search.models.MicrosoftGraphConfiguration
    :param description:
    :type description: str
    :param name:
    :type name: str
    :param state:  Possible values include: "draft", "ready", "obsolete", "limitExceeded",
     "unknownFutureValue".
    :type state: str or ~search.models.MicrosoftGraphConnectionState
    :param groups:
    :type groups: list[~search.models.MicrosoftGraphExternalGroup]
    :param items:
    :type items: list[~search.models.MicrosoftGraphExternalItem]
    :param operations:
    :type operations: list[~search.models.MicrosoftGraphConnectionOperation]
    :param schema: schema.
    :type schema: ~search.models.MicrosoftGraphSchema
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'configuration': {'key': 'configuration', 'type': 'MicrosoftGraphConfiguration'},
        'description': {'key': 'description', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'groups': {'key': 'groups', 'type': '[MicrosoftGraphExternalGroup]'},
        'items': {'key': 'items', 'type': '[MicrosoftGraphExternalItem]'},
        'operations': {'key': 'operations', 'type': '[MicrosoftGraphConnectionOperation]'},
        'schema': {'key': 'schema', 'type': 'MicrosoftGraphSchema'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        configuration: Optional["MicrosoftGraphConfiguration"] = None,
        description: Optional[str] = None,
        name: Optional[str] = None,
        state: Optional[Union[str, "MicrosoftGraphConnectionState"]] = None,
        groups: Optional[List["MicrosoftGraphExternalGroup"]] = None,
        items: Optional[List["MicrosoftGraphExternalItem"]] = None,
        operations: Optional[List["MicrosoftGraphConnectionOperation"]] = None,
        schema: Optional["MicrosoftGraphSchema"] = None,
        **kwargs
    ):
        super(MicrosoftGraphExternalConnection, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.configuration = configuration
        self.description = description
        self.name = name
        self.state = state
        self.groups = groups
        self.items = items
        self.operations = operations
        self.schema = schema


class MicrosoftGraphExternalGroup(MicrosoftGraphEntity):
    """externalGroup.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param members:
    :type members: list[~search.models.MicrosoftGraphExternalGroupMember]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'members': {'key': 'members', 'type': '[MicrosoftGraphExternalGroupMember]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        members: Optional[List["MicrosoftGraphExternalGroupMember"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphExternalGroup, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.description = description
        self.display_name = display_name
        self.members = members


class MicrosoftGraphExternalGroupMember(MicrosoftGraphEntity):
    """externalGroupMember.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param identity_source:  Possible values include: "azureActiveDirectory", "external".
    :type identity_source: str or ~search.models.MicrosoftGraphIdentitySourceType
    :param type:  Possible values include: "user", "group".
    :type type: str or ~search.models.MicrosoftGraphExternalGroupMemberType
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'identity_source': {'key': 'identitySource', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        identity_source: Optional[Union[str, "MicrosoftGraphIdentitySourceType"]] = None,
        type: Optional[Union[str, "MicrosoftGraphExternalGroupMemberType"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphExternalGroupMember, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.identity_source = identity_source
        self.type = type


class MicrosoftGraphExternalItem(MicrosoftGraphEntity):
    """externalItem.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param acl:
    :type acl: list[~search.models.MicrosoftGraphAcl]
    :param content: externalItemContent.
    :type content: ~search.models.MicrosoftGraphExternalItemContent
    :param properties: properties.
    :type properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'acl': {'key': 'acl', 'type': '[MicrosoftGraphAcl]'},
        'content': {'key': 'content', 'type': 'MicrosoftGraphExternalItemContent'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        acl: Optional[List["MicrosoftGraphAcl"]] = None,
        content: Optional["MicrosoftGraphExternalItemContent"] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(MicrosoftGraphExternalItem, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.acl = acl
        self.content = content
        self.properties = properties


class MicrosoftGraphExternalItemContent(msrest.serialization.Model):
    """externalItemContent.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type:  Possible values include: "text", "html", "unknownFutureValue".
    :type type: str or ~search.models.MicrosoftGraphExternalItemContentType
    :param value:
    :type value: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        type: Optional[Union[str, "MicrosoftGraphExternalItemContentType"]] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphExternalItemContent, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.type = type
        self.value = value


class MicrosoftGraphInnerErrorDetail(msrest.serialization.Model):
    """innerErrorDetail.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param message:
    :type message: str
    :param source:
    :type source: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'message': {'key': 'message', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        message: Optional[str] = None,
        source: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphInnerErrorDetail, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.message = message
        self.source = source


class MicrosoftGraphProperty(msrest.serialization.Model):
    """property.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param aliases:
    :type aliases: list[str]
    :param is_content:
    :type is_content: bool
    :param is_queryable:
    :type is_queryable: bool
    :param is_refinable:
    :type is_refinable: bool
    :param is_retrievable:
    :type is_retrievable: bool
    :param is_searchable:
    :type is_searchable: bool
    :param labels:
    :type labels: list[str or ~search.models.MicrosoftGraphLabel]
    :param name:
    :type name: str
    :param type:  Possible values include: "String", "Int64", "Double", "DateTime", "Boolean",
     "StringCollection", "Int64Collection", "DoubleCollection", "DateTimeCollection".
    :type type: str or ~search.models.MicrosoftGraphPropertyType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'aliases': {'key': 'aliases', 'type': '[str]'},
        'is_content': {'key': 'isContent', 'type': 'bool'},
        'is_queryable': {'key': 'isQueryable', 'type': 'bool'},
        'is_refinable': {'key': 'isRefinable', 'type': 'bool'},
        'is_retrievable': {'key': 'isRetrievable', 'type': 'bool'},
        'is_searchable': {'key': 'isSearchable', 'type': 'bool'},
        'labels': {'key': 'labels', 'type': '[str]'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        aliases: Optional[List[str]] = None,
        is_content: Optional[bool] = None,
        is_queryable: Optional[bool] = None,
        is_refinable: Optional[bool] = None,
        is_retrievable: Optional[bool] = None,
        is_searchable: Optional[bool] = None,
        labels: Optional[List[Union[str, "MicrosoftGraphLabel"]]] = None,
        name: Optional[str] = None,
        type: Optional[Union[str, "MicrosoftGraphPropertyType"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphProperty, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.aliases = aliases
        self.is_content = is_content
        self.is_queryable = is_queryable
        self.is_refinable = is_refinable
        self.is_retrievable = is_retrievable
        self.is_searchable = is_searchable
        self.labels = labels
        self.name = name
        self.type = type


class MicrosoftGraphSchema(MicrosoftGraphEntity):
    """schema.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param base_type:
    :type base_type: str
    :param properties:
    :type properties: list[~search.models.MicrosoftGraphProperty]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'base_type': {'key': 'baseType', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '[MicrosoftGraphProperty]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        base_type: Optional[str] = None,
        properties: Optional[List["MicrosoftGraphProperty"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphSchema, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.base_type = base_type
        self.properties = properties


class MicrosoftGraphSearchAggregation(msrest.serialization.Model):
    """searchAggregation.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param buckets:
    :type buckets: list[~search.models.MicrosoftGraphSearchBucket]
    :param field:
    :type field: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'buckets': {'key': 'buckets', 'type': '[MicrosoftGraphSearchBucket]'},
        'field': {'key': 'field', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        buckets: Optional[List["MicrosoftGraphSearchBucket"]] = None,
        field: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSearchAggregation, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.buckets = buckets
        self.field = field


class MicrosoftGraphSearchBucket(msrest.serialization.Model):
    """searchBucket.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param aggregation_filter_token:
    :type aggregation_filter_token: str
    :param count:
    :type count: int
    :param key:
    :type key: str
    """

    _validation = {
        'count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'aggregation_filter_token': {'key': 'aggregationFilterToken', 'type': 'str'},
        'count': {'key': 'count', 'type': 'int'},
        'key': {'key': 'key', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        aggregation_filter_token: Optional[str] = None,
        count: Optional[int] = None,
        key: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSearchBucket, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.aggregation_filter_token = aggregation_filter_token
        self.count = count
        self.key = key


class MicrosoftGraphSearchEntity(MicrosoftGraphEntity):
    """searchEntity.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(MicrosoftGraphSearchEntity, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties


class MicrosoftGraphSearchHit(msrest.serialization.Model):
    """searchHit.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id:
    :type id: str
    :param score:
    :type score: int
    :param summary:
    :type summary: str
    :param content_source:
    :type content_source: str
    :param hit_id:
    :type hit_id: str
    :param rank:
    :type rank: int
    :param summary:
    :type summary: str
    :param source: entity.
    :type source: ~search.models.MicrosoftGraphEntity
    :param resource: entity.
    :type resource: ~search.models.MicrosoftGraphEntity
    """

    _validation = {
        'score': {'maximum': 2147483647, 'minimum': -2147483648},
        'rank': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': '_id', 'type': 'str'},
        'score': {'key': '_score', 'type': 'int'},
        'summary': {'key': '_summary', 'type': 'str'},
        'content_source': {'key': 'contentSource', 'type': 'str'},
        'hit_id': {'key': 'hitId', 'type': 'str'},
        'rank': {'key': 'rank', 'type': 'int'},
        'summary': {'key': 'summary', 'type': 'str'},
        'source': {'key': '_source', 'type': 'MicrosoftGraphEntity'},
        'resource': {'key': 'resource', 'type': 'MicrosoftGraphEntity'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        id: Optional[str] = None,
        score: Optional[int] = None,
        summary: Optional[str] = None,
        content_source: Optional[str] = None,
        hit_id: Optional[str] = None,
        rank: Optional[int] = None,
        summary: Optional[str] = None,
        source: Optional["MicrosoftGraphEntity"] = None,
        resource: Optional["MicrosoftGraphEntity"] = None,
        **kwargs
    ):
        super(MicrosoftGraphSearchHit, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.id = id
        self.score = score
        self.summary = summary
        self.content_source = content_source
        self.hit_id = hit_id
        self.rank = rank
        self.summary = summary
        self.source = source
        self.resource = resource


class MicrosoftGraphSearchHitsContainer(msrest.serialization.Model):
    """searchHitsContainer.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param aggregations:
    :type aggregations: list[~search.models.MicrosoftGraphSearchAggregation]
    :param hits:
    :type hits: list[~search.models.MicrosoftGraphSearchHit]
    :param more_results_available:
    :type more_results_available: bool
    :param total:
    :type total: int
    """

    _validation = {
        'total': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'aggregations': {'key': 'aggregations', 'type': '[MicrosoftGraphSearchAggregation]'},
        'hits': {'key': 'hits', 'type': '[MicrosoftGraphSearchHit]'},
        'more_results_available': {'key': 'moreResultsAvailable', 'type': 'bool'},
        'total': {'key': 'total', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        aggregations: Optional[List["MicrosoftGraphSearchAggregation"]] = None,
        hits: Optional[List["MicrosoftGraphSearchHit"]] = None,
        more_results_available: Optional[bool] = None,
        total: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphSearchHitsContainer, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.aggregations = aggregations
        self.hits = hits
        self.more_results_available = more_results_available
        self.total = total


class MicrosoftGraphSearchQuery(msrest.serialization.Model):
    """searchQuery.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param query_string: searchQueryString.
    :type query_string: ~search.models.MicrosoftGraphSearchQueryString
    :param query_string:
    :type query_string: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'query_string': {'key': 'query_string', 'type': 'MicrosoftGraphSearchQueryString'},
        'query_string': {'key': 'queryString', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        query_string: Optional["MicrosoftGraphSearchQueryString"] = None,
        query_string: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSearchQuery, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.query_string = query_string
        self.query_string = query_string


class MicrosoftGraphSearchQueryString(msrest.serialization.Model):
    """searchQueryString.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param query:
    :type query: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'query': {'key': 'query', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        query: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSearchQueryString, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.query = query


class MicrosoftGraphSearchRequest(msrest.serialization.Model):
    """searchRequest.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param aggregation_filters:
    :type aggregation_filters: list[str]
    :param aggregations:
    :type aggregations: list[~search.models.MicrosoftGraphAggregationOption]
    :param content_sources:
    :type content_sources: list[str]
    :param enable_top_results:
    :type enable_top_results: bool
    :param entity_types:
    :type entity_types: list[str or ~search.models.MicrosoftGraphEntityType]
    :param fields:
    :type fields: list[str]
    :param from_property:
    :type from_property: int
    :param query: searchQuery.
    :type query: ~search.models.MicrosoftGraphSearchQuery
    :param size:
    :type size: int
    :param sort_properties:
    :type sort_properties: list[~search.models.MicrosoftGraphSortProperty]
    :param stored_fields:
    :type stored_fields: list[str]
    """

    _validation = {
        'from_property': {'maximum': 2147483647, 'minimum': -2147483648},
        'size': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'aggregation_filters': {'key': 'aggregationFilters', 'type': '[str]'},
        'aggregations': {'key': 'aggregations', 'type': '[MicrosoftGraphAggregationOption]'},
        'content_sources': {'key': 'contentSources', 'type': '[str]'},
        'enable_top_results': {'key': 'enableTopResults', 'type': 'bool'},
        'entity_types': {'key': 'entityTypes', 'type': '[str]'},
        'fields': {'key': 'fields', 'type': '[str]'},
        'from_property': {'key': 'from', 'type': 'int'},
        'query': {'key': 'query', 'type': 'MicrosoftGraphSearchQuery'},
        'size': {'key': 'size', 'type': 'int'},
        'sort_properties': {'key': 'sortProperties', 'type': '[MicrosoftGraphSortProperty]'},
        'stored_fields': {'key': 'stored_fields', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        aggregation_filters: Optional[List[str]] = None,
        aggregations: Optional[List["MicrosoftGraphAggregationOption"]] = None,
        content_sources: Optional[List[str]] = None,
        enable_top_results: Optional[bool] = None,
        entity_types: Optional[List[Union[str, "MicrosoftGraphEntityType"]]] = None,
        fields: Optional[List[str]] = None,
        from_property: Optional[int] = None,
        query: Optional["MicrosoftGraphSearchQuery"] = None,
        size: Optional[int] = None,
        sort_properties: Optional[List["MicrosoftGraphSortProperty"]] = None,
        stored_fields: Optional[List[str]] = None,
        **kwargs
    ):
        super(MicrosoftGraphSearchRequest, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.aggregation_filters = aggregation_filters
        self.aggregations = aggregations
        self.content_sources = content_sources
        self.enable_top_results = enable_top_results
        self.entity_types = entity_types
        self.fields = fields
        self.from_property = from_property
        self.query = query
        self.size = size
        self.sort_properties = sort_properties
        self.stored_fields = stored_fields


class MicrosoftGraphSearchResponse(msrest.serialization.Model):
    """searchResponse.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param hits_containers:
    :type hits_containers: list[~search.models.MicrosoftGraphSearchHitsContainer]
    :param search_terms:
    :type search_terms: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'hits_containers': {'key': 'hitsContainers', 'type': '[MicrosoftGraphSearchHitsContainer]'},
        'search_terms': {'key': 'searchTerms', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        hits_containers: Optional[List["MicrosoftGraphSearchHitsContainer"]] = None,
        search_terms: Optional[List[str]] = None,
        **kwargs
    ):
        super(MicrosoftGraphSearchResponse, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.hits_containers = hits_containers
        self.search_terms = search_terms


class MicrosoftGraphSortProperty(msrest.serialization.Model):
    """sortProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param is_descending:
    :type is_descending: bool
    :param name:
    :type name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'is_descending': {'key': 'isDescending', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        is_descending: Optional[bool] = None,
        name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSortProperty, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.is_descending = is_descending
        self.name = name


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error: Required.
    :type error: ~search.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        *,
        error: "OdataErrorMain",
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.error = error


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        additional_properties: Optional[Dict[str, object]] = None,
        target: Optional[str] = None,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.message = message
        self.target = target


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~search.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: dict[str, object]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        additional_properties: Optional[Dict[str, object]] = None,
        target: Optional[str] = None,
        details: Optional[List["OdataErrorDetail"]] = None,
        innererror: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror


class Paths1Kd2XrlSearchMicrosoftGraphQueryPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths1Kd2XrlSearchMicrosoftGraphQueryPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param requests:
    :type requests: list[~search.models.MicrosoftGraphSearchRequest]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'requests': {'key': 'requests', 'type': '[MicrosoftGraphSearchRequest]'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        requests: Optional[List["MicrosoftGraphSearchRequest"]] = None,
        **kwargs
    ):
        super(Paths1Kd2XrlSearchMicrosoftGraphQueryPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.requests = requests
