# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals
# pylint: disable=bad-continuation
# pylint: disable=line-too-long

from msgraph.cli.core.commands import CliCommandType
from azext_search_beta.generated._client_factory import cf_external, cf_external, cf_searchentity, cf_search


search_beta_external = CliCommandType(
    operations_tmpl=(
        'azext_search_beta.vendored_sdks.search.operations._externalexternal_operations#externalexternalOperations.{}'
    ),
    client_factory=cf_external,
)


search_beta_external = CliCommandType(
    operations_tmpl='azext_search_beta.vendored_sdks.search.operations._external_operations#externalOperations.{}',
    client_factory=cf_external,
)


search_beta_searchentity = CliCommandType(
    operations_tmpl='azext_search_beta.vendored_sdks.search.operations._searchsearchentity_operations#searchsearchentityOperations.{}',
    client_factory=cf_searchentity,
)


search_beta_search = CliCommandType(
    operations_tmpl='azext_search_beta.vendored_sdks.search.operations._search_operations#searchOperations.{}',
    client_factory=cf_search,
)


def load_command_table(self, _):

    with self.command_group('search external', search_beta_external, client_factory=cf_external) as g:
        g.custom_command('show-external', 'search_external_show_external')
        g.custom_command('update-external', 'search_external_update_external')

    with self.command_group('search external', search_beta_external, client_factory=cf_external) as g:
        g.custom_command('create-connection', 'search_external_create_connection')
        g.custom_command('delete-connection', 'search_external_delete_connection')
        g.custom_command('list-connection', 'search_external_list_connection')
        g.custom_command('show-connection', 'search_external_show_connection')
        g.custom_command('update-connection', 'search_external_update_connection')

    with self.command_group('search searchentity', search_beta_searchentity, client_factory=cf_searchentity) as g:
        g.custom_command('show-search-entity', 'search_searchentity_show_search_entity')
        g.custom_command('update-search-entity', 'search_searchentity_update_search_entity')

    with self.command_group('search search', search_beta_search, client_factory=cf_search) as g:
        g.custom_command('query', 'search_search_query')

    with self.command_group('search_beta', is_experimental=True):
        pass
