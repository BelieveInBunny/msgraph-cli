# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type
)
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_users_beta.action import (
    AddServicePlans,
    AddTargetPolicy,
    AddPayloadVisualContent,
    AddMasterCategories,
    AddShiftPreferencesLastModifiedByApplication,
    AddRegionalAndLanguageSettingsAuthoringLanguages,
    AddRegionalAndLanguageSettingsDefaultDisplayLanguage,
    AddRegionalAndLanguageSettingsRegionalFormatOverrides,
    AddBody,
    AddCompletedDateTime,
    AddAttachments,
    AddUsersCreateTaskMultiValueExtendedProperties,
    AddUsersCreateTaskSingleValueExtendedProperties,
    AddRecurrencePattern,
    AddRecurrenceRange,
    AddUsersCreateTaskFolderMultiValueExtendedProperties,
    AddUsersCreateTaskFolderSingleValueExtendedProperties,
    AddUsersTodoExtensions,
    AddUsersTodoListsExtensions,
    AddLinkedResources
)


def load_arguments(self, _):

    with self.argument_context('users delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('users create-user') as c:
        c.argument('body', type=validate_file_or_dict, help='New entity Expected value: json-string/@json-file.')

    with self.argument_context('users get-user') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('consistency_level', type=str, help='Indicates the requested consistency level.')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-user') as c:
        c.argument('consistency_level', type=str, help='Indicates the requested consistency level.')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users update-user') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='New property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('users delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('if_match', type=str, help='ETag')
        c.argument('license_details_id', type=str, help='key: id of licenseDetails')
        c.argument('notification_id', type=str, help='key: id of notification')
        c.argument('profile_photo_id', type=str, help='key: id of profilePhoto')

    with self.argument_context('users create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('users create-license-detail') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('service_plans', action=AddServicePlans, nargs='*', help='Information about the service plans '
                   'assigned with the license. Read-only, Not nullable')
        c.argument('sku_id', help='Unique identifier (GUID) for the service SKU. Equal to the skuId property on the '
                   'related SubscribedSku object. Read-only')
        c.argument('sku_part_number', type=str, help='Unique SKU display name. Equal to the skuPartNumber on the '
                   'related SubscribedSku object; for example: \'AAD_Premium\'. Read-only')

    with self.argument_context('users create-notification') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_time_to_live', type=int, help='')
        c.argument('expiration_date_time', help='')
        c.argument('group_name', type=str, help='')
        c.argument('priority', arg_type=get_enum_type(['None', 'High', 'Low']), help='')
        c.argument('target_host_name', type=str, help='')
        c.argument('target_policy', action=AddTargetPolicy, nargs='*', help='targetPolicyEndpoints')
        c.argument('payload_raw_content', type=str, help='')
        c.argument('payload_visual_content', action=AddPayloadVisualContent, nargs='*', help='visualProperties')

    with self.argument_context('users create-photo') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('height', type=int, help='The height of the photo. Read-only.')
        c.argument('width', type=int, help='The width of the photo. Read-only.')

    with self.argument_context('users create-ref-created-object') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('users create-ref-direct-report') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('users create-ref-member-of') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('users create-ref-owned-device') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('users create-ref-owned-object') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('users create-ref-registered-device') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('users create-ref-transitive-member-of') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('users get-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-license-detail') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('license_details_id', type=str, help='key: id of licenseDetails')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-manager') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-notification') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notification_id', type=str, help='key: id of notification')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-outlook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-photo') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('profile_photo_id', type=str, help='key: id of profilePhoto')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-photo-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('profile_photo_id', type=str, help='key: id of profilePhoto')

    with self.argument_context('users get-ref-manager') as c:
        c.argument('user_id', type=str, help='key: id of user')

    with self.argument_context('users get-setting') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-todo') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-created-object') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-direct-report') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-license-detail') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-member-of') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-notification') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-owned-device') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-owned-object') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-photo') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-ref-created-object') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('users list-ref-direct-report') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('users list-ref-member-of') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('users list-ref-owned-device') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('users list-ref-owned-object') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('users list-ref-registered-device') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('users list-ref-transitive-member-of') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('users list-registered-device') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-transitive-member-of') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users set-photo-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('profile_photo_id', type=str, help='key: id of profilePhoto')
        c.argument('data', help='New media content.')

    with self.argument_context('users set-ref-manager') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('users update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('users update-license-detail') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('license_details_id', type=str, help='key: id of licenseDetails')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('service_plans', action=AddServicePlans, nargs='*', help='Information about the service plans '
                   'assigned with the license. Read-only, Not nullable')
        c.argument('sku_id', help='Unique identifier (GUID) for the service SKU. Equal to the skuId property on the '
                   'related SubscribedSku object. Read-only')
        c.argument('sku_part_number', type=str, help='Unique SKU display name. Equal to the skuPartNumber on the '
                   'related SubscribedSku object; for example: \'AAD_Premium\'. Read-only')

    with self.argument_context('users update-notification') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notification_id', type=str, help='key: id of notification')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_time_to_live', type=int, help='')
        c.argument('expiration_date_time', help='')
        c.argument('group_name', type=str, help='')
        c.argument('priority', arg_type=get_enum_type(['None', 'High', 'Low']), help='')
        c.argument('target_host_name', type=str, help='')
        c.argument('target_policy', action=AddTargetPolicy, nargs='*', help='targetPolicyEndpoints')
        c.argument('payload_raw_content', type=str, help='')
        c.argument('payload_visual_content', action=AddPayloadVisualContent, nargs='*', help='visualProperties')

    with self.argument_context('users update-outlook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('master_categories', action=AddMasterCategories, nargs='*', help='A list of categories defined for '
                   'the user.')
        c.argument('task_folders', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('task_groups', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('tasks', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('users update-photo') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('profile_photo_id', type=str, help='key: id of profilePhoto')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('height', type=int, help='The height of the photo. Read-only.')
        c.argument('width', type=int, help='The width of the photo. Read-only.')

    with self.argument_context('users update-setting') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('contribution_to_content_discovery_as_organization_disabled', arg_type=get_three_state_flag(),
                   help='')
        c.argument('contribution_to_content_discovery_disabled', arg_type=get_three_state_flag(), help='')
        c.argument('shift_preferences_id', type=str, help='Read-only.')
        c.argument('shift_preferences_created_date_time', help='The Timestamp type represents date and time '
                   'information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, '
                   '2014 would look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('shift_preferences_last_modified_date_time', help='The Timestamp type represents date and time '
                   'information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, '
                   '2014 would look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('shift_preferences_last_modified_by_application',
                   action=AddShiftPreferencesLastModifiedByApplication, nargs='*', help='identity')
        c.argument('shift_preferences_last_modified_by_device', action=AddShiftPreferencesLastModifiedByApplication,
                   nargs='*', help='identity')
        c.argument('shift_preferences_last_modified_by_user', action=AddShiftPreferencesLastModifiedByApplication,
                   nargs='*', help='identity')
        c.argument('shift_preferences_created_by_application', action=AddShiftPreferencesLastModifiedByApplication,
                   nargs='*', help='identity')
        c.argument('shift_preferences_created_by_device', action=AddShiftPreferencesLastModifiedByApplication, nargs=''
                   '*', help='identity')
        c.argument('shift_preferences_created_by_user', action=AddShiftPreferencesLastModifiedByApplication, nargs='*',
                   help='identity')
        c.argument('shift_preferences_availability', type=validate_file_or_dict, help='Availability of the user to be '
                   'scheduled for work and its recurrence pattern. Expected value: json-string/@json-file.')
        c.argument('regional_and_language_settings_id', type=str, help='Read-only.')
        c.argument('regional_and_language_settings_authoring_languages',
                   action=AddRegionalAndLanguageSettingsAuthoringLanguages, nargs='*', help='')
        c.argument('regional_and_language_settings_default_display_language',
                   action=AddRegionalAndLanguageSettingsDefaultDisplayLanguage, nargs='*', help='localeInfo')
        c.argument('regional_and_language_settings_default_regional_format',
                   action=AddRegionalAndLanguageSettingsDefaultDisplayLanguage, nargs='*', help='localeInfo')
        c.argument('regional_and_language_settings_default_speech_input_language',
                   action=AddRegionalAndLanguageSettingsDefaultDisplayLanguage, nargs='*', help='localeInfo')
        c.argument('regional_and_language_settings_default_translation_language',
                   action=AddRegionalAndLanguageSettingsDefaultDisplayLanguage, nargs='*', help='localeInfo')
        c.argument('regional_and_language_settings_regional_format_overrides',
                   action=AddRegionalAndLanguageSettingsRegionalFormatOverrides, nargs='*', help=''
                   'regionalFormatOverrides')

    with self.argument_context('users update-todo') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('lists', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('users delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_category_id', type=str, help='key: id of outlookCategory')
        c.argument('if_match', type=str, help='ETag')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')

    with self.argument_context('users create-master-category') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('color', arg_type=get_enum_type(['preset0', 'preset1', 'none', 'preset2', 'preset3', 'preset4', ''
                                                    'preset5', 'preset6', 'preset7', 'preset8', 'preset9', 'preset10',
                                                    'preset11', 'preset12', 'preset13', 'preset14', 'preset15', ''
                                                    'preset16', 'preset17', 'preset18', 'preset19', 'preset20', ''
                                                    'preset21', 'preset22', 'preset23', 'preset24']), help='')
        c.argument('display_name', type=str, help='A unique name that identifies a category in the user\'s mailbox. '
                   'After a category is created, the name cannot be changed. Read-only.')

    with self.argument_context('users create-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('assigned_to', type=str, help='')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('completed_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('due_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='')
        c.argument('owner', type=str, help='')
        c.argument('parent_folder_id', type=str, help='')
        c.argument('reminder_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('start_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('status', arg_type=get_enum_type(['notStarted', 'inProgress', 'completed', 'waitingOnOthers', ''
                                                     'deferred']), help='')
        c.argument('subject', type=str, help='')
        c.argument('attachments', action=AddAttachments, nargs='*', help='')
        c.argument('multi_value_extended_properties', action=AddUsersCreateTaskMultiValueExtendedProperties, nargs='*',
                   help='')
        c.argument('single_value_extended_properties', action=AddUsersCreateTaskSingleValueExtendedProperties, nargs=''
                   '*', help='')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')

    with self.argument_context('users create-task-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('change_key', type=str, help='')
        c.argument('is_default_folder', arg_type=get_three_state_flag(), help='')
        c.argument('name', type=str, help='')
        c.argument('parent_group_key', help='')
        c.argument('multi_value_extended_properties', action=AddUsersCreateTaskFolderMultiValueExtendedProperties,
                   nargs='*', help='')
        c.argument('single_value_extended_properties', action=AddUsersCreateTaskFolderSingleValueExtendedProperties,
                   nargs='*', help='')
        c.argument('tasks', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('users create-task-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('change_key', type=str, help='')
        c.argument('group_key', help='')
        c.argument('is_default_group', arg_type=get_three_state_flag(), help='')
        c.argument('name', type=str, help='')
        c.argument('task_folders', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('users get-master-category') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_category_id', type=str, help='key: id of outlookCategory')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-task-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-task-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-master-category') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-task-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-task-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users update-master-category') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_category_id', type=str, help='key: id of outlookCategory')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('color', arg_type=get_enum_type(['preset0', 'preset1', 'none', 'preset2', 'preset3', 'preset4', ''
                                                    'preset5', 'preset6', 'preset7', 'preset8', 'preset9', 'preset10',
                                                    'preset11', 'preset12', 'preset13', 'preset14', 'preset15', ''
                                                    'preset16', 'preset17', 'preset18', 'preset19', 'preset20', ''
                                                    'preset21', 'preset22', 'preset23', 'preset24']), help='')
        c.argument('display_name', type=str, help='A unique name that identifies a category in the user\'s mailbox. '
                   'After a category is created, the name cannot be changed. Read-only.')

    with self.argument_context('users update-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('assigned_to', type=str, help='')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('completed_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('due_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='')
        c.argument('owner', type=str, help='')
        c.argument('parent_folder_id', type=str, help='')
        c.argument('reminder_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('start_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('status', arg_type=get_enum_type(['notStarted', 'inProgress', 'completed', 'waitingOnOthers', ''
                                                     'deferred']), help='')
        c.argument('subject', type=str, help='')
        c.argument('attachments', action=AddAttachments, nargs='*', help='')
        c.argument('multi_value_extended_properties', action=AddUsersCreateTaskMultiValueExtendedProperties, nargs='*',
                   help='')
        c.argument('single_value_extended_properties', action=AddUsersCreateTaskSingleValueExtendedProperties, nargs=''
                   '*', help='')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')

    with self.argument_context('users update-task-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('change_key', type=str, help='')
        c.argument('is_default_folder', arg_type=get_three_state_flag(), help='')
        c.argument('name', type=str, help='')
        c.argument('parent_group_key', help='')
        c.argument('multi_value_extended_properties', action=AddUsersCreateTaskFolderMultiValueExtendedProperties,
                   nargs='*', help='')
        c.argument('single_value_extended_properties', action=AddUsersCreateTaskFolderSingleValueExtendedProperties,
                   nargs='*', help='')
        c.argument('tasks', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('users update-task-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('change_key', type=str, help='')
        c.argument('group_key', help='')
        c.argument('is_default_group', arg_type=get_three_state_flag(), help='')
        c.argument('name', type=str, help='')
        c.argument('task_folders', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('users delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')

    with self.argument_context('users create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('users create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('users create-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('assigned_to', type=str, help='')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('completed_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('due_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='')
        c.argument('owner', type=str, help='')
        c.argument('parent_folder_id', type=str, help='')
        c.argument('reminder_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('start_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('status', arg_type=get_enum_type(['notStarted', 'inProgress', 'completed', 'waitingOnOthers', ''
                                                     'deferred']), help='')
        c.argument('subject', type=str, help='')
        c.argument('attachments', action=AddAttachments, nargs='*', help='')
        c.argument('multi_value_extended_properties', action=AddUsersCreateTaskMultiValueExtendedProperties, nargs='*',
                   help='')
        c.argument('single_value_extended_properties', action=AddUsersCreateTaskSingleValueExtendedProperties, nargs=''
                   '*', help='')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')

    with self.argument_context('users get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('users update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('users update-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('assigned_to', type=str, help='')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('completed_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('due_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='')
        c.argument('owner', type=str, help='')
        c.argument('parent_folder_id', type=str, help='')
        c.argument('reminder_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('start_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('status', arg_type=get_enum_type(['notStarted', 'inProgress', 'completed', 'waitingOnOthers', ''
                                                     'deferred']), help='')
        c.argument('subject', type=str, help='')
        c.argument('attachments', action=AddAttachments, nargs='*', help='')
        c.argument('multi_value_extended_properties', action=AddUsersCreateTaskMultiValueExtendedProperties, nargs='*',
                   help='')
        c.argument('single_value_extended_properties', action=AddUsersCreateTaskSingleValueExtendedProperties, nargs=''
                   '*', help='')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')

    with self.argument_context('users delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('users create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('users create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('users create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('users get-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('users update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('users update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('users delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('users create-task-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('change_key', type=str, help='')
        c.argument('is_default_folder', arg_type=get_three_state_flag(), help='')
        c.argument('name', type=str, help='')
        c.argument('parent_group_key', help='')
        c.argument('multi_value_extended_properties', action=AddUsersCreateTaskFolderMultiValueExtendedProperties,
                   nargs='*', help='')
        c.argument('single_value_extended_properties', action=AddUsersCreateTaskFolderSingleValueExtendedProperties,
                   nargs='*', help='')
        c.argument('tasks', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('users get-task-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-task-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users update-task-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('change_key', type=str, help='')
        c.argument('is_default_folder', arg_type=get_three_state_flag(), help='')
        c.argument('name', type=str, help='')
        c.argument('parent_group_key', help='')
        c.argument('multi_value_extended_properties', action=AddUsersCreateTaskFolderMultiValueExtendedProperties,
                   nargs='*', help='')
        c.argument('single_value_extended_properties', action=AddUsersCreateTaskFolderSingleValueExtendedProperties,
                   nargs='*', help='')
        c.argument('tasks', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('users delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')

    with self.argument_context('users create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('users create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('users create-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('assigned_to', type=str, help='')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('completed_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('due_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='')
        c.argument('owner', type=str, help='')
        c.argument('parent_folder_id', type=str, help='')
        c.argument('reminder_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('start_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('status', arg_type=get_enum_type(['notStarted', 'inProgress', 'completed', 'waitingOnOthers', ''
                                                     'deferred']), help='')
        c.argument('subject', type=str, help='')
        c.argument('attachments', action=AddAttachments, nargs='*', help='')
        c.argument('multi_value_extended_properties', action=AddUsersCreateTaskMultiValueExtendedProperties, nargs='*',
                   help='')
        c.argument('single_value_extended_properties', action=AddUsersCreateTaskSingleValueExtendedProperties, nargs=''
                   '*', help='')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')

    with self.argument_context('users get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('users update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('users update-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('assigned_to', type=str, help='')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('completed_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('due_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='')
        c.argument('owner', type=str, help='')
        c.argument('parent_folder_id', type=str, help='')
        c.argument('reminder_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help='')
        c.argument('start_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('status', arg_type=get_enum_type(['notStarted', 'inProgress', 'completed', 'waitingOnOthers', ''
                                                     'deferred']), help='')
        c.argument('subject', type=str, help='')
        c.argument('attachments', action=AddAttachments, nargs='*', help='')
        c.argument('multi_value_extended_properties', action=AddUsersCreateTaskMultiValueExtendedProperties, nargs='*',
                   help='')
        c.argument('single_value_extended_properties', action=AddUsersCreateTaskSingleValueExtendedProperties, nargs=''
                   '*', help='')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')

    with self.argument_context('users delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('users create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('users create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('users create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('users get-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('users update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('users update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_group_id', type=str, help='key: id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', type=str, help='key: id of outlookTaskFolder')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('users delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('users create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('users create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('users create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('users get-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('users update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('users update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('outlook_task_id', type=str, help='key: id of outlookTask')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('users delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('users get-regional-and-language-setting') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-shift-preference') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users update-regional-and-language-setting') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('authoring_languages', action=AddRegionalAndLanguageSettingsAuthoringLanguages, nargs='*', help='')
        c.argument('default_display_language', action=AddRegionalAndLanguageSettingsDefaultDisplayLanguage, nargs='*',
                   help='localeInfo')
        c.argument('default_regional_format', action=AddRegionalAndLanguageSettingsDefaultDisplayLanguage, nargs='*',
                   help='localeInfo')
        c.argument('default_speech_input_language', action=AddRegionalAndLanguageSettingsDefaultDisplayLanguage,
                   nargs='*', help='localeInfo')
        c.argument('default_translation_language', action=AddRegionalAndLanguageSettingsDefaultDisplayLanguage, nargs=''
                   '*', help='localeInfo')
        c.argument('regional_format_overrides', action=AddRegionalAndLanguageSettingsRegionalFormatOverrides,
                   nargs='*', help='regionalFormatOverrides')

    with self.argument_context('users update-shift-preference') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_by_application', action=AddShiftPreferencesLastModifiedByApplication, nargs='*',
                   help='identity')
        c.argument('last_modified_by_device', action=AddShiftPreferencesLastModifiedByApplication, nargs='*', help=''
                   'identity')
        c.argument('last_modified_by_user', action=AddShiftPreferencesLastModifiedByApplication, nargs='*', help=''
                   'identity')
        c.argument('created_by_application', action=AddShiftPreferencesLastModifiedByApplication, nargs='*', help=''
                   'identity')
        c.argument('created_by_device', action=AddShiftPreferencesLastModifiedByApplication, nargs='*',
                   help='identity')
        c.argument('created_by_user', action=AddShiftPreferencesLastModifiedByApplication, nargs='*', help='identity')
        c.argument('availability', type=validate_file_or_dict, help='Availability of the user to be scheduled for work '
                   'and its recurrence pattern. Expected value: json-string/@json-file.')

    with self.argument_context('users delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('todo_task_list_id', type=str, help='key: id of todoTaskList')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('users create-list') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')
        c.argument('is_owner', arg_type=get_three_state_flag(), help='')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='')
        c.argument('wellknown_list_name', arg_type=get_enum_type(['none', 'defaultList', 'flaggedEmails', ''
                                                                  'unknownFutureValue']), help='')
        c.argument('extensions', action=AddUsersTodoExtensions, nargs='*', help='')
        c.argument('tasks', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('users get-list') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('todo_task_list_id', type=str, help='key: id of todoTaskList')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-list') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users update-list') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('todo_task_list_id', type=str, help='key: id of todoTaskList')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='')
        c.argument('is_owner', arg_type=get_three_state_flag(), help='')
        c.argument('is_shared', arg_type=get_three_state_flag(), help='')
        c.argument('wellknown_list_name', arg_type=get_enum_type(['none', 'defaultList', 'flaggedEmails', ''
                                                                  'unknownFutureValue']), help='')
        c.argument('extensions', action=AddUsersTodoExtensions, nargs='*', help='')
        c.argument('tasks', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('users delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('todo_task_list_id', type=str, help='key: id of todoTaskList')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('if_match', type=str, help='ETag')
        c.argument('todo_task_id', type=str, help='key: id of todoTask')

    with self.argument_context('users create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('todo_task_list_id', type=str, help='key: id of todoTaskList')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('users create-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('todo_task_list_id', type=str, help='key: id of todoTaskList')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_last_modified_date_time', help='')
        c.argument('completed_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('created_date_time', help='')
        c.argument('due_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='')
        c.argument('last_modified_date_time', help='')
        c.argument('reminder_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('status', arg_type=get_enum_type(['notStarted', 'inProgress', 'completed', 'waitingOnOthers', ''
                                                     'deferred']), help='')
        c.argument('title', type=str, help='')
        c.argument('extensions', action=AddUsersTodoListsExtensions, nargs='*', help='')
        c.argument('linked_resources', action=AddLinkedResources, nargs='*', help='')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')

    with self.argument_context('users get-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('todo_task_list_id', type=str, help='key: id of todoTaskList')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('todo_task_list_id', type=str, help='key: id of todoTaskList')
        c.argument('todo_task_id', type=str, help='key: id of todoTask')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('todo_task_list_id', type=str, help='key: id of todoTaskList')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('todo_task_list_id', type=str, help='key: id of todoTaskList')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('todo_task_list_id', type=str, help='key: id of todoTaskList')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('users update-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('todo_task_list_id', type=str, help='key: id of todoTaskList')
        c.argument('todo_task_id', type=str, help='key: id of todoTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_last_modified_date_time', help='')
        c.argument('completed_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('created_date_time', help='')
        c.argument('due_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='')
        c.argument('last_modified_date_time', help='')
        c.argument('reminder_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('status', arg_type=get_enum_type(['notStarted', 'inProgress', 'completed', 'waitingOnOthers', ''
                                                     'deferred']), help='')
        c.argument('title', type=str, help='')
        c.argument('extensions', action=AddUsersTodoListsExtensions, nargs='*', help='')
        c.argument('linked_resources', action=AddLinkedResources, nargs='*', help='')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')

    with self.argument_context('users delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('todo_task_list_id', type=str, help='key: id of todoTaskList')
        c.argument('todo_task_id', type=str, help='key: id of todoTask')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('if_match', type=str, help='ETag')
        c.argument('linked_resource_id', type=str, help='key: id of linkedResource')

    with self.argument_context('users create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('todo_task_list_id', type=str, help='key: id of todoTaskList')
        c.argument('todo_task_id', type=str, help='key: id of todoTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('users create-linked-resource') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('todo_task_list_id', type=str, help='key: id of todoTaskList')
        c.argument('todo_task_id', type=str, help='key: id of todoTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('application_name', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('external_id', type=str, help='')
        c.argument('web_url', type=str, help='')

    with self.argument_context('users get-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('todo_task_list_id', type=str, help='key: id of todoTaskList')
        c.argument('todo_task_id', type=str, help='key: id of todoTask')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users get-linked-resource') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('todo_task_list_id', type=str, help='key: id of todoTaskList')
        c.argument('todo_task_id', type=str, help='key: id of todoTask')
        c.argument('linked_resource_id', type=str, help='key: id of linkedResource')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('todo_task_list_id', type=str, help='key: id of todoTaskList')
        c.argument('todo_task_id', type=str, help='key: id of todoTask')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users list-linked-resource') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('todo_task_list_id', type=str, help='key: id of todoTaskList')
        c.argument('todo_task_id', type=str, help='key: id of todoTask')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('users update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('todo_task_list_id', type=str, help='key: id of todoTaskList')
        c.argument('todo_task_id', type=str, help='key: id of todoTask')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('users update-linked-resource') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('todo_task_list_id', type=str, help='key: id of todoTaskList')
        c.argument('todo_task_id', type=str, help='key: id of todoTask')
        c.argument('linked_resource_id', type=str, help='key: id of linkedResource')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('application_name', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('external_id', type=str, help='')
        c.argument('web_url', type=str, help='')
