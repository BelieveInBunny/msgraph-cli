# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class UserOutlookTaskGroupTaskFolderOperations:
    """UserOutlookTaskGroupTaskFolderOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~users.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_multi_value_extended_property(
        self,
        user_id: str,
        outlook_task_group_id: str,
        outlook_task_folder_id: str,
        orderby: Optional[List[Union[str, "models.Enum181"]]] = None,
        select: Optional[List[Union[str, "models.Enum182"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfMultiValueLegacyExtendedProperty1"]:
        """Get multiValueExtendedProperties from users.

        Get multiValueExtendedProperties from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param outlook_task_group_id: key: id of outlookTaskGroup.
        :type outlook_task_group_id: str
        :param outlook_task_folder_id: key: id of outlookTaskFolder.
        :type outlook_task_folder_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~users.models.Enum181]
        :param select: Select properties to be returned.
        :type select: list[str or ~users.models.Enum182]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfMultiValueLegacyExtendedProperty1 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~users.models.CollectionOfMultiValueLegacyExtendedProperty1]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfMultiValueLegacyExtendedProperty1"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_multi_value_extended_property.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                    'outlookTaskGroup-id': self._serialize.url("outlook_task_group_id", outlook_task_group_id, 'str'),
                    'outlookTaskFolder-id': self._serialize.url("outlook_task_folder_id", outlook_task_folder_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfMultiValueLegacyExtendedProperty1', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_multi_value_extended_property.metadata = {'url': '/users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/multiValueExtendedProperties'}  # type: ignore

    async def create_multi_value_extended_property(
        self,
        user_id: str,
        outlook_task_group_id: str,
        outlook_task_folder_id: str,
        id: Optional[str] = None,
        value: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphMultiValueLegacyExtendedProperty":
        """Create new navigation property to multiValueExtendedProperties for users.

        Create new navigation property to multiValueExtendedProperties for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param outlook_task_group_id: key: id of outlookTaskGroup.
        :type outlook_task_group_id: str
        :param outlook_task_folder_id: key: id of outlookTaskFolder.
        :type outlook_task_folder_id: str
        :param id: Read-only.
        :type id: str
        :param value: A collection of property values.
        :type value: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMultiValueLegacyExtendedProperty, or the result of cls(response)
        :rtype: ~users.models.MicrosoftGraphMultiValueLegacyExtendedProperty
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphMultiValueLegacyExtendedProperty(id=id, value=value)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_multi_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'outlookTaskGroup-id': self._serialize.url("outlook_task_group_id", outlook_task_group_id, 'str'),
            'outlookTaskFolder-id': self._serialize.url("outlook_task_folder_id", outlook_task_folder_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphMultiValueLegacyExtendedProperty')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMultiValueLegacyExtendedProperty', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_multi_value_extended_property.metadata = {'url': '/users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/multiValueExtendedProperties'}  # type: ignore

    async def get_multi_value_extended_property(
        self,
        user_id: str,
        outlook_task_group_id: str,
        outlook_task_folder_id: str,
        multi_value_legacy_extended_property_id: str,
        select: Optional[List[Union[str, "models.Enum183"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphMultiValueLegacyExtendedProperty":
        """Get multiValueExtendedProperties from users.

        Get multiValueExtendedProperties from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param outlook_task_group_id: key: id of outlookTaskGroup.
        :type outlook_task_group_id: str
        :param outlook_task_folder_id: key: id of outlookTaskFolder.
        :type outlook_task_folder_id: str
        :param multi_value_legacy_extended_property_id: key: id of multiValueLegacyExtendedProperty.
        :type multi_value_legacy_extended_property_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~users.models.Enum183]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMultiValueLegacyExtendedProperty, or the result of cls(response)
        :rtype: ~users.models.MicrosoftGraphMultiValueLegacyExtendedProperty
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_multi_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'outlookTaskGroup-id': self._serialize.url("outlook_task_group_id", outlook_task_group_id, 'str'),
            'outlookTaskFolder-id': self._serialize.url("outlook_task_folder_id", outlook_task_folder_id, 'str'),
            'multiValueLegacyExtendedProperty-id': self._serialize.url("multi_value_legacy_extended_property_id", multi_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMultiValueLegacyExtendedProperty', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_multi_value_extended_property.metadata = {'url': '/users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}'}  # type: ignore

    async def update_multi_value_extended_property(
        self,
        user_id: str,
        outlook_task_group_id: str,
        outlook_task_folder_id: str,
        multi_value_legacy_extended_property_id: str,
        id: Optional[str] = None,
        value: Optional[List[str]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property multiValueExtendedProperties in users.

        Update the navigation property multiValueExtendedProperties in users.

        :param user_id: key: id of user.
        :type user_id: str
        :param outlook_task_group_id: key: id of outlookTaskGroup.
        :type outlook_task_group_id: str
        :param outlook_task_folder_id: key: id of outlookTaskFolder.
        :type outlook_task_folder_id: str
        :param multi_value_legacy_extended_property_id: key: id of multiValueLegacyExtendedProperty.
        :type multi_value_legacy_extended_property_id: str
        :param id: Read-only.
        :type id: str
        :param value: A collection of property values.
        :type value: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphMultiValueLegacyExtendedProperty(id=id, value=value)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_multi_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'outlookTaskGroup-id': self._serialize.url("outlook_task_group_id", outlook_task_group_id, 'str'),
            'outlookTaskFolder-id': self._serialize.url("outlook_task_folder_id", outlook_task_folder_id, 'str'),
            'multiValueLegacyExtendedProperty-id': self._serialize.url("multi_value_legacy_extended_property_id", multi_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphMultiValueLegacyExtendedProperty')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_multi_value_extended_property.metadata = {'url': '/users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}'}  # type: ignore

    async def delete_multi_value_extended_property(
        self,
        user_id: str,
        outlook_task_group_id: str,
        outlook_task_folder_id: str,
        multi_value_legacy_extended_property_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property multiValueExtendedProperties for users.

        Delete navigation property multiValueExtendedProperties for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param outlook_task_group_id: key: id of outlookTaskGroup.
        :type outlook_task_group_id: str
        :param outlook_task_folder_id: key: id of outlookTaskFolder.
        :type outlook_task_folder_id: str
        :param multi_value_legacy_extended_property_id: key: id of multiValueLegacyExtendedProperty.
        :type multi_value_legacy_extended_property_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_multi_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'outlookTaskGroup-id': self._serialize.url("outlook_task_group_id", outlook_task_group_id, 'str'),
            'outlookTaskFolder-id': self._serialize.url("outlook_task_folder_id", outlook_task_folder_id, 'str'),
            'multiValueLegacyExtendedProperty-id': self._serialize.url("multi_value_legacy_extended_property_id", multi_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_multi_value_extended_property.metadata = {'url': '/users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}'}  # type: ignore

    def list_single_value_extended_property(
        self,
        user_id: str,
        outlook_task_group_id: str,
        outlook_task_folder_id: str,
        orderby: Optional[List[Union[str, "models.Enum184"]]] = None,
        select: Optional[List[Union[str, "models.Enum185"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfSingleValueLegacyExtendedProperty1"]:
        """Get singleValueExtendedProperties from users.

        Get singleValueExtendedProperties from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param outlook_task_group_id: key: id of outlookTaskGroup.
        :type outlook_task_group_id: str
        :param outlook_task_folder_id: key: id of outlookTaskFolder.
        :type outlook_task_folder_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~users.models.Enum184]
        :param select: Select properties to be returned.
        :type select: list[str or ~users.models.Enum185]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfSingleValueLegacyExtendedProperty1 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~users.models.CollectionOfSingleValueLegacyExtendedProperty1]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfSingleValueLegacyExtendedProperty1"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_single_value_extended_property.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                    'outlookTaskGroup-id': self._serialize.url("outlook_task_group_id", outlook_task_group_id, 'str'),
                    'outlookTaskFolder-id': self._serialize.url("outlook_task_folder_id", outlook_task_folder_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfSingleValueLegacyExtendedProperty1', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_single_value_extended_property.metadata = {'url': '/users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/singleValueExtendedProperties'}  # type: ignore

    async def create_single_value_extended_property(
        self,
        user_id: str,
        outlook_task_group_id: str,
        outlook_task_folder_id: str,
        id: Optional[str] = None,
        value: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphSingleValueLegacyExtendedProperty":
        """Create new navigation property to singleValueExtendedProperties for users.

        Create new navigation property to singleValueExtendedProperties for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param outlook_task_group_id: key: id of outlookTaskGroup.
        :type outlook_task_group_id: str
        :param outlook_task_folder_id: key: id of outlookTaskFolder.
        :type outlook_task_folder_id: str
        :param id: Read-only.
        :type id: str
        :param value: A property value.
        :type value: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSingleValueLegacyExtendedProperty, or the result of cls(response)
        :rtype: ~users.models.MicrosoftGraphSingleValueLegacyExtendedProperty
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphSingleValueLegacyExtendedProperty(id=id, value=value)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_single_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'outlookTaskGroup-id': self._serialize.url("outlook_task_group_id", outlook_task_group_id, 'str'),
            'outlookTaskFolder-id': self._serialize.url("outlook_task_folder_id", outlook_task_folder_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphSingleValueLegacyExtendedProperty')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSingleValueLegacyExtendedProperty', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_single_value_extended_property.metadata = {'url': '/users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/singleValueExtendedProperties'}  # type: ignore

    async def get_single_value_extended_property(
        self,
        user_id: str,
        outlook_task_group_id: str,
        outlook_task_folder_id: str,
        single_value_legacy_extended_property_id: str,
        select: Optional[List[Union[str, "models.Enum186"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphSingleValueLegacyExtendedProperty":
        """Get singleValueExtendedProperties from users.

        Get singleValueExtendedProperties from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param outlook_task_group_id: key: id of outlookTaskGroup.
        :type outlook_task_group_id: str
        :param outlook_task_folder_id: key: id of outlookTaskFolder.
        :type outlook_task_folder_id: str
        :param single_value_legacy_extended_property_id: key: id of singleValueLegacyExtendedProperty.
        :type single_value_legacy_extended_property_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~users.models.Enum186]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSingleValueLegacyExtendedProperty, or the result of cls(response)
        :rtype: ~users.models.MicrosoftGraphSingleValueLegacyExtendedProperty
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_single_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'outlookTaskGroup-id': self._serialize.url("outlook_task_group_id", outlook_task_group_id, 'str'),
            'outlookTaskFolder-id': self._serialize.url("outlook_task_folder_id", outlook_task_folder_id, 'str'),
            'singleValueLegacyExtendedProperty-id': self._serialize.url("single_value_legacy_extended_property_id", single_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSingleValueLegacyExtendedProperty', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_single_value_extended_property.metadata = {'url': '/users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}'}  # type: ignore

    async def update_single_value_extended_property(
        self,
        user_id: str,
        outlook_task_group_id: str,
        outlook_task_folder_id: str,
        single_value_legacy_extended_property_id: str,
        id: Optional[str] = None,
        value: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property singleValueExtendedProperties in users.

        Update the navigation property singleValueExtendedProperties in users.

        :param user_id: key: id of user.
        :type user_id: str
        :param outlook_task_group_id: key: id of outlookTaskGroup.
        :type outlook_task_group_id: str
        :param outlook_task_folder_id: key: id of outlookTaskFolder.
        :type outlook_task_folder_id: str
        :param single_value_legacy_extended_property_id: key: id of singleValueLegacyExtendedProperty.
        :type single_value_legacy_extended_property_id: str
        :param id: Read-only.
        :type id: str
        :param value: A property value.
        :type value: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphSingleValueLegacyExtendedProperty(id=id, value=value)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_single_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'outlookTaskGroup-id': self._serialize.url("outlook_task_group_id", outlook_task_group_id, 'str'),
            'outlookTaskFolder-id': self._serialize.url("outlook_task_folder_id", outlook_task_folder_id, 'str'),
            'singleValueLegacyExtendedProperty-id': self._serialize.url("single_value_legacy_extended_property_id", single_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphSingleValueLegacyExtendedProperty')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_single_value_extended_property.metadata = {'url': '/users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}'}  # type: ignore

    async def delete_single_value_extended_property(
        self,
        user_id: str,
        outlook_task_group_id: str,
        outlook_task_folder_id: str,
        single_value_legacy_extended_property_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property singleValueExtendedProperties for users.

        Delete navigation property singleValueExtendedProperties for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param outlook_task_group_id: key: id of outlookTaskGroup.
        :type outlook_task_group_id: str
        :param outlook_task_folder_id: key: id of outlookTaskFolder.
        :type outlook_task_folder_id: str
        :param single_value_legacy_extended_property_id: key: id of singleValueLegacyExtendedProperty.
        :type single_value_legacy_extended_property_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_single_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'outlookTaskGroup-id': self._serialize.url("outlook_task_group_id", outlook_task_group_id, 'str'),
            'outlookTaskFolder-id': self._serialize.url("outlook_task_folder_id", outlook_task_folder_id, 'str'),
            'singleValueLegacyExtendedProperty-id': self._serialize.url("single_value_legacy_extended_property_id", single_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_single_value_extended_property.metadata = {'url': '/users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}'}  # type: ignore

    def list_task(
        self,
        user_id: str,
        outlook_task_group_id: str,
        outlook_task_folder_id: str,
        orderby: Optional[List[Union[str, "models.Enum187"]]] = None,
        select: Optional[List[Union[str, "models.Enum188"]]] = None,
        expand: Optional[List[Union[str, "models.Enum189"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfOutlookTask0"]:
        """Get tasks from users.

        Get tasks from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param outlook_task_group_id: key: id of outlookTaskGroup.
        :type outlook_task_group_id: str
        :param outlook_task_folder_id: key: id of outlookTaskFolder.
        :type outlook_task_folder_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~users.models.Enum187]
        :param select: Select properties to be returned.
        :type select: list[str or ~users.models.Enum188]
        :param expand: Expand related entities.
        :type expand: list[str or ~users.models.Enum189]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfOutlookTask0 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~users.models.CollectionOfOutlookTask0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfOutlookTask0"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_task.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                    'outlookTaskGroup-id': self._serialize.url("outlook_task_group_id", outlook_task_group_id, 'str'),
                    'outlookTaskFolder-id': self._serialize.url("outlook_task_folder_id", outlook_task_folder_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfOutlookTask0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_task.metadata = {'url': '/users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/tasks'}  # type: ignore

    async def create_task(
        self,
        user_id: str,
        outlook_task_group_id: str,
        outlook_task_folder_id: str,
        id: Optional[str] = None,
        categories: Optional[List[str]] = None,
        change_key: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        assigned_to: Optional[str] = None,
        body: Optional["models.MicrosoftGraphItemBody"] = None,
        completed_date_time: Optional["models.MicrosoftGraphDateTimeZone"] = None,
        due_date_time: Optional["models.MicrosoftGraphDateTimeZone"] = None,
        has_attachments: Optional[bool] = None,
        importance: Optional[Union[str, "models.MicrosoftGraphImportance"]] = None,
        is_reminder_on: Optional[bool] = None,
        owner: Optional[str] = None,
        parent_folder_id: Optional[str] = None,
        reminder_date_time: Optional["models.MicrosoftGraphDateTimeZone"] = None,
        sensitivity: Optional[Union[str, "models.MicrosoftGraphSensitivity"]] = None,
        start_date_time: Optional["models.MicrosoftGraphDateTimeZone"] = None,
        status: Optional[Union[str, "models.MicrosoftGraphTaskStatus"]] = None,
        subject: Optional[str] = None,
        attachments: Optional[List["models.MicrosoftGraphAttachment"]] = None,
        multi_value_extended_properties: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        single_value_extended_properties: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        pattern: Optional["models.MicrosoftGraphRecurrencePattern"] = None,
        range: Optional["models.MicrosoftGraphRecurrenceRange"] = None,
        **kwargs
    ) -> "models.MicrosoftGraphOutlookTask":
        """Create new navigation property to tasks for users.

        Create new navigation property to tasks for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param outlook_task_group_id: key: id of outlookTaskGroup.
        :type outlook_task_group_id: str
        :param outlook_task_folder_id: key: id of outlookTaskFolder.
        :type outlook_task_folder_id: str
        :param id: Read-only.
        :type id: str
        :param categories: The categories associated with the item.
        :type categories: list[str]
        :param change_key: Identifies the version of the item. Every time the item is changed,
         changeKey changes as well. This allows Exchange to apply changes to the correct version of the
         object. Read-only.
        :type change_key: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param assigned_to:
        :type assigned_to: str
        :param body: itemBody.
        :type body: ~users.models.MicrosoftGraphItemBody
        :param completed_date_time: dateTimeTimeZone.
        :type completed_date_time: ~users.models.MicrosoftGraphDateTimeZone
        :param due_date_time: dateTimeTimeZone.
        :type due_date_time: ~users.models.MicrosoftGraphDateTimeZone
        :param has_attachments:
        :type has_attachments: bool
        :param importance:
        :type importance: str or ~users.models.MicrosoftGraphImportance
        :param is_reminder_on:
        :type is_reminder_on: bool
        :param owner:
        :type owner: str
        :param parent_folder_id:
        :type parent_folder_id: str
        :param reminder_date_time: dateTimeTimeZone.
        :type reminder_date_time: ~users.models.MicrosoftGraphDateTimeZone
        :param sensitivity:
        :type sensitivity: str or ~users.models.MicrosoftGraphSensitivity
        :param start_date_time: dateTimeTimeZone.
        :type start_date_time: ~users.models.MicrosoftGraphDateTimeZone
        :param status:
        :type status: str or ~users.models.MicrosoftGraphTaskStatus
        :param subject:
        :type subject: str
        :param attachments:
        :type attachments: list[~users.models.MicrosoftGraphAttachment]
        :param multi_value_extended_properties:
        :type multi_value_extended_properties: list[~users.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param single_value_extended_properties:
        :type single_value_extended_properties: list[~users.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :param pattern: recurrencePattern.
        :type pattern: ~users.models.MicrosoftGraphRecurrencePattern
        :param range: recurrenceRange.
        :type range: ~users.models.MicrosoftGraphRecurrenceRange
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphOutlookTask, or the result of cls(response)
        :rtype: ~users.models.MicrosoftGraphOutlookTask
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphOutlookTask"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphOutlookTask(id=id, categories=categories, change_key=change_key, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, assigned_to=assigned_to, body=body, completed_date_time=completed_date_time, due_date_time=due_date_time, has_attachments=has_attachments, importance=importance, is_reminder_on=is_reminder_on, owner=owner, parent_folder_id=parent_folder_id, reminder_date_time=reminder_date_time, sensitivity=sensitivity, start_date_time=start_date_time, status=status, subject=subject, attachments=attachments, multi_value_extended_properties=multi_value_extended_properties, single_value_extended_properties=single_value_extended_properties, pattern=pattern, range=range)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_task.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'outlookTaskGroup-id': self._serialize.url("outlook_task_group_id", outlook_task_group_id, 'str'),
            'outlookTaskFolder-id': self._serialize.url("outlook_task_folder_id", outlook_task_folder_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphOutlookTask')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphOutlookTask', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_task.metadata = {'url': '/users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/tasks'}  # type: ignore

    async def get_task(
        self,
        user_id: str,
        outlook_task_group_id: str,
        outlook_task_folder_id: str,
        outlook_task_id: str,
        select: Optional[List[Union[str, "models.Enum190"]]] = None,
        expand: Optional[List[Union[str, "models.Enum191"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphOutlookTask":
        """Get tasks from users.

        Get tasks from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param outlook_task_group_id: key: id of outlookTaskGroup.
        :type outlook_task_group_id: str
        :param outlook_task_folder_id: key: id of outlookTaskFolder.
        :type outlook_task_folder_id: str
        :param outlook_task_id: key: id of outlookTask.
        :type outlook_task_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~users.models.Enum190]
        :param expand: Expand related entities.
        :type expand: list[str or ~users.models.Enum191]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphOutlookTask, or the result of cls(response)
        :rtype: ~users.models.MicrosoftGraphOutlookTask
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphOutlookTask"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_task.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'outlookTaskGroup-id': self._serialize.url("outlook_task_group_id", outlook_task_group_id, 'str'),
            'outlookTaskFolder-id': self._serialize.url("outlook_task_folder_id", outlook_task_folder_id, 'str'),
            'outlookTask-id': self._serialize.url("outlook_task_id", outlook_task_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphOutlookTask', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_task.metadata = {'url': '/users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/tasks/{outlookTask-id}'}  # type: ignore

    async def update_task(
        self,
        user_id: str,
        outlook_task_group_id: str,
        outlook_task_folder_id: str,
        outlook_task_id: str,
        id: Optional[str] = None,
        categories: Optional[List[str]] = None,
        change_key: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        assigned_to: Optional[str] = None,
        body: Optional["models.MicrosoftGraphItemBody"] = None,
        completed_date_time: Optional["models.MicrosoftGraphDateTimeZone"] = None,
        due_date_time: Optional["models.MicrosoftGraphDateTimeZone"] = None,
        has_attachments: Optional[bool] = None,
        importance: Optional[Union[str, "models.MicrosoftGraphImportance"]] = None,
        is_reminder_on: Optional[bool] = None,
        owner: Optional[str] = None,
        parent_folder_id: Optional[str] = None,
        reminder_date_time: Optional["models.MicrosoftGraphDateTimeZone"] = None,
        sensitivity: Optional[Union[str, "models.MicrosoftGraphSensitivity"]] = None,
        start_date_time: Optional["models.MicrosoftGraphDateTimeZone"] = None,
        status: Optional[Union[str, "models.MicrosoftGraphTaskStatus"]] = None,
        subject: Optional[str] = None,
        attachments: Optional[List["models.MicrosoftGraphAttachment"]] = None,
        multi_value_extended_properties: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        single_value_extended_properties: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        pattern: Optional["models.MicrosoftGraphRecurrencePattern"] = None,
        range: Optional["models.MicrosoftGraphRecurrenceRange"] = None,
        **kwargs
    ) -> None:
        """Update the navigation property tasks in users.

        Update the navigation property tasks in users.

        :param user_id: key: id of user.
        :type user_id: str
        :param outlook_task_group_id: key: id of outlookTaskGroup.
        :type outlook_task_group_id: str
        :param outlook_task_folder_id: key: id of outlookTaskFolder.
        :type outlook_task_folder_id: str
        :param outlook_task_id: key: id of outlookTask.
        :type outlook_task_id: str
        :param id: Read-only.
        :type id: str
        :param categories: The categories associated with the item.
        :type categories: list[str]
        :param change_key: Identifies the version of the item. Every time the item is changed,
         changeKey changes as well. This allows Exchange to apply changes to the correct version of the
         object. Read-only.
        :type change_key: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param assigned_to:
        :type assigned_to: str
        :param body: itemBody.
        :type body: ~users.models.MicrosoftGraphItemBody
        :param completed_date_time: dateTimeTimeZone.
        :type completed_date_time: ~users.models.MicrosoftGraphDateTimeZone
        :param due_date_time: dateTimeTimeZone.
        :type due_date_time: ~users.models.MicrosoftGraphDateTimeZone
        :param has_attachments:
        :type has_attachments: bool
        :param importance:
        :type importance: str or ~users.models.MicrosoftGraphImportance
        :param is_reminder_on:
        :type is_reminder_on: bool
        :param owner:
        :type owner: str
        :param parent_folder_id:
        :type parent_folder_id: str
        :param reminder_date_time: dateTimeTimeZone.
        :type reminder_date_time: ~users.models.MicrosoftGraphDateTimeZone
        :param sensitivity:
        :type sensitivity: str or ~users.models.MicrosoftGraphSensitivity
        :param start_date_time: dateTimeTimeZone.
        :type start_date_time: ~users.models.MicrosoftGraphDateTimeZone
        :param status:
        :type status: str or ~users.models.MicrosoftGraphTaskStatus
        :param subject:
        :type subject: str
        :param attachments:
        :type attachments: list[~users.models.MicrosoftGraphAttachment]
        :param multi_value_extended_properties:
        :type multi_value_extended_properties: list[~users.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param single_value_extended_properties:
        :type single_value_extended_properties: list[~users.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :param pattern: recurrencePattern.
        :type pattern: ~users.models.MicrosoftGraphRecurrencePattern
        :param range: recurrenceRange.
        :type range: ~users.models.MicrosoftGraphRecurrenceRange
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphOutlookTask(id=id, categories=categories, change_key=change_key, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, assigned_to=assigned_to, body=body, completed_date_time=completed_date_time, due_date_time=due_date_time, has_attachments=has_attachments, importance=importance, is_reminder_on=is_reminder_on, owner=owner, parent_folder_id=parent_folder_id, reminder_date_time=reminder_date_time, sensitivity=sensitivity, start_date_time=start_date_time, status=status, subject=subject, attachments=attachments, multi_value_extended_properties=multi_value_extended_properties, single_value_extended_properties=single_value_extended_properties, pattern=pattern, range=range)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_task.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'outlookTaskGroup-id': self._serialize.url("outlook_task_group_id", outlook_task_group_id, 'str'),
            'outlookTaskFolder-id': self._serialize.url("outlook_task_folder_id", outlook_task_folder_id, 'str'),
            'outlookTask-id': self._serialize.url("outlook_task_id", outlook_task_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphOutlookTask')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_task.metadata = {'url': '/users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/tasks/{outlookTask-id}'}  # type: ignore

    async def delete_task(
        self,
        user_id: str,
        outlook_task_group_id: str,
        outlook_task_folder_id: str,
        outlook_task_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property tasks for users.

        Delete navigation property tasks for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param outlook_task_group_id: key: id of outlookTaskGroup.
        :type outlook_task_group_id: str
        :param outlook_task_folder_id: key: id of outlookTaskFolder.
        :type outlook_task_folder_id: str
        :param outlook_task_id: key: id of outlookTask.
        :type outlook_task_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_task.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'outlookTaskGroup-id': self._serialize.url("outlook_task_group_id", outlook_task_group_id, 'str'),
            'outlookTaskFolder-id': self._serialize.url("outlook_task_folder_id", outlook_task_folder_id, 'str'),
            'outlookTask-id': self._serialize.url("outlook_task_id", outlook_task_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_task.metadata = {'url': '/users/{user-id}/outlook/taskGroups/{outlookTaskGroup-id}/taskFolders/{outlookTaskFolder-id}/tasks/{outlookTask-id}'}  # type: ignore
