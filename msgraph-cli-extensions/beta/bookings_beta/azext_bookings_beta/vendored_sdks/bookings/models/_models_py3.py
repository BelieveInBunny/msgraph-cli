# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._bookings_enums import *


class CollectionOfBookingAppointment(msrest.serialization.Model):
    """Collection of bookingAppointment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~bookings.models.MicrosoftGraphBookingAppointment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphBookingAppointment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphBookingAppointment"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfBookingAppointment, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfBookingAppointment0(msrest.serialization.Model):
    """Collection of bookingAppointment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~bookings.models.MicrosoftGraphBookingAppointment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphBookingAppointment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphBookingAppointment"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfBookingAppointment0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfBookingBusiness(msrest.serialization.Model):
    """Collection of bookingBusiness.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~bookings.models.MicrosoftGraphBookingBusiness]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphBookingBusiness]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphBookingBusiness"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfBookingBusiness, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfBookingCurrency(msrest.serialization.Model):
    """Collection of bookingCurrency.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~bookings.models.MicrosoftGraphBookingCurrency]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphBookingCurrency]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphBookingCurrency"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfBookingCurrency, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfBookingCustomer(msrest.serialization.Model):
    """Collection of bookingCustomer.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~bookings.models.MicrosoftGraphBookingCustomer]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphBookingCustomer]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphBookingCustomer"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfBookingCustomer, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfBookingService(msrest.serialization.Model):
    """Collection of bookingService.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~bookings.models.MicrosoftGraphBookingService]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphBookingService]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphBookingService"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfBookingService, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfBookingStaffMember(msrest.serialization.Model):
    """Collection of bookingStaffMember.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~bookings.models.MicrosoftGraphBookingStaffMember]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphBookingStaffMember]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphBookingStaffMember"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfBookingStaffMember, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.id = id


class MicrosoftGraphBookingAppointment(MicrosoftGraphEntity):
    """Represents a booked appointment of a service by a customer in a business.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param additional_information:
    :type additional_information: str
    :param customer_email_address:
    :type customer_email_address: str
    :param customer_id: The id of the booking customer associated with this appointment.
    :type customer_id: str
    :param customer_name:
    :type customer_name: str
    :param customer_notes: Notes from the customer associated with this appointment.
    :type customer_notes: str
    :param customer_phone:
    :type customer_phone: str
    :param duration:
    :type duration: ~datetime.timedelta
    :param end: dateTimeTimeZone.
    :type end: ~bookings.models.MicrosoftGraphDateTimeZone
    :param invoice_amount:
    :type invoice_amount: float
    :param invoice_date: dateTimeTimeZone.
    :type invoice_date: ~bookings.models.MicrosoftGraphDateTimeZone
    :param invoice_id:
    :type invoice_id: str
    :param invoice_status:  Possible values include: "draft", "reviewing", "open", "canceled",
     "paid", "corrective".
    :type invoice_status: str or ~bookings.models.MicrosoftGraphBookingInvoiceStatus
    :param invoice_url:
    :type invoice_url: str
    :param is_location_online:
    :type is_location_online: bool
    :param online_meeting_url:
    :type online_meeting_url: str
    :param opt_out_of_customer_email:
    :type opt_out_of_customer_email: bool
    :param post_buffer:
    :type post_buffer: ~datetime.timedelta
    :param pre_buffer:
    :type pre_buffer: ~datetime.timedelta
    :param price:
    :type price: float
    :param price_type:  Possible values include: "undefined", "fixedPrice", "startingAt", "hourly",
     "free", "priceVaries", "callUs", "notSet".
    :type price_type: str or ~bookings.models.MicrosoftGraphBookingPriceType
    :param reminders:
    :type reminders: list[~bookings.models.MicrosoftGraphBookingReminder]
    :param self_service_appointment_id:
    :type self_service_appointment_id: str
    :param service_id: The id of the booking service associated with this appointment.
    :type service_id: str
    :param service_name: The name of the booking service associated with this appointment.
    :type service_name: str
    :param service_notes:
    :type service_notes: str
    :param staff_member_ids:
    :type staff_member_ids: list[str]
    :param start: dateTimeTimeZone.
    :type start: ~bookings.models.MicrosoftGraphDateTimeZone
    :param address_service_location_address: physicalAddress.
    :type address_service_location_address: ~bookings.models.MicrosoftGraphPhysicalAddress
    :param coordinates_service_location_coordinates: outlookGeoCoordinates.
    :type coordinates_service_location_coordinates:
     ~bookings.models.MicrosoftGraphOutlookGeoCoordinates
    :param display_name_service_location_display_name: The name associated with the location.
    :type display_name_service_location_display_name: str
    :param location_email_address_service_location_email_address: Optional email address of the
     location.
    :type location_email_address_service_location_email_address: str
    :param location_type_service_location_type:  Possible values include: "default",
     "conferenceRoom", "homeAddress", "businessAddress", "geoCoordinates", "streetAddress", "hotel",
     "restaurant", "localBusiness", "postalAddress".
    :type location_type_service_location_type: str or ~bookings.models.MicrosoftGraphLocationType
    :param location_uri_service_location_uri: Optional URI representing the location.
    :type location_uri_service_location_uri: str
    :param unique_id_service_location_unique_id: For internal use only.
    :type unique_id_service_location_unique_id: str
    :param unique_id_type_service_location_unique_id_type:  Possible values include: "unknown",
     "locationStore", "directory", "private", "bing".
    :type unique_id_type_service_location_unique_id_type: str or
     ~bookings.models.MicrosoftGraphLocationUniqueIdType
    :param address_customer_location_address: physicalAddress.
    :type address_customer_location_address: ~bookings.models.MicrosoftGraphPhysicalAddress
    :param coordinates_customer_location_coordinates: outlookGeoCoordinates.
    :type coordinates_customer_location_coordinates:
     ~bookings.models.MicrosoftGraphOutlookGeoCoordinates
    :param display_name_customer_location_display_name: The name associated with the location.
    :type display_name_customer_location_display_name: str
    :param location_email_address_customer_location_email_address: Optional email address of the
     location.
    :type location_email_address_customer_location_email_address: str
    :param location_type_customer_location_type:  Possible values include: "default",
     "conferenceRoom", "homeAddress", "businessAddress", "geoCoordinates", "streetAddress", "hotel",
     "restaurant", "localBusiness", "postalAddress".
    :type location_type_customer_location_type: str or ~bookings.models.MicrosoftGraphLocationType
    :param location_uri_customer_location_uri: Optional URI representing the location.
    :type location_uri_customer_location_uri: str
    :param unique_id_customer_location_unique_id: For internal use only.
    :type unique_id_customer_location_unique_id: str
    :param unique_id_type_customer_location_unique_id_type:  Possible values include: "unknown",
     "locationStore", "directory", "private", "bing".
    :type unique_id_type_customer_location_unique_id_type: str or
     ~bookings.models.MicrosoftGraphLocationUniqueIdType
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'additional_information': {'key': 'additionalInformation', 'type': 'str'},
        'customer_email_address': {'key': 'customerEmailAddress', 'type': 'str'},
        'customer_id': {'key': 'customerId', 'type': 'str'},
        'customer_name': {'key': 'customerName', 'type': 'str'},
        'customer_notes': {'key': 'customerNotes', 'type': 'str'},
        'customer_phone': {'key': 'customerPhone', 'type': 'str'},
        'duration': {'key': 'duration', 'type': 'duration'},
        'end': {'key': 'end', 'type': 'MicrosoftGraphDateTimeZone'},
        'invoice_amount': {'key': 'invoiceAmount', 'type': 'float'},
        'invoice_date': {'key': 'invoiceDate', 'type': 'MicrosoftGraphDateTimeZone'},
        'invoice_id': {'key': 'invoiceId', 'type': 'str'},
        'invoice_status': {'key': 'invoiceStatus', 'type': 'str'},
        'invoice_url': {'key': 'invoiceUrl', 'type': 'str'},
        'is_location_online': {'key': 'isLocationOnline', 'type': 'bool'},
        'online_meeting_url': {'key': 'onlineMeetingUrl', 'type': 'str'},
        'opt_out_of_customer_email': {'key': 'optOutOfCustomerEmail', 'type': 'bool'},
        'post_buffer': {'key': 'postBuffer', 'type': 'duration'},
        'pre_buffer': {'key': 'preBuffer', 'type': 'duration'},
        'price': {'key': 'price', 'type': 'float'},
        'price_type': {'key': 'priceType', 'type': 'str'},
        'reminders': {'key': 'reminders', 'type': '[MicrosoftGraphBookingReminder]'},
        'self_service_appointment_id': {'key': 'selfServiceAppointmentId', 'type': 'str'},
        'service_id': {'key': 'serviceId', 'type': 'str'},
        'service_name': {'key': 'serviceName', 'type': 'str'},
        'service_notes': {'key': 'serviceNotes', 'type': 'str'},
        'staff_member_ids': {'key': 'staffMemberIds', 'type': '[str]'},
        'start': {'key': 'start', 'type': 'MicrosoftGraphDateTimeZone'},
        'address_service_location_address': {'key': 'serviceLocation.address', 'type': 'MicrosoftGraphPhysicalAddress'},
        'coordinates_service_location_coordinates': {'key': 'serviceLocation.coordinates', 'type': 'MicrosoftGraphOutlookGeoCoordinates'},
        'display_name_service_location_display_name': {'key': 'serviceLocation.displayName', 'type': 'str'},
        'location_email_address_service_location_email_address': {'key': 'serviceLocation.locationEmailAddress', 'type': 'str'},
        'location_type_service_location_type': {'key': 'serviceLocation.locationType', 'type': 'str'},
        'location_uri_service_location_uri': {'key': 'serviceLocation.locationUri', 'type': 'str'},
        'unique_id_service_location_unique_id': {'key': 'serviceLocation.uniqueId', 'type': 'str'},
        'unique_id_type_service_location_unique_id_type': {'key': 'serviceLocation.uniqueIdType', 'type': 'str'},
        'address_customer_location_address': {'key': 'customerLocation.address', 'type': 'MicrosoftGraphPhysicalAddress'},
        'coordinates_customer_location_coordinates': {'key': 'customerLocation.coordinates', 'type': 'MicrosoftGraphOutlookGeoCoordinates'},
        'display_name_customer_location_display_name': {'key': 'customerLocation.displayName', 'type': 'str'},
        'location_email_address_customer_location_email_address': {'key': 'customerLocation.locationEmailAddress', 'type': 'str'},
        'location_type_customer_location_type': {'key': 'customerLocation.locationType', 'type': 'str'},
        'location_uri_customer_location_uri': {'key': 'customerLocation.locationUri', 'type': 'str'},
        'unique_id_customer_location_unique_id': {'key': 'customerLocation.uniqueId', 'type': 'str'},
        'unique_id_type_customer_location_unique_id_type': {'key': 'customerLocation.uniqueIdType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        additional_information: Optional[str] = None,
        customer_email_address: Optional[str] = None,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        customer_notes: Optional[str] = None,
        customer_phone: Optional[str] = None,
        duration: Optional[datetime.timedelta] = None,
        end: Optional["MicrosoftGraphDateTimeZone"] = None,
        invoice_amount: Optional[float] = None,
        invoice_date: Optional["MicrosoftGraphDateTimeZone"] = None,
        invoice_id: Optional[str] = None,
        invoice_status: Optional[Union[str, "MicrosoftGraphBookingInvoiceStatus"]] = None,
        invoice_url: Optional[str] = None,
        is_location_online: Optional[bool] = None,
        online_meeting_url: Optional[str] = None,
        opt_out_of_customer_email: Optional[bool] = None,
        post_buffer: Optional[datetime.timedelta] = None,
        pre_buffer: Optional[datetime.timedelta] = None,
        price: Optional[float] = None,
        price_type: Optional[Union[str, "MicrosoftGraphBookingPriceType"]] = None,
        reminders: Optional[List["MicrosoftGraphBookingReminder"]] = None,
        self_service_appointment_id: Optional[str] = None,
        service_id: Optional[str] = None,
        service_name: Optional[str] = None,
        service_notes: Optional[str] = None,
        staff_member_ids: Optional[List[str]] = None,
        start: Optional["MicrosoftGraphDateTimeZone"] = None,
        address_service_location_address: Optional["MicrosoftGraphPhysicalAddress"] = None,
        coordinates_service_location_coordinates: Optional["MicrosoftGraphOutlookGeoCoordinates"] = None,
        display_name_service_location_display_name: Optional[str] = None,
        location_email_address_service_location_email_address: Optional[str] = None,
        location_type_service_location_type: Optional[Union[str, "MicrosoftGraphLocationType"]] = None,
        location_uri_service_location_uri: Optional[str] = None,
        unique_id_service_location_unique_id: Optional[str] = None,
        unique_id_type_service_location_unique_id_type: Optional[Union[str, "MicrosoftGraphLocationUniqueIdType"]] = None,
        address_customer_location_address: Optional["MicrosoftGraphPhysicalAddress"] = None,
        coordinates_customer_location_coordinates: Optional["MicrosoftGraphOutlookGeoCoordinates"] = None,
        display_name_customer_location_display_name: Optional[str] = None,
        location_email_address_customer_location_email_address: Optional[str] = None,
        location_type_customer_location_type: Optional[Union[str, "MicrosoftGraphLocationType"]] = None,
        location_uri_customer_location_uri: Optional[str] = None,
        unique_id_customer_location_unique_id: Optional[str] = None,
        unique_id_type_customer_location_unique_id_type: Optional[Union[str, "MicrosoftGraphLocationUniqueIdType"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphBookingAppointment, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.additional_information = additional_information
        self.customer_email_address = customer_email_address
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.customer_notes = customer_notes
        self.customer_phone = customer_phone
        self.duration = duration
        self.end = end
        self.invoice_amount = invoice_amount
        self.invoice_date = invoice_date
        self.invoice_id = invoice_id
        self.invoice_status = invoice_status
        self.invoice_url = invoice_url
        self.is_location_online = is_location_online
        self.online_meeting_url = online_meeting_url
        self.opt_out_of_customer_email = opt_out_of_customer_email
        self.post_buffer = post_buffer
        self.pre_buffer = pre_buffer
        self.price = price
        self.price_type = price_type
        self.reminders = reminders
        self.self_service_appointment_id = self_service_appointment_id
        self.service_id = service_id
        self.service_name = service_name
        self.service_notes = service_notes
        self.staff_member_ids = staff_member_ids
        self.start = start
        self.address_service_location_address = address_service_location_address
        self.coordinates_service_location_coordinates = coordinates_service_location_coordinates
        self.display_name_service_location_display_name = display_name_service_location_display_name
        self.location_email_address_service_location_email_address = location_email_address_service_location_email_address
        self.location_type_service_location_type = location_type_service_location_type
        self.location_uri_service_location_uri = location_uri_service_location_uri
        self.unique_id_service_location_unique_id = unique_id_service_location_unique_id
        self.unique_id_type_service_location_unique_id_type = unique_id_type_service_location_unique_id_type
        self.address_customer_location_address = address_customer_location_address
        self.coordinates_customer_location_coordinates = coordinates_customer_location_coordinates
        self.display_name_customer_location_display_name = display_name_customer_location_display_name
        self.location_email_address_customer_location_email_address = location_email_address_customer_location_email_address
        self.location_type_customer_location_type = location_type_customer_location_type
        self.location_uri_customer_location_uri = location_uri_customer_location_uri
        self.unique_id_customer_location_unique_id = unique_id_customer_location_unique_id
        self.unique_id_type_customer_location_unique_id_type = unique_id_type_customer_location_unique_id_type


class MicrosoftGraphBookingNamedEntity(MicrosoftGraphEntity):
    """Booking entities that provide a display name.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: Display name of this entity.
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        display_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphBookingNamedEntity, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.display_name = display_name


class MicrosoftGraphBookingBusiness(MicrosoftGraphBookingNamedEntity):
    """Represents a Microsot Bookings Business.

    :param id: Read-only.
    :type id: str
    :param display_name: Display name of this entity.
    :type display_name: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: physicalAddress.
    :type address: ~bookings.models.MicrosoftGraphPhysicalAddress
    :param business_hours:
    :type business_hours: list[~bookings.models.MicrosoftGraphBookingWorkHours]
    :param business_type:
    :type business_type: str
    :param default_currency_iso:
    :type default_currency_iso: str
    :param email:
    :type email: str
    :param is_published:
    :type is_published: bool
    :param phone:
    :type phone: str
    :param public_url:
    :type public_url: str
    :param scheduling_policy: This type represents the set of policies that dictate how bookings
     can be created in a Booking Calendar.
    :type scheduling_policy: ~bookings.models.MicrosoftGraphBookingSchedulingPolicy
    :param web_site_url: The URL of the business web site.
    :type web_site_url: str
    :param appointments: All appointments in this business.
    :type appointments: list[~bookings.models.MicrosoftGraphBookingAppointment]
    :param calendar_view: A calendar view of appointments in this business.
    :type calendar_view: list[~bookings.models.MicrosoftGraphBookingAppointment]
    :param customers: All customers of this business.
    :type customers: list[~bookings.models.MicrosoftGraphBookingCustomer]
    :param services: All services offered by this business.
    :type services: list[~bookings.models.MicrosoftGraphBookingService]
    :param staff_members: All staff members that provides services in this business.
    :type staff_members: list[~bookings.models.MicrosoftGraphBookingStaffMember]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'MicrosoftGraphPhysicalAddress'},
        'business_hours': {'key': 'businessHours', 'type': '[MicrosoftGraphBookingWorkHours]'},
        'business_type': {'key': 'businessType', 'type': 'str'},
        'default_currency_iso': {'key': 'defaultCurrencyIso', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
        'is_published': {'key': 'isPublished', 'type': 'bool'},
        'phone': {'key': 'phone', 'type': 'str'},
        'public_url': {'key': 'publicUrl', 'type': 'str'},
        'scheduling_policy': {'key': 'schedulingPolicy', 'type': 'MicrosoftGraphBookingSchedulingPolicy'},
        'web_site_url': {'key': 'webSiteUrl', 'type': 'str'},
        'appointments': {'key': 'appointments', 'type': '[MicrosoftGraphBookingAppointment]'},
        'calendar_view': {'key': 'calendarView', 'type': '[MicrosoftGraphBookingAppointment]'},
        'customers': {'key': 'customers', 'type': '[MicrosoftGraphBookingCustomer]'},
        'services': {'key': 'services', 'type': '[MicrosoftGraphBookingService]'},
        'staff_members': {'key': 'staffMembers', 'type': '[MicrosoftGraphBookingStaffMember]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        address: Optional["MicrosoftGraphPhysicalAddress"] = None,
        business_hours: Optional[List["MicrosoftGraphBookingWorkHours"]] = None,
        business_type: Optional[str] = None,
        default_currency_iso: Optional[str] = None,
        email: Optional[str] = None,
        is_published: Optional[bool] = None,
        phone: Optional[str] = None,
        public_url: Optional[str] = None,
        scheduling_policy: Optional["MicrosoftGraphBookingSchedulingPolicy"] = None,
        web_site_url: Optional[str] = None,
        appointments: Optional[List["MicrosoftGraphBookingAppointment"]] = None,
        calendar_view: Optional[List["MicrosoftGraphBookingAppointment"]] = None,
        customers: Optional[List["MicrosoftGraphBookingCustomer"]] = None,
        services: Optional[List["MicrosoftGraphBookingService"]] = None,
        staff_members: Optional[List["MicrosoftGraphBookingStaffMember"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphBookingBusiness, self).__init__(id=id, display_name=display_name, **kwargs)
        self.additional_properties = additional_properties
        self.address = address
        self.business_hours = business_hours
        self.business_type = business_type
        self.default_currency_iso = default_currency_iso
        self.email = email
        self.is_published = is_published
        self.phone = phone
        self.public_url = public_url
        self.scheduling_policy = scheduling_policy
        self.web_site_url = web_site_url
        self.appointments = appointments
        self.calendar_view = calendar_view
        self.customers = customers
        self.services = services
        self.staff_members = staff_members


class MicrosoftGraphBookingCurrency(MicrosoftGraphEntity):
    """bookingCurrency.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param symbol:
    :type symbol: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'symbol': {'key': 'symbol', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        symbol: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphBookingCurrency, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.symbol = symbol


class MicrosoftGraphBookingPerson(MicrosoftGraphBookingNamedEntity):
    """Represents a booking customer or staff member.

    :param id: Read-only.
    :type id: str
    :param display_name: Display name of this entity.
    :type display_name: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param email_address: The e-mail address of this person.
    :type email_address: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'email_address': {'key': 'emailAddress', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        email_address: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphBookingPerson, self).__init__(id=id, display_name=display_name, **kwargs)
        self.additional_properties = additional_properties
        self.email_address = email_address


class MicrosoftGraphBookingCustomer(MicrosoftGraphBookingPerson):
    """Represents a customer of the business.

    :param id: Read-only.
    :type id: str
    :param display_name: Display name of this entity.
    :type display_name: str
    :param email_address: The e-mail address of this person.
    :type email_address: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'email_address': {'key': 'emailAddress', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        email_address: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(MicrosoftGraphBookingCustomer, self).__init__(id=id, display_name=display_name, email_address=email_address, **kwargs)
        self.additional_properties = additional_properties


class MicrosoftGraphBookingReminder(msrest.serialization.Model):
    """This type represents when and to whom to send an e-mail reminder.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param message: Message to send.
    :type message: str
    :param offset: How much time before an appointment the reminder should be sent.
    :type offset: ~datetime.timedelta
    :param recipients:  Possible values include: "allAttendees", "staff", "customer".
    :type recipients: str or ~bookings.models.MicrosoftGraphBookingReminderRecipients
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'message': {'key': 'message', 'type': 'str'},
        'offset': {'key': 'offset', 'type': 'duration'},
        'recipients': {'key': 'recipients', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        message: Optional[str] = None,
        offset: Optional[datetime.timedelta] = None,
        recipients: Optional[Union[str, "MicrosoftGraphBookingReminderRecipients"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphBookingReminder, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.message = message
        self.offset = offset
        self.recipients = recipients


class MicrosoftGraphBookingSchedulingPolicy(msrest.serialization.Model):
    """This type represents the set of policies that dictate how bookings can be created in a Booking Calendar.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allow_staff_selection: Allow customers to choose a specific person for the booking.
    :type allow_staff_selection: bool
    :param maximum_advance: Maximum number of days in advance that a booking can be made.
    :type maximum_advance: ~datetime.timedelta
    :param minimum_lead_time: Minimum lead time for bookings and cancellations.
    :type minimum_lead_time: ~datetime.timedelta
    :param send_confirmations_to_owner: Notify the business via email when a booking is created or
     changed.
    :type send_confirmations_to_owner: bool
    :param time_slot_interval: Duration of each time slot.
    :type time_slot_interval: ~datetime.timedelta
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'allow_staff_selection': {'key': 'allowStaffSelection', 'type': 'bool'},
        'maximum_advance': {'key': 'maximumAdvance', 'type': 'duration'},
        'minimum_lead_time': {'key': 'minimumLeadTime', 'type': 'duration'},
        'send_confirmations_to_owner': {'key': 'sendConfirmationsToOwner', 'type': 'bool'},
        'time_slot_interval': {'key': 'timeSlotInterval', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        allow_staff_selection: Optional[bool] = None,
        maximum_advance: Optional[datetime.timedelta] = None,
        minimum_lead_time: Optional[datetime.timedelta] = None,
        send_confirmations_to_owner: Optional[bool] = None,
        time_slot_interval: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        super(MicrosoftGraphBookingSchedulingPolicy, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.allow_staff_selection = allow_staff_selection
        self.maximum_advance = maximum_advance
        self.minimum_lead_time = minimum_lead_time
        self.send_confirmations_to_owner = send_confirmations_to_owner
        self.time_slot_interval = time_slot_interval


class MicrosoftGraphBookingService(MicrosoftGraphBookingNamedEntity):
    """Represents a particular service offered by a booking business.

    :param id: Read-only.
    :type id: str
    :param display_name: Display name of this entity.
    :type display_name: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param additional_information:
    :type additional_information: str
    :param default_duration:
    :type default_duration: ~datetime.timedelta
    :param default_price:
    :type default_price: float
    :param default_price_type:  Possible values include: "undefined", "fixedPrice", "startingAt",
     "hourly", "free", "priceVaries", "callUs", "notSet".
    :type default_price_type: str or ~bookings.models.MicrosoftGraphBookingPriceType
    :param default_reminders: The default reminders set in an appointment of this service.
    :type default_reminders: list[~bookings.models.MicrosoftGraphBookingReminder]
    :param description:
    :type description: str
    :param is_hidden_from_customers:
    :type is_hidden_from_customers: bool
    :param is_location_online:
    :type is_location_online: bool
    :param notes:
    :type notes: str
    :param post_buffer:
    :type post_buffer: ~datetime.timedelta
    :param pre_buffer:
    :type pre_buffer: ~datetime.timedelta
    :param scheduling_policy: This type represents the set of policies that dictate how bookings
     can be created in a Booking Calendar.
    :type scheduling_policy: ~bookings.models.MicrosoftGraphBookingSchedulingPolicy
    :param staff_member_ids:
    :type staff_member_ids: list[str]
    :param address: physicalAddress.
    :type address: ~bookings.models.MicrosoftGraphPhysicalAddress
    :param coordinates: outlookGeoCoordinates.
    :type coordinates: ~bookings.models.MicrosoftGraphOutlookGeoCoordinates
    :param display_name_default_location_display_name: The name associated with the location.
    :type display_name_default_location_display_name: str
    :param location_email_address: Optional email address of the location.
    :type location_email_address: str
    :param location_type:  Possible values include: "default", "conferenceRoom", "homeAddress",
     "businessAddress", "geoCoordinates", "streetAddress", "hotel", "restaurant", "localBusiness",
     "postalAddress".
    :type location_type: str or ~bookings.models.MicrosoftGraphLocationType
    :param location_uri: Optional URI representing the location.
    :type location_uri: str
    :param unique_id: For internal use only.
    :type unique_id: str
    :param unique_id_type:  Possible values include: "unknown", "locationStore", "directory",
     "private", "bing".
    :type unique_id_type: str or ~bookings.models.MicrosoftGraphLocationUniqueIdType
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'additional_information': {'key': 'additionalInformation', 'type': 'str'},
        'default_duration': {'key': 'defaultDuration', 'type': 'duration'},
        'default_price': {'key': 'defaultPrice', 'type': 'float'},
        'default_price_type': {'key': 'defaultPriceType', 'type': 'str'},
        'default_reminders': {'key': 'defaultReminders', 'type': '[MicrosoftGraphBookingReminder]'},
        'description': {'key': 'description', 'type': 'str'},
        'is_hidden_from_customers': {'key': 'isHiddenFromCustomers', 'type': 'bool'},
        'is_location_online': {'key': 'isLocationOnline', 'type': 'bool'},
        'notes': {'key': 'notes', 'type': 'str'},
        'post_buffer': {'key': 'postBuffer', 'type': 'duration'},
        'pre_buffer': {'key': 'preBuffer', 'type': 'duration'},
        'scheduling_policy': {'key': 'schedulingPolicy', 'type': 'MicrosoftGraphBookingSchedulingPolicy'},
        'staff_member_ids': {'key': 'staffMemberIds', 'type': '[str]'},
        'address': {'key': 'defaultLocation.address', 'type': 'MicrosoftGraphPhysicalAddress'},
        'coordinates': {'key': 'defaultLocation.coordinates', 'type': 'MicrosoftGraphOutlookGeoCoordinates'},
        'display_name_default_location_display_name': {'key': 'defaultLocation.displayName', 'type': 'str'},
        'location_email_address': {'key': 'defaultLocation.locationEmailAddress', 'type': 'str'},
        'location_type': {'key': 'defaultLocation.locationType', 'type': 'str'},
        'location_uri': {'key': 'defaultLocation.locationUri', 'type': 'str'},
        'unique_id': {'key': 'defaultLocation.uniqueId', 'type': 'str'},
        'unique_id_type': {'key': 'defaultLocation.uniqueIdType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        additional_information: Optional[str] = None,
        default_duration: Optional[datetime.timedelta] = None,
        default_price: Optional[float] = None,
        default_price_type: Optional[Union[str, "MicrosoftGraphBookingPriceType"]] = None,
        default_reminders: Optional[List["MicrosoftGraphBookingReminder"]] = None,
        description: Optional[str] = None,
        is_hidden_from_customers: Optional[bool] = None,
        is_location_online: Optional[bool] = None,
        notes: Optional[str] = None,
        post_buffer: Optional[datetime.timedelta] = None,
        pre_buffer: Optional[datetime.timedelta] = None,
        scheduling_policy: Optional["MicrosoftGraphBookingSchedulingPolicy"] = None,
        staff_member_ids: Optional[List[str]] = None,
        address: Optional["MicrosoftGraphPhysicalAddress"] = None,
        coordinates: Optional["MicrosoftGraphOutlookGeoCoordinates"] = None,
        display_name_default_location_display_name: Optional[str] = None,
        location_email_address: Optional[str] = None,
        location_type: Optional[Union[str, "MicrosoftGraphLocationType"]] = None,
        location_uri: Optional[str] = None,
        unique_id: Optional[str] = None,
        unique_id_type: Optional[Union[str, "MicrosoftGraphLocationUniqueIdType"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphBookingService, self).__init__(id=id, display_name=display_name, **kwargs)
        self.additional_properties = additional_properties
        self.additional_information = additional_information
        self.default_duration = default_duration
        self.default_price = default_price
        self.default_price_type = default_price_type
        self.default_reminders = default_reminders
        self.description = description
        self.is_hidden_from_customers = is_hidden_from_customers
        self.is_location_online = is_location_online
        self.notes = notes
        self.post_buffer = post_buffer
        self.pre_buffer = pre_buffer
        self.scheduling_policy = scheduling_policy
        self.staff_member_ids = staff_member_ids
        self.address = address
        self.coordinates = coordinates
        self.display_name_default_location_display_name = display_name_default_location_display_name
        self.location_email_address = location_email_address
        self.location_type = location_type
        self.location_uri = location_uri
        self.unique_id = unique_id
        self.unique_id_type = unique_id_type


class MicrosoftGraphBookingStaffMember(MicrosoftGraphBookingPerson):
    """Represents a staff member who provides services in a business.

    :param id: Read-only.
    :type id: str
    :param display_name: Display name of this entity.
    :type display_name: str
    :param email_address: The e-mail address of this person.
    :type email_address: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param availability_is_affected_by_personal_calendar:
    :type availability_is_affected_by_personal_calendar: bool
    :param color_index:
    :type color_index: int
    :param role:  Possible values include: "guest", "administrator", "viewer", "externalGuest".
    :type role: str or ~bookings.models.MicrosoftGraphBookingStaffRole
    :param use_business_hours:
    :type use_business_hours: bool
    :param working_hours:
    :type working_hours: list[~bookings.models.MicrosoftGraphBookingWorkHours]
    """

    _validation = {
        'color_index': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'email_address': {'key': 'emailAddress', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'availability_is_affected_by_personal_calendar': {'key': 'availabilityIsAffectedByPersonalCalendar', 'type': 'bool'},
        'color_index': {'key': 'colorIndex', 'type': 'int'},
        'role': {'key': 'role', 'type': 'str'},
        'use_business_hours': {'key': 'useBusinessHours', 'type': 'bool'},
        'working_hours': {'key': 'workingHours', 'type': '[MicrosoftGraphBookingWorkHours]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        email_address: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        availability_is_affected_by_personal_calendar: Optional[bool] = None,
        color_index: Optional[int] = None,
        role: Optional[Union[str, "MicrosoftGraphBookingStaffRole"]] = None,
        use_business_hours: Optional[bool] = None,
        working_hours: Optional[List["MicrosoftGraphBookingWorkHours"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphBookingStaffMember, self).__init__(id=id, display_name=display_name, email_address=email_address, **kwargs)
        self.additional_properties = additional_properties
        self.availability_is_affected_by_personal_calendar = availability_is_affected_by_personal_calendar
        self.color_index = color_index
        self.role = role
        self.use_business_hours = use_business_hours
        self.working_hours = working_hours


class MicrosoftGraphBookingWorkHours(msrest.serialization.Model):
    """This type represents the set of working hours in a single day of the week.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param day:  Possible values include: "sunday", "monday", "tuesday", "wednesday", "thursday",
     "friday", "saturday".
    :type day: str or ~bookings.models.MicrosoftGraphDayOfWeek
    :param time_slots: A list of start/end times during a day.
    :type time_slots: list[~bookings.models.MicrosoftGraphBookingWorkTimeSlot]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'day': {'key': 'day', 'type': 'str'},
        'time_slots': {'key': 'timeSlots', 'type': '[MicrosoftGraphBookingWorkTimeSlot]'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        day: Optional[Union[str, "MicrosoftGraphDayOfWeek"]] = None,
        time_slots: Optional[List["MicrosoftGraphBookingWorkTimeSlot"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphBookingWorkHours, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.day = day
        self.time_slots = time_slots


class MicrosoftGraphBookingWorkTimeSlot(msrest.serialization.Model):
    """bookingWorkTimeSlot.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param end:
    :type end: ~datetime.time
    :param start:
    :type start: ~datetime.time
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'end': {'key': 'end', 'type': 'time'},
        'start': {'key': 'start', 'type': 'time'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        end: Optional[datetime.time] = None,
        start: Optional[datetime.time] = None,
        **kwargs
    ):
        super(MicrosoftGraphBookingWorkTimeSlot, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.end = end
        self.start = start


class MicrosoftGraphDateTimeZone(msrest.serialization.Model):
    """dateTimeTimeZone.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param date_time: A single point of time in a combined date and time representation
     ({date}T{time}; for example, 2017-08-29T04:00:00.0000000).
    :type date_time: str
    :param time_zone: Represents a time zone, for example, 'Pacific Standard Time'. See below for
     more possible values.
    :type time_zone: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'date_time': {'key': 'dateTime', 'type': 'str'},
        'time_zone': {'key': 'timeZone', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        date_time: Optional[str] = None,
        time_zone: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphDateTimeZone, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.date_time = date_time
        self.time_zone = time_zone


class MicrosoftGraphLocation(msrest.serialization.Model):
    """location.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: physicalAddress.
    :type address: ~bookings.models.MicrosoftGraphPhysicalAddress
    :param coordinates: outlookGeoCoordinates.
    :type coordinates: ~bookings.models.MicrosoftGraphOutlookGeoCoordinates
    :param display_name: The name associated with the location.
    :type display_name: str
    :param location_email_address: Optional email address of the location.
    :type location_email_address: str
    :param location_type:  Possible values include: "default", "conferenceRoom", "homeAddress",
     "businessAddress", "geoCoordinates", "streetAddress", "hotel", "restaurant", "localBusiness",
     "postalAddress".
    :type location_type: str or ~bookings.models.MicrosoftGraphLocationType
    :param location_uri: Optional URI representing the location.
    :type location_uri: str
    :param unique_id: For internal use only.
    :type unique_id: str
    :param unique_id_type:  Possible values include: "unknown", "locationStore", "directory",
     "private", "bing".
    :type unique_id_type: str or ~bookings.models.MicrosoftGraphLocationUniqueIdType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'MicrosoftGraphPhysicalAddress'},
        'coordinates': {'key': 'coordinates', 'type': 'MicrosoftGraphOutlookGeoCoordinates'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'location_email_address': {'key': 'locationEmailAddress', 'type': 'str'},
        'location_type': {'key': 'locationType', 'type': 'str'},
        'location_uri': {'key': 'locationUri', 'type': 'str'},
        'unique_id': {'key': 'uniqueId', 'type': 'str'},
        'unique_id_type': {'key': 'uniqueIdType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        address: Optional["MicrosoftGraphPhysicalAddress"] = None,
        coordinates: Optional["MicrosoftGraphOutlookGeoCoordinates"] = None,
        display_name: Optional[str] = None,
        location_email_address: Optional[str] = None,
        location_type: Optional[Union[str, "MicrosoftGraphLocationType"]] = None,
        location_uri: Optional[str] = None,
        unique_id: Optional[str] = None,
        unique_id_type: Optional[Union[str, "MicrosoftGraphLocationUniqueIdType"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphLocation, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.address = address
        self.coordinates = coordinates
        self.display_name = display_name
        self.location_email_address = location_email_address
        self.location_type = location_type
        self.location_uri = location_uri
        self.unique_id = unique_id
        self.unique_id_type = unique_id_type


class MicrosoftGraphOutlookGeoCoordinates(msrest.serialization.Model):
    """outlookGeoCoordinates.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param accuracy: The accuracy of the latitude and longitude. As an example, the accuracy can be
     measured in meters, such as the latitude and longitude are accurate to within 50 meters.
    :type accuracy: float
    :param altitude: The altitude of the location.
    :type altitude: float
    :param altitude_accuracy: The accuracy of the altitude.
    :type altitude_accuracy: float
    :param latitude: The latitude of the location.
    :type latitude: float
    :param longitude: The longitude of the location.
    :type longitude: float
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'accuracy': {'key': 'accuracy', 'type': 'float'},
        'altitude': {'key': 'altitude', 'type': 'float'},
        'altitude_accuracy': {'key': 'altitudeAccuracy', 'type': 'float'},
        'latitude': {'key': 'latitude', 'type': 'float'},
        'longitude': {'key': 'longitude', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        accuracy: Optional[float] = None,
        altitude: Optional[float] = None,
        altitude_accuracy: Optional[float] = None,
        latitude: Optional[float] = None,
        longitude: Optional[float] = None,
        **kwargs
    ):
        super(MicrosoftGraphOutlookGeoCoordinates, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.accuracy = accuracy
        self.altitude = altitude
        self.altitude_accuracy = altitude_accuracy
        self.latitude = latitude
        self.longitude = longitude


class MicrosoftGraphPhysicalAddress(msrest.serialization.Model):
    """physicalAddress.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param city: The city.
    :type city: str
    :param country_or_region: The country or region. It's a free-format string value, for example,
     'United States'.
    :type country_or_region: str
    :param postal_code: The postal code.
    :type postal_code: str
    :param post_office_box:
    :type post_office_box: str
    :param state: The state.
    :type state: str
    :param street: The street.
    :type street: str
    :param type:  Possible values include: "unknown", "home", "business", "other".
    :type type: str or ~bookings.models.MicrosoftGraphPhysicalAddressType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'city': {'key': 'city', 'type': 'str'},
        'country_or_region': {'key': 'countryOrRegion', 'type': 'str'},
        'postal_code': {'key': 'postalCode', 'type': 'str'},
        'post_office_box': {'key': 'postOfficeBox', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'street': {'key': 'street', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        city: Optional[str] = None,
        country_or_region: Optional[str] = None,
        postal_code: Optional[str] = None,
        post_office_box: Optional[str] = None,
        state: Optional[str] = None,
        street: Optional[str] = None,
        type: Optional[Union[str, "MicrosoftGraphPhysicalAddressType"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPhysicalAddress, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.city = city
        self.country_or_region = country_or_region
        self.postal_code = postal_code
        self.post_office_box = post_office_box
        self.state = state
        self.street = street
        self.type = type


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error: Required.
    :type error: ~bookings.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        *,
        error: "OdataErrorMain",
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.error = error


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        additional_properties: Optional[Dict[str, object]] = None,
        target: Optional[str] = None,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.message = message
        self.target = target


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~bookings.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: dict[str, object]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        additional_properties: Optional[Dict[str, object]] = None,
        target: Optional[str] = None,
        details: Optional[List["OdataErrorDetail"]] = None,
        innererror: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror


class Paths1Bomg32BookingbusinessesBookingbusinessIdCalendarviewBookingappointmentIdMicrosoftGraphCancelPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths1Bomg32BookingbusinessesBookingbusinessIdCalendarviewBookingappointmentIdMicrosoftGraphCancelPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param cancellation_message:
    :type cancellation_message: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'cancellation_message': {'key': 'cancellationMessage', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        cancellation_message: Optional[str] = None,
        **kwargs
    ):
        super(Paths1Bomg32BookingbusinessesBookingbusinessIdCalendarviewBookingappointmentIdMicrosoftGraphCancelPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.cancellation_message = cancellation_message


class Paths1K88Cl0BookingbusinessesBookingbusinessIdAppointmentsBookingappointmentIdMicrosoftGraphCancelPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths1K88Cl0BookingbusinessesBookingbusinessIdAppointmentsBookingappointmentIdMicrosoftGraphCancelPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param cancellation_message:
    :type cancellation_message: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'cancellation_message': {'key': 'cancellationMessage', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        cancellation_message: Optional[str] = None,
        **kwargs
    ):
        super(Paths1K88Cl0BookingbusinessesBookingbusinessIdAppointmentsBookingappointmentIdMicrosoftGraphCancelPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.cancellation_message = cancellation_message
