# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class BookingBusinessesOperations(object):
    """BookingBusinessesOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~bookings.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_appointments(
        self,
        booking_business_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum13"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum14"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfBookingAppointment"]
        """Get appointments from bookingBusinesses.

        Get appointments from bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~bookings.models.Enum13]
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Enum14]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfBookingAppointment or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~bookings.models.CollectionOfBookingAppointment]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfBookingAppointment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_appointments.metadata['url']  # type: ignore
                path_format_arguments = {
                    'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfBookingAppointment', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_appointments.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/appointments'}  # type: ignore

    def create_appointments(
        self,
        booking_business_id,  # type: str
        body,  # type: "models.MicrosoftGraphBookingAppointment"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphBookingAppointment"
        """Create new navigation property to appointments for bookingBusinesses.

        Create new navigation property to appointments for bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param body: New navigation property.
        :type body: ~bookings.models.MicrosoftGraphBookingAppointment
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingAppointment, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingAppointment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingAppointment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_appointments.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphBookingAppointment')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingAppointment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_appointments.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/appointments'}  # type: ignore

    def get_appointments(
        self,
        booking_business_id,  # type: str
        booking_appointment_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum15"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphBookingAppointment"
        """Get appointments from bookingBusinesses.

        Get appointments from bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param booking_appointment_id: key: id of bookingAppointment.
        :type booking_appointment_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Enum15]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingAppointment, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingAppointment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingAppointment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_appointments.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingAppointment-id': self._serialize.url("booking_appointment_id", booking_appointment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingAppointment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_appointments.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/appointments/{bookingAppointment-id}'}  # type: ignore

    def update_appointments(
        self,
        booking_business_id,  # type: str
        booking_appointment_id,  # type: str
        body,  # type: "models.MicrosoftGraphBookingAppointment"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property appointments in bookingBusinesses.

        Update the navigation property appointments in bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param booking_appointment_id: key: id of bookingAppointment.
        :type booking_appointment_id: str
        :param body: New navigation property values.
        :type body: ~bookings.models.MicrosoftGraphBookingAppointment
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_appointments.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingAppointment-id': self._serialize.url("booking_appointment_id", booking_appointment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphBookingAppointment')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_appointments.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/appointments/{bookingAppointment-id}'}  # type: ignore

    def delete_appointments(
        self,
        booking_business_id,  # type: str
        booking_appointment_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property appointments for bookingBusinesses.

        Delete navigation property appointments for bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param booking_appointment_id: key: id of bookingAppointment.
        :type booking_appointment_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_appointments.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingAppointment-id': self._serialize.url("booking_appointment_id", booking_appointment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_appointments.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/appointments/{bookingAppointment-id}'}  # type: ignore

    def list_calendar_view(
        self,
        booking_business_id,  # type: str
        start,  # type: str
        end,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum16"]]]
        select=None,  # type: Optional[List[Union[str, "models.Get9ItemsItem"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfBookingAppointment0"]
        """Get calendarView from bookingBusinesses.

        Get calendarView from bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param start: The start date and time of the time range, represented in ISO 8601 format. For
         example, 2019-11-08T19:00:00-08:00.
        :type start: str
        :param end: The end date and time of the time range, represented in ISO 8601 format. For
         example, 2019-11-08T20:00:00-08:00.
        :type end: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~bookings.models.Enum16]
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Get9ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfBookingAppointment0 or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~bookings.models.CollectionOfBookingAppointment0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfBookingAppointment0"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_calendar_view.metadata['url']  # type: ignore
                path_format_arguments = {
                    'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                query_parameters['start'] = self._serialize.query("start", start, 'str')
                query_parameters['end'] = self._serialize.query("end", end, 'str')
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfBookingAppointment0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_calendar_view.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/calendarView'}  # type: ignore

    def create_calendar_view(
        self,
        booking_business_id,  # type: str
        body,  # type: "models.MicrosoftGraphBookingAppointment"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphBookingAppointment"
        """Create new navigation property to calendarView for bookingBusinesses.

        Create new navigation property to calendarView for bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param body: New navigation property.
        :type body: ~bookings.models.MicrosoftGraphBookingAppointment
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingAppointment, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingAppointment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingAppointment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_calendar_view.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphBookingAppointment')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingAppointment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_calendar_view.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/calendarView'}  # type: ignore

    def get_calendar_view(
        self,
        booking_business_id,  # type: str
        booking_appointment_id,  # type: str
        start,  # type: str
        end,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Get4ItemsItem"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphBookingAppointment"
        """Get calendarView from bookingBusinesses.

        Get calendarView from bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param booking_appointment_id: key: id of bookingAppointment.
        :type booking_appointment_id: str
        :param start: The start date and time of the time range, represented in ISO 8601 format. For
         example, 2019-11-08T19:00:00-08:00.
        :type start: str
        :param end: The end date and time of the time range, represented in ISO 8601 format. For
         example, 2019-11-08T20:00:00-08:00.
        :type end: str
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Get4ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingAppointment, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingAppointment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingAppointment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_calendar_view.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingAppointment-id': self._serialize.url("booking_appointment_id", booking_appointment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['start'] = self._serialize.query("start", start, 'str')
        query_parameters['end'] = self._serialize.query("end", end, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingAppointment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_calendar_view.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/calendarView/{bookingAppointment-id}'}  # type: ignore

    def update_calendar_view(
        self,
        booking_business_id,  # type: str
        booking_appointment_id,  # type: str
        body,  # type: "models.MicrosoftGraphBookingAppointment"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property calendarView in bookingBusinesses.

        Update the navigation property calendarView in bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param booking_appointment_id: key: id of bookingAppointment.
        :type booking_appointment_id: str
        :param body: New navigation property values.
        :type body: ~bookings.models.MicrosoftGraphBookingAppointment
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_calendar_view.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingAppointment-id': self._serialize.url("booking_appointment_id", booking_appointment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphBookingAppointment')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_calendar_view.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/calendarView/{bookingAppointment-id}'}  # type: ignore

    def delete_calendar_view(
        self,
        booking_business_id,  # type: str
        booking_appointment_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property calendarView for bookingBusinesses.

        Delete navigation property calendarView for bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param booking_appointment_id: key: id of bookingAppointment.
        :type booking_appointment_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_calendar_view.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingAppointment-id': self._serialize.url("booking_appointment_id", booking_appointment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_calendar_view.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/calendarView/{bookingAppointment-id}'}  # type: ignore

    def list_customers(
        self,
        booking_business_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum19"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum20"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfBookingCustomer"]
        """Get customers from bookingBusinesses.

        Get customers from bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~bookings.models.Enum19]
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Enum20]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfBookingCustomer or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~bookings.models.CollectionOfBookingCustomer]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfBookingCustomer"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_customers.metadata['url']  # type: ignore
                path_format_arguments = {
                    'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfBookingCustomer', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_customers.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/customers'}  # type: ignore

    def create_customers(
        self,
        booking_business_id,  # type: str
        body,  # type: "models.MicrosoftGraphBookingCustomer"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphBookingCustomer"
        """Create new navigation property to customers for bookingBusinesses.

        Create new navigation property to customers for bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param body: New navigation property.
        :type body: ~bookings.models.MicrosoftGraphBookingCustomer
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingCustomer, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingCustomer
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingCustomer"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_customers.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphBookingCustomer')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingCustomer', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_customers.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/customers'}  # type: ignore

    def get_customers(
        self,
        booking_business_id,  # type: str
        booking_customer_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum21"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphBookingCustomer"
        """Get customers from bookingBusinesses.

        Get customers from bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param booking_customer_id: key: id of bookingCustomer.
        :type booking_customer_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Enum21]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingCustomer, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingCustomer
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingCustomer"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_customers.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingCustomer-id': self._serialize.url("booking_customer_id", booking_customer_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingCustomer', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_customers.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/customers/{bookingCustomer-id}'}  # type: ignore

    def update_customers(
        self,
        booking_business_id,  # type: str
        booking_customer_id,  # type: str
        body,  # type: "models.MicrosoftGraphBookingCustomer"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property customers in bookingBusinesses.

        Update the navigation property customers in bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param booking_customer_id: key: id of bookingCustomer.
        :type booking_customer_id: str
        :param body: New navigation property values.
        :type body: ~bookings.models.MicrosoftGraphBookingCustomer
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_customers.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingCustomer-id': self._serialize.url("booking_customer_id", booking_customer_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphBookingCustomer')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_customers.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/customers/{bookingCustomer-id}'}  # type: ignore

    def delete_customers(
        self,
        booking_business_id,  # type: str
        booking_customer_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property customers for bookingBusinesses.

        Delete navigation property customers for bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param booking_customer_id: key: id of bookingCustomer.
        :type booking_customer_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_customers.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingCustomer-id': self._serialize.url("booking_customer_id", booking_customer_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_customers.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/customers/{bookingCustomer-id}'}  # type: ignore

    def publish(
        self,
        booking_business_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action publish.

        Invoke action publish.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.publish.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    publish.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/microsoft.graph.publish'}  # type: ignore

    def unpublish(
        self,
        booking_business_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action unpublish.

        Invoke action unpublish.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.unpublish.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    unpublish.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/microsoft.graph.unpublish'}  # type: ignore

    def list_services(
        self,
        booking_business_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum22"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum23"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfBookingService"]
        """Get services from bookingBusinesses.

        Get services from bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~bookings.models.Enum22]
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Enum23]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfBookingService or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~bookings.models.CollectionOfBookingService]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfBookingService"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_services.metadata['url']  # type: ignore
                path_format_arguments = {
                    'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfBookingService', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_services.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/services'}  # type: ignore

    def create_services(
        self,
        booking_business_id,  # type: str
        body,  # type: "models.MicrosoftGraphBookingService"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphBookingService"
        """Create new navigation property to services for bookingBusinesses.

        Create new navigation property to services for bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param body: New navigation property.
        :type body: ~bookings.models.MicrosoftGraphBookingService
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingService, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingService
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingService"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_services.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphBookingService')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingService', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_services.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/services'}  # type: ignore

    def get_services(
        self,
        booking_business_id,  # type: str
        booking_service_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum24"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphBookingService"
        """Get services from bookingBusinesses.

        Get services from bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param booking_service_id: key: id of bookingService.
        :type booking_service_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Enum24]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingService, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingService
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingService"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_services.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingService-id': self._serialize.url("booking_service_id", booking_service_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingService', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_services.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/services/{bookingService-id}'}  # type: ignore

    def update_services(
        self,
        booking_business_id,  # type: str
        booking_service_id,  # type: str
        body,  # type: "models.MicrosoftGraphBookingService"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property services in bookingBusinesses.

        Update the navigation property services in bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param booking_service_id: key: id of bookingService.
        :type booking_service_id: str
        :param body: New navigation property values.
        :type body: ~bookings.models.MicrosoftGraphBookingService
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_services.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingService-id': self._serialize.url("booking_service_id", booking_service_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphBookingService')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_services.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/services/{bookingService-id}'}  # type: ignore

    def delete_services(
        self,
        booking_business_id,  # type: str
        booking_service_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property services for bookingBusinesses.

        Delete navigation property services for bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param booking_service_id: key: id of bookingService.
        :type booking_service_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_services.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingService-id': self._serialize.url("booking_service_id", booking_service_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_services.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/services/{bookingService-id}'}  # type: ignore

    def list_staff_members(
        self,
        booking_business_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum25"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum26"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfBookingStaffMember"]
        """Get staffMembers from bookingBusinesses.

        Get staffMembers from bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~bookings.models.Enum25]
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Enum26]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfBookingStaffMember or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~bookings.models.CollectionOfBookingStaffMember]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfBookingStaffMember"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_staff_members.metadata['url']  # type: ignore
                path_format_arguments = {
                    'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfBookingStaffMember', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_staff_members.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/staffMembers'}  # type: ignore

    def create_staff_members(
        self,
        booking_business_id,  # type: str
        body,  # type: "models.MicrosoftGraphBookingStaffMember"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphBookingStaffMember"
        """Create new navigation property to staffMembers for bookingBusinesses.

        Create new navigation property to staffMembers for bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param body: New navigation property.
        :type body: ~bookings.models.MicrosoftGraphBookingStaffMember
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingStaffMember, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingStaffMember
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingStaffMember"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_staff_members.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphBookingStaffMember')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingStaffMember', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_staff_members.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/staffMembers'}  # type: ignore

    def get_staff_members(
        self,
        booking_business_id,  # type: str
        booking_staff_member_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum27"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphBookingStaffMember"
        """Get staffMembers from bookingBusinesses.

        Get staffMembers from bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param booking_staff_member_id: key: id of bookingStaffMember.
        :type booking_staff_member_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Enum27]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingStaffMember, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingStaffMember
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingStaffMember"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_staff_members.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingStaffMember-id': self._serialize.url("booking_staff_member_id", booking_staff_member_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingStaffMember', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_staff_members.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/staffMembers/{bookingStaffMember-id}'}  # type: ignore

    def update_staff_members(
        self,
        booking_business_id,  # type: str
        booking_staff_member_id,  # type: str
        body,  # type: "models.MicrosoftGraphBookingStaffMember"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property staffMembers in bookingBusinesses.

        Update the navigation property staffMembers in bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param booking_staff_member_id: key: id of bookingStaffMember.
        :type booking_staff_member_id: str
        :param body: New navigation property values.
        :type body: ~bookings.models.MicrosoftGraphBookingStaffMember
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_staff_members.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingStaffMember-id': self._serialize.url("booking_staff_member_id", booking_staff_member_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphBookingStaffMember')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_staff_members.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/staffMembers/{bookingStaffMember-id}'}  # type: ignore

    def delete_staff_members(
        self,
        booking_business_id,  # type: str
        booking_staff_member_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property staffMembers for bookingBusinesses.

        Delete navigation property staffMembers for bookingBusinesses.

        :param booking_business_id: key: id of bookingBusiness.
        :type booking_business_id: str
        :param booking_staff_member_id: key: id of bookingStaffMember.
        :type booking_staff_member_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_staff_members.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingStaffMember-id': self._serialize.url("booking_staff_member_id", booking_staff_member_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_staff_members.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/staffMembers/{bookingStaffMember-id}'}  # type: ignore
