# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class BookingBusinessBookingBusinessOperations:
    """BookingBusinessBookingBusinessOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~bookings.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_booking_business(
        self,
        orderby: Optional[List[Union[str, "models.Get5ItemsItem"]]] = None,
        select: Optional[List[Union[str, "models.Get6ItemsItem"]]] = None,
        expand: Optional[List[Union[str, "models.Get7ItemsItem"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfBookingBusiness"]:
        """Get entities from bookingBusinesses.

        Get entities from bookingBusinesses.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~bookings.models.Get5ItemsItem]
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Get6ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str or ~bookings.models.Get7ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfBookingBusiness or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~bookings.models.CollectionOfBookingBusiness]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfBookingBusiness"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_booking_business.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfBookingBusiness', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_booking_business.metadata = {'url': '/bookingBusinesses'}  # type: ignore

    async def create_booking_business(
        self,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        business_type: Optional[str] = None,
        address: Optional["models.MicrosoftGraphPhysicalAddress"] = None,
        phone: Optional[str] = None,
        email: Optional[str] = None,
        web_site_url: Optional[str] = None,
        default_currency_iso: Optional[str] = None,
        business_hours: Optional[List["models.MicrosoftGraphBookingWorkHours"]] = None,
        scheduling_policy: Optional["models.MicrosoftGraphBookingSchedulingPolicy"] = None,
        is_published: Optional[bool] = None,
        public_url: Optional[str] = None,
        appointments: Optional[List["models.MicrosoftGraphBookingAppointment"]] = None,
        calendar_view: Optional[List["models.MicrosoftGraphBookingAppointment"]] = None,
        customers: Optional[List["models.MicrosoftGraphBookingPerson"]] = None,
        services: Optional[List["models.MicrosoftGraphBookingService"]] = None,
        staff_members: Optional[List["models.MicrosoftGraphBookingStaffMember"]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphBookingBusiness":
        """Add new entity to bookingBusinesses.

        Add new entity to bookingBusinesses.

        :param id: Read-only.
        :type id: str
        :param display_name: Display name of this entity.
        :type display_name: str
        :param business_type:
        :type business_type: str
        :param address: physicalAddress.
        :type address: ~bookings.models.MicrosoftGraphPhysicalAddress
        :param phone:
        :type phone: str
        :param email:
        :type email: str
        :param web_site_url: The URL of the business web site.
        :type web_site_url: str
        :param default_currency_iso:
        :type default_currency_iso: str
        :param business_hours:
        :type business_hours: list[~bookings.models.MicrosoftGraphBookingWorkHours]
        :param scheduling_policy: bookingSchedulingPolicy.
        :type scheduling_policy: ~bookings.models.MicrosoftGraphBookingSchedulingPolicy
        :param is_published:
        :type is_published: bool
        :param public_url:
        :type public_url: str
        :param appointments: All appointments in this business.
        :type appointments: list[~bookings.models.MicrosoftGraphBookingAppointment]
        :param calendar_view: A calendar view of appointments in this business.
        :type calendar_view: list[~bookings.models.MicrosoftGraphBookingAppointment]
        :param customers: All customers of this business.
        :type customers: list[~bookings.models.MicrosoftGraphBookingPerson]
        :param services: All services offered by this business.
        :type services: list[~bookings.models.MicrosoftGraphBookingService]
        :param staff_members: All staff members that provides services in this business.
        :type staff_members: list[~bookings.models.MicrosoftGraphBookingStaffMember]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingBusiness, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingBusiness
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingBusiness"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphBookingBusiness(id=id, display_name=display_name, business_type=business_type, address=address, phone=phone, email=email, web_site_url=web_site_url, default_currency_iso=default_currency_iso, business_hours=business_hours, scheduling_policy=scheduling_policy, is_published=is_published, public_url=public_url, appointments=appointments, calendar_view=calendar_view, customers=customers, services=services, staff_members=staff_members)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_booking_business.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphBookingBusiness')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingBusiness', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_booking_business.metadata = {'url': '/bookingBusinesses'}  # type: ignore

    async def get_booking_business(
        self,
        booking_business_id: str,
        select: Optional[List[Union[str, "models.Get1ItemsItem"]]] = None,
        expand: Optional[List[Union[str, "models.Get2ItemsItem"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphBookingBusiness":
        """Get entity from bookingBusinesses by key.

        Get entity from bookingBusinesses by key.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Get1ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str or ~bookings.models.Get2ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingBusiness, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingBusiness
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingBusiness"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_booking_business.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingBusiness', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_booking_business.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}'}  # type: ignore

    async def update_booking_business(
        self,
        booking_business_id: str,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        business_type: Optional[str] = None,
        address: Optional["models.MicrosoftGraphPhysicalAddress"] = None,
        phone: Optional[str] = None,
        email: Optional[str] = None,
        web_site_url: Optional[str] = None,
        default_currency_iso: Optional[str] = None,
        business_hours: Optional[List["models.MicrosoftGraphBookingWorkHours"]] = None,
        scheduling_policy: Optional["models.MicrosoftGraphBookingSchedulingPolicy"] = None,
        is_published: Optional[bool] = None,
        public_url: Optional[str] = None,
        appointments: Optional[List["models.MicrosoftGraphBookingAppointment"]] = None,
        calendar_view: Optional[List["models.MicrosoftGraphBookingAppointment"]] = None,
        customers: Optional[List["models.MicrosoftGraphBookingPerson"]] = None,
        services: Optional[List["models.MicrosoftGraphBookingService"]] = None,
        staff_members: Optional[List["models.MicrosoftGraphBookingStaffMember"]] = None,
        **kwargs
    ) -> None:
        """Update entity in bookingBusinesses.

        Update entity in bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param id: Read-only.
        :type id: str
        :param display_name: Display name of this entity.
        :type display_name: str
        :param business_type:
        :type business_type: str
        :param address: physicalAddress.
        :type address: ~bookings.models.MicrosoftGraphPhysicalAddress
        :param phone:
        :type phone: str
        :param email:
        :type email: str
        :param web_site_url: The URL of the business web site.
        :type web_site_url: str
        :param default_currency_iso:
        :type default_currency_iso: str
        :param business_hours:
        :type business_hours: list[~bookings.models.MicrosoftGraphBookingWorkHours]
        :param scheduling_policy: bookingSchedulingPolicy.
        :type scheduling_policy: ~bookings.models.MicrosoftGraphBookingSchedulingPolicy
        :param is_published:
        :type is_published: bool
        :param public_url:
        :type public_url: str
        :param appointments: All appointments in this business.
        :type appointments: list[~bookings.models.MicrosoftGraphBookingAppointment]
        :param calendar_view: A calendar view of appointments in this business.
        :type calendar_view: list[~bookings.models.MicrosoftGraphBookingAppointment]
        :param customers: All customers of this business.
        :type customers: list[~bookings.models.MicrosoftGraphBookingPerson]
        :param services: All services offered by this business.
        :type services: list[~bookings.models.MicrosoftGraphBookingService]
        :param staff_members: All staff members that provides services in this business.
        :type staff_members: list[~bookings.models.MicrosoftGraphBookingStaffMember]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphBookingBusiness(id=id, display_name=display_name, business_type=business_type, address=address, phone=phone, email=email, web_site_url=web_site_url, default_currency_iso=default_currency_iso, business_hours=business_hours, scheduling_policy=scheduling_policy, is_published=is_published, public_url=public_url, appointments=appointments, calendar_view=calendar_view, customers=customers, services=services, staff_members=staff_members)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_booking_business.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphBookingBusiness')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_booking_business.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}'}  # type: ignore

    async def delete_booking_business(
        self,
        booking_business_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete entity from bookingBusinesses.

        Delete entity from bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_booking_business.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_booking_business.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}'}  # type: ignore
