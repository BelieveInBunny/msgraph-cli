# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._personal_contacts_enums import *


class CollectionOfContact(msrest.serialization.Model):
    """Collection of contact.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.MicrosoftGraphContact]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphContact]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphContact"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfContact, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfContact0(msrest.serialization.Model):
    """Collection of contact.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.MicrosoftGraphContact]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphContact]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphContact"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfContact0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfContactFolder(msrest.serialization.Model):
    """Collection of contactFolder.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.MicrosoftGraphContactFolder]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphContactFolder]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphContactFolder"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfContactFolder, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfContactFolder0(msrest.serialization.Model):
    """Collection of contactFolder.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.MicrosoftGraphContactFolder]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphContactFolder]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphContactFolder"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfContactFolder0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfExtension(msrest.serialization.Model):
    """Collection of extension.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.MicrosoftGraphExtension]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphExtension]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphExtension"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfExtension, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfExtension0(msrest.serialization.Model):
    """Collection of extension.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.MicrosoftGraphExtension]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphExtension]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphExtension"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfExtension0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfMultiValueLegacyExtendedProperty(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfMultiValueLegacyExtendedProperty, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfMultiValueLegacyExtendedProperty0(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfMultiValueLegacyExtendedProperty0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfMultiValueLegacyExtendedProperty1(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfMultiValueLegacyExtendedProperty1, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfSingleValueLegacyExtendedProperty(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfSingleValueLegacyExtendedProperty, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfSingleValueLegacyExtendedProperty0(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfSingleValueLegacyExtendedProperty0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfSingleValueLegacyExtendedProperty1(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfSingleValueLegacyExtendedProperty1, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.id = id


class MicrosoftGraphOutlookItem(MicrosoftGraphEntity):
    """outlookItem.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param categories: The categories associated with the item.
    :type categories: list[str]
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        categories: Optional[List[str]] = None,
        change_key: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphOutlookItem, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.categories = categories
        self.change_key = change_key
        self.created_date_time = created_date_time
        self.last_modified_date_time = last_modified_date_time


class MicrosoftGraphContact(MicrosoftGraphOutlookItem):
    """contact.

    :param id: Read-only.
    :type id: str
    :param categories: The categories associated with the item.
    :type categories: list[str]
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param assistant_name: The name of the contact's assistant.
    :type assistant_name: str
    :param birthday: The contact's birthday. The Timestamp type represents date and time
     information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan
     1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type birthday: ~datetime.datetime
    :param children: The names of the contact's children.
    :type children: list[str]
    :param company_name: The name of the contact's company.
    :type company_name: str
    :param department: The contact's department.
    :type department: str
    :param display_name: The contact's display name. You can specify the display name in a create
     or update operation. Note that later updates to other properties may cause an automatically
     generated value to overwrite the displayName value you have specified. To preserve a pre-
     existing value, always include it as displayName in an update operation.
    :type display_name: str
    :param email_addresses: The contact's email addresses.
    :type email_addresses: list[~personal_contacts.models.MicrosoftGraphTypedEmailAddress]
    :param file_as: The name the contact is filed under.
    :type file_as: str
    :param gender:
    :type gender: str
    :param generation: The contact's generation.
    :type generation: str
    :param given_name: The contact's given name.
    :type given_name: str
    :param im_addresses: The contact's instant messaging (IM) addresses.
    :type im_addresses: list[str]
    :param initials: The contact's initials.
    :type initials: str
    :param is_favorite:
    :type is_favorite: bool
    :param job_title: The contact’s job title.
    :type job_title: str
    :param manager: The name of the contact's manager.
    :type manager: str
    :param middle_name: The contact's middle name.
    :type middle_name: str
    :param nick_name: The contact's nickname.
    :type nick_name: str
    :param office_location: The location of the contact's office.
    :type office_location: str
    :param parent_folder_id: The ID of the contact's parent folder.
    :type parent_folder_id: str
    :param personal_notes: The user's notes about the contact.
    :type personal_notes: str
    :param phones:
    :type phones: list[~personal_contacts.models.MicrosoftGraphPhone]
    :param postal_addresses:
    :type postal_addresses: list[~personal_contacts.models.MicrosoftGraphPhysicalAddress]
    :param profession: The contact's profession.
    :type profession: str
    :param spouse_name: The name of the contact's spouse/partner.
    :type spouse_name: str
    :param surname: The contact's surname.
    :type surname: str
    :param title: The contact's title.
    :type title: str
    :param websites:
    :type websites: list[~personal_contacts.models.MicrosoftGraphWebsite]
    :param wedding_anniversary:
    :type wedding_anniversary: ~datetime.date
    :param yomi_company_name: The phonetic Japanese company name of the contact.
    :type yomi_company_name: str
    :param yomi_given_name: The phonetic Japanese given name (first name) of the contact.
    :type yomi_given_name: str
    :param yomi_surname: The phonetic Japanese surname (last name)  of the contact.
    :type yomi_surname: str
    :param extensions: The collection of open extensions defined for the contact. Read-only.
     Nullable.
    :type extensions: list[~personal_contacts.models.MicrosoftGraphExtension]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the contact. Read-only. Nullable.
    :type multi_value_extended_properties:
     list[~personal_contacts.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param photo: profilePhoto.
    :type photo: ~personal_contacts.models.MicrosoftGraphProfilePhoto
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the contact. Read-only. Nullable.
    :type single_value_extended_properties:
     list[~personal_contacts.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param completed_date_time: dateTimeTimeZone.
    :type completed_date_time: ~personal_contacts.models.MicrosoftGraphDateTimeZone
    :param due_date_time: dateTimeTimeZone.
    :type due_date_time: ~personal_contacts.models.MicrosoftGraphDateTimeZone
    :param flag_status:  Possible values include: "notFlagged", "complete", "flagged".
    :type flag_status: str or ~personal_contacts.models.MicrosoftGraphFollowupFlagStatus
    :param start_date_time: dateTimeTimeZone.
    :type start_date_time: ~personal_contacts.models.MicrosoftGraphDateTimeZone
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'assistant_name': {'key': 'assistantName', 'type': 'str'},
        'birthday': {'key': 'birthday', 'type': 'iso-8601'},
        'children': {'key': 'children', 'type': '[str]'},
        'company_name': {'key': 'companyName', 'type': 'str'},
        'department': {'key': 'department', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'email_addresses': {'key': 'emailAddresses', 'type': '[MicrosoftGraphTypedEmailAddress]'},
        'file_as': {'key': 'fileAs', 'type': 'str'},
        'gender': {'key': 'gender', 'type': 'str'},
        'generation': {'key': 'generation', 'type': 'str'},
        'given_name': {'key': 'givenName', 'type': 'str'},
        'im_addresses': {'key': 'imAddresses', 'type': '[str]'},
        'initials': {'key': 'initials', 'type': 'str'},
        'is_favorite': {'key': 'isFavorite', 'type': 'bool'},
        'job_title': {'key': 'jobTitle', 'type': 'str'},
        'manager': {'key': 'manager', 'type': 'str'},
        'middle_name': {'key': 'middleName', 'type': 'str'},
        'nick_name': {'key': 'nickName', 'type': 'str'},
        'office_location': {'key': 'officeLocation', 'type': 'str'},
        'parent_folder_id': {'key': 'parentFolderId', 'type': 'str'},
        'personal_notes': {'key': 'personalNotes', 'type': 'str'},
        'phones': {'key': 'phones', 'type': '[MicrosoftGraphPhone]'},
        'postal_addresses': {'key': 'postalAddresses', 'type': '[MicrosoftGraphPhysicalAddress]'},
        'profession': {'key': 'profession', 'type': 'str'},
        'spouse_name': {'key': 'spouseName', 'type': 'str'},
        'surname': {'key': 'surname', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'websites': {'key': 'websites', 'type': '[MicrosoftGraphWebsite]'},
        'wedding_anniversary': {'key': 'weddingAnniversary', 'type': 'date'},
        'yomi_company_name': {'key': 'yomiCompanyName', 'type': 'str'},
        'yomi_given_name': {'key': 'yomiGivenName', 'type': 'str'},
        'yomi_surname': {'key': 'yomiSurname', 'type': 'str'},
        'extensions': {'key': 'extensions', 'type': '[MicrosoftGraphExtension]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'photo': {'key': 'photo', 'type': 'MicrosoftGraphProfilePhoto'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'completed_date_time': {'key': 'flag.completedDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'due_date_time': {'key': 'flag.dueDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'flag_status': {'key': 'flag.flagStatus', 'type': 'str'},
        'start_date_time': {'key': 'flag.startDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        categories: Optional[List[str]] = None,
        change_key: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        assistant_name: Optional[str] = None,
        birthday: Optional[datetime.datetime] = None,
        children: Optional[List[str]] = None,
        company_name: Optional[str] = None,
        department: Optional[str] = None,
        display_name: Optional[str] = None,
        email_addresses: Optional[List["MicrosoftGraphTypedEmailAddress"]] = None,
        file_as: Optional[str] = None,
        gender: Optional[str] = None,
        generation: Optional[str] = None,
        given_name: Optional[str] = None,
        im_addresses: Optional[List[str]] = None,
        initials: Optional[str] = None,
        is_favorite: Optional[bool] = None,
        job_title: Optional[str] = None,
        manager: Optional[str] = None,
        middle_name: Optional[str] = None,
        nick_name: Optional[str] = None,
        office_location: Optional[str] = None,
        parent_folder_id: Optional[str] = None,
        personal_notes: Optional[str] = None,
        phones: Optional[List["MicrosoftGraphPhone"]] = None,
        postal_addresses: Optional[List["MicrosoftGraphPhysicalAddress"]] = None,
        profession: Optional[str] = None,
        spouse_name: Optional[str] = None,
        surname: Optional[str] = None,
        title: Optional[str] = None,
        websites: Optional[List["MicrosoftGraphWebsite"]] = None,
        wedding_anniversary: Optional[datetime.date] = None,
        yomi_company_name: Optional[str] = None,
        yomi_given_name: Optional[str] = None,
        yomi_surname: Optional[str] = None,
        extensions: Optional[List["MicrosoftGraphExtension"]] = None,
        multi_value_extended_properties: Optional[List["MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        photo: Optional["MicrosoftGraphProfilePhoto"] = None,
        single_value_extended_properties: Optional[List["MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        completed_date_time: Optional["MicrosoftGraphDateTimeZone"] = None,
        due_date_time: Optional["MicrosoftGraphDateTimeZone"] = None,
        flag_status: Optional[Union[str, "MicrosoftGraphFollowupFlagStatus"]] = None,
        start_date_time: Optional["MicrosoftGraphDateTimeZone"] = None,
        **kwargs
    ):
        super(MicrosoftGraphContact, self).__init__(id=id, categories=categories, change_key=change_key, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, **kwargs)
        self.additional_properties = additional_properties
        self.assistant_name = assistant_name
        self.birthday = birthday
        self.children = children
        self.company_name = company_name
        self.department = department
        self.display_name = display_name
        self.email_addresses = email_addresses
        self.file_as = file_as
        self.gender = gender
        self.generation = generation
        self.given_name = given_name
        self.im_addresses = im_addresses
        self.initials = initials
        self.is_favorite = is_favorite
        self.job_title = job_title
        self.manager = manager
        self.middle_name = middle_name
        self.nick_name = nick_name
        self.office_location = office_location
        self.parent_folder_id = parent_folder_id
        self.personal_notes = personal_notes
        self.phones = phones
        self.postal_addresses = postal_addresses
        self.profession = profession
        self.spouse_name = spouse_name
        self.surname = surname
        self.title = title
        self.websites = websites
        self.wedding_anniversary = wedding_anniversary
        self.yomi_company_name = yomi_company_name
        self.yomi_given_name = yomi_given_name
        self.yomi_surname = yomi_surname
        self.extensions = extensions
        self.multi_value_extended_properties = multi_value_extended_properties
        self.photo = photo
        self.single_value_extended_properties = single_value_extended_properties
        self.completed_date_time = completed_date_time
        self.due_date_time = due_date_time
        self.flag_status = flag_status
        self.start_date_time = start_date_time


class MicrosoftGraphContactFolder(MicrosoftGraphEntity):
    """contactFolder.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The folder's display name.
    :type display_name: str
    :param parent_folder_id: The ID of the folder's parent folder.
    :type parent_folder_id: str
    :param well_known_name:
    :type well_known_name: str
    :param child_folders: The collection of child folders in the folder. Navigation property. Read-
     only. Nullable.
    :type child_folders: list[~personal_contacts.models.MicrosoftGraphContactFolder]
    :param contacts: The contacts in the folder. Navigation property. Read-only. Nullable.
    :type contacts: list[~personal_contacts.models.MicrosoftGraphContact]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the contactFolder. Read-only. Nullable.
    :type multi_value_extended_properties:
     list[~personal_contacts.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the contactFolder. Read-only. Nullable.
    :type single_value_extended_properties:
     list[~personal_contacts.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'parent_folder_id': {'key': 'parentFolderId', 'type': 'str'},
        'well_known_name': {'key': 'wellKnownName', 'type': 'str'},
        'child_folders': {'key': 'childFolders', 'type': '[MicrosoftGraphContactFolder]'},
        'contacts': {'key': 'contacts', 'type': '[MicrosoftGraphContact]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        display_name: Optional[str] = None,
        parent_folder_id: Optional[str] = None,
        well_known_name: Optional[str] = None,
        child_folders: Optional[List["MicrosoftGraphContactFolder"]] = None,
        contacts: Optional[List["MicrosoftGraphContact"]] = None,
        multi_value_extended_properties: Optional[List["MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        single_value_extended_properties: Optional[List["MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphContactFolder, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.display_name = display_name
        self.parent_folder_id = parent_folder_id
        self.well_known_name = well_known_name
        self.child_folders = child_folders
        self.contacts = contacts
        self.multi_value_extended_properties = multi_value_extended_properties
        self.single_value_extended_properties = single_value_extended_properties


class MicrosoftGraphDateTimeZone(msrest.serialization.Model):
    """dateTimeTimeZone.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param date_time: A single point of time in a combined date and time representation
     ({date}T{time}; for example, 2017-08-29T04:00:00.0000000).
    :type date_time: str
    :param time_zone: Represents a time zone, for example, 'Pacific Standard Time'. See below for
     more possible values.
    :type time_zone: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'date_time': {'key': 'dateTime', 'type': 'str'},
        'time_zone': {'key': 'timeZone', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        date_time: Optional[str] = None,
        time_zone: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphDateTimeZone, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.date_time = date_time
        self.time_zone = time_zone


class MicrosoftGraphEmailAddress(msrest.serialization.Model):
    """emailAddress.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: The email address of the person or entity.
    :type address: str
    :param name: The display name of the person or entity.
    :type name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        address: Optional[str] = None,
        name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEmailAddress, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.address = address
        self.name = name


class MicrosoftGraphExtension(MicrosoftGraphEntity):
    """extension.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(MicrosoftGraphExtension, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties


class MicrosoftGraphFollowupFlag(msrest.serialization.Model):
    """followupFlag.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param completed_date_time: dateTimeTimeZone.
    :type completed_date_time: ~personal_contacts.models.MicrosoftGraphDateTimeZone
    :param due_date_time: dateTimeTimeZone.
    :type due_date_time: ~personal_contacts.models.MicrosoftGraphDateTimeZone
    :param flag_status:  Possible values include: "notFlagged", "complete", "flagged".
    :type flag_status: str or ~personal_contacts.models.MicrosoftGraphFollowupFlagStatus
    :param start_date_time: dateTimeTimeZone.
    :type start_date_time: ~personal_contacts.models.MicrosoftGraphDateTimeZone
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'completed_date_time': {'key': 'completedDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'due_date_time': {'key': 'dueDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'flag_status': {'key': 'flagStatus', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        completed_date_time: Optional["MicrosoftGraphDateTimeZone"] = None,
        due_date_time: Optional["MicrosoftGraphDateTimeZone"] = None,
        flag_status: Optional[Union[str, "MicrosoftGraphFollowupFlagStatus"]] = None,
        start_date_time: Optional["MicrosoftGraphDateTimeZone"] = None,
        **kwargs
    ):
        super(MicrosoftGraphFollowupFlag, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.completed_date_time = completed_date_time
        self.due_date_time = due_date_time
        self.flag_status = flag_status
        self.start_date_time = start_date_time


class MicrosoftGraphMultiValueLegacyExtendedProperty(MicrosoftGraphEntity):
    """multiValueLegacyExtendedProperty.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value: A collection of property values.
    :type value: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List[str]] = None,
        **kwargs
    ):
        super(MicrosoftGraphMultiValueLegacyExtendedProperty, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.value = value


class MicrosoftGraphPhone(msrest.serialization.Model):
    """phone.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param number: The phone number.
    :type number: str
    :param type:  Possible values include: "home", "business", "mobile", "other", "assistant",
     "homeFax", "businessFax", "otherFax", "pager", "radio".
    :type type: str or ~personal_contacts.models.MicrosoftGraphPhoneType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'number': {'key': 'number', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        number: Optional[str] = None,
        type: Optional[Union[str, "MicrosoftGraphPhoneType"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPhone, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.number = number
        self.type = type


class MicrosoftGraphPhysicalAddress(msrest.serialization.Model):
    """physicalAddress.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param city: The city.
    :type city: str
    :param country_or_region: The country or region. It's a free-format string value, for example,
     'United States'.
    :type country_or_region: str
    :param postal_code: The postal code.
    :type postal_code: str
    :param post_office_box:
    :type post_office_box: str
    :param state: The state.
    :type state: str
    :param street: The street.
    :type street: str
    :param type:  Possible values include: "unknown", "home", "business", "other".
    :type type: str or ~personal_contacts.models.MicrosoftGraphPhysicalAddressType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'city': {'key': 'city', 'type': 'str'},
        'country_or_region': {'key': 'countryOrRegion', 'type': 'str'},
        'postal_code': {'key': 'postalCode', 'type': 'str'},
        'post_office_box': {'key': 'postOfficeBox', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'street': {'key': 'street', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        city: Optional[str] = None,
        country_or_region: Optional[str] = None,
        postal_code: Optional[str] = None,
        post_office_box: Optional[str] = None,
        state: Optional[str] = None,
        street: Optional[str] = None,
        type: Optional[Union[str, "MicrosoftGraphPhysicalAddressType"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphPhysicalAddress, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.city = city
        self.country_or_region = country_or_region
        self.postal_code = postal_code
        self.post_office_box = post_office_box
        self.state = state
        self.street = street
        self.type = type


class MicrosoftGraphProfilePhoto(MicrosoftGraphEntity):
    """profilePhoto.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param height: The height of the photo. Read-only.
    :type height: int
    :param width: The width of the photo. Read-only.
    :type width: int
    """

    _validation = {
        'height': {'maximum': 2147483647, 'minimum': -2147483648},
        'width': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'height': {'key': 'height', 'type': 'int'},
        'width': {'key': 'width', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        height: Optional[int] = None,
        width: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphProfilePhoto, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.height = height
        self.width = width


class MicrosoftGraphSingleValueLegacyExtendedProperty(MicrosoftGraphEntity):
    """singleValueLegacyExtendedProperty.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value: A property value.
    :type value: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSingleValueLegacyExtendedProperty, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.value = value


class MicrosoftGraphTypedEmailAddress(MicrosoftGraphEmailAddress):
    """typedEmailAddress.

    :param address: The email address of the person or entity.
    :type address: str
    :param name: The display name of the person or entity.
    :type name: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param other_label:
    :type other_label: str
    :param type:  Possible values include: "unknown", "work", "personal", "main", "other".
    :type type: str or ~personal_contacts.models.MicrosoftGraphEmailType
    """

    _attribute_map = {
        'address': {'key': 'address', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'other_label': {'key': 'otherLabel', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        address: Optional[str] = None,
        name: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        other_label: Optional[str] = None,
        type: Optional[Union[str, "MicrosoftGraphEmailType"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphTypedEmailAddress, self).__init__(address=address, name=name, **kwargs)
        self.additional_properties = additional_properties
        self.other_label = other_label
        self.type = type


class MicrosoftGraphWebsite(msrest.serialization.Model):
    """website.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: The URL of the website.
    :type address: str
    :param display_name: The display name of the web site.
    :type display_name: str
    :param type:  Possible values include: "other", "home", "work", "blog", "profile".
    :type type: str or ~personal_contacts.models.MicrosoftGraphWebsiteType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        address: Optional[str] = None,
        display_name: Optional[str] = None,
        type: Optional[Union[str, "MicrosoftGraphWebsiteType"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphWebsite, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.address = address
        self.display_name = display_name
        self.type = type


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error: Required.
    :type error: ~personal_contacts.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        *,
        error: "OdataErrorMain",
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.error = error


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        additional_properties: Optional[Dict[str, object]] = None,
        target: Optional[str] = None,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.message = message
        self.target = target


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~personal_contacts.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: dict[str, object]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        additional_properties: Optional[Dict[str, object]] = None,
        target: Optional[str] = None,
        details: Optional[List["OdataErrorDetail"]] = None,
        innererror: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror
