# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class GroupPlannerOperations(object):
    """GroupPlannerOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~planner.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_plan(
        self,
        group_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Get6ItemsItem"]]]
        select=None,  # type: Optional[List[Union[str, "models.Get7ItemsItem"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get8ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfPlannerPlan"]
        """Get plans from groups.

        Get plans from groups.

        :param group_id: key: id of group.
        :type group_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~planner.models.Get6ItemsItem]
        :param select: Select properties to be returned.
        :type select: list[str or ~planner.models.Get7ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str or ~planner.models.Get8ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfPlannerPlan or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~planner.models.CollectionOfPlannerPlan]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfPlannerPlan"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_plan.metadata['url']  # type: ignore
                path_format_arguments = {
                    'group-id': self._serialize.url("group_id", group_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfPlannerPlan', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_plan.metadata = {'url': '/groups/{group-id}/planner/plans'}  # type: ignore

    def create_plan(
        self,
        group_id,  # type: str
        id=None,  # type: Optional[str]
        contexts=None,  # type: Optional[Dict[str, object]]
        created_date_time=None,  # type: Optional[datetime.datetime]
        owner=None,  # type: Optional[str]
        title=None,  # type: Optional[str]
        buckets=None,  # type: Optional[List["models.MicrosoftGraphPlannerBucket"]]
        tasks=None,  # type: Optional[List["models.MicrosoftGraphPlannerTask"]]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        category_descriptions=None,  # type: Optional["models.MicrosoftGraphPlannerCategoryDescriptions"]
        context_details=None,  # type: Optional[Dict[str, object]]
        shared_with=None,  # type: Optional[Dict[str, object]]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphPlannerPlan"
        """Create new navigation property to plans for groups.

        Create new navigation property to plans for groups.

        :param group_id: key: id of group.
        :type group_id: str
        :param id: Read-only.
        :type id: str
        :param contexts: plannerPlanContextCollection.
        :type contexts: dict[str, object]
        :param created_date_time: Read-only. Date and time at which the plan is created. The Timestamp
         type represents date and time information using ISO 8601 format and is always in UTC time. For
         example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param owner: ID of the Group that owns the plan. A valid group must exist before this field
         can be set. After it is set, this property canâ€™t be updated.
        :type owner: str
        :param title: Required. Title of the plan.
        :type title: str
        :param buckets: Read-only. Nullable. Collection of buckets in the plan.
        :type buckets: list[~planner.models.MicrosoftGraphPlannerBucket]
        :param tasks: Read-only. Nullable. Collection of tasks in the plan.
        :type tasks: list[~planner.models.MicrosoftGraphPlannerTask]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param category_descriptions: plannerCategoryDescriptions.
        :type category_descriptions: ~planner.models.MicrosoftGraphPlannerCategoryDescriptions
        :param context_details: plannerPlanContextDetailsCollection.
        :type context_details: dict[str, object]
        :param shared_with: plannerUserIds.
        :type shared_with: dict[str, object]
        :param application: identity.
        :type application: ~planner.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~planner.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~planner.models.MicrosoftGraphIdentity
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPlannerPlan, or the result of cls(response)
        :rtype: ~planner.models.MicrosoftGraphPlannerPlan
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPlannerPlan"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphPlannerPlan(id=id, contexts=contexts, created_date_time=created_date_time, owner=owner, title=title, buckets=buckets, tasks=tasks, id_details_id=microsoft_graph_entity_id, category_descriptions=category_descriptions, context_details=context_details, shared_with=shared_with, application=application, device=device, user=user)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_plan.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphPlannerPlan')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPlannerPlan', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_plan.metadata = {'url': '/groups/{group-id}/planner/plans'}  # type: ignore

    def get_plan(
        self,
        group_id,  # type: str
        planner_plan_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum6"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get3ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphPlannerPlan"
        """Get plans from groups.

        Get plans from groups.

        :param group_id: key: id of group.
        :type group_id: str
        :param planner_plan_id: key: id of plannerPlan.
        :type planner_plan_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~planner.models.Enum6]
        :param expand: Expand related entities.
        :type expand: list[str or ~planner.models.Get3ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPlannerPlan, or the result of cls(response)
        :rtype: ~planner.models.MicrosoftGraphPlannerPlan
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPlannerPlan"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_plan.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'plannerPlan-id': self._serialize.url("planner_plan_id", planner_plan_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPlannerPlan', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_plan.metadata = {'url': '/groups/{group-id}/planner/plans/{plannerPlan-id}'}  # type: ignore

    def update_plan(
        self,
        group_id,  # type: str
        planner_plan_id,  # type: str
        id=None,  # type: Optional[str]
        contexts=None,  # type: Optional[Dict[str, object]]
        created_date_time=None,  # type: Optional[datetime.datetime]
        owner=None,  # type: Optional[str]
        title=None,  # type: Optional[str]
        buckets=None,  # type: Optional[List["models.MicrosoftGraphPlannerBucket"]]
        tasks=None,  # type: Optional[List["models.MicrosoftGraphPlannerTask"]]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        category_descriptions=None,  # type: Optional["models.MicrosoftGraphPlannerCategoryDescriptions"]
        context_details=None,  # type: Optional[Dict[str, object]]
        shared_with=None,  # type: Optional[Dict[str, object]]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property plans in groups.

        Update the navigation property plans in groups.

        :param group_id: key: id of group.
        :type group_id: str
        :param planner_plan_id: key: id of plannerPlan.
        :type planner_plan_id: str
        :param id: Read-only.
        :type id: str
        :param contexts: plannerPlanContextCollection.
        :type contexts: dict[str, object]
        :param created_date_time: Read-only. Date and time at which the plan is created. The Timestamp
         type represents date and time information using ISO 8601 format and is always in UTC time. For
         example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param owner: ID of the Group that owns the plan. A valid group must exist before this field
         can be set. After it is set, this property canâ€™t be updated.
        :type owner: str
        :param title: Required. Title of the plan.
        :type title: str
        :param buckets: Read-only. Nullable. Collection of buckets in the plan.
        :type buckets: list[~planner.models.MicrosoftGraphPlannerBucket]
        :param tasks: Read-only. Nullable. Collection of tasks in the plan.
        :type tasks: list[~planner.models.MicrosoftGraphPlannerTask]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param category_descriptions: plannerCategoryDescriptions.
        :type category_descriptions: ~planner.models.MicrosoftGraphPlannerCategoryDescriptions
        :param context_details: plannerPlanContextDetailsCollection.
        :type context_details: dict[str, object]
        :param shared_with: plannerUserIds.
        :type shared_with: dict[str, object]
        :param application: identity.
        :type application: ~planner.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~planner.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~planner.models.MicrosoftGraphIdentity
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphPlannerPlan(id=id, contexts=contexts, created_date_time=created_date_time, owner=owner, title=title, buckets=buckets, tasks=tasks, id_details_id=microsoft_graph_entity_id, category_descriptions=category_descriptions, context_details=context_details, shared_with=shared_with, application=application, device=device, user=user)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_plan.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'plannerPlan-id': self._serialize.url("planner_plan_id", planner_plan_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphPlannerPlan')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_plan.metadata = {'url': '/groups/{group-id}/planner/plans/{plannerPlan-id}'}  # type: ignore

    def delete_plan(
        self,
        group_id,  # type: str
        planner_plan_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property plans for groups.

        Delete navigation property plans for groups.

        :param group_id: key: id of group.
        :type group_id: str
        :param planner_plan_id: key: id of plannerPlan.
        :type planner_plan_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_plan.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'plannerPlan-id': self._serialize.url("planner_plan_id", planner_plan_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_plan.metadata = {'url': '/groups/{group-id}/planner/plans/{plannerPlan-id}'}  # type: ignore
