# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=protected-access

import argparse
from collections import defaultdict
from knack.util import CLIError


class AddProviderStatus(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddProviderStatus, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'enabled':
                d['enabled'] = v[0]
            elif kl == 'endpoint':
                d['endpoint'] = v[0]
            elif kl == 'provider':
                d['provider'] = v[0]
            elif kl == 'region':
                d['region'] = v[0]
            elif kl == 'vendor':
                d['vendor'] = v[0]
        return d


class AddProviderTenantSettings(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddProviderTenantSettings, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'azure-tenant-id':
                d['azure_tenant_id'] = v[0]
            elif kl == 'enabled':
                d['enabled'] = v[0]
            elif kl == 'last-modified-date-time':
                d['last_modified_date_time'] = v[0]
            elif kl == 'provider':
                d['provider'] = v[0]
            elif kl == 'vendor':
                d['vendor'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddTiIndicators(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddTiIndicators, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'action':
                d['action'] = v[0]
            elif kl == 'activity-group-names':
                d['activity_group_names'] = v
            elif kl == 'additional-information':
                d['additional_information'] = v[0]
            elif kl == 'azure-tenant-id':
                d['azure_tenant_id'] = v[0]
            elif kl == 'confidence':
                d['confidence'] = v[0]
            elif kl == 'description':
                d['description'] = v[0]
            elif kl == 'diamond-model':
                d['diamond_model'] = v[0]
            elif kl == 'domain-name':
                d['domain_name'] = v[0]
            elif kl == 'email-encoding':
                d['email_encoding'] = v[0]
            elif kl == 'email-language':
                d['email_language'] = v[0]
            elif kl == 'email-recipient':
                d['email_recipient'] = v[0]
            elif kl == 'email-sender-address':
                d['email_sender_address'] = v[0]
            elif kl == 'email-sender-name':
                d['email_sender_name'] = v[0]
            elif kl == 'email-source-domain':
                d['email_source_domain'] = v[0]
            elif kl == 'email-source-ip-address':
                d['email_source_ip_address'] = v[0]
            elif kl == 'email-subject':
                d['email_subject'] = v[0]
            elif kl == 'email-x-mailer':
                d['email_x_mailer'] = v[0]
            elif kl == 'expiration-date-time':
                d['expiration_date_time'] = v[0]
            elif kl == 'external-id':
                d['external_id'] = v[0]
            elif kl == 'file-compile-date-time':
                d['file_compile_date_time'] = v[0]
            elif kl == 'file-created-date-time':
                d['file_created_date_time'] = v[0]
            elif kl == 'file-hash-type':
                d['file_hash_type'] = v[0]
            elif kl == 'file-hash-value':
                d['file_hash_value'] = v[0]
            elif kl == 'file-mutex-name':
                d['file_mutex_name'] = v[0]
            elif kl == 'file-name':
                d['file_name'] = v[0]
            elif kl == 'file-packer':
                d['file_packer'] = v[0]
            elif kl == 'file-path':
                d['file_path'] = v[0]
            elif kl == 'file-size':
                d['file_size'] = v[0]
            elif kl == 'file-type':
                d['file_type'] = v[0]
            elif kl == 'ingested-date-time':
                d['ingested_date_time'] = v[0]
            elif kl == 'is-active':
                d['is_active'] = v[0]
            elif kl == 'kill-chain':
                d['kill_chain'] = v
            elif kl == 'known-false-positives':
                d['known_false_positives'] = v[0]
            elif kl == 'last-reported-date-time':
                d['last_reported_date_time'] = v[0]
            elif kl == 'malware-family-names':
                d['malware_family_names'] = v
            elif kl == 'network-cidr-block':
                d['network_cidr_block'] = v[0]
            elif kl == 'network-destination-asn':
                d['network_destination_asn'] = v[0]
            elif kl == 'network-destination-cidr-block':
                d['network_destination_cidr_block'] = v[0]
            elif kl == 'network-destination-i-pv4':
                d['network_destination_i_pv4'] = v[0]
            elif kl == 'network-destination-i-pv6':
                d['network_destination_i_pv6'] = v[0]
            elif kl == 'network-destination-port':
                d['network_destination_port'] = v[0]
            elif kl == 'network-i-pv4':
                d['network_i_pv4'] = v[0]
            elif kl == 'network-i-pv6':
                d['network_i_pv6'] = v[0]
            elif kl == 'network-port':
                d['network_port'] = v[0]
            elif kl == 'network-protocol':
                d['network_protocol'] = v[0]
            elif kl == 'network-source-asn':
                d['network_source_asn'] = v[0]
            elif kl == 'network-source-cidr-block':
                d['network_source_cidr_block'] = v[0]
            elif kl == 'network-source-i-pv4':
                d['network_source_i_pv4'] = v[0]
            elif kl == 'network-source-i-pv6':
                d['network_source_i_pv6'] = v[0]
            elif kl == 'network-source-port':
                d['network_source_port'] = v[0]
            elif kl == 'passive-only':
                d['passive_only'] = v[0]
            elif kl == 'severity':
                d['severity'] = v[0]
            elif kl == 'tags':
                d['tags'] = v
            elif kl == 'target-product':
                d['target_product'] = v[0]
            elif kl == 'threat-type':
                d['threat_type'] = v[0]
            elif kl == 'tlp-level':
                d['tlp_level'] = v[0]
            elif kl == 'url':
                d['url'] = v[0]
            elif kl == 'user-agent':
                d['user_agent'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddVendorInformation(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.vendor_information = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'provider':
                d['provider'] = v[0]
            elif kl == 'provider-version':
                d['provider_version'] = v[0]
            elif kl == 'sub-provider':
                d['sub_provider'] = v[0]
            elif kl == 'vendor':
                d['vendor'] = v[0]
        return d


class AddDomainCategories(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddDomainCategories, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'description':
                d['description'] = v[0]
            elif kl == 'name':
                d['name'] = v[0]
            elif kl == 'vendor':
                d['vendor'] = v[0]
        return d


class AddRegistrant(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.registrant = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'country-or-region-code':
                d['country_or_region_code'] = v[0]
            elif kl == 'organization':
                d['organization'] = v[0]
            elif kl == 'url':
                d['url'] = v[0]
            elif kl == 'vendor':
                d['vendor'] = v[0]
        return d


class AddHashes(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddHashes, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'hash-type':
                d['hash_type'] = v[0]
            elif kl == 'hash-value':
                d['hash_value'] = v[0]
        return d


class AddMalwareStates(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddMalwareStates, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'category':
                d['category'] = v[0]
            elif kl == 'family':
                d['family'] = v[0]
            elif kl == 'name':
                d['name'] = v[0]
            elif kl == 'severity':
                d['severity'] = v[0]
            elif kl == 'was-running':
                d['was_running'] = v[0]
        return d


class AddVulnerabilityStates(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddVulnerabilityStates, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'cve':
                d['cve'] = v[0]
            elif kl == 'severity':
                d['severity'] = v[0]
            elif kl == 'was-running':
                d['was_running'] = v[0]
        return d


class AddLogonUsers(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddLogonUsers, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'account-domain':
                d['account_domain'] = v[0]
            elif kl == 'account-name':
                d['account_name'] = v[0]
            elif kl == 'account-type':
                d['account_type'] = v[0]
            elif kl == 'first-seen-date-time':
                d['first_seen_date_time'] = v[0]
            elif kl == 'last-seen-date-time':
                d['last_seen_date_time'] = v[0]
            elif kl == 'logon-id':
                d['logon_id'] = v[0]
            elif kl == 'logon-types':
                d['logon_types'] = v
        return d


class AddNetworkInterfaces(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddNetworkInterfaces, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'description':
                d['description'] = v[0]
            elif kl == 'ip-v4-address':
                d['ip_v4_address'] = v[0]
            elif kl == 'ip-v6-address':
                d['ip_v6_address'] = v[0]
            elif kl == 'local-ip-v6-address':
                d['local_ip_v6_address'] = v[0]
            elif kl == 'mac-address':
                d['mac_address'] = v[0]
        return d


class AddIpCategories(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddIpCategories, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'description':
                d['description'] = v[0]
            elif kl == 'name':
                d['name'] = v[0]
            elif kl == 'vendor':
                d['vendor'] = v[0]
        return d


class AddIpReferenceData(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddIpReferenceData, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'asn':
                d['asn'] = v[0]
            elif kl == 'city':
                d['city'] = v[0]
            elif kl == 'country-or-region-code':
                d['country_or_region_code'] = v[0]
            elif kl == 'organization':
                d['organization'] = v[0]
            elif kl == 'state':
                d['state'] = v[0]
            elif kl == 'vendor':
                d['vendor'] = v[0]
        return d


class AddAverageComparativeScores(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddAverageComparativeScores, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'average-score':
                d['average_score'] = v[0]
            elif kl == 'basis':
                d['basis'] = v[0]
        return d


class AddControlScores(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddControlScores, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'control-category':
                d['control_category'] = v[0]
            elif kl == 'control-name':
                d['control_name'] = v[0]
            elif kl == 'description':
                d['description'] = v[0]
            elif kl == 'score':
                d['score'] = v[0]
        return d


class AddComplianceInformation(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddComplianceInformation, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'certification-controls':
                d['certification_controls'] = v
            elif kl == 'certification-name':
                d['certification_name'] = v[0]
        return d


class AddControlStateUpdates(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddControlStateUpdates, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'assigned-to':
                d['assigned_to'] = v[0]
            elif kl == 'comment':
                d['comment'] = v[0]
            elif kl == 'state':
                d['state'] = v[0]
            elif kl == 'updated-by':
                d['updated_by'] = v[0]
            elif kl == 'updated-date-time':
                d['updated_date_time'] = v[0]
        return d


class AddErrorInfo(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.error_info = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'code':
                d['code'] = v[0]
            elif kl == 'message':
                d['message'] = v[0]
            elif kl == 'subcode':
                d['subcode'] = v[0]
        return d


class AddParameters(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddParameters, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'name':
                d['name'] = v[0]
            elif kl == 'value':
                d['value'] = v[0]
        return d


class AddStates(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddStates, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'app-id':
                d['app_id'] = v[0]
            elif kl == 'status':
                d['status'] = v[0]
            elif kl == 'updated-date-time':
                d['updated_date_time'] = v[0]
            elif kl == 'user':
                d['user'] = v[0]
        return d


class AddAccounts(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddAccounts, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'display-name':
                d['display_name'] = v[0]
            elif kl == 'last-seen-date-time':
                d['last_seen_date_time'] = v[0]
            elif kl == 'risk-score':
                d['risk_score'] = v[0]
            elif kl == 'service':
                d['service'] = v[0]
            elif kl == 'signin-name':
                d['signin_name'] = v[0]
            elif kl == 'status':
                d['status'] = v[0]
        return d


class AddSecuritySubmitTiIndicatorValue(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddSecuritySubmitTiIndicatorValue, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'action':
                d['action'] = v[0]
            elif kl == 'activity-group-names':
                d['activity_group_names'] = v
            elif kl == 'additional-information':
                d['additional_information'] = v[0]
            elif kl == 'azure-tenant-id':
                d['azure_tenant_id'] = v[0]
            elif kl == 'confidence':
                d['confidence'] = v[0]
            elif kl == 'description':
                d['description'] = v[0]
            elif kl == 'diamond-model':
                d['diamond_model'] = v[0]
            elif kl == 'domain-name':
                d['domain_name'] = v[0]
            elif kl == 'email-encoding':
                d['email_encoding'] = v[0]
            elif kl == 'email-language':
                d['email_language'] = v[0]
            elif kl == 'email-recipient':
                d['email_recipient'] = v[0]
            elif kl == 'email-sender-address':
                d['email_sender_address'] = v[0]
            elif kl == 'email-sender-name':
                d['email_sender_name'] = v[0]
            elif kl == 'email-source-domain':
                d['email_source_domain'] = v[0]
            elif kl == 'email-source-ip-address':
                d['email_source_ip_address'] = v[0]
            elif kl == 'email-subject':
                d['email_subject'] = v[0]
            elif kl == 'email-x-mailer':
                d['email_x_mailer'] = v[0]
            elif kl == 'expiration-date-time':
                d['expiration_date_time'] = v[0]
            elif kl == 'external-id':
                d['external_id'] = v[0]
            elif kl == 'file-compile-date-time':
                d['file_compile_date_time'] = v[0]
            elif kl == 'file-created-date-time':
                d['file_created_date_time'] = v[0]
            elif kl == 'file-hash-type':
                d['file_hash_type'] = v[0]
            elif kl == 'file-hash-value':
                d['file_hash_value'] = v[0]
            elif kl == 'file-mutex-name':
                d['file_mutex_name'] = v[0]
            elif kl == 'file-name':
                d['file_name'] = v[0]
            elif kl == 'file-packer':
                d['file_packer'] = v[0]
            elif kl == 'file-path':
                d['file_path'] = v[0]
            elif kl == 'file-size':
                d['file_size'] = v[0]
            elif kl == 'file-type':
                d['file_type'] = v[0]
            elif kl == 'ingested-date-time':
                d['ingested_date_time'] = v[0]
            elif kl == 'is-active':
                d['is_active'] = v[0]
            elif kl == 'kill-chain':
                d['kill_chain'] = v
            elif kl == 'known-false-positives':
                d['known_false_positives'] = v[0]
            elif kl == 'last-reported-date-time':
                d['last_reported_date_time'] = v[0]
            elif kl == 'malware-family-names':
                d['malware_family_names'] = v
            elif kl == 'network-cidr-block':
                d['network_cidr_block'] = v[0]
            elif kl == 'network-destination-asn':
                d['network_destination_asn'] = v[0]
            elif kl == 'network-destination-cidr-block':
                d['network_destination_cidr_block'] = v[0]
            elif kl == 'network-destination-i-pv4':
                d['network_destination_i_pv4'] = v[0]
            elif kl == 'network-destination-i-pv6':
                d['network_destination_i_pv6'] = v[0]
            elif kl == 'network-destination-port':
                d['network_destination_port'] = v[0]
            elif kl == 'network-i-pv4':
                d['network_i_pv4'] = v[0]
            elif kl == 'network-i-pv6':
                d['network_i_pv6'] = v[0]
            elif kl == 'network-port':
                d['network_port'] = v[0]
            elif kl == 'network-protocol':
                d['network_protocol'] = v[0]
            elif kl == 'network-source-asn':
                d['network_source_asn'] = v[0]
            elif kl == 'network-source-cidr-block':
                d['network_source_cidr_block'] = v[0]
            elif kl == 'network-source-i-pv4':
                d['network_source_i_pv4'] = v[0]
            elif kl == 'network-source-i-pv6':
                d['network_source_i_pv6'] = v[0]
            elif kl == 'network-source-port':
                d['network_source_port'] = v[0]
            elif kl == 'passive-only':
                d['passive_only'] = v[0]
            elif kl == 'severity':
                d['severity'] = v[0]
            elif kl == 'tags':
                d['tags'] = v
            elif kl == 'target-product':
                d['target_product'] = v[0]
            elif kl == 'threat-type':
                d['threat_type'] = v[0]
            elif kl == 'tlp-level':
                d['tlp_level'] = v[0]
            elif kl == 'url':
                d['url'] = v[0]
            elif kl == 'user-agent':
                d['user_agent'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddSecurityUpdateTiIndicatorValue(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddSecurityUpdateTiIndicatorValue, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'action':
                d['action'] = v[0]
            elif kl == 'activity-group-names':
                d['activity_group_names'] = v
            elif kl == 'additional-information':
                d['additional_information'] = v[0]
            elif kl == 'azure-tenant-id':
                d['azure_tenant_id'] = v[0]
            elif kl == 'confidence':
                d['confidence'] = v[0]
            elif kl == 'description':
                d['description'] = v[0]
            elif kl == 'diamond-model':
                d['diamond_model'] = v[0]
            elif kl == 'domain-name':
                d['domain_name'] = v[0]
            elif kl == 'email-encoding':
                d['email_encoding'] = v[0]
            elif kl == 'email-language':
                d['email_language'] = v[0]
            elif kl == 'email-recipient':
                d['email_recipient'] = v[0]
            elif kl == 'email-sender-address':
                d['email_sender_address'] = v[0]
            elif kl == 'email-sender-name':
                d['email_sender_name'] = v[0]
            elif kl == 'email-source-domain':
                d['email_source_domain'] = v[0]
            elif kl == 'email-source-ip-address':
                d['email_source_ip_address'] = v[0]
            elif kl == 'email-subject':
                d['email_subject'] = v[0]
            elif kl == 'email-x-mailer':
                d['email_x_mailer'] = v[0]
            elif kl == 'expiration-date-time':
                d['expiration_date_time'] = v[0]
            elif kl == 'external-id':
                d['external_id'] = v[0]
            elif kl == 'file-compile-date-time':
                d['file_compile_date_time'] = v[0]
            elif kl == 'file-created-date-time':
                d['file_created_date_time'] = v[0]
            elif kl == 'file-hash-type':
                d['file_hash_type'] = v[0]
            elif kl == 'file-hash-value':
                d['file_hash_value'] = v[0]
            elif kl == 'file-mutex-name':
                d['file_mutex_name'] = v[0]
            elif kl == 'file-name':
                d['file_name'] = v[0]
            elif kl == 'file-packer':
                d['file_packer'] = v[0]
            elif kl == 'file-path':
                d['file_path'] = v[0]
            elif kl == 'file-size':
                d['file_size'] = v[0]
            elif kl == 'file-type':
                d['file_type'] = v[0]
            elif kl == 'ingested-date-time':
                d['ingested_date_time'] = v[0]
            elif kl == 'is-active':
                d['is_active'] = v[0]
            elif kl == 'kill-chain':
                d['kill_chain'] = v
            elif kl == 'known-false-positives':
                d['known_false_positives'] = v[0]
            elif kl == 'last-reported-date-time':
                d['last_reported_date_time'] = v[0]
            elif kl == 'malware-family-names':
                d['malware_family_names'] = v
            elif kl == 'network-cidr-block':
                d['network_cidr_block'] = v[0]
            elif kl == 'network-destination-asn':
                d['network_destination_asn'] = v[0]
            elif kl == 'network-destination-cidr-block':
                d['network_destination_cidr_block'] = v[0]
            elif kl == 'network-destination-i-pv4':
                d['network_destination_i_pv4'] = v[0]
            elif kl == 'network-destination-i-pv6':
                d['network_destination_i_pv6'] = v[0]
            elif kl == 'network-destination-port':
                d['network_destination_port'] = v[0]
            elif kl == 'network-i-pv4':
                d['network_i_pv4'] = v[0]
            elif kl == 'network-i-pv6':
                d['network_i_pv6'] = v[0]
            elif kl == 'network-port':
                d['network_port'] = v[0]
            elif kl == 'network-protocol':
                d['network_protocol'] = v[0]
            elif kl == 'network-source-asn':
                d['network_source_asn'] = v[0]
            elif kl == 'network-source-cidr-block':
                d['network_source_cidr_block'] = v[0]
            elif kl == 'network-source-i-pv4':
                d['network_source_i_pv4'] = v[0]
            elif kl == 'network-source-i-pv6':
                d['network_source_i_pv6'] = v[0]
            elif kl == 'network-source-port':
                d['network_source_port'] = v[0]
            elif kl == 'passive-only':
                d['passive_only'] = v[0]
            elif kl == 'severity':
                d['severity'] = v[0]
            elif kl == 'tags':
                d['tags'] = v
            elif kl == 'target-product':
                d['target_product'] = v[0]
            elif kl == 'threat-type':
                d['threat_type'] = v[0]
            elif kl == 'tlp-level':
                d['tlp_level'] = v[0]
            elif kl == 'url':
                d['url'] = v[0]
            elif kl == 'user-agent':
                d['user_agent'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d
