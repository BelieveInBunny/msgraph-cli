# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag,
    get_enum_type
)
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_security_beta.action import (
    AddProviderStatus,
    AddProviderTenantSettings,
    AddTiIndicators,
    AddVendorInformation,
    AddDomainCategories,
    AddRegistrant,
    AddHashes,
    AddMalwareStates,
    AddVulnerabilityStates,
    AddLogonUsers,
    AddNetworkInterfaces,
    AddIpCategories,
    AddIpReferenceData,
    AddAverageComparativeScores,
    AddControlScores,
    AddControlStateUpdates,
    AddErrorInfo,
    AddParameters,
    AddStates,
    AddAccounts,
    AddSecuritySecuritytiindicatorSubmitTiIndicatorValue,
    AddSecuritySecuritytiindicatorUpdateTiIndicatorValue
)


def load_arguments(self, _):

    with self.argument_context('security security show-security') as c:
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security update-security') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('provider_status', action=AddProviderStatus, nargs='+', help='')
        c.argument('alerts', type=validate_file_or_dict, help='Read-only. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('cloud_app_security_profiles', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('domain_security_profiles', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('file_security_profiles', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('host_security_profiles', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('ip_security_profiles', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.')
        c.argument('provider_tenant_settings', action=AddProviderTenantSettings, nargs='+', help='')
        c.argument('secure_score_control_profiles', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('secure_scores', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('security_actions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('ti_indicators', action=AddTiIndicators, nargs='+', help='')
        c.argument('user_security_profiles', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('security security create-alert') as c:
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('security security create-cloud-app-security-profile') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('azure_subscription_id', type=str, help='')
        c.argument('azure_tenant_id', type=str, help='')
        c.argument('created_date_time', help='')
        c.argument('deployment_package_url', type=str, help='')
        c.argument('destination_service_name', type=str, help='')
        c.argument('is_signed', arg_type=get_three_state_flag(), help='')
        c.argument('last_modified_date_time', help='')
        c.argument('manifest', type=str, help='')
        c.argument('name', type=str, help='')
        c.argument('permissions_required', arg_type=get_enum_type(['unknown', 'anonymous', 'guest', 'user',
                                                                   'administrator', 'system', 'unknownFutureValue']),
                   help='')
        c.argument('platform', type=str, help='')
        c.argument('policy_name', type=str, help='')
        c.argument('publisher', type=str, help='')
        c.argument('risk_score', type=str, help='')
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('vendor_information', action=AddVendorInformation, nargs='+', help='securityVendorInformation')

    with self.argument_context('security security create-domain-security-profile') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('activity_group_names', nargs='+', help='')
        c.argument('azure_subscription_id', type=str, help='')
        c.argument('azure_tenant_id', type=str, help='')
        c.argument('count_hits', type=int, help='')
        c.argument('count_in_org', type=int, help='')
        c.argument('domain_categories', action=AddDomainCategories, nargs='+', help='')
        c.argument('domain_registered_date_time', help='')
        c.argument('first_seen_date_time', help='')
        c.argument('last_seen_date_time', help='')
        c.argument('name', type=str, help='')
        c.argument('registrant', action=AddRegistrant, nargs='+', help='domainRegistrant')
        c.argument('risk_score', type=str, help='')
        c.argument('tags', tags_type)
        c.argument('vendor_information', action=AddVendorInformation, nargs='+', help='securityVendorInformation')

    with self.argument_context('security security create-file-security-profile') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('activity_group_names', nargs='+', help='')
        c.argument('azure_subscription_id', type=str, help='')
        c.argument('azure_tenant_id', type=str, help='')
        c.argument('certificate_thumbprint', type=str, help='')
        c.argument('extensions', nargs='+', help='')
        c.argument('file_type', type=str, help='')
        c.argument('first_seen_date_time', help='')
        c.argument('hashes', action=AddHashes, nargs='+', help='')
        c.argument('last_seen_date_time', help='')
        c.argument('malware_states', action=AddMalwareStates, nargs='+', help='')
        c.argument('names', nargs='+', help='')
        c.argument('risk_score', type=str, help='')
        c.argument('size', type=int, help='')
        c.argument('tags', tags_type)
        c.argument('vendor_information', action=AddVendorInformation, nargs='+', help='securityVendorInformation')
        c.argument('vulnerability_states', action=AddVulnerabilityStates, nargs='+', help='')

    with self.argument_context('security security create-host-security-profile') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('azure_subscription_id', type=str, help='')
        c.argument('azure_tenant_id', type=str, help='')
        c.argument('first_seen_date_time', help='')
        c.argument('fqdn', type=str, help='')
        c.argument('is_azure_ad_joined', arg_type=get_three_state_flag(), help='')
        c.argument('is_azure_ad_registered', arg_type=get_three_state_flag(), help='')
        c.argument('is_hybrid_azure_domain_joined', arg_type=get_three_state_flag(), help='')
        c.argument('last_seen_date_time', help='')
        c.argument('logon_users', action=AddLogonUsers, nargs='+', help='')
        c.argument('net_bios_name', type=str, help='')
        c.argument('network_interfaces', action=AddNetworkInterfaces, nargs='+', help='')
        c.argument('os', type=str, help='')
        c.argument('os_version', type=str, help='')
        c.argument('parent_host', type=str, help='')
        c.argument('related_host_ids', nargs='+', help='')
        c.argument('risk_score', type=str, help='')
        c.argument('tags', tags_type)
        c.argument('vendor_information', action=AddVendorInformation, nargs='+', help='securityVendorInformation')

    with self.argument_context('security security create-ip-security-profile') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('activity_group_names', nargs='+', help='')
        c.argument('address', type=str, help='')
        c.argument('azure_subscription_id', type=str, help='')
        c.argument('azure_tenant_id', type=str, help='')
        c.argument('count_hits', type=int, help='')
        c.argument('count_hosts', type=int, help='')
        c.argument('first_seen_date_time', help='')
        c.argument('ip_categories', action=AddIpCategories, nargs='+', help='')
        c.argument('ip_reference_data', action=AddIpReferenceData, nargs='+', help='')
        c.argument('last_seen_date_time', help='')
        c.argument('risk_score', type=str, help='')
        c.argument('tags', tags_type)
        c.argument('vendor_information', action=AddVendorInformation, nargs='+', help='securityVendorInformation')

    with self.argument_context('security security create-provider-tenant-setting') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('azure_tenant_id', type=str, help='')
        c.argument('enabled', arg_type=get_three_state_flag(), help='')
        c.argument('last_modified_date_time', help='')
        c.argument('provider', type=str, help='')
        c.argument('vendor', type=str, help='')

    with self.argument_context('security security create-secure-score') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('active_user_count', type=int, help='Active user count of the given tenant.')
        c.argument('average_comparative_scores', action=AddAverageComparativeScores, nargs='+', help='Average score by '
                   'different scopes (for example, average by industry, average by seating) and control category '
                   '(Identity, Data, Device, Apps, Infrastructure) within the scope.')
        c.argument('azure_tenant_id', type=str, help='GUID string for tenant ID.')
        c.argument('control_scores', action=AddControlScores, nargs='+', help='Contains tenant scores for a set of '
                   'controls.')
        c.argument('created_date_time', help='The date when the entity is created.')
        c.argument('current_score', type=float, help='Tenant current attained score on specified date.')
        c.argument('enabled_services', nargs='+', help='Microsoft-provided services for the tenant (for example, '
                   'Exchange online, Skype, Sharepoint).')
        c.argument('licensed_user_count', type=int, help='Licensed user count of the given tenant.')
        c.argument('max_score', type=float, help='Tenant maximum possible score on specified date.')
        c.argument('vendor_information', action=AddVendorInformation, nargs='+', help='securityVendorInformation')

    with self.argument_context('security security create-secure-score-control-profile') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('action_type', type=str, help='Control action type (Config, Review, Behavior).')
        c.argument('action_url', type=str, help='URL to where the control can be actioned.')
        c.argument('azure_tenant_id', type=str, help='GUID string for tenant ID.')
        c.argument('compliance_information', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('control_category', type=str, help='Control action category (Identity, Data, Device, Apps, '
                   'Infrastructure).')
        c.argument('control_state_updates', action=AddControlStateUpdates, nargs='+', help='')
        c.argument('deprecated', arg_type=get_three_state_flag(),
                   help='Flag to indicate if a control is depreciated.')
        c.argument('implementation_cost', type=str, help='Resource cost of implemmentating control (low, moderate, '
                   'high).')
        c.argument('last_modified_date_time', help='Time at which the control profile entity was last modified. The '
                   'Timestamp type represents date and time')
        c.argument('max_score', type=float, help='max attainable score for the control.')
        c.argument('rank', type=int, help='Microsoft\'s stack ranking of control.')
        c.argument('remediation', type=str, help='Description of what the control will help remediate.')
        c.argument('remediation_impact', type=str, help='Description of the impact on users of the remediation.')
        c.argument('service', type=str, help='Service that owns the control (Exchange, Sharepoint, Azure AD).')
        c.argument('threats', nargs='+', help='List of threats the control mitigates (accountBreach,dataDeletion,dataEx'
                   'filtration,dataSpillage,')
        c.argument('tier', type=str, help='')
        c.argument('title', type=str, help='Title of the control.')
        c.argument('user_impact', type=str, help='')
        c.argument('vendor_information', action=AddVendorInformation, nargs='+', help='securityVendorInformation')

    with self.argument_context('security security create-security-action') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('action_reason', type=str, help='')
        c.argument('app_id', type=str, help='')
        c.argument('azure_tenant_id', type=str, help='')
        c.argument('client_context', type=str, help='')
        c.argument('completed_date_time', help='')
        c.argument('created_date_time', help='')
        c.argument('error_info', action=AddErrorInfo, nargs='+', help='ResultInfo')
        c.argument('last_action_date_time', help='')
        c.argument('name', type=str, help='')
        c.argument('parameters', action=AddParameters, nargs='+', help='')
        c.argument('states', action=AddStates, nargs='+', help='')
        c.argument('status', arg_type=get_enum_type(['NotStarted', 'Running', 'Completed', 'Failed']), help='')
        c.argument('user', type=str, help='')
        c.argument('vendor_information', action=AddVendorInformation, nargs='+', help='securityVendorInformation')

    with self.argument_context('security security create-ti-indicator') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('action', arg_type=get_enum_type(['unknown', 'allow', 'block', 'alert', 'unknownFutureValue']),
                   help='')
        c.argument('activity_group_names', nargs='+', help='')
        c.argument('additional_information', type=str, help='')
        c.argument('azure_tenant_id', type=str, help='')
        c.argument('confidence', type=int, help='')
        c.argument('description', type=str, help='')
        c.argument('diamond_model', arg_type=get_enum_type(['unknown', 'adversary', 'capability', 'infrastructure',
                                                            'victim', 'unknownFutureValue']), help='')
        c.argument('domain_name', type=str, help='')
        c.argument('email_encoding', type=str, help='')
        c.argument('email_language', type=str, help='')
        c.argument('email_recipient', type=str, help='')
        c.argument('email_sender_address', type=str, help='')
        c.argument('email_sender_name', type=str, help='')
        c.argument('email_source_domain', type=str, help='')
        c.argument('email_source_ip_address', type=str, help='')
        c.argument('email_subject', type=str, help='')
        c.argument('email_x_mailer', type=str, help='')
        c.argument('expiration_date_time', help='')
        c.argument('external_id', type=str, help='')
        c.argument('file_compile_date_time', help='')
        c.argument('file_created_date_time', help='')
        c.argument('file_hash_type', arg_type=get_enum_type(['unknown', 'sha1', 'sha256', 'md5', 'authenticodeHash256',
                                                             'lsHash', 'ctph', 'unknownFutureValue']), help='')
        c.argument('file_hash_value', type=str, help='')
        c.argument('file_mutex_name', type=str, help='')
        c.argument('file_name', type=str, help='')
        c.argument('file_packer', type=str, help='')
        c.argument('file_path', type=str, help='')
        c.argument('file_size', type=int, help='')
        c.argument('file_type', type=str, help='')
        c.argument('ingested_date_time', help='')
        c.argument('is_active', arg_type=get_three_state_flag(), help='')
        c.argument('kill_chain', nargs='+', help='')
        c.argument('known_false_positives', type=str, help='')
        c.argument('last_reported_date_time', help='')
        c.argument('malware_family_names', nargs='+', help='')
        c.argument('network_cidr_block', type=str, help='')
        c.argument('network_destination_asn', type=int, help='')
        c.argument('network_destination_cidr_block', type=str, help='')
        c.argument('network_destination_i_pv4', type=str, help='')
        c.argument('network_destination_i_pv6', type=str, help='')
        c.argument('network_destination_port', type=int, help='')
        c.argument('network_i_pv4', type=str, help='')
        c.argument('network_i_pv6', type=str, help='')
        c.argument('network_port', type=int, help='')
        c.argument('network_protocol', type=int, help='')
        c.argument('network_source_asn', type=int, help='')
        c.argument('network_source_cidr_block', type=str, help='')
        c.argument('network_source_i_pv4', type=str, help='')
        c.argument('network_source_i_pv6', type=str, help='')
        c.argument('network_source_port', type=int, help='')
        c.argument('passive_only', arg_type=get_three_state_flag(), help='')
        c.argument('severity', type=int, help='')
        c.argument('tags', tags_type)
        c.argument('target_product', type=str, help='')
        c.argument('threat_type', type=str, help='')
        c.argument('tlp_level', arg_type=get_enum_type(['unknown', 'white', 'green', 'amber', 'red',
                                                        'unknownFutureValue']), help='')
        c.argument('url', type=str, help='')
        c.argument('user_agent', type=str, help='')

    with self.argument_context('security security create-user-security-profile') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('accounts', action=AddAccounts, nargs='+', help='')
        c.argument('azure_subscription_id', type=str, help='')
        c.argument('azure_tenant_id', type=str, help='')
        c.argument('created_date_time', help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('risk_score', type=str, help='')
        c.argument('tags', tags_type)
        c.argument('user_principal_name', type=str, help='')
        c.argument('vendor_information', action=AddVendorInformation, nargs='+', help='securityVendorInformation')

    with self.argument_context('security security delete-alert') as c:
        c.argument('alert_id', type=str, help='key: id of alert')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('security security delete-cloud-app-security-profile') as c:
        c.argument('cloud_app_security_profile_id', type=str, help='key: id of cloudAppSecurityProfile')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('security security delete-domain-security-profile') as c:
        c.argument('domain_security_profile_id', type=str, help='key: id of domainSecurityProfile')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('security security delete-file-security-profile') as c:
        c.argument('file_security_profile_id', type=str, help='key: id of fileSecurityProfile')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('security security delete-host-security-profile') as c:
        c.argument('host_security_profile_id', type=str, help='key: id of hostSecurityProfile')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('security security delete-ip-security-profile') as c:
        c.argument('ip_security_profile_id', type=str, help='key: id of ipSecurityProfile')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('security security delete-provider-tenant-setting') as c:
        c.argument('provider_tenant_setting_id', type=str, help='key: id of providerTenantSetting')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('security security delete-secure-score') as c:
        c.argument('secure_score_id', type=str, help='key: id of secureScore')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('security security delete-secure-score-control-profile') as c:
        c.argument('secure_score_control_profile_id', type=str, help='key: id of secureScoreControlProfile')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('security security delete-security-action') as c:
        c.argument('security_action_id', type=str, help='key: id of securityAction')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('security security delete-ti-indicator') as c:
        c.argument('ti_indicator_id', type=str, help='key: id of tiIndicator')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('security security delete-user-security-profile') as c:
        c.argument('user_security_profile_id', type=str, help='key: id of userSecurityProfile')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('security security list-alert') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security list-cloud-app-security-profile') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security list-domain-security-profile') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security list-file-security-profile') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security list-host-security-profile') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security list-ip-security-profile') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security list-provider-tenant-setting') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security list-secure-score') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security list-secure-score-control-profile') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security list-security-action') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security list-ti-indicator') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security list-user-security-profile') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security show-alert') as c:
        c.argument('alert_id', type=str, help='key: id of alert')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security show-cloud-app-security-profile') as c:
        c.argument('cloud_app_security_profile_id', type=str, help='key: id of cloudAppSecurityProfile')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security show-domain-security-profile') as c:
        c.argument('domain_security_profile_id', type=str, help='key: id of domainSecurityProfile')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security show-file-security-profile') as c:
        c.argument('file_security_profile_id', type=str, help='key: id of fileSecurityProfile')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security show-host-security-profile') as c:
        c.argument('host_security_profile_id', type=str, help='key: id of hostSecurityProfile')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security show-ip-security-profile') as c:
        c.argument('ip_security_profile_id', type=str, help='key: id of ipSecurityProfile')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security show-provider-tenant-setting') as c:
        c.argument('provider_tenant_setting_id', type=str, help='key: id of providerTenantSetting')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security show-secure-score') as c:
        c.argument('secure_score_id', type=str, help='key: id of secureScore')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security show-secure-score-control-profile') as c:
        c.argument('secure_score_control_profile_id', type=str, help='key: id of secureScoreControlProfile')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security show-security-action') as c:
        c.argument('security_action_id', type=str, help='key: id of securityAction')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security show-ti-indicator') as c:
        c.argument('ti_indicator_id', type=str, help='key: id of tiIndicator')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security show-user-security-profile') as c:
        c.argument('user_security_profile_id', type=str, help='key: id of userSecurityProfile')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('security security update-alert') as c:
        c.argument('alert_id', type=str, help='key: id of alert')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('security security update-cloud-app-security-profile') as c:
        c.argument('cloud_app_security_profile_id', type=str, help='key: id of cloudAppSecurityProfile')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('azure_subscription_id', type=str, help='')
        c.argument('azure_tenant_id', type=str, help='')
        c.argument('created_date_time', help='')
        c.argument('deployment_package_url', type=str, help='')
        c.argument('destination_service_name', type=str, help='')
        c.argument('is_signed', arg_type=get_three_state_flag(), help='')
        c.argument('last_modified_date_time', help='')
        c.argument('manifest', type=str, help='')
        c.argument('name', type=str, help='')
        c.argument('permissions_required', arg_type=get_enum_type(['unknown', 'anonymous', 'guest', 'user',
                                                                   'administrator', 'system', 'unknownFutureValue']),
                   help='')
        c.argument('platform', type=str, help='')
        c.argument('policy_name', type=str, help='')
        c.argument('publisher', type=str, help='')
        c.argument('risk_score', type=str, help='')
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('vendor_information', action=AddVendorInformation, nargs='+', help='securityVendorInformation')

    with self.argument_context('security security update-domain-security-profile') as c:
        c.argument('domain_security_profile_id', type=str, help='key: id of domainSecurityProfile')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('activity_group_names', nargs='+', help='')
        c.argument('azure_subscription_id', type=str, help='')
        c.argument('azure_tenant_id', type=str, help='')
        c.argument('count_hits', type=int, help='')
        c.argument('count_in_org', type=int, help='')
        c.argument('domain_categories', action=AddDomainCategories, nargs='+', help='')
        c.argument('domain_registered_date_time', help='')
        c.argument('first_seen_date_time', help='')
        c.argument('last_seen_date_time', help='')
        c.argument('name', type=str, help='')
        c.argument('registrant', action=AddRegistrant, nargs='+', help='domainRegistrant')
        c.argument('risk_score', type=str, help='')
        c.argument('tags', tags_type)
        c.argument('vendor_information', action=AddVendorInformation, nargs='+', help='securityVendorInformation')

    with self.argument_context('security security update-file-security-profile') as c:
        c.argument('file_security_profile_id', type=str, help='key: id of fileSecurityProfile')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('activity_group_names', nargs='+', help='')
        c.argument('azure_subscription_id', type=str, help='')
        c.argument('azure_tenant_id', type=str, help='')
        c.argument('certificate_thumbprint', type=str, help='')
        c.argument('extensions', nargs='+', help='')
        c.argument('file_type', type=str, help='')
        c.argument('first_seen_date_time', help='')
        c.argument('hashes', action=AddHashes, nargs='+', help='')
        c.argument('last_seen_date_time', help='')
        c.argument('malware_states', action=AddMalwareStates, nargs='+', help='')
        c.argument('names', nargs='+', help='')
        c.argument('risk_score', type=str, help='')
        c.argument('size', type=int, help='')
        c.argument('tags', tags_type)
        c.argument('vendor_information', action=AddVendorInformation, nargs='+', help='securityVendorInformation')
        c.argument('vulnerability_states', action=AddVulnerabilityStates, nargs='+', help='')

    with self.argument_context('security security update-host-security-profile') as c:
        c.argument('host_security_profile_id', type=str, help='key: id of hostSecurityProfile')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('azure_subscription_id', type=str, help='')
        c.argument('azure_tenant_id', type=str, help='')
        c.argument('first_seen_date_time', help='')
        c.argument('fqdn', type=str, help='')
        c.argument('is_azure_ad_joined', arg_type=get_three_state_flag(), help='')
        c.argument('is_azure_ad_registered', arg_type=get_three_state_flag(), help='')
        c.argument('is_hybrid_azure_domain_joined', arg_type=get_three_state_flag(), help='')
        c.argument('last_seen_date_time', help='')
        c.argument('logon_users', action=AddLogonUsers, nargs='+', help='')
        c.argument('net_bios_name', type=str, help='')
        c.argument('network_interfaces', action=AddNetworkInterfaces, nargs='+', help='')
        c.argument('os', type=str, help='')
        c.argument('os_version', type=str, help='')
        c.argument('parent_host', type=str, help='')
        c.argument('related_host_ids', nargs='+', help='')
        c.argument('risk_score', type=str, help='')
        c.argument('tags', tags_type)
        c.argument('vendor_information', action=AddVendorInformation, nargs='+', help='securityVendorInformation')

    with self.argument_context('security security update-ip-security-profile') as c:
        c.argument('ip_security_profile_id', type=str, help='key: id of ipSecurityProfile')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('activity_group_names', nargs='+', help='')
        c.argument('address', type=str, help='')
        c.argument('azure_subscription_id', type=str, help='')
        c.argument('azure_tenant_id', type=str, help='')
        c.argument('count_hits', type=int, help='')
        c.argument('count_hosts', type=int, help='')
        c.argument('first_seen_date_time', help='')
        c.argument('ip_categories', action=AddIpCategories, nargs='+', help='')
        c.argument('ip_reference_data', action=AddIpReferenceData, nargs='+', help='')
        c.argument('last_seen_date_time', help='')
        c.argument('risk_score', type=str, help='')
        c.argument('tags', tags_type)
        c.argument('vendor_information', action=AddVendorInformation, nargs='+', help='securityVendorInformation')

    with self.argument_context('security security update-provider-tenant-setting') as c:
        c.argument('provider_tenant_setting_id', type=str, help='key: id of providerTenantSetting')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('azure_tenant_id', type=str, help='')
        c.argument('enabled', arg_type=get_three_state_flag(), help='')
        c.argument('last_modified_date_time', help='')
        c.argument('provider', type=str, help='')
        c.argument('vendor', type=str, help='')

    with self.argument_context('security security update-secure-score') as c:
        c.argument('secure_score_id', type=str, help='key: id of secureScore')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('active_user_count', type=int, help='Active user count of the given tenant.')
        c.argument('average_comparative_scores', action=AddAverageComparativeScores, nargs='+', help='Average score by '
                   'different scopes (for example, average by industry, average by seating) and control category '
                   '(Identity, Data, Device, Apps, Infrastructure) within the scope.')
        c.argument('azure_tenant_id', type=str, help='GUID string for tenant ID.')
        c.argument('control_scores', action=AddControlScores, nargs='+', help='Contains tenant scores for a set of '
                   'controls.')
        c.argument('created_date_time', help='The date when the entity is created.')
        c.argument('current_score', type=float, help='Tenant current attained score on specified date.')
        c.argument('enabled_services', nargs='+', help='Microsoft-provided services for the tenant (for example, '
                   'Exchange online, Skype, Sharepoint).')
        c.argument('licensed_user_count', type=int, help='Licensed user count of the given tenant.')
        c.argument('max_score', type=float, help='Tenant maximum possible score on specified date.')
        c.argument('vendor_information', action=AddVendorInformation, nargs='+', help='securityVendorInformation')

    with self.argument_context('security security update-secure-score-control-profile') as c:
        c.argument('secure_score_control_profile_id', type=str, help='key: id of secureScoreControlProfile')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('action_type', type=str, help='Control action type (Config, Review, Behavior).')
        c.argument('action_url', type=str, help='URL to where the control can be actioned.')
        c.argument('azure_tenant_id', type=str, help='GUID string for tenant ID.')
        c.argument('compliance_information', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('control_category', type=str, help='Control action category (Identity, Data, Device, Apps, '
                   'Infrastructure).')
        c.argument('control_state_updates', action=AddControlStateUpdates, nargs='+', help='')
        c.argument('deprecated', arg_type=get_three_state_flag(),
                   help='Flag to indicate if a control is depreciated.')
        c.argument('implementation_cost', type=str, help='Resource cost of implemmentating control (low, moderate, '
                   'high).')
        c.argument('last_modified_date_time', help='Time at which the control profile entity was last modified. The '
                   'Timestamp type represents date and time')
        c.argument('max_score', type=float, help='max attainable score for the control.')
        c.argument('rank', type=int, help='Microsoft\'s stack ranking of control.')
        c.argument('remediation', type=str, help='Description of what the control will help remediate.')
        c.argument('remediation_impact', type=str, help='Description of the impact on users of the remediation.')
        c.argument('service', type=str, help='Service that owns the control (Exchange, Sharepoint, Azure AD).')
        c.argument('threats', nargs='+', help='List of threats the control mitigates (accountBreach,dataDeletion,dataEx'
                   'filtration,dataSpillage,')
        c.argument('tier', type=str, help='')
        c.argument('title', type=str, help='Title of the control.')
        c.argument('user_impact', type=str, help='')
        c.argument('vendor_information', action=AddVendorInformation, nargs='+', help='securityVendorInformation')

    with self.argument_context('security security update-security-action') as c:
        c.argument('security_action_id', type=str, help='key: id of securityAction')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('action_reason', type=str, help='')
        c.argument('app_id', type=str, help='')
        c.argument('azure_tenant_id', type=str, help='')
        c.argument('client_context', type=str, help='')
        c.argument('completed_date_time', help='')
        c.argument('created_date_time', help='')
        c.argument('error_info', action=AddErrorInfo, nargs='+', help='ResultInfo')
        c.argument('last_action_date_time', help='')
        c.argument('name', type=str, help='')
        c.argument('parameters', action=AddParameters, nargs='+', help='')
        c.argument('states', action=AddStates, nargs='+', help='')
        c.argument('status', arg_type=get_enum_type(['NotStarted', 'Running', 'Completed', 'Failed']), help='')
        c.argument('user', type=str, help='')
        c.argument('vendor_information', action=AddVendorInformation, nargs='+', help='securityVendorInformation')

    with self.argument_context('security security update-ti-indicator') as c:
        c.argument('ti_indicator_id', type=str, help='key: id of tiIndicator')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('action', arg_type=get_enum_type(['unknown', 'allow', 'block', 'alert', 'unknownFutureValue']),
                   help='')
        c.argument('activity_group_names', nargs='+', help='')
        c.argument('additional_information', type=str, help='')
        c.argument('azure_tenant_id', type=str, help='')
        c.argument('confidence', type=int, help='')
        c.argument('description', type=str, help='')
        c.argument('diamond_model', arg_type=get_enum_type(['unknown', 'adversary', 'capability', 'infrastructure',
                                                            'victim', 'unknownFutureValue']), help='')
        c.argument('domain_name', type=str, help='')
        c.argument('email_encoding', type=str, help='')
        c.argument('email_language', type=str, help='')
        c.argument('email_recipient', type=str, help='')
        c.argument('email_sender_address', type=str, help='')
        c.argument('email_sender_name', type=str, help='')
        c.argument('email_source_domain', type=str, help='')
        c.argument('email_source_ip_address', type=str, help='')
        c.argument('email_subject', type=str, help='')
        c.argument('email_x_mailer', type=str, help='')
        c.argument('expiration_date_time', help='')
        c.argument('external_id', type=str, help='')
        c.argument('file_compile_date_time', help='')
        c.argument('file_created_date_time', help='')
        c.argument('file_hash_type', arg_type=get_enum_type(['unknown', 'sha1', 'sha256', 'md5', 'authenticodeHash256',
                                                             'lsHash', 'ctph', 'unknownFutureValue']), help='')
        c.argument('file_hash_value', type=str, help='')
        c.argument('file_mutex_name', type=str, help='')
        c.argument('file_name', type=str, help='')
        c.argument('file_packer', type=str, help='')
        c.argument('file_path', type=str, help='')
        c.argument('file_size', type=int, help='')
        c.argument('file_type', type=str, help='')
        c.argument('ingested_date_time', help='')
        c.argument('is_active', arg_type=get_three_state_flag(), help='')
        c.argument('kill_chain', nargs='+', help='')
        c.argument('known_false_positives', type=str, help='')
        c.argument('last_reported_date_time', help='')
        c.argument('malware_family_names', nargs='+', help='')
        c.argument('network_cidr_block', type=str, help='')
        c.argument('network_destination_asn', type=int, help='')
        c.argument('network_destination_cidr_block', type=str, help='')
        c.argument('network_destination_i_pv4', type=str, help='')
        c.argument('network_destination_i_pv6', type=str, help='')
        c.argument('network_destination_port', type=int, help='')
        c.argument('network_i_pv4', type=str, help='')
        c.argument('network_i_pv6', type=str, help='')
        c.argument('network_port', type=int, help='')
        c.argument('network_protocol', type=int, help='')
        c.argument('network_source_asn', type=int, help='')
        c.argument('network_source_cidr_block', type=str, help='')
        c.argument('network_source_i_pv4', type=str, help='')
        c.argument('network_source_i_pv6', type=str, help='')
        c.argument('network_source_port', type=int, help='')
        c.argument('passive_only', arg_type=get_three_state_flag(), help='')
        c.argument('severity', type=int, help='')
        c.argument('tags', tags_type)
        c.argument('target_product', type=str, help='')
        c.argument('threat_type', type=str, help='')
        c.argument('tlp_level', arg_type=get_enum_type(['unknown', 'white', 'green', 'amber', 'red',
                                                        'unknownFutureValue']), help='')
        c.argument('url', type=str, help='')
        c.argument('user_agent', type=str, help='')

    with self.argument_context('security security update-user-security-profile') as c:
        c.argument('user_security_profile_id', type=str, help='key: id of userSecurityProfile')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('accounts', action=AddAccounts, nargs='+', help='')
        c.argument('azure_subscription_id', type=str, help='')
        c.argument('azure_tenant_id', type=str, help='')
        c.argument('created_date_time', help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('risk_score', type=str, help='')
        c.argument('tags', tags_type)
        c.argument('user_principal_name', type=str, help='')
        c.argument('vendor_information', action=AddVendorInformation, nargs='+', help='securityVendorInformation')

    with self.argument_context('security securityalert update-alert') as c:
        c.argument('value', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('security securityaction cancel-security-action') as c:
        c.argument('security_action_id', type=str, help='key: id of securityAction')

    with self.argument_context('security securitytiindicator delete-ti-indicator') as c:
        c.argument('value', nargs='+', help='')

    with self.argument_context('security securitytiindicator delete-ti-indicator-by-external-id') as c:
        c.argument('value', nargs='+', help='')

    with self.argument_context('security securitytiindicator submit-ti-indicator') as c:
        c.argument('value', action=AddSecuritySecuritytiindicatorSubmitTiIndicatorValue, nargs='+', help='')

    with self.argument_context('security securitytiindicator update-ti-indicator') as c:
        c.argument('value', action=AddSecuritySecuritytiindicatorUpdateTiIndicatorValue, nargs='+', help='')
