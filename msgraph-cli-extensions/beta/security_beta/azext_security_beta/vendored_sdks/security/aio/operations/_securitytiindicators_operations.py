# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class securitytiindicatorsOperations:
    """securitytiindicatorsOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~security.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def delete_ti_indicators(
        self,
        body: "models.pathso3cp3msecuritytiindicatorsmicrosoftgraphdeletetiindicatorspostrequestbodycontentapplicationjsonschema",
        **kwargs
    ) -> List["models.microsoftgraphresultinfo"]:
        """Invoke action deleteTiIndicators.

        Invoke action deleteTiIndicators.

        :param body: Action parameters.
        :type body: ~security.models.pathso3cp3msecuritytiindicatorsmicrosoftgraphdeletetiindicatorspostrequestbodycontentapplicationjsonschema
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of microsoftgraphresultinfo, or the result of cls(response)
        :rtype: list[~security.models.microsoftgraphresultinfo]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.microsoftgraphresultinfo"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.delete_ti_indicators.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'pathso3cp3msecuritytiindicatorsmicrosoftgraphdeletetiindicatorspostrequestbodycontentapplicationjsonschema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('[microsoftgraphresultinfo]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    delete_ti_indicators.metadata = {'url': '/Security/tiIndicators/microsoft.graph.deleteTiIndicators'}  # type: ignore

    async def delete_ti_indicators_by_external_id(
        self,
        body: "models.paths1gb7he6securitytiindicatorsmicrosoftgraphdeletetiindicatorsbyexternalidpostrequestbodycontentapplicationjsonschema",
        **kwargs
    ) -> List["models.microsoftgraphresultinfo"]:
        """Invoke action deleteTiIndicatorsByExternalId.

        Invoke action deleteTiIndicatorsByExternalId.

        :param body: Action parameters.
        :type body: ~security.models.paths1gb7he6securitytiindicatorsmicrosoftgraphdeletetiindicatorsbyexternalidpostrequestbodycontentapplicationjsonschema
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of microsoftgraphresultinfo, or the result of cls(response)
        :rtype: list[~security.models.microsoftgraphresultinfo]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.microsoftgraphresultinfo"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.delete_ti_indicators_by_external_id.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'paths1gb7he6securitytiindicatorsmicrosoftgraphdeletetiindicatorsbyexternalidpostrequestbodycontentapplicationjsonschema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('[microsoftgraphresultinfo]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    delete_ti_indicators_by_external_id.metadata = {'url': '/Security/tiIndicators/microsoft.graph.deleteTiIndicatorsByExternalId'}  # type: ignore

    async def submit_ti_indicators(
        self,
        body: "models.paths1i03shnsecuritytiindicatorsmicrosoftgraphsubmittiindicatorspostrequestbodycontentapplicationjsonschema",
        **kwargs
    ) -> List["models.microsoftgraphtiindicator"]:
        """Invoke action submitTiIndicators.

        Invoke action submitTiIndicators.

        :param body: Action parameters.
        :type body: ~security.models.paths1i03shnsecuritytiindicatorsmicrosoftgraphsubmittiindicatorspostrequestbodycontentapplicationjsonschema
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of microsoftgraphtiindicator, or the result of cls(response)
        :rtype: list[~security.models.microsoftgraphtiindicator]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.microsoftgraphtiindicator"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.submit_ti_indicators.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'paths1i03shnsecuritytiindicatorsmicrosoftgraphsubmittiindicatorspostrequestbodycontentapplicationjsonschema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('[microsoftgraphtiindicator]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    submit_ti_indicators.metadata = {'url': '/Security/tiIndicators/microsoft.graph.submitTiIndicators'}  # type: ignore

    async def update_ti_indicators(
        self,
        body: "models.pathss86sndsecuritytiindicatorsmicrosoftgraphupdatetiindicatorspostrequestbodycontentapplicationjsonschema",
        **kwargs
    ) -> List["models.microsoftgraphtiindicator"]:
        """Invoke action updateTiIndicators.

        Invoke action updateTiIndicators.

        :param body: Action parameters.
        :type body: ~security.models.pathss86sndsecuritytiindicatorsmicrosoftgraphupdatetiindicatorspostrequestbodycontentapplicationjsonschema
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of microsoftgraphtiindicator, or the result of cls(response)
        :rtype: list[~security.models.microsoftgraphtiindicator]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.microsoftgraphtiindicator"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_ti_indicators.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'pathss86sndsecuritytiindicatorsmicrosoftgraphupdatetiindicatorspostrequestbodycontentapplicationjsonschema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('[microsoftgraphtiindicator]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    update_ti_indicators.metadata = {'url': '/Security/tiIndicators/microsoft.graph.updateTiIndicators'}  # type: ignore
