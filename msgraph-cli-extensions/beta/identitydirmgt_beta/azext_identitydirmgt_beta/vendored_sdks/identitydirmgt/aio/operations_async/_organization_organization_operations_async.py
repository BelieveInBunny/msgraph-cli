# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class OrganizationOrganizationOperations:
    """OrganizationOrganizationOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~identity_directory_management.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_organization(
        self,
        orderby: Optional[List[Union[str, "models.Enum104"]]] = None,
        select: Optional[List[Union[str, "models.Enum105"]]] = None,
        expand: Optional[List[Union[str, "models.Enum106"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfOrganization"]:
        """Get entities from organization.

        Get entities from organization.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_directory_management.models.Enum104]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_directory_management.models.Enum105]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_directory_management.models.Enum106]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfOrganization or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~identity_directory_management.models.CollectionOfOrganization]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfOrganization"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_organization.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfOrganization', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_organization.metadata = {'url': '/organization'}  # type: ignore

    async def create_organization(
        self,
        id: Optional[str] = None,
        deleted_date_time: Optional[datetime.datetime] = None,
        assigned_plans: Optional[List["models.MicrosoftGraphAssignedPlan"]] = None,
        business_phones: Optional[List[str]] = None,
        city: Optional[str] = None,
        country: Optional[str] = None,
        country_letter_code: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        directory_size_quota: Optional["models.MicrosoftGraphDirectorySizeQuota"] = None,
        display_name: Optional[str] = None,
        is_multiple_data_locations_for_services_enabled: Optional[bool] = None,
        marketing_notification_emails: Optional[List[str]] = None,
        on_premises_last_sync_date_time: Optional[datetime.datetime] = None,
        on_premises_sync_enabled: Optional[bool] = None,
        postal_code: Optional[str] = None,
        preferred_language: Optional[str] = None,
        privacy_profile: Optional["models.MicrosoftGraphPrivacyProfile"] = None,
        provisioned_plans: Optional[List["models.MicrosoftGraphProvisionedPlan"]] = None,
        security_compliance_notification_mails: Optional[List[str]] = None,
        security_compliance_notification_phones: Optional[List[str]] = None,
        state: Optional[str] = None,
        street: Optional[str] = None,
        technical_notification_mails: Optional[List[str]] = None,
        verified_domains: Optional[List["models.MicrosoftGraphVerifiedDomain"]] = None,
        certificate_connector_setting: Optional["models.MicrosoftGraphCertificateConnectorSetting"] = None,
        mobile_device_management_authority: Optional[Union[str, "models.MicrosoftGraphMdmAuthority"]] = None,
        certificate_based_auth_configuration: Optional[List["models.MicrosoftGraphCertificateBasedAuthConfiguration"]] = None,
        extensions: Optional[List["models.MicrosoftGraphExtension"]] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        item_insights: Optional["models.MicrosoftGraphItemInsightsSettings"] = None,
        profile_card_properties: Optional[List["models.MicrosoftGraphProfileCardProperty"]] = None,
        id1: Optional[str] = None,
        background_color: Optional[str] = None,
        background_image: Optional[bytes] = None,
        banner_logo: Optional[bytes] = None,
        sign_in_page_text: Optional[str] = None,
        square_logo: Optional[bytes] = None,
        username_hint_text: Optional[str] = None,
        localizations: Optional[List["models.MicrosoftGraphOrganizationalBrandingLocalization"]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphOrganization":
        """Add new entity to organization.

        Add new entity to organization.

        :param id: Read-only.
        :type id: str
        :param deleted_date_time:
        :type deleted_date_time: ~datetime.datetime
        :param assigned_plans: The collection of service plans associated with the tenant. Not
         nullable.
        :type assigned_plans: list[~identity_directory_management.models.MicrosoftGraphAssignedPlan]
        :param business_phones: Telephone number for the organization. NOTE: Although this is a string
         collection, only one number can be set for this property.
        :type business_phones: list[str]
        :param city: City name of the address for the organization.
        :type city: str
        :param country: Country/region name of the address for the organization.
        :type country: str
        :param country_letter_code: Country/region abbreviation for the organization.
        :type country_letter_code: str
        :param created_date_time: Timestamp of when the organization was created. The value cannot be
         modified and is automatically populated when the organization is created. The Timestamp type
         represents date and time information using ISO 8601 format and is always in UTC time. For
         example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
        :type created_date_time: ~datetime.datetime
        :param directory_size_quota: directorySizeQuota.
        :type directory_size_quota: ~identity_directory_management.models.MicrosoftGraphDirectorySizeQuota
        :param display_name: The display name for the tenant.
        :type display_name: str
        :param is_multiple_data_locations_for_services_enabled: true if organization is Multi-Geo
         enabled; false if organization is not Multi-Geo enabled; null (default). Read-only. For more
         information, see OneDrive Online Multi-Geo.
        :type is_multiple_data_locations_for_services_enabled: bool
        :param marketing_notification_emails: Not nullable.
        :type marketing_notification_emails: list[str]
        :param on_premises_last_sync_date_time: The time and date at which the tenant was last synced
         with the on-premise directory. The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'. Read-only.
        :type on_premises_last_sync_date_time: ~datetime.datetime
        :param on_premises_sync_enabled: true if this object is synced from an on-premises directory;
         false if this object was originally synced from an on-premises directory but is no longer
         synced; null if this object has never been synced from an on-premises directory (default).
        :type on_premises_sync_enabled: bool
        :param postal_code: Postal code of the address for the organization.
        :type postal_code: str
        :param preferred_language: The preferred language for the organization. Should follow ISO 639-1
         Code; for example 'en'.
        :type preferred_language: str
        :param privacy_profile: privacyProfile.
        :type privacy_profile: ~identity_directory_management.models.MicrosoftGraphPrivacyProfile
        :param provisioned_plans: Not nullable.
        :type provisioned_plans: list[~identity_directory_management.models.MicrosoftGraphProvisionedPlan]
        :param security_compliance_notification_mails:
        :type security_compliance_notification_mails: list[str]
        :param security_compliance_notification_phones:
        :type security_compliance_notification_phones: list[str]
        :param state: State name of the address for the organization.
        :type state: str
        :param street: Street name of the address for organization.
        :type street: str
        :param technical_notification_mails: Not nullable.
        :type technical_notification_mails: list[str]
        :param verified_domains: The collection of domains associated with this tenant. Not nullable.
        :type verified_domains: list[~identity_directory_management.models.MicrosoftGraphVerifiedDomain]
        :param certificate_connector_setting: Certificate connector settings.
        :type certificate_connector_setting: ~identity_directory_management.models.MicrosoftGraphCertificateConnectorSetting
        :param mobile_device_management_authority:
        :type mobile_device_management_authority: str or ~identity_directory_management.models.MicrosoftGraphMdmAuthority
        :param certificate_based_auth_configuration: Navigation property to manage certificate-based
         authentication configuration. Only a single instance of certificateBasedAuthConfiguration can
         be created in the collection.
        :type certificate_based_auth_configuration: list[~identity_directory_management.models.MicrosoftGraphCertificateBasedAuthConfiguration]
        :param extensions: The collection of open extensions defined for the organization. Read-only.
         Nullable.
        :type extensions: list[~identity_directory_management.models.MicrosoftGraphExtension]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param item_insights: itemInsightsSettings.
        :type item_insights: ~identity_directory_management.models.MicrosoftGraphItemInsightsSettings
        :param profile_card_properties:
        :type profile_card_properties: list[~identity_directory_management.models.MicrosoftGraphProfileCardProperty]
        :param id1: Read-only.
        :type id1: str
        :param background_color:
        :type background_color: str
        :param background_image:
        :type background_image: bytes
        :param banner_logo:
        :type banner_logo: bytes
        :param sign_in_page_text:
        :type sign_in_page_text: str
        :param square_logo:
        :type square_logo: bytes
        :param username_hint_text:
        :type username_hint_text: str
        :param localizations:
        :type localizations: list[~identity_directory_management.models.MicrosoftGraphOrganizationalBrandingLocalization]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphOrganization, or the result of cls(response)
        :rtype: ~identity_directory_management.models.MicrosoftGraphOrganization
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphOrganization"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphOrganization(id=id, deleted_date_time=deleted_date_time, assigned_plans=assigned_plans, business_phones=business_phones, city=city, country=country, country_letter_code=country_letter_code, created_date_time=created_date_time, directory_size_quota=directory_size_quota, display_name=display_name, is_multiple_data_locations_for_services_enabled=is_multiple_data_locations_for_services_enabled, marketing_notification_emails=marketing_notification_emails, on_premises_last_sync_date_time=on_premises_last_sync_date_time, on_premises_sync_enabled=on_premises_sync_enabled, postal_code=postal_code, preferred_language=preferred_language, privacy_profile=privacy_profile, provisioned_plans=provisioned_plans, security_compliance_notification_mails=security_compliance_notification_mails, security_compliance_notification_phones=security_compliance_notification_phones, state=state, street=street, technical_notification_mails=technical_notification_mails, verified_domains=verified_domains, certificate_connector_setting=certificate_connector_setting, mobile_device_management_authority=mobile_device_management_authority, certificate_based_auth_configuration=certificate_based_auth_configuration, extensions=extensions, id_settings_id=microsoft_graph_entity_id, item_insights=item_insights, profile_card_properties=profile_card_properties, id_branding_id=id1, background_color=background_color, background_image=background_image, banner_logo=banner_logo, sign_in_page_text=sign_in_page_text, square_logo=square_logo, username_hint_text=username_hint_text, localizations=localizations)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_organization.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphOrganization')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphOrganization', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_organization.metadata = {'url': '/organization'}  # type: ignore

    async def get_organization(
        self,
        organization_id: str,
        select: Optional[List[Union[str, "models.Enum108"]]] = None,
        expand: Optional[List[Union[str, "models.Enum109"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphOrganization":
        """Get entity from organization by key.

        Get entity from organization by key.

        :param organization_id: key: id of organization.
        :type organization_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_directory_management.models.Enum108]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_directory_management.models.Enum109]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphOrganization, or the result of cls(response)
        :rtype: ~identity_directory_management.models.MicrosoftGraphOrganization
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphOrganization"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_organization.metadata['url']  # type: ignore
        path_format_arguments = {
            'organization-id': self._serialize.url("organization_id", organization_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphOrganization', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_organization.metadata = {'url': '/organization/{organization-id}'}  # type: ignore

    async def update_organization(
        self,
        organization_id: str,
        id: Optional[str] = None,
        deleted_date_time: Optional[datetime.datetime] = None,
        assigned_plans: Optional[List["models.MicrosoftGraphAssignedPlan"]] = None,
        business_phones: Optional[List[str]] = None,
        city: Optional[str] = None,
        country: Optional[str] = None,
        country_letter_code: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        directory_size_quota: Optional["models.MicrosoftGraphDirectorySizeQuota"] = None,
        display_name: Optional[str] = None,
        is_multiple_data_locations_for_services_enabled: Optional[bool] = None,
        marketing_notification_emails: Optional[List[str]] = None,
        on_premises_last_sync_date_time: Optional[datetime.datetime] = None,
        on_premises_sync_enabled: Optional[bool] = None,
        postal_code: Optional[str] = None,
        preferred_language: Optional[str] = None,
        privacy_profile: Optional["models.MicrosoftGraphPrivacyProfile"] = None,
        provisioned_plans: Optional[List["models.MicrosoftGraphProvisionedPlan"]] = None,
        security_compliance_notification_mails: Optional[List[str]] = None,
        security_compliance_notification_phones: Optional[List[str]] = None,
        state: Optional[str] = None,
        street: Optional[str] = None,
        technical_notification_mails: Optional[List[str]] = None,
        verified_domains: Optional[List["models.MicrosoftGraphVerifiedDomain"]] = None,
        certificate_connector_setting: Optional["models.MicrosoftGraphCertificateConnectorSetting"] = None,
        mobile_device_management_authority: Optional[Union[str, "models.MicrosoftGraphMdmAuthority"]] = None,
        certificate_based_auth_configuration: Optional[List["models.MicrosoftGraphCertificateBasedAuthConfiguration"]] = None,
        extensions: Optional[List["models.MicrosoftGraphExtension"]] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        item_insights: Optional["models.MicrosoftGraphItemInsightsSettings"] = None,
        profile_card_properties: Optional[List["models.MicrosoftGraphProfileCardProperty"]] = None,
        id1: Optional[str] = None,
        background_color: Optional[str] = None,
        background_image: Optional[bytes] = None,
        banner_logo: Optional[bytes] = None,
        sign_in_page_text: Optional[str] = None,
        square_logo: Optional[bytes] = None,
        username_hint_text: Optional[str] = None,
        localizations: Optional[List["models.MicrosoftGraphOrganizationalBrandingLocalization"]] = None,
        **kwargs
    ) -> None:
        """Update entity in organization.

        Update entity in organization.

        :param organization_id: key: id of organization.
        :type organization_id: str
        :param id: Read-only.
        :type id: str
        :param deleted_date_time:
        :type deleted_date_time: ~datetime.datetime
        :param assigned_plans: The collection of service plans associated with the tenant. Not
         nullable.
        :type assigned_plans: list[~identity_directory_management.models.MicrosoftGraphAssignedPlan]
        :param business_phones: Telephone number for the organization. NOTE: Although this is a string
         collection, only one number can be set for this property.
        :type business_phones: list[str]
        :param city: City name of the address for the organization.
        :type city: str
        :param country: Country/region name of the address for the organization.
        :type country: str
        :param country_letter_code: Country/region abbreviation for the organization.
        :type country_letter_code: str
        :param created_date_time: Timestamp of when the organization was created. The value cannot be
         modified and is automatically populated when the organization is created. The Timestamp type
         represents date and time information using ISO 8601 format and is always in UTC time. For
         example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
        :type created_date_time: ~datetime.datetime
        :param directory_size_quota: directorySizeQuota.
        :type directory_size_quota: ~identity_directory_management.models.MicrosoftGraphDirectorySizeQuota
        :param display_name: The display name for the tenant.
        :type display_name: str
        :param is_multiple_data_locations_for_services_enabled: true if organization is Multi-Geo
         enabled; false if organization is not Multi-Geo enabled; null (default). Read-only. For more
         information, see OneDrive Online Multi-Geo.
        :type is_multiple_data_locations_for_services_enabled: bool
        :param marketing_notification_emails: Not nullable.
        :type marketing_notification_emails: list[str]
        :param on_premises_last_sync_date_time: The time and date at which the tenant was last synced
         with the on-premise directory. The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'. Read-only.
        :type on_premises_last_sync_date_time: ~datetime.datetime
        :param on_premises_sync_enabled: true if this object is synced from an on-premises directory;
         false if this object was originally synced from an on-premises directory but is no longer
         synced; null if this object has never been synced from an on-premises directory (default).
        :type on_premises_sync_enabled: bool
        :param postal_code: Postal code of the address for the organization.
        :type postal_code: str
        :param preferred_language: The preferred language for the organization. Should follow ISO 639-1
         Code; for example 'en'.
        :type preferred_language: str
        :param privacy_profile: privacyProfile.
        :type privacy_profile: ~identity_directory_management.models.MicrosoftGraphPrivacyProfile
        :param provisioned_plans: Not nullable.
        :type provisioned_plans: list[~identity_directory_management.models.MicrosoftGraphProvisionedPlan]
        :param security_compliance_notification_mails:
        :type security_compliance_notification_mails: list[str]
        :param security_compliance_notification_phones:
        :type security_compliance_notification_phones: list[str]
        :param state: State name of the address for the organization.
        :type state: str
        :param street: Street name of the address for organization.
        :type street: str
        :param technical_notification_mails: Not nullable.
        :type technical_notification_mails: list[str]
        :param verified_domains: The collection of domains associated with this tenant. Not nullable.
        :type verified_domains: list[~identity_directory_management.models.MicrosoftGraphVerifiedDomain]
        :param certificate_connector_setting: Certificate connector settings.
        :type certificate_connector_setting: ~identity_directory_management.models.MicrosoftGraphCertificateConnectorSetting
        :param mobile_device_management_authority:
        :type mobile_device_management_authority: str or ~identity_directory_management.models.MicrosoftGraphMdmAuthority
        :param certificate_based_auth_configuration: Navigation property to manage certificate-based
         authentication configuration. Only a single instance of certificateBasedAuthConfiguration can
         be created in the collection.
        :type certificate_based_auth_configuration: list[~identity_directory_management.models.MicrosoftGraphCertificateBasedAuthConfiguration]
        :param extensions: The collection of open extensions defined for the organization. Read-only.
         Nullable.
        :type extensions: list[~identity_directory_management.models.MicrosoftGraphExtension]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param item_insights: itemInsightsSettings.
        :type item_insights: ~identity_directory_management.models.MicrosoftGraphItemInsightsSettings
        :param profile_card_properties:
        :type profile_card_properties: list[~identity_directory_management.models.MicrosoftGraphProfileCardProperty]
        :param id1: Read-only.
        :type id1: str
        :param background_color:
        :type background_color: str
        :param background_image:
        :type background_image: bytes
        :param banner_logo:
        :type banner_logo: bytes
        :param sign_in_page_text:
        :type sign_in_page_text: str
        :param square_logo:
        :type square_logo: bytes
        :param username_hint_text:
        :type username_hint_text: str
        :param localizations:
        :type localizations: list[~identity_directory_management.models.MicrosoftGraphOrganizationalBrandingLocalization]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphOrganization(id=id, deleted_date_time=deleted_date_time, assigned_plans=assigned_plans, business_phones=business_phones, city=city, country=country, country_letter_code=country_letter_code, created_date_time=created_date_time, directory_size_quota=directory_size_quota, display_name=display_name, is_multiple_data_locations_for_services_enabled=is_multiple_data_locations_for_services_enabled, marketing_notification_emails=marketing_notification_emails, on_premises_last_sync_date_time=on_premises_last_sync_date_time, on_premises_sync_enabled=on_premises_sync_enabled, postal_code=postal_code, preferred_language=preferred_language, privacy_profile=privacy_profile, provisioned_plans=provisioned_plans, security_compliance_notification_mails=security_compliance_notification_mails, security_compliance_notification_phones=security_compliance_notification_phones, state=state, street=street, technical_notification_mails=technical_notification_mails, verified_domains=verified_domains, certificate_connector_setting=certificate_connector_setting, mobile_device_management_authority=mobile_device_management_authority, certificate_based_auth_configuration=certificate_based_auth_configuration, extensions=extensions, id_settings_id=microsoft_graph_entity_id, item_insights=item_insights, profile_card_properties=profile_card_properties, id_branding_id=id1, background_color=background_color, background_image=background_image, banner_logo=banner_logo, sign_in_page_text=sign_in_page_text, square_logo=square_logo, username_hint_text=username_hint_text, localizations=localizations)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_organization.metadata['url']  # type: ignore
        path_format_arguments = {
            'organization-id': self._serialize.url("organization_id", organization_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphOrganization')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_organization.metadata = {'url': '/organization/{organization-id}'}  # type: ignore

    async def delete_organization(
        self,
        organization_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete entity from organization.

        Delete entity from organization.

        :param organization_id: key: id of organization.
        :type organization_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_organization.metadata['url']  # type: ignore
        path_format_arguments = {
            'organization-id': self._serialize.url("organization_id", organization_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_organization.metadata = {'url': '/organization/{organization-id}'}  # type: ignore
