# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class DomainDomainOperations:
    """DomainDomainOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~identity_directory_management.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_domain(
        self,
        orderby: Optional[List[Union[str, "models.Enum90"]]] = None,
        select: Optional[List[Union[str, "models.Enum91"]]] = None,
        expand: Optional[List[Union[str, "models.Enum92"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfDomain"]:
        """Get entities from domains.

        Get entities from domains.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_directory_management.models.Enum90]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_directory_management.models.Enum91]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_directory_management.models.Enum92]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfDomain or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~identity_directory_management.models.CollectionOfDomain]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfDomain"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_domain.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfDomain', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_domain.metadata = {'url': '/domains'}  # type: ignore

    async def create_domain(
        self,
        id: Optional[str] = None,
        authentication_type: Optional[str] = None,
        availability_status: Optional[str] = None,
        is_admin_managed: Optional[bool] = None,
        is_default: Optional[bool] = None,
        is_initial: Optional[bool] = None,
        is_root: Optional[bool] = None,
        is_verified: Optional[bool] = None,
        password_notification_window_in_days: Optional[int] = None,
        password_validity_period_in_days: Optional[int] = None,
        state: Optional["models.MicrosoftGraphDomainState"] = None,
        supported_services: Optional[List[str]] = None,
        domain_name_references: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        service_configuration_records: Optional[List["models.MicrosoftGraphDomainDnsRecord"]] = None,
        verification_dns_records: Optional[List["models.MicrosoftGraphDomainDnsRecord"]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphDomain":
        """Add new entity to domains.

        Add new entity to domains.

        :param id: Read-only.
        :type id: str
        :param authentication_type: Indicates the configured authentication type for the domain. The
         value is either Managed or Federated. Managed indicates a cloud managed domain where Azure AD
         performs user authentication.Federated indicates authentication is federated with an identity
         provider such as the tenant's on-premises Active Directory via Active Directory Federation
         Services. This property is read-only and is not nullable.
        :type authentication_type: str
        :param availability_status: This property is always null except when the verify action is used.
         When the verify action is used, a domain entity is returned in the response. The
         availabilityStatus property of the domain entity in the response is either AvailableImmediately
         or EmailVerifiedDomainTakeoverScheduled.
        :type availability_status: str
        :param is_admin_managed: The value of the property is false if the DNS record management of the
         domain has been delegated to Microsoft 365. Otherwise, the value is true. Not nullable.
        :type is_admin_managed: bool
        :param is_default: True if this is the default domain that is used for user creation. There is
         only one default domain per company. Not nullable.
        :type is_default: bool
        :param is_initial: True if this is the initial domain created by Microsoft Online Services
         (companyname.onmicrosoft.com). There is only one initial domain per company. Not nullable.
        :type is_initial: bool
        :param is_root: True if the domain is a verified root domain. Otherwise, false if the domain is
         a subdomain or unverified. Not nullable.
        :type is_root: bool
        :param is_verified: True if the domain has completed domain ownership verification. Not
         nullable.
        :type is_verified: bool
        :param password_notification_window_in_days: Specifies the number of days before a user
         receives notification that their password will expire. If the property is not set, a default
         value of 14 days will be used.
        :type password_notification_window_in_days: int
        :param password_validity_period_in_days: Specifies the length of time that a password is valid
         before it must be changed. If the property is not set, a default value of 90 days will be used.
        :type password_validity_period_in_days: int
        :param state: domainState.
        :type state: ~identity_directory_management.models.MicrosoftGraphDomainState
        :param supported_services: The capabilities assigned to the domain.Can include 0, 1 or more of
         following values: Email, Sharepoint, EmailInternalRelayOnly, OfficeCommunicationsOnline,
         SharePointDefaultDomain, FullRedelegation, SharePointPublic, OrgIdAuthentication, Yammer,
         Intune The values which you can add/remove using Graph API include: Email,
         OfficeCommunicationsOnline, YammerNot nullable.
        :type supported_services: list[str]
        :param domain_name_references: Read-only, Nullable.
        :type domain_name_references: list[~identity_directory_management.models.MicrosoftGraphDirectoryObject]
        :param service_configuration_records: DNS records the customer adds to the DNS zone file of the
         domain before the domain can be used by Microsoft Online services.Read-only, Nullable.
        :type service_configuration_records: list[~identity_directory_management.models.MicrosoftGraphDomainDnsRecord]
        :param verification_dns_records: DNS records that the customer adds to the DNS zone file of the
         domain before the customer can complete domain ownership verification with Azure AD.Read-only,
         Nullable.
        :type verification_dns_records: list[~identity_directory_management.models.MicrosoftGraphDomainDnsRecord]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphDomain, or the result of cls(response)
        :rtype: ~identity_directory_management.models.MicrosoftGraphDomain
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphDomain"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphDomain(id=id, authentication_type=authentication_type, availability_status=availability_status, is_admin_managed=is_admin_managed, is_default=is_default, is_initial=is_initial, is_root=is_root, is_verified=is_verified, password_notification_window_in_days=password_notification_window_in_days, password_validity_period_in_days=password_validity_period_in_days, state=state, supported_services=supported_services, domain_name_references=domain_name_references, service_configuration_records=service_configuration_records, verification_dns_records=verification_dns_records)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_domain.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphDomain')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphDomain', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_domain.metadata = {'url': '/domains'}  # type: ignore

    async def get_domain(
        self,
        domain_id: str,
        select: Optional[List[Union[str, "models.Enum93"]]] = None,
        expand: Optional[List[Union[str, "models.Enum94"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphDomain":
        """Get entity from domains by key.

        Get entity from domains by key.

        :param domain_id: key: id of domain.
        :type domain_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_directory_management.models.Enum93]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_directory_management.models.Enum94]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphDomain, or the result of cls(response)
        :rtype: ~identity_directory_management.models.MicrosoftGraphDomain
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphDomain"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_domain.metadata['url']  # type: ignore
        path_format_arguments = {
            'domain-id': self._serialize.url("domain_id", domain_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphDomain', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_domain.metadata = {'url': '/domains/{domain-id}'}  # type: ignore

    async def update_domain(
        self,
        domain_id: str,
        id: Optional[str] = None,
        authentication_type: Optional[str] = None,
        availability_status: Optional[str] = None,
        is_admin_managed: Optional[bool] = None,
        is_default: Optional[bool] = None,
        is_initial: Optional[bool] = None,
        is_root: Optional[bool] = None,
        is_verified: Optional[bool] = None,
        password_notification_window_in_days: Optional[int] = None,
        password_validity_period_in_days: Optional[int] = None,
        state: Optional["models.MicrosoftGraphDomainState"] = None,
        supported_services: Optional[List[str]] = None,
        domain_name_references: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        service_configuration_records: Optional[List["models.MicrosoftGraphDomainDnsRecord"]] = None,
        verification_dns_records: Optional[List["models.MicrosoftGraphDomainDnsRecord"]] = None,
        **kwargs
    ) -> None:
        """Update entity in domains.

        Update entity in domains.

        :param domain_id: key: id of domain.
        :type domain_id: str
        :param id: Read-only.
        :type id: str
        :param authentication_type: Indicates the configured authentication type for the domain. The
         value is either Managed or Federated. Managed indicates a cloud managed domain where Azure AD
         performs user authentication.Federated indicates authentication is federated with an identity
         provider such as the tenant's on-premises Active Directory via Active Directory Federation
         Services. This property is read-only and is not nullable.
        :type authentication_type: str
        :param availability_status: This property is always null except when the verify action is used.
         When the verify action is used, a domain entity is returned in the response. The
         availabilityStatus property of the domain entity in the response is either AvailableImmediately
         or EmailVerifiedDomainTakeoverScheduled.
        :type availability_status: str
        :param is_admin_managed: The value of the property is false if the DNS record management of the
         domain has been delegated to Microsoft 365. Otherwise, the value is true. Not nullable.
        :type is_admin_managed: bool
        :param is_default: True if this is the default domain that is used for user creation. There is
         only one default domain per company. Not nullable.
        :type is_default: bool
        :param is_initial: True if this is the initial domain created by Microsoft Online Services
         (companyname.onmicrosoft.com). There is only one initial domain per company. Not nullable.
        :type is_initial: bool
        :param is_root: True if the domain is a verified root domain. Otherwise, false if the domain is
         a subdomain or unverified. Not nullable.
        :type is_root: bool
        :param is_verified: True if the domain has completed domain ownership verification. Not
         nullable.
        :type is_verified: bool
        :param password_notification_window_in_days: Specifies the number of days before a user
         receives notification that their password will expire. If the property is not set, a default
         value of 14 days will be used.
        :type password_notification_window_in_days: int
        :param password_validity_period_in_days: Specifies the length of time that a password is valid
         before it must be changed. If the property is not set, a default value of 90 days will be used.
        :type password_validity_period_in_days: int
        :param state: domainState.
        :type state: ~identity_directory_management.models.MicrosoftGraphDomainState
        :param supported_services: The capabilities assigned to the domain.Can include 0, 1 or more of
         following values: Email, Sharepoint, EmailInternalRelayOnly, OfficeCommunicationsOnline,
         SharePointDefaultDomain, FullRedelegation, SharePointPublic, OrgIdAuthentication, Yammer,
         Intune The values which you can add/remove using Graph API include: Email,
         OfficeCommunicationsOnline, YammerNot nullable.
        :type supported_services: list[str]
        :param domain_name_references: Read-only, Nullable.
        :type domain_name_references: list[~identity_directory_management.models.MicrosoftGraphDirectoryObject]
        :param service_configuration_records: DNS records the customer adds to the DNS zone file of the
         domain before the domain can be used by Microsoft Online services.Read-only, Nullable.
        :type service_configuration_records: list[~identity_directory_management.models.MicrosoftGraphDomainDnsRecord]
        :param verification_dns_records: DNS records that the customer adds to the DNS zone file of the
         domain before the customer can complete domain ownership verification with Azure AD.Read-only,
         Nullable.
        :type verification_dns_records: list[~identity_directory_management.models.MicrosoftGraphDomainDnsRecord]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphDomain(id=id, authentication_type=authentication_type, availability_status=availability_status, is_admin_managed=is_admin_managed, is_default=is_default, is_initial=is_initial, is_root=is_root, is_verified=is_verified, password_notification_window_in_days=password_notification_window_in_days, password_validity_period_in_days=password_validity_period_in_days, state=state, supported_services=supported_services, domain_name_references=domain_name_references, service_configuration_records=service_configuration_records, verification_dns_records=verification_dns_records)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_domain.metadata['url']  # type: ignore
        path_format_arguments = {
            'domain-id': self._serialize.url("domain_id", domain_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphDomain')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_domain.metadata = {'url': '/domains/{domain-id}'}  # type: ignore

    async def delete_domain(
        self,
        domain_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete entity from domains.

        Delete entity from domains.

        :param domain_id: key: id of domain.
        :type domain_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_domain.metadata['url']  # type: ignore
        path_format_arguments = {
            'domain-id': self._serialize.url("domain_id", domain_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_domain.metadata = {'url': '/domains/{domain-id}'}  # type: ignore
