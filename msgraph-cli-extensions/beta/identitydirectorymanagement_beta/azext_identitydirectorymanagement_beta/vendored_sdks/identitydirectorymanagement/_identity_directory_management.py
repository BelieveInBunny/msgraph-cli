# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import TYPE_CHECKING

from azure.mgmt.core import ARMPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Optional

    from azure.core.credentials import TokenCredential

from ._configuration import IdentityDirectoryManagementConfiguration
from .operations import AdministrativeUnitAdministrativeUnitOperations
from .operations import AdministrativeUnitOperations
from .operations import ContactOrgContactOperations
from .operations import ContactOperations
from .operations import ContractContractOperations
from .operations import ContractOperations
from .operations import DeviceDeviceOperations
from .operations import DeviceOperations
from .operations import DirectoryDirectoryOperations
from .operations import DirectoryOperations
from .operations import DirectoryFeatureRolloutPolicyOperations
from .operations import DirectoryRoleDirectoryRoleOperations
from .operations import DirectoryRoleOperations
from .operations import DirectoryRoleTemplateDirectoryRoleTemplateOperations
from .operations import DirectoryRoleTemplateOperations
from .operations import DirectorySettingTemplateDirectorySettingTemplateOperations
from .operations import DirectorySettingTemplateOperations
from .operations import DomainDomainOperations
from .operations import DomainOperations
from .operations import OrganizationOrganizationOperations
from .operations import OrganizationOperations
from .operations import OrganizationSettingOperations
from .operations import SettingDirectorySettingOperations
from .operations import SubscribedSkuSubscribedSkuOperations
from .operations import UserOperations
from . import models


class IdentityDirectoryManagement(object):
    """IdentityDirectoryManagement.

    :ivar administrative_unit_administrative_unit: AdministrativeUnitAdministrativeUnitOperations operations
    :vartype administrative_unit_administrative_unit: identity_directory_management.operations.AdministrativeUnitAdministrativeUnitOperations
    :ivar administrative_unit: AdministrativeUnitOperations operations
    :vartype administrative_unit: identity_directory_management.operations.AdministrativeUnitOperations
    :ivar contact_org_contact: ContactOrgContactOperations operations
    :vartype contact_org_contact: identity_directory_management.operations.ContactOrgContactOperations
    :ivar contact: ContactOperations operations
    :vartype contact: identity_directory_management.operations.ContactOperations
    :ivar contract_contract: ContractContractOperations operations
    :vartype contract_contract: identity_directory_management.operations.ContractContractOperations
    :ivar contract: ContractOperations operations
    :vartype contract: identity_directory_management.operations.ContractOperations
    :ivar device_device: DeviceDeviceOperations operations
    :vartype device_device: identity_directory_management.operations.DeviceDeviceOperations
    :ivar device: DeviceOperations operations
    :vartype device: identity_directory_management.operations.DeviceOperations
    :ivar directory_directory: DirectoryDirectoryOperations operations
    :vartype directory_directory: identity_directory_management.operations.DirectoryDirectoryOperations
    :ivar directory: DirectoryOperations operations
    :vartype directory: identity_directory_management.operations.DirectoryOperations
    :ivar directory_feature_rollout_policy: DirectoryFeatureRolloutPolicyOperations operations
    :vartype directory_feature_rollout_policy: identity_directory_management.operations.DirectoryFeatureRolloutPolicyOperations
    :ivar directory_role_directory_role: DirectoryRoleDirectoryRoleOperations operations
    :vartype directory_role_directory_role: identity_directory_management.operations.DirectoryRoleDirectoryRoleOperations
    :ivar directory_role: DirectoryRoleOperations operations
    :vartype directory_role: identity_directory_management.operations.DirectoryRoleOperations
    :ivar directory_role_template_directory_role_template: DirectoryRoleTemplateDirectoryRoleTemplateOperations operations
    :vartype directory_role_template_directory_role_template: identity_directory_management.operations.DirectoryRoleTemplateDirectoryRoleTemplateOperations
    :ivar directory_role_template: DirectoryRoleTemplateOperations operations
    :vartype directory_role_template: identity_directory_management.operations.DirectoryRoleTemplateOperations
    :ivar directory_setting_template_directory_setting_template: DirectorySettingTemplateDirectorySettingTemplateOperations operations
    :vartype directory_setting_template_directory_setting_template: identity_directory_management.operations.DirectorySettingTemplateDirectorySettingTemplateOperations
    :ivar directory_setting_template: DirectorySettingTemplateOperations operations
    :vartype directory_setting_template: identity_directory_management.operations.DirectorySettingTemplateOperations
    :ivar domain_domain: DomainDomainOperations operations
    :vartype domain_domain: identity_directory_management.operations.DomainDomainOperations
    :ivar domain: DomainOperations operations
    :vartype domain: identity_directory_management.operations.DomainOperations
    :ivar organization_organization: OrganizationOrganizationOperations operations
    :vartype organization_organization: identity_directory_management.operations.OrganizationOrganizationOperations
    :ivar organization: OrganizationOperations operations
    :vartype organization: identity_directory_management.operations.OrganizationOperations
    :ivar organization_setting: OrganizationSettingOperations operations
    :vartype organization_setting: identity_directory_management.operations.OrganizationSettingOperations
    :ivar setting_directory_setting: SettingDirectorySettingOperations operations
    :vartype setting_directory_setting: identity_directory_management.operations.SettingDirectorySettingOperations
    :ivar subscribed_sku_subscribed_sku: SubscribedSkuSubscribedSkuOperations operations
    :vartype subscribed_sku_subscribed_sku: identity_directory_management.operations.SubscribedSkuSubscribedSkuOperations
    :ivar user: UserOperations operations
    :vartype user: identity_directory_management.operations.UserOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials.TokenCredential
    :param top: Show only the first n items.
    :type top: int
    :param skip: Skip the first n items.
    :type skip: int
    :param search: Search items by search phrases.
    :type search: str
    :param filter: Filter items by property values.
    :type filter: str
    :param count: Include count of items.
    :type count: bool
    :param str base_url: Service URL
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
    """

    def __init__(
        self,
        credential,  # type: "TokenCredential"
        top=None,  # type: Optional[int]
        skip=None,  # type: Optional[int]
        search=None,  # type: Optional[str]
        filter=None,  # type: Optional[str]
        count=None,  # type: Optional[bool]
        base_url=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        if not base_url:
            base_url = 'https://graph.microsoft.com/beta'
        self._config = IdentityDirectoryManagementConfiguration(credential, top, skip, search, filter, count, **kwargs)
        self._client = ARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.administrative_unit_administrative_unit = AdministrativeUnitAdministrativeUnitOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.administrative_unit = AdministrativeUnitOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.contact_org_contact = ContactOrgContactOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.contact = ContactOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.contract_contract = ContractContractOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.contract = ContractOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.device_device = DeviceDeviceOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.device = DeviceOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.directory_directory = DirectoryDirectoryOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.directory = DirectoryOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.directory_feature_rollout_policy = DirectoryFeatureRolloutPolicyOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.directory_role_directory_role = DirectoryRoleDirectoryRoleOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.directory_role = DirectoryRoleOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.directory_role_template_directory_role_template = DirectoryRoleTemplateDirectoryRoleTemplateOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.directory_role_template = DirectoryRoleTemplateOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.directory_setting_template_directory_setting_template = DirectorySettingTemplateDirectorySettingTemplateOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.directory_setting_template = DirectorySettingTemplateOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.domain_domain = DomainDomainOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.domain = DomainOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.organization_organization = OrganizationOrganizationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.organization = OrganizationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.organization_setting = OrganizationSettingOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.setting_directory_setting = SettingDirectorySettingOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.subscribed_sku_subscribed_sku = SubscribedSkuSubscribedSkuOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.user = UserOperations(
            self._client, self._config, self._serialize, self._deserialize)

    def close(self):
        # type: () -> None
        self._client.close()

    def __enter__(self):
        # type: () -> IdentityDirectoryManagement
        self._client.__enter__()
        return self

    def __exit__(self, *exc_details):
        # type: (Any) -> None
        self._client.__exit__(*exc_details)
