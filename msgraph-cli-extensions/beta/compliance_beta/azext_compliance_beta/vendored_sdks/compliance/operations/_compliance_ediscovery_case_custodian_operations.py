# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class ComplianceEdiscoveryCaseCustodianOperations(object):
    """ComplianceEdiscoveryCaseCustodianOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~compliance.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def get_last_index_operation(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum137"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphCaseIndexOperation"
        """Get lastIndexOperation from compliance.

        Get lastIndexOperation from compliance.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~compliance.models.Enum137]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCaseIndexOperation, or the result of cls(response)
        :rtype: ~compliance.models.MicrosoftGraphCaseIndexOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCaseIndexOperation"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_last_index_operation.metadata['url']  # type: ignore
        path_format_arguments = {
            'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
            'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCaseIndexOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_last_index_operation.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/lastIndexOperation'}  # type: ignore

    def get_ref_last_index_operation(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> str
        """Get ref of lastIndexOperation from compliance.

        Get ref of lastIndexOperation from compliance.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str, or the result of cls(response)
        :rtype: str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[str]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_ref_last_index_operation.metadata['url']  # type: ignore
        path_format_arguments = {
            'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
            'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_ref_last_index_operation.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/lastIndexOperation/$ref'}  # type: ignore

    def set_ref_last_index_operation(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        body,  # type: Dict[str, object]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the ref of navigation property lastIndexOperation in compliance.

        Update the ref of navigation property lastIndexOperation in compliance.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :param body: New navigation property ref values.
        :type body: dict[str, object]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.set_ref_last_index_operation.metadata['url']  # type: ignore
        path_format_arguments = {
            'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
            'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, '{object}')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    set_ref_last_index_operation.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/lastIndexOperation/$ref'}  # type: ignore

    def delete_ref_last_index_operation(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete ref of navigation property lastIndexOperation for compliance.

        Delete ref of navigation property lastIndexOperation for compliance.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_ref_last_index_operation.metadata['url']  # type: ignore
        path_format_arguments = {
            'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
            'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_ref_last_index_operation.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/lastIndexOperation/$ref'}  # type: ignore

    def activate(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action activate.

        Invoke action activate.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.activate.metadata['url']  # type: ignore
        path_format_arguments = {
            'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
            'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    activate.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/microsoft.graph.activate'}  # type: ignore

    def release(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action release.

        Invoke action release.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.release.metadata['url']  # type: ignore
        path_format_arguments = {
            'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
            'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    release.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/microsoft.graph.release'}  # type: ignore

    def update_index(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action updateIndex.

        Invoke action updateIndex.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.update_index.metadata['url']  # type: ignore
        path_format_arguments = {
            'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
            'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_index.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/microsoft.graph.updateIndex'}  # type: ignore

    def list_site_source(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum138"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum139"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get9ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfSiteSource"]
        """Get siteSources from compliance.

        Get siteSources from compliance.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~compliance.models.Enum138]
        :param select: Select properties to be returned.
        :type select: list[str or ~compliance.models.Enum139]
        :param expand: Expand related entities.
        :type expand: list[str or ~compliance.models.Get9ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfSiteSource or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~compliance.models.CollectionOfSiteSource]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfSiteSource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_site_source.metadata['url']  # type: ignore
                path_format_arguments = {
                    'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
                    'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfSiteSource', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_site_source.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/siteSources'}  # type: ignore

    def create_site_source(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        display_name=None,  # type: Optional[str]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        site=None,  # type: Optional["models.MicrosoftGraphSite"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphSiteSource"
        """Create new navigation property to siteSources for compliance.

        Create new navigation property to siteSources for compliance.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param display_name:
        :type display_name: str
        :param application: identity.
        :type application: ~compliance.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~compliance.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~compliance.models.MicrosoftGraphIdentity
        :param site: site.
        :type site: ~compliance.models.MicrosoftGraphSite
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSiteSource, or the result of cls(response)
        :rtype: ~compliance.models.MicrosoftGraphSiteSource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSiteSource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphSiteSource(id=id, created_date_time=created_date_time, display_name=display_name, application=application, device=device, user=user, site=site)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_site_source.metadata['url']  # type: ignore
        path_format_arguments = {
            'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
            'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphSiteSource')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSiteSource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_site_source.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/siteSources'}  # type: ignore

    def get_site_source(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        site_source_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum141"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get4ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphSiteSource"
        """Get siteSources from compliance.

        Get siteSources from compliance.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :param site_source_id: key: id of siteSource.
        :type site_source_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~compliance.models.Enum141]
        :param expand: Expand related entities.
        :type expand: list[str or ~compliance.models.Get4ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSiteSource, or the result of cls(response)
        :rtype: ~compliance.models.MicrosoftGraphSiteSource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSiteSource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_site_source.metadata['url']  # type: ignore
        path_format_arguments = {
            'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
            'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
            'siteSource-id': self._serialize.url("site_source_id", site_source_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSiteSource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_site_source.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/siteSources/{siteSource-id}'}  # type: ignore

    def update_site_source(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        site_source_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        display_name=None,  # type: Optional[str]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        site=None,  # type: Optional["models.MicrosoftGraphSite"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property siteSources in compliance.

        Update the navigation property siteSources in compliance.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :param site_source_id: key: id of siteSource.
        :type site_source_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param display_name:
        :type display_name: str
        :param application: identity.
        :type application: ~compliance.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~compliance.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~compliance.models.MicrosoftGraphIdentity
        :param site: site.
        :type site: ~compliance.models.MicrosoftGraphSite
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphSiteSource(id=id, created_date_time=created_date_time, display_name=display_name, application=application, device=device, user=user, site=site)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_site_source.metadata['url']  # type: ignore
        path_format_arguments = {
            'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
            'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
            'siteSource-id': self._serialize.url("site_source_id", site_source_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphSiteSource')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_site_source.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/siteSources/{siteSource-id}'}  # type: ignore

    def delete_site_source(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        site_source_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property siteSources for compliance.

        Delete navigation property siteSources for compliance.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :param site_source_id: key: id of siteSource.
        :type site_source_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_site_source.metadata['url']  # type: ignore
        path_format_arguments = {
            'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
            'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
            'siteSource-id': self._serialize.url("site_source_id", site_source_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_site_source.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/siteSources/{siteSource-id}'}  # type: ignore

    def list_unified_group_source(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum145"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum146"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum147"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfUnifiedGroupSource"]
        """Get unifiedGroupSources from compliance.

        Get unifiedGroupSources from compliance.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~compliance.models.Enum145]
        :param select: Select properties to be returned.
        :type select: list[str or ~compliance.models.Enum146]
        :param expand: Expand related entities.
        :type expand: list[str or ~compliance.models.Enum147]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfUnifiedGroupSource or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~compliance.models.CollectionOfUnifiedGroupSource]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfUnifiedGroupSource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_unified_group_source.metadata['url']  # type: ignore
                path_format_arguments = {
                    'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
                    'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfUnifiedGroupSource', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_unified_group_source.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/unifiedGroupSources'}  # type: ignore

    def create_unified_group_source(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        display_name=None,  # type: Optional[str]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        included_sources=None,  # type: Optional[Union[str, "models.MicrosoftGraphSourceType"]]
        group=None,  # type: Optional["models.MicrosoftGraphGroup"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphUnifiedGroupSource"
        """Create new navigation property to unifiedGroupSources for compliance.

        Create new navigation property to unifiedGroupSources for compliance.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param display_name:
        :type display_name: str
        :param application: identity.
        :type application: ~compliance.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~compliance.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~compliance.models.MicrosoftGraphIdentity
        :param included_sources:
        :type included_sources: str or ~compliance.models.MicrosoftGraphSourceType
        :param group: Represents an Azure Active Directory object. The directoryObject type is the base
         type for many other directory entity types.
        :type group: ~compliance.models.MicrosoftGraphGroup
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphUnifiedGroupSource, or the result of cls(response)
        :rtype: ~compliance.models.MicrosoftGraphUnifiedGroupSource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphUnifiedGroupSource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphUnifiedGroupSource(id=id, created_date_time=created_date_time, display_name=display_name, application=application, device=device, user=user, included_sources=included_sources, group=group)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_unified_group_source.metadata['url']  # type: ignore
        path_format_arguments = {
            'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
            'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphUnifiedGroupSource')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphUnifiedGroupSource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_unified_group_source.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/unifiedGroupSources'}  # type: ignore

    def get_unified_group_source(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        unified_group_source_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum148"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum149"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphUnifiedGroupSource"
        """Get unifiedGroupSources from compliance.

        Get unifiedGroupSources from compliance.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :param unified_group_source_id: key: id of unifiedGroupSource.
        :type unified_group_source_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~compliance.models.Enum148]
        :param expand: Expand related entities.
        :type expand: list[str or ~compliance.models.Enum149]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphUnifiedGroupSource, or the result of cls(response)
        :rtype: ~compliance.models.MicrosoftGraphUnifiedGroupSource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphUnifiedGroupSource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_unified_group_source.metadata['url']  # type: ignore
        path_format_arguments = {
            'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
            'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
            'unifiedGroupSource-id': self._serialize.url("unified_group_source_id", unified_group_source_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphUnifiedGroupSource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_unified_group_source.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/unifiedGroupSources/{unifiedGroupSource-id}'}  # type: ignore

    def update_unified_group_source(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        unified_group_source_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        display_name=None,  # type: Optional[str]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        included_sources=None,  # type: Optional[Union[str, "models.MicrosoftGraphSourceType"]]
        group=None,  # type: Optional["models.MicrosoftGraphGroup"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property unifiedGroupSources in compliance.

        Update the navigation property unifiedGroupSources in compliance.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :param unified_group_source_id: key: id of unifiedGroupSource.
        :type unified_group_source_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param display_name:
        :type display_name: str
        :param application: identity.
        :type application: ~compliance.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~compliance.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~compliance.models.MicrosoftGraphIdentity
        :param included_sources:
        :type included_sources: str or ~compliance.models.MicrosoftGraphSourceType
        :param group: Represents an Azure Active Directory object. The directoryObject type is the base
         type for many other directory entity types.
        :type group: ~compliance.models.MicrosoftGraphGroup
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphUnifiedGroupSource(id=id, created_date_time=created_date_time, display_name=display_name, application=application, device=device, user=user, included_sources=included_sources, group=group)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_unified_group_source.metadata['url']  # type: ignore
        path_format_arguments = {
            'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
            'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
            'unifiedGroupSource-id': self._serialize.url("unified_group_source_id", unified_group_source_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphUnifiedGroupSource')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_unified_group_source.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/unifiedGroupSources/{unifiedGroupSource-id}'}  # type: ignore

    def delete_unified_group_source(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        unified_group_source_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property unifiedGroupSources for compliance.

        Delete navigation property unifiedGroupSources for compliance.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :param unified_group_source_id: key: id of unifiedGroupSource.
        :type unified_group_source_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_unified_group_source.metadata['url']  # type: ignore
        path_format_arguments = {
            'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
            'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
            'unifiedGroupSource-id': self._serialize.url("unified_group_source_id", unified_group_source_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_unified_group_source.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/unifiedGroupSources/{unifiedGroupSource-id}'}  # type: ignore

    def list_user_source(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum152"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum153"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfUserSource"]
        """Get userSources from compliance.

        Get userSources from compliance.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~compliance.models.Enum152]
        :param select: Select properties to be returned.
        :type select: list[str or ~compliance.models.Enum153]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfUserSource or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~compliance.models.CollectionOfUserSource]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfUserSource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_user_source.metadata['url']  # type: ignore
                path_format_arguments = {
                    'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
                    'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfUserSource', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_user_source.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/userSources'}  # type: ignore

    def create_user_source(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        display_name=None,  # type: Optional[str]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        email=None,  # type: Optional[str]
        included_sources=None,  # type: Optional[Union[str, "models.MicrosoftGraphSourceType"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphUserSource"
        """Create new navigation property to userSources for compliance.

        Create new navigation property to userSources for compliance.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param display_name:
        :type display_name: str
        :param application: identity.
        :type application: ~compliance.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~compliance.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~compliance.models.MicrosoftGraphIdentity
        :param email:
        :type email: str
        :param included_sources:
        :type included_sources: str or ~compliance.models.MicrosoftGraphSourceType
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphUserSource, or the result of cls(response)
        :rtype: ~compliance.models.MicrosoftGraphUserSource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphUserSource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphUserSource(id=id, created_date_time=created_date_time, display_name=display_name, application=application, device=device, user=user, email=email, included_sources=included_sources)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_user_source.metadata['url']  # type: ignore
        path_format_arguments = {
            'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
            'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphUserSource')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphUserSource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_user_source.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/userSources'}  # type: ignore

    def get_user_source(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        user_source_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum154"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphUserSource"
        """Get userSources from compliance.

        Get userSources from compliance.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :param user_source_id: key: id of userSource.
        :type user_source_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~compliance.models.Enum154]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphUserSource, or the result of cls(response)
        :rtype: ~compliance.models.MicrosoftGraphUserSource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphUserSource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_user_source.metadata['url']  # type: ignore
        path_format_arguments = {
            'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
            'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
            'userSource-id': self._serialize.url("user_source_id", user_source_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphUserSource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_user_source.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/userSources/{userSource-id}'}  # type: ignore

    def update_user_source(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        user_source_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        display_name=None,  # type: Optional[str]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        email=None,  # type: Optional[str]
        included_sources=None,  # type: Optional[Union[str, "models.MicrosoftGraphSourceType"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property userSources in compliance.

        Update the navigation property userSources in compliance.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :param user_source_id: key: id of userSource.
        :type user_source_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param display_name:
        :type display_name: str
        :param application: identity.
        :type application: ~compliance.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~compliance.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~compliance.models.MicrosoftGraphIdentity
        :param email:
        :type email: str
        :param included_sources:
        :type included_sources: str or ~compliance.models.MicrosoftGraphSourceType
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphUserSource(id=id, created_date_time=created_date_time, display_name=display_name, application=application, device=device, user=user, email=email, included_sources=included_sources)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_user_source.metadata['url']  # type: ignore
        path_format_arguments = {
            'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
            'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
            'userSource-id': self._serialize.url("user_source_id", user_source_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphUserSource')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_user_source.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/userSources/{userSource-id}'}  # type: ignore

    def delete_user_source(
        self,
        ediscovery_case_id,  # type: str
        custodian_id,  # type: str
        user_source_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property userSources for compliance.

        Delete navigation property userSources for compliance.

        :param ediscovery_case_id: key: id of ediscoveryCase.
        :type ediscovery_case_id: str
        :param custodian_id: key: id of custodian.
        :type custodian_id: str
        :param user_source_id: key: id of userSource.
        :type user_source_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_user_source.metadata['url']  # type: ignore
        path_format_arguments = {
            'ediscoveryCase-id': self._serialize.url("ediscovery_case_id", ediscovery_case_id, 'str'),
            'custodian-id': self._serialize.url("custodian_id", custodian_id, 'str'),
            'userSource-id': self._serialize.url("user_source_id", user_source_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_user_source.metadata = {'url': '/compliance/ediscovery/cases/{ediscoveryCase-id}/custodians/{custodian-id}/userSources/{userSource-id}'}  # type: ignore
