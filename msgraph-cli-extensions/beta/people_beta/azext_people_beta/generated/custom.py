# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines


def people_user_create_person(client,
                              user_id,
                              id_=None,
                              birthday=None,
                              company_name=None,
                              department=None,
                              display_name=None,
                              email_addresses=None,
                              given_name=None,
                              is_favorite=None,
                              mailbox_type=None,
                              office_location=None,
                              person_notes=None,
                              person_type=None,
                              phones=None,
                              postal_addresses=None,
                              profession=None,
                              sources=None,
                              surname=None,
                              title=None,
                              user_principal_name=None,
                              websites=None,
                              yomi_company=None):
    body = {}
    body['id'] = id_
    body['birthday'] = birthday
    body['company_name'] = company_name
    body['department'] = department
    body['display_name'] = display_name
    body['email_addresses'] = email_addresses
    body['given_name'] = given_name
    body['is_favorite'] = is_favorite
    body['mailbox_type'] = mailbox_type
    body['office_location'] = office_location
    body['person_notes'] = person_notes
    body['person_type'] = person_type
    body['phones'] = phones
    body['postal_addresses'] = postal_addresses
    body['profession'] = profession
    body['sources'] = sources
    body['surname'] = surname
    body['title'] = title
    body['user_principal_name'] = user_principal_name
    body['websites'] = websites
    body['yomi_company'] = yomi_company
    return client.create_people(user_id=user_id,
                                body=body)


def people_user_delete_analytic(client,
                                user_id,
                                if_match=None):
    return client.delete_analytics(user_id=user_id,
                                   if_match=if_match)


def people_user_delete_person(client,
                              user_id,
                              person_id,
                              if_match=None):
    return client.delete_people(user_id=user_id,
                                person_id=person_id,
                                if_match=if_match)


def people_user_delete_profile(client,
                               user_id,
                               if_match=None):
    return client.delete_profile(user_id=user_id,
                                 if_match=if_match)


def people_user_list_person(client,
                            user_id,
                            orderby=None,
                            select=None,
                            expand=None):
    return client.list_people(user_id=user_id,
                              orderby=orderby,
                              select=select,
                              expand=expand)


def people_user_show_analytic(client,
                              user_id,
                              select=None,
                              expand=None):
    return client.get_analytics(user_id=user_id,
                                select=select,
                                expand=expand)


def people_user_show_person(client,
                            user_id,
                            person_id,
                            select=None,
                            expand=None):
    return client.get_people(user_id=user_id,
                             person_id=person_id,
                             select=select,
                             expand=expand)


def people_user_show_profile(client,
                             user_id,
                             select=None,
                             expand=None):
    return client.get_profile(user_id=user_id,
                              select=select,
                              expand=expand)


def people_user_update_analytic(client,
                                user_id,
                                id_=None,
                                settings=None,
                                activity_statistics=None):
    body = {}
    body['id'] = id_
    body['settings'] = settings
    body['activity_statistics'] = activity_statistics
    return client.update_analytics(user_id=user_id,
                                   body=body)


def people_user_update_person(client,
                              user_id,
                              person_id,
                              id_=None,
                              birthday=None,
                              company_name=None,
                              department=None,
                              display_name=None,
                              email_addresses=None,
                              given_name=None,
                              is_favorite=None,
                              mailbox_type=None,
                              office_location=None,
                              person_notes=None,
                              person_type=None,
                              phones=None,
                              postal_addresses=None,
                              profession=None,
                              sources=None,
                              surname=None,
                              title=None,
                              user_principal_name=None,
                              websites=None,
                              yomi_company=None):
    body = {}
    body['id'] = id_
    body['birthday'] = birthday
    body['company_name'] = company_name
    body['department'] = department
    body['display_name'] = display_name
    body['email_addresses'] = email_addresses
    body['given_name'] = given_name
    body['is_favorite'] = is_favorite
    body['mailbox_type'] = mailbox_type
    body['office_location'] = office_location
    body['person_notes'] = person_notes
    body['person_type'] = person_type
    body['phones'] = phones
    body['postal_addresses'] = postal_addresses
    body['profession'] = profession
    body['sources'] = sources
    body['surname'] = surname
    body['title'] = title
    body['user_principal_name'] = user_principal_name
    body['websites'] = websites
    body['yomi_company'] = yomi_company
    return client.update_people(user_id=user_id,
                                person_id=person_id,
                                body=body)


def people_user_update_profile(client,
                               user_id,
                               id_=None,
                               account=None,
                               addresses=None,
                               anniversaries=None,
                               awards=None,
                               certifications=None,
                               educational_activities=None,
                               emails=None,
                               interests=None,
                               languages=None,
                               names=None,
                               notes=None,
                               patents=None,
                               phones=None,
                               positions=None,
                               projects=None,
                               publications=None,
                               skills=None,
                               web_accounts=None,
                               websites=None):
    body = {}
    body['id'] = id_
    body['account'] = account
    body['addresses'] = addresses
    body['anniversaries'] = anniversaries
    body['awards'] = awards
    body['certifications'] = certifications
    body['educational_activities'] = educational_activities
    body['emails'] = emails
    body['interests'] = interests
    body['languages'] = languages
    body['names'] = names
    body['notes'] = notes
    body['patents'] = patents
    body['phones'] = phones
    body['positions'] = positions
    body['projects'] = projects
    body['publications'] = publications
    body['skills'] = skills
    body['web_accounts'] = web_accounts
    body['websites'] = websites
    return client.update_profile(user_id=user_id,
                                 body=body)


def people_user_analytic_create_activity_statistics(client,
                                                    user_id,
                                                    id_=None,
                                                    activity=None,
                                                    duration=None,
                                                    end_date=None,
                                                    start_date=None,
                                                    time_zone_used=None):
    body = {}
    body['id'] = id_
    body['activity'] = activity
    body['duration'] = duration
    body['end_date'] = end_date
    body['start_date'] = start_date
    body['time_zone_used'] = time_zone_used
    return client.create_activity_statistics(user_id=user_id,
                                             body=body)


def people_user_analytic_delete_activity_statistics(client,
                                                    user_id,
                                                    activity_statistics_id,
                                                    if_match=None):
    return client.delete_activity_statistics(user_id=user_id,
                                             activity_statistics_id=activity_statistics_id,
                                             if_match=if_match)


def people_user_analytic_list_activity_statistics(client,
                                                  user_id,
                                                  orderby=None,
                                                  select=None,
                                                  expand=None):
    return client.list_activity_statistics(user_id=user_id,
                                           orderby=orderby,
                                           select=select,
                                           expand=expand)


def people_user_analytic_show_activity_statistics(client,
                                                  user_id,
                                                  activity_statistics_id,
                                                  select=None,
                                                  expand=None):
    return client.get_activity_statistics(user_id=user_id,
                                          activity_statistics_id=activity_statistics_id,
                                          select=select,
                                          expand=expand)


def people_user_analytic_update_activity_statistics(client,
                                                    user_id,
                                                    activity_statistics_id,
                                                    id_=None,
                                                    activity=None,
                                                    duration=None,
                                                    end_date=None,
                                                    start_date=None,
                                                    time_zone_used=None):
    body = {}
    body['id'] = id_
    body['activity'] = activity
    body['duration'] = duration
    body['end_date'] = end_date
    body['start_date'] = start_date
    body['time_zone_used'] = time_zone_used
    return client.update_activity_statistics(user_id=user_id,
                                             activity_statistics_id=activity_statistics_id,
                                             body=body)


def people_user_profile_create_account(client,
                                       user_id,
                                       id_=None,
                                       allowed_audiences=None,
                                       created_date_time=None,
                                       inference=None,
                                       last_modified_date_time=None,
                                       source=None,
                                       application=None,
                                       device=None,
                                       user=None,
                                       microsoft_graph_identity_application=None,
                                       microsoft_graph_identity_device=None,
                                       microsoft_graph_identity_user=None,
                                       age_group=None,
                                       country_code=None,
                                       preferred_language_tag=None,
                                       user_principal_name=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['age_group'] = age_group
    body['country_code'] = country_code
    body['preferred_language_tag'] = preferred_language_tag
    body['user_principal_name'] = user_principal_name
    return client.create_account(user_id=user_id,
                                 body=body)


def people_user_profile_create_address(client,
                                       user_id,
                                       id_=None,
                                       allowed_audiences=None,
                                       created_date_time=None,
                                       inference=None,
                                       last_modified_date_time=None,
                                       source=None,
                                       application=None,
                                       device=None,
                                       user=None,
                                       microsoft_graph_identity_application=None,
                                       microsoft_graph_identity_device=None,
                                       microsoft_graph_identity_user=None,
                                       detail=None,
                                       display_name=None,
                                       geo_coordinates=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['detail'] = detail
    body['display_name'] = display_name
    body['geo_coordinates'] = geo_coordinates
    return client.create_addresses(user_id=user_id,
                                   body=body)


def people_user_profile_create_anniversary(client,
                                           user_id,
                                           id_=None,
                                           allowed_audiences=None,
                                           created_date_time=None,
                                           inference=None,
                                           last_modified_date_time=None,
                                           source=None,
                                           application=None,
                                           device=None,
                                           user=None,
                                           microsoft_graph_identity_application=None,
                                           microsoft_graph_identity_device=None,
                                           microsoft_graph_identity_user=None,
                                           date=None,
                                           type_=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['date'] = date
    body['type'] = type_
    return client.create_anniversaries(user_id=user_id,
                                       body=body)


def people_user_profile_create_award(client,
                                     user_id,
                                     id_=None,
                                     allowed_audiences=None,
                                     created_date_time=None,
                                     inference=None,
                                     last_modified_date_time=None,
                                     source=None,
                                     application=None,
                                     device=None,
                                     user=None,
                                     microsoft_graph_identity_application=None,
                                     microsoft_graph_identity_device=None,
                                     microsoft_graph_identity_user=None,
                                     description=None,
                                     display_name=None,
                                     issued_date=None,
                                     issuing_authority=None,
                                     thumbnail_url=None,
                                     web_url=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['description'] = description
    body['display_name'] = display_name
    body['issued_date'] = issued_date
    body['issuing_authority'] = issuing_authority
    body['thumbnail_url'] = thumbnail_url
    body['web_url'] = web_url
    return client.create_awards(user_id=user_id,
                                body=body)


def people_user_profile_create_certification(client,
                                             user_id,
                                             id_=None,
                                             allowed_audiences=None,
                                             created_date_time=None,
                                             inference=None,
                                             last_modified_date_time=None,
                                             source=None,
                                             application=None,
                                             device=None,
                                             user=None,
                                             microsoft_graph_identity_application=None,
                                             microsoft_graph_identity_device=None,
                                             microsoft_graph_identity_user=None,
                                             certification_id=None,
                                             description=None,
                                             display_name=None,
                                             end_date=None,
                                             issued_date=None,
                                             issuing_authority=None,
                                             issuing_company=None,
                                             start_date=None,
                                             thumbnail_url=None,
                                             web_url=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['certification_id'] = certification_id
    body['description'] = description
    body['display_name'] = display_name
    body['end_date'] = end_date
    body['issued_date'] = issued_date
    body['issuing_authority'] = issuing_authority
    body['issuing_company'] = issuing_company
    body['start_date'] = start_date
    body['thumbnail_url'] = thumbnail_url
    body['web_url'] = web_url
    return client.create_certifications(user_id=user_id,
                                        body=body)


def people_user_profile_create_educational_activity(client,
                                                    user_id,
                                                    id_=None,
                                                    allowed_audiences=None,
                                                    created_date_time=None,
                                                    inference=None,
                                                    last_modified_date_time=None,
                                                    source=None,
                                                    application=None,
                                                    device=None,
                                                    user=None,
                                                    microsoft_graph_identity_application=None,
                                                    microsoft_graph_identity_device=None,
                                                    microsoft_graph_identity_user=None,
                                                    completion_month_year=None,
                                                    end_month_year=None,
                                                    program=None,
                                                    start_month_year=None,
                                                    description=None,
                                                    display_name=None,
                                                    location=None,
                                                    web_url=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['completion_month_year'] = completion_month_year
    body['end_month_year'] = end_month_year
    body['program'] = program
    body['start_month_year'] = start_month_year
    body['institution'] = {}
    body['institution']['description'] = description
    body['institution']['display_name'] = display_name
    body['institution']['location'] = location
    body['institution']['web_url'] = web_url
    return client.create_educational_activities(user_id=user_id,
                                                body=body)


def people_user_profile_create_email(client,
                                     user_id,
                                     id_=None,
                                     allowed_audiences=None,
                                     created_date_time=None,
                                     inference=None,
                                     last_modified_date_time=None,
                                     source=None,
                                     application=None,
                                     device=None,
                                     user=None,
                                     microsoft_graph_identity_application=None,
                                     microsoft_graph_identity_device=None,
                                     microsoft_graph_identity_user=None,
                                     address=None,
                                     display_name=None,
                                     type_=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['address'] = address
    body['display_name'] = display_name
    body['type'] = type_
    return client.create_emails(user_id=user_id,
                                body=body)


def people_user_profile_create_interest(client,
                                        user_id,
                                        id_=None,
                                        allowed_audiences=None,
                                        created_date_time=None,
                                        inference=None,
                                        last_modified_date_time=None,
                                        source=None,
                                        application=None,
                                        device=None,
                                        user=None,
                                        microsoft_graph_identity_application=None,
                                        microsoft_graph_identity_device=None,
                                        microsoft_graph_identity_user=None,
                                        categories=None,
                                        collaboration_tags=None,
                                        description=None,
                                        display_name=None,
                                        web_url=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['categories'] = categories
    body['collaboration_tags'] = collaboration_tags
    body['description'] = description
    body['display_name'] = display_name
    body['web_url'] = web_url
    return client.create_interests(user_id=user_id,
                                   body=body)


def people_user_profile_create_language(client,
                                        user_id,
                                        id_=None,
                                        allowed_audiences=None,
                                        created_date_time=None,
                                        inference=None,
                                        last_modified_date_time=None,
                                        source=None,
                                        application=None,
                                        device=None,
                                        user=None,
                                        microsoft_graph_identity_application=None,
                                        microsoft_graph_identity_device=None,
                                        microsoft_graph_identity_user=None,
                                        display_name=None,
                                        proficiency=None,
                                        reading=None,
                                        spoken=None,
                                        tag=None,
                                        written=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['display_name'] = display_name
    body['proficiency'] = proficiency
    body['reading'] = reading
    body['spoken'] = spoken
    body['tag'] = tag
    body['written'] = written
    return client.create_languages(user_id=user_id,
                                   body=body)


def people_user_profile_create_name(client,
                                    user_id,
                                    id_=None,
                                    allowed_audiences=None,
                                    created_date_time=None,
                                    inference=None,
                                    last_modified_date_time=None,
                                    source=None,
                                    application=None,
                                    device=None,
                                    user=None,
                                    microsoft_graph_identity_application=None,
                                    microsoft_graph_identity_device=None,
                                    microsoft_graph_identity_user=None,
                                    display_name=None,
                                    first=None,
                                    initials=None,
                                    language_tag=None,
                                    last=None,
                                    maiden=None,
                                    middle=None,
                                    nickname=None,
                                    pronunciation=None,
                                    suffix=None,
                                    title=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['display_name'] = display_name
    body['first'] = first
    body['initials'] = initials
    body['language_tag'] = language_tag
    body['last'] = last
    body['maiden'] = maiden
    body['middle'] = middle
    body['nickname'] = nickname
    body['pronunciation'] = pronunciation
    body['suffix'] = suffix
    body['title'] = title
    return client.create_names(user_id=user_id,
                               body=body)


def people_user_profile_create_note(client,
                                    user_id,
                                    id_=None,
                                    allowed_audiences=None,
                                    created_date_time=None,
                                    inference=None,
                                    last_modified_date_time=None,
                                    source=None,
                                    application=None,
                                    device=None,
                                    user=None,
                                    microsoft_graph_identity_application=None,
                                    microsoft_graph_identity_device=None,
                                    microsoft_graph_identity_user=None,
                                    detail=None,
                                    display_name=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['detail'] = detail
    body['display_name'] = display_name
    return client.create_notes(user_id=user_id,
                               body=body)


def people_user_profile_create_patent(client,
                                      user_id,
                                      id_=None,
                                      allowed_audiences=None,
                                      created_date_time=None,
                                      inference=None,
                                      last_modified_date_time=None,
                                      source=None,
                                      application=None,
                                      device=None,
                                      user=None,
                                      microsoft_graph_identity_application=None,
                                      microsoft_graph_identity_device=None,
                                      microsoft_graph_identity_user=None,
                                      description=None,
                                      display_name=None,
                                      is_pending=None,
                                      issued_date=None,
                                      issuing_authority=None,
                                      number=None,
                                      web_url=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['description'] = description
    body['display_name'] = display_name
    body['is_pending'] = is_pending
    body['issued_date'] = issued_date
    body['issuing_authority'] = issuing_authority
    body['number'] = number
    body['web_url'] = web_url
    return client.create_patents(user_id=user_id,
                                 body=body)


def people_user_profile_create_phone(client,
                                     user_id,
                                     id_=None,
                                     allowed_audiences=None,
                                     created_date_time=None,
                                     inference=None,
                                     last_modified_date_time=None,
                                     source=None,
                                     application=None,
                                     device=None,
                                     user=None,
                                     microsoft_graph_identity_application=None,
                                     microsoft_graph_identity_device=None,
                                     microsoft_graph_identity_user=None,
                                     display_name=None,
                                     number=None,
                                     type_=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['display_name'] = display_name
    body['number'] = number
    body['type'] = type_
    return client.create_phones(user_id=user_id,
                                body=body)


def people_user_profile_create_position(client,
                                        user_id,
                                        id_=None,
                                        allowed_audiences=None,
                                        created_date_time=None,
                                        inference=None,
                                        last_modified_date_time=None,
                                        source=None,
                                        application=None,
                                        device=None,
                                        user=None,
                                        microsoft_graph_identity_application=None,
                                        microsoft_graph_identity_device=None,
                                        microsoft_graph_identity_user=None,
                                        categories=None,
                                        colleagues=None,
                                        is_current=None,
                                        manager=None,
                                        company=None,
                                        description=None,
                                        end_month_year=None,
                                        job_title=None,
                                        role=None,
                                        start_month_year=None,
                                        summary=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['categories'] = categories
    body['colleagues'] = colleagues
    body['is_current'] = is_current
    body['manager'] = manager
    body['detail'] = {}
    body['detail']['company'] = company
    body['detail']['description'] = description
    body['detail']['end_month_year'] = end_month_year
    body['detail']['job_title'] = job_title
    body['detail']['role'] = role
    body['detail']['start_month_year'] = start_month_year
    body['detail']['summary'] = summary
    return client.create_positions(user_id=user_id,
                                   body=body)


def people_user_profile_create_project(client,
                                       user_id,
                                       id_=None,
                                       allowed_audiences=None,
                                       created_date_time=None,
                                       inference=None,
                                       last_modified_date_time=None,
                                       source=None,
                                       application=None,
                                       device=None,
                                       user=None,
                                       microsoft_graph_identity_application=None,
                                       microsoft_graph_identity_device=None,
                                       microsoft_graph_identity_user=None,
                                       categories=None,
                                       collaboration_tags=None,
                                       colleagues=None,
                                       display_name=None,
                                       sponsors=None,
                                       company=None,
                                       description=None,
                                       end_month_year=None,
                                       job_title=None,
                                       role=None,
                                       start_month_year=None,
                                       summary=None,
                                       address=None,
                                       department=None,
                                       microsoft_graph_company_detail_display_name=None,
                                       office_location=None,
                                       pronunciation=None,
                                       web_url=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['categories'] = categories
    body['collaboration_tags'] = collaboration_tags
    body['colleagues'] = colleagues
    body['display_name'] = display_name
    body['sponsors'] = sponsors
    body['detail'] = {}
    body['detail']['company'] = company
    body['detail']['description'] = description
    body['detail']['end_month_year'] = end_month_year
    body['detail']['job_title'] = job_title
    body['detail']['role'] = role
    body['detail']['start_month_year'] = start_month_year
    body['detail']['summary'] = summary
    body['client'] = {}
    body['client']['address'] = address
    body['client']['department'] = department
    body['client']['display_name'] = microsoft_graph_company_detail_display_name
    body['client']['office_location'] = office_location
    body['client']['pronunciation'] = pronunciation
    body['client']['web_url'] = web_url
    return client.create_projects(user_id=user_id,
                                  body=body)


def people_user_profile_create_publication(client,
                                           user_id,
                                           id_=None,
                                           allowed_audiences=None,
                                           created_date_time=None,
                                           inference=None,
                                           last_modified_date_time=None,
                                           source=None,
                                           application=None,
                                           device=None,
                                           user=None,
                                           microsoft_graph_identity_application=None,
                                           microsoft_graph_identity_device=None,
                                           microsoft_graph_identity_user=None,
                                           description=None,
                                           display_name=None,
                                           published_date=None,
                                           publisher=None,
                                           thumbnail_url=None,
                                           web_url=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['description'] = description
    body['display_name'] = display_name
    body['published_date'] = published_date
    body['publisher'] = publisher
    body['thumbnail_url'] = thumbnail_url
    body['web_url'] = web_url
    return client.create_publications(user_id=user_id,
                                      body=body)


def people_user_profile_create_skill(client,
                                     user_id,
                                     id_=None,
                                     allowed_audiences=None,
                                     created_date_time=None,
                                     inference=None,
                                     last_modified_date_time=None,
                                     source=None,
                                     application=None,
                                     device=None,
                                     user=None,
                                     microsoft_graph_identity_application=None,
                                     microsoft_graph_identity_device=None,
                                     microsoft_graph_identity_user=None,
                                     categories=None,
                                     collaboration_tags=None,
                                     display_name=None,
                                     proficiency=None,
                                     web_url=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['categories'] = categories
    body['collaboration_tags'] = collaboration_tags
    body['display_name'] = display_name
    body['proficiency'] = proficiency
    body['web_url'] = web_url
    return client.create_skills(user_id=user_id,
                                body=body)


def people_user_profile_create_web_account(client,
                                           user_id,
                                           id_=None,
                                           allowed_audiences=None,
                                           created_date_time=None,
                                           inference=None,
                                           last_modified_date_time=None,
                                           source=None,
                                           application=None,
                                           device=None,
                                           user=None,
                                           microsoft_graph_identity_application=None,
                                           microsoft_graph_identity_device=None,
                                           microsoft_graph_identity_user=None,
                                           description=None,
                                           service=None,
                                           status_message=None,
                                           microsoft_graph_web_account_user_id=None,
                                           web_url=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['description'] = description
    body['service'] = service
    body['status_message'] = status_message
    body['user_id'] = microsoft_graph_web_account_user_id
    body['web_url'] = web_url
    return client.create_web_accounts(user_id=user_id,
                                      body=body)


def people_user_profile_create_website(client,
                                       user_id,
                                       id_=None,
                                       allowed_audiences=None,
                                       created_date_time=None,
                                       inference=None,
                                       last_modified_date_time=None,
                                       source=None,
                                       application=None,
                                       device=None,
                                       user=None,
                                       microsoft_graph_identity_application=None,
                                       microsoft_graph_identity_device=None,
                                       microsoft_graph_identity_user=None,
                                       categories=None,
                                       description=None,
                                       display_name=None,
                                       web_url=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['categories'] = categories
    body['description'] = description
    body['display_name'] = display_name
    body['web_url'] = web_url
    return client.create_websites(user_id=user_id,
                                  body=body)


def people_user_profile_delete_account(client,
                                       user_id,
                                       user_account_information_id,
                                       if_match=None):
    return client.delete_account(user_id=user_id,
                                 user_account_information_id=user_account_information_id,
                                 if_match=if_match)


def people_user_profile_delete_address(client,
                                       user_id,
                                       item_address_id,
                                       if_match=None):
    return client.delete_addresses(user_id=user_id,
                                   item_address_id=item_address_id,
                                   if_match=if_match)


def people_user_profile_delete_anniversary(client,
                                           user_id,
                                           person_anniversary_id,
                                           if_match=None):
    return client.delete_anniversaries(user_id=user_id,
                                       person_anniversary_id=person_anniversary_id,
                                       if_match=if_match)


def people_user_profile_delete_award(client,
                                     user_id,
                                     person_award_id,
                                     if_match=None):
    return client.delete_awards(user_id=user_id,
                                person_award_id=person_award_id,
                                if_match=if_match)


def people_user_profile_delete_certification(client,
                                             user_id,
                                             person_certification_id,
                                             if_match=None):
    return client.delete_certifications(user_id=user_id,
                                        person_certification_id=person_certification_id,
                                        if_match=if_match)


def people_user_profile_delete_educational_activity(client,
                                                    user_id,
                                                    educational_activity_id,
                                                    if_match=None):
    return client.delete_educational_activities(user_id=user_id,
                                                educational_activity_id=educational_activity_id,
                                                if_match=if_match)


def people_user_profile_delete_email(client,
                                     user_id,
                                     item_email_id,
                                     if_match=None):
    return client.delete_emails(user_id=user_id,
                                item_email_id=item_email_id,
                                if_match=if_match)


def people_user_profile_delete_interest(client,
                                        user_id,
                                        person_interest_id,
                                        if_match=None):
    return client.delete_interests(user_id=user_id,
                                   person_interest_id=person_interest_id,
                                   if_match=if_match)


def people_user_profile_delete_language(client,
                                        user_id,
                                        language_proficiency_id,
                                        if_match=None):
    return client.delete_languages(user_id=user_id,
                                   language_proficiency_id=language_proficiency_id,
                                   if_match=if_match)


def people_user_profile_delete_name(client,
                                    user_id,
                                    person_name_id,
                                    if_match=None):
    return client.delete_names(user_id=user_id,
                               person_name_id=person_name_id,
                               if_match=if_match)


def people_user_profile_delete_note(client,
                                    user_id,
                                    person_annotation_id,
                                    if_match=None):
    return client.delete_notes(user_id=user_id,
                               person_annotation_id=person_annotation_id,
                               if_match=if_match)


def people_user_profile_delete_patent(client,
                                      user_id,
                                      item_patent_id,
                                      if_match=None):
    return client.delete_patents(user_id=user_id,
                                 item_patent_id=item_patent_id,
                                 if_match=if_match)


def people_user_profile_delete_phone(client,
                                     user_id,
                                     item_phone_id,
                                     if_match=None):
    return client.delete_phones(user_id=user_id,
                                item_phone_id=item_phone_id,
                                if_match=if_match)


def people_user_profile_delete_position(client,
                                        user_id,
                                        work_position_id,
                                        if_match=None):
    return client.delete_positions(user_id=user_id,
                                   work_position_id=work_position_id,
                                   if_match=if_match)


def people_user_profile_delete_project(client,
                                       user_id,
                                       project_participation_id,
                                       if_match=None):
    return client.delete_projects(user_id=user_id,
                                  project_participation_id=project_participation_id,
                                  if_match=if_match)


def people_user_profile_delete_publication(client,
                                           user_id,
                                           item_publication_id,
                                           if_match=None):
    return client.delete_publications(user_id=user_id,
                                      item_publication_id=item_publication_id,
                                      if_match=if_match)


def people_user_profile_delete_skill(client,
                                     user_id,
                                     skill_proficiency_id,
                                     if_match=None):
    return client.delete_skills(user_id=user_id,
                                skill_proficiency_id=skill_proficiency_id,
                                if_match=if_match)


def people_user_profile_delete_web_account(client,
                                           user_id,
                                           web_account_id,
                                           if_match=None):
    return client.delete_web_accounts(user_id=user_id,
                                      web_account_id=web_account_id,
                                      if_match=if_match)


def people_user_profile_delete_website(client,
                                       user_id,
                                       person_website_id,
                                       if_match=None):
    return client.delete_websites(user_id=user_id,
                                  person_website_id=person_website_id,
                                  if_match=if_match)


def people_user_profile_list_account(client,
                                     user_id,
                                     orderby=None,
                                     select=None,
                                     expand=None):
    return client.list_account(user_id=user_id,
                               orderby=orderby,
                               select=select,
                               expand=expand)


def people_user_profile_list_address(client,
                                     user_id,
                                     orderby=None,
                                     select=None,
                                     expand=None):
    return client.list_addresses(user_id=user_id,
                                 orderby=orderby,
                                 select=select,
                                 expand=expand)


def people_user_profile_list_anniversary(client,
                                         user_id,
                                         orderby=None,
                                         select=None,
                                         expand=None):
    return client.list_anniversaries(user_id=user_id,
                                     orderby=orderby,
                                     select=select,
                                     expand=expand)


def people_user_profile_list_award(client,
                                   user_id,
                                   orderby=None,
                                   select=None,
                                   expand=None):
    return client.list_awards(user_id=user_id,
                              orderby=orderby,
                              select=select,
                              expand=expand)


def people_user_profile_list_certification(client,
                                           user_id,
                                           orderby=None,
                                           select=None,
                                           expand=None):
    return client.list_certifications(user_id=user_id,
                                      orderby=orderby,
                                      select=select,
                                      expand=expand)


def people_user_profile_list_educational_activity(client,
                                                  user_id,
                                                  orderby=None,
                                                  select=None,
                                                  expand=None):
    return client.list_educational_activities(user_id=user_id,
                                              orderby=orderby,
                                              select=select,
                                              expand=expand)


def people_user_profile_list_email(client,
                                   user_id,
                                   orderby=None,
                                   select=None,
                                   expand=None):
    return client.list_emails(user_id=user_id,
                              orderby=orderby,
                              select=select,
                              expand=expand)


def people_user_profile_list_interest(client,
                                      user_id,
                                      orderby=None,
                                      select=None,
                                      expand=None):
    return client.list_interests(user_id=user_id,
                                 orderby=orderby,
                                 select=select,
                                 expand=expand)


def people_user_profile_list_language(client,
                                      user_id,
                                      orderby=None,
                                      select=None,
                                      expand=None):
    return client.list_languages(user_id=user_id,
                                 orderby=orderby,
                                 select=select,
                                 expand=expand)


def people_user_profile_list_name(client,
                                  user_id,
                                  orderby=None,
                                  select=None,
                                  expand=None):
    return client.list_names(user_id=user_id,
                             orderby=orderby,
                             select=select,
                             expand=expand)


def people_user_profile_list_note(client,
                                  user_id,
                                  orderby=None,
                                  select=None,
                                  expand=None):
    return client.list_notes(user_id=user_id,
                             orderby=orderby,
                             select=select,
                             expand=expand)


def people_user_profile_list_patent(client,
                                    user_id,
                                    orderby=None,
                                    select=None,
                                    expand=None):
    return client.list_patents(user_id=user_id,
                               orderby=orderby,
                               select=select,
                               expand=expand)


def people_user_profile_list_phone(client,
                                   user_id,
                                   orderby=None,
                                   select=None,
                                   expand=None):
    return client.list_phones(user_id=user_id,
                              orderby=orderby,
                              select=select,
                              expand=expand)


def people_user_profile_list_position(client,
                                      user_id,
                                      orderby=None,
                                      select=None,
                                      expand=None):
    return client.list_positions(user_id=user_id,
                                 orderby=orderby,
                                 select=select,
                                 expand=expand)


def people_user_profile_list_project(client,
                                     user_id,
                                     orderby=None,
                                     select=None,
                                     expand=None):
    return client.list_projects(user_id=user_id,
                                orderby=orderby,
                                select=select,
                                expand=expand)


def people_user_profile_list_publication(client,
                                         user_id,
                                         orderby=None,
                                         select=None,
                                         expand=None):
    return client.list_publications(user_id=user_id,
                                    orderby=orderby,
                                    select=select,
                                    expand=expand)


def people_user_profile_list_skill(client,
                                   user_id,
                                   orderby=None,
                                   select=None,
                                   expand=None):
    return client.list_skills(user_id=user_id,
                              orderby=orderby,
                              select=select,
                              expand=expand)


def people_user_profile_list_web_account(client,
                                         user_id,
                                         orderby=None,
                                         select=None,
                                         expand=None):
    return client.list_web_accounts(user_id=user_id,
                                    orderby=orderby,
                                    select=select,
                                    expand=expand)


def people_user_profile_list_website(client,
                                     user_id,
                                     orderby=None,
                                     select=None,
                                     expand=None):
    return client.list_websites(user_id=user_id,
                                orderby=orderby,
                                select=select,
                                expand=expand)


def people_user_profile_show_account(client,
                                     user_id,
                                     user_account_information_id,
                                     select=None,
                                     expand=None):
    return client.get_account(user_id=user_id,
                              user_account_information_id=user_account_information_id,
                              select=select,
                              expand=expand)


def people_user_profile_show_address(client,
                                     user_id,
                                     item_address_id,
                                     select=None,
                                     expand=None):
    return client.get_addresses(user_id=user_id,
                                item_address_id=item_address_id,
                                select=select,
                                expand=expand)


def people_user_profile_show_anniversary(client,
                                         user_id,
                                         person_anniversary_id,
                                         select=None,
                                         expand=None):
    return client.get_anniversaries(user_id=user_id,
                                    person_anniversary_id=person_anniversary_id,
                                    select=select,
                                    expand=expand)


def people_user_profile_show_award(client,
                                   user_id,
                                   person_award_id,
                                   select=None,
                                   expand=None):
    return client.get_awards(user_id=user_id,
                             person_award_id=person_award_id,
                             select=select,
                             expand=expand)


def people_user_profile_show_certification(client,
                                           user_id,
                                           person_certification_id,
                                           select=None,
                                           expand=None):
    return client.get_certifications(user_id=user_id,
                                     person_certification_id=person_certification_id,
                                     select=select,
                                     expand=expand)


def people_user_profile_show_educational_activity(client,
                                                  user_id,
                                                  educational_activity_id,
                                                  select=None,
                                                  expand=None):
    return client.get_educational_activities(user_id=user_id,
                                             educational_activity_id=educational_activity_id,
                                             select=select,
                                             expand=expand)


def people_user_profile_show_email(client,
                                   user_id,
                                   item_email_id,
                                   select=None,
                                   expand=None):
    return client.get_emails(user_id=user_id,
                             item_email_id=item_email_id,
                             select=select,
                             expand=expand)


def people_user_profile_show_interest(client,
                                      user_id,
                                      person_interest_id,
                                      select=None,
                                      expand=None):
    return client.get_interests(user_id=user_id,
                                person_interest_id=person_interest_id,
                                select=select,
                                expand=expand)


def people_user_profile_show_language(client,
                                      user_id,
                                      language_proficiency_id,
                                      select=None,
                                      expand=None):
    return client.get_languages(user_id=user_id,
                                language_proficiency_id=language_proficiency_id,
                                select=select,
                                expand=expand)


def people_user_profile_show_name(client,
                                  user_id,
                                  person_name_id,
                                  select=None,
                                  expand=None):
    return client.get_names(user_id=user_id,
                            person_name_id=person_name_id,
                            select=select,
                            expand=expand)


def people_user_profile_show_note(client,
                                  user_id,
                                  person_annotation_id,
                                  select=None,
                                  expand=None):
    return client.get_notes(user_id=user_id,
                            person_annotation_id=person_annotation_id,
                            select=select,
                            expand=expand)


def people_user_profile_show_patent(client,
                                    user_id,
                                    item_patent_id,
                                    select=None,
                                    expand=None):
    return client.get_patents(user_id=user_id,
                              item_patent_id=item_patent_id,
                              select=select,
                              expand=expand)


def people_user_profile_show_phone(client,
                                   user_id,
                                   item_phone_id,
                                   select=None,
                                   expand=None):
    return client.get_phones(user_id=user_id,
                             item_phone_id=item_phone_id,
                             select=select,
                             expand=expand)


def people_user_profile_show_position(client,
                                      user_id,
                                      work_position_id,
                                      select=None,
                                      expand=None):
    return client.get_positions(user_id=user_id,
                                work_position_id=work_position_id,
                                select=select,
                                expand=expand)


def people_user_profile_show_project(client,
                                     user_id,
                                     project_participation_id,
                                     select=None,
                                     expand=None):
    return client.get_projects(user_id=user_id,
                               project_participation_id=project_participation_id,
                               select=select,
                               expand=expand)


def people_user_profile_show_publication(client,
                                         user_id,
                                         item_publication_id,
                                         select=None,
                                         expand=None):
    return client.get_publications(user_id=user_id,
                                   item_publication_id=item_publication_id,
                                   select=select,
                                   expand=expand)


def people_user_profile_show_skill(client,
                                   user_id,
                                   skill_proficiency_id,
                                   select=None,
                                   expand=None):
    return client.get_skills(user_id=user_id,
                             skill_proficiency_id=skill_proficiency_id,
                             select=select,
                             expand=expand)


def people_user_profile_show_web_account(client,
                                         user_id,
                                         web_account_id,
                                         select=None,
                                         expand=None):
    return client.get_web_accounts(user_id=user_id,
                                   web_account_id=web_account_id,
                                   select=select,
                                   expand=expand)


def people_user_profile_show_website(client,
                                     user_id,
                                     person_website_id,
                                     select=None,
                                     expand=None):
    return client.get_websites(user_id=user_id,
                               person_website_id=person_website_id,
                               select=select,
                               expand=expand)


def people_user_profile_update_account(client,
                                       user_id,
                                       user_account_information_id,
                                       id_=None,
                                       allowed_audiences=None,
                                       created_date_time=None,
                                       inference=None,
                                       last_modified_date_time=None,
                                       source=None,
                                       application=None,
                                       device=None,
                                       user=None,
                                       microsoft_graph_identity_application=None,
                                       microsoft_graph_identity_device=None,
                                       microsoft_graph_identity_user=None,
                                       age_group=None,
                                       country_code=None,
                                       preferred_language_tag=None,
                                       user_principal_name=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['age_group'] = age_group
    body['country_code'] = country_code
    body['preferred_language_tag'] = preferred_language_tag
    body['user_principal_name'] = user_principal_name
    return client.update_account(user_id=user_id,
                                 user_account_information_id=user_account_information_id,
                                 body=body)


def people_user_profile_update_address(client,
                                       user_id,
                                       item_address_id,
                                       id_=None,
                                       allowed_audiences=None,
                                       created_date_time=None,
                                       inference=None,
                                       last_modified_date_time=None,
                                       source=None,
                                       application=None,
                                       device=None,
                                       user=None,
                                       microsoft_graph_identity_application=None,
                                       microsoft_graph_identity_device=None,
                                       microsoft_graph_identity_user=None,
                                       detail=None,
                                       display_name=None,
                                       geo_coordinates=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['detail'] = detail
    body['display_name'] = display_name
    body['geo_coordinates'] = geo_coordinates
    return client.update_addresses(user_id=user_id,
                                   item_address_id=item_address_id,
                                   body=body)


def people_user_profile_update_anniversary(client,
                                           user_id,
                                           person_anniversary_id,
                                           id_=None,
                                           allowed_audiences=None,
                                           created_date_time=None,
                                           inference=None,
                                           last_modified_date_time=None,
                                           source=None,
                                           application=None,
                                           device=None,
                                           user=None,
                                           microsoft_graph_identity_application=None,
                                           microsoft_graph_identity_device=None,
                                           microsoft_graph_identity_user=None,
                                           date=None,
                                           type_=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['date'] = date
    body['type'] = type_
    return client.update_anniversaries(user_id=user_id,
                                       person_anniversary_id=person_anniversary_id,
                                       body=body)


def people_user_profile_update_award(client,
                                     user_id,
                                     person_award_id,
                                     id_=None,
                                     allowed_audiences=None,
                                     created_date_time=None,
                                     inference=None,
                                     last_modified_date_time=None,
                                     source=None,
                                     application=None,
                                     device=None,
                                     user=None,
                                     microsoft_graph_identity_application=None,
                                     microsoft_graph_identity_device=None,
                                     microsoft_graph_identity_user=None,
                                     description=None,
                                     display_name=None,
                                     issued_date=None,
                                     issuing_authority=None,
                                     thumbnail_url=None,
                                     web_url=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['description'] = description
    body['display_name'] = display_name
    body['issued_date'] = issued_date
    body['issuing_authority'] = issuing_authority
    body['thumbnail_url'] = thumbnail_url
    body['web_url'] = web_url
    return client.update_awards(user_id=user_id,
                                person_award_id=person_award_id,
                                body=body)


def people_user_profile_update_certification(client,
                                             user_id,
                                             person_certification_id,
                                             id_=None,
                                             allowed_audiences=None,
                                             created_date_time=None,
                                             inference=None,
                                             last_modified_date_time=None,
                                             source=None,
                                             application=None,
                                             device=None,
                                             user=None,
                                             microsoft_graph_identity_application=None,
                                             microsoft_graph_identity_device=None,
                                             microsoft_graph_identity_user=None,
                                             certification_id=None,
                                             description=None,
                                             display_name=None,
                                             end_date=None,
                                             issued_date=None,
                                             issuing_authority=None,
                                             issuing_company=None,
                                             start_date=None,
                                             thumbnail_url=None,
                                             web_url=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['certification_id'] = certification_id
    body['description'] = description
    body['display_name'] = display_name
    body['end_date'] = end_date
    body['issued_date'] = issued_date
    body['issuing_authority'] = issuing_authority
    body['issuing_company'] = issuing_company
    body['start_date'] = start_date
    body['thumbnail_url'] = thumbnail_url
    body['web_url'] = web_url
    return client.update_certifications(user_id=user_id,
                                        person_certification_id=person_certification_id,
                                        body=body)


def people_user_profile_update_educational_activity(client,
                                                    user_id,
                                                    educational_activity_id,
                                                    id_=None,
                                                    allowed_audiences=None,
                                                    created_date_time=None,
                                                    inference=None,
                                                    last_modified_date_time=None,
                                                    source=None,
                                                    application=None,
                                                    device=None,
                                                    user=None,
                                                    microsoft_graph_identity_application=None,
                                                    microsoft_graph_identity_device=None,
                                                    microsoft_graph_identity_user=None,
                                                    completion_month_year=None,
                                                    end_month_year=None,
                                                    program=None,
                                                    start_month_year=None,
                                                    description=None,
                                                    display_name=None,
                                                    location=None,
                                                    web_url=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['completion_month_year'] = completion_month_year
    body['end_month_year'] = end_month_year
    body['program'] = program
    body['start_month_year'] = start_month_year
    body['institution'] = {}
    body['institution']['description'] = description
    body['institution']['display_name'] = display_name
    body['institution']['location'] = location
    body['institution']['web_url'] = web_url
    return client.update_educational_activities(user_id=user_id,
                                                educational_activity_id=educational_activity_id,
                                                body=body)


def people_user_profile_update_email(client,
                                     user_id,
                                     item_email_id,
                                     id_=None,
                                     allowed_audiences=None,
                                     created_date_time=None,
                                     inference=None,
                                     last_modified_date_time=None,
                                     source=None,
                                     application=None,
                                     device=None,
                                     user=None,
                                     microsoft_graph_identity_application=None,
                                     microsoft_graph_identity_device=None,
                                     microsoft_graph_identity_user=None,
                                     address=None,
                                     display_name=None,
                                     type_=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['address'] = address
    body['display_name'] = display_name
    body['type'] = type_
    return client.update_emails(user_id=user_id,
                                item_email_id=item_email_id,
                                body=body)


def people_user_profile_update_interest(client,
                                        user_id,
                                        person_interest_id,
                                        id_=None,
                                        allowed_audiences=None,
                                        created_date_time=None,
                                        inference=None,
                                        last_modified_date_time=None,
                                        source=None,
                                        application=None,
                                        device=None,
                                        user=None,
                                        microsoft_graph_identity_application=None,
                                        microsoft_graph_identity_device=None,
                                        microsoft_graph_identity_user=None,
                                        categories=None,
                                        collaboration_tags=None,
                                        description=None,
                                        display_name=None,
                                        web_url=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['categories'] = categories
    body['collaboration_tags'] = collaboration_tags
    body['description'] = description
    body['display_name'] = display_name
    body['web_url'] = web_url
    return client.update_interests(user_id=user_id,
                                   person_interest_id=person_interest_id,
                                   body=body)


def people_user_profile_update_language(client,
                                        user_id,
                                        language_proficiency_id,
                                        id_=None,
                                        allowed_audiences=None,
                                        created_date_time=None,
                                        inference=None,
                                        last_modified_date_time=None,
                                        source=None,
                                        application=None,
                                        device=None,
                                        user=None,
                                        microsoft_graph_identity_application=None,
                                        microsoft_graph_identity_device=None,
                                        microsoft_graph_identity_user=None,
                                        display_name=None,
                                        proficiency=None,
                                        reading=None,
                                        spoken=None,
                                        tag=None,
                                        written=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['display_name'] = display_name
    body['proficiency'] = proficiency
    body['reading'] = reading
    body['spoken'] = spoken
    body['tag'] = tag
    body['written'] = written
    return client.update_languages(user_id=user_id,
                                   language_proficiency_id=language_proficiency_id,
                                   body=body)


def people_user_profile_update_name(client,
                                    user_id,
                                    person_name_id,
                                    id_=None,
                                    allowed_audiences=None,
                                    created_date_time=None,
                                    inference=None,
                                    last_modified_date_time=None,
                                    source=None,
                                    application=None,
                                    device=None,
                                    user=None,
                                    microsoft_graph_identity_application=None,
                                    microsoft_graph_identity_device=None,
                                    microsoft_graph_identity_user=None,
                                    display_name=None,
                                    first=None,
                                    initials=None,
                                    language_tag=None,
                                    last=None,
                                    maiden=None,
                                    middle=None,
                                    nickname=None,
                                    pronunciation=None,
                                    suffix=None,
                                    title=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['display_name'] = display_name
    body['first'] = first
    body['initials'] = initials
    body['language_tag'] = language_tag
    body['last'] = last
    body['maiden'] = maiden
    body['middle'] = middle
    body['nickname'] = nickname
    body['pronunciation'] = pronunciation
    body['suffix'] = suffix
    body['title'] = title
    return client.update_names(user_id=user_id,
                               person_name_id=person_name_id,
                               body=body)


def people_user_profile_update_note(client,
                                    user_id,
                                    person_annotation_id,
                                    id_=None,
                                    allowed_audiences=None,
                                    created_date_time=None,
                                    inference=None,
                                    last_modified_date_time=None,
                                    source=None,
                                    application=None,
                                    device=None,
                                    user=None,
                                    microsoft_graph_identity_application=None,
                                    microsoft_graph_identity_device=None,
                                    microsoft_graph_identity_user=None,
                                    detail=None,
                                    display_name=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['detail'] = detail
    body['display_name'] = display_name
    return client.update_notes(user_id=user_id,
                               person_annotation_id=person_annotation_id,
                               body=body)


def people_user_profile_update_patent(client,
                                      user_id,
                                      item_patent_id,
                                      id_=None,
                                      allowed_audiences=None,
                                      created_date_time=None,
                                      inference=None,
                                      last_modified_date_time=None,
                                      source=None,
                                      application=None,
                                      device=None,
                                      user=None,
                                      microsoft_graph_identity_application=None,
                                      microsoft_graph_identity_device=None,
                                      microsoft_graph_identity_user=None,
                                      description=None,
                                      display_name=None,
                                      is_pending=None,
                                      issued_date=None,
                                      issuing_authority=None,
                                      number=None,
                                      web_url=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['description'] = description
    body['display_name'] = display_name
    body['is_pending'] = is_pending
    body['issued_date'] = issued_date
    body['issuing_authority'] = issuing_authority
    body['number'] = number
    body['web_url'] = web_url
    return client.update_patents(user_id=user_id,
                                 item_patent_id=item_patent_id,
                                 body=body)


def people_user_profile_update_phone(client,
                                     user_id,
                                     item_phone_id,
                                     id_=None,
                                     allowed_audiences=None,
                                     created_date_time=None,
                                     inference=None,
                                     last_modified_date_time=None,
                                     source=None,
                                     application=None,
                                     device=None,
                                     user=None,
                                     microsoft_graph_identity_application=None,
                                     microsoft_graph_identity_device=None,
                                     microsoft_graph_identity_user=None,
                                     display_name=None,
                                     number=None,
                                     type_=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['display_name'] = display_name
    body['number'] = number
    body['type'] = type_
    return client.update_phones(user_id=user_id,
                                item_phone_id=item_phone_id,
                                body=body)


def people_user_profile_update_position(client,
                                        user_id,
                                        work_position_id,
                                        id_=None,
                                        allowed_audiences=None,
                                        created_date_time=None,
                                        inference=None,
                                        last_modified_date_time=None,
                                        source=None,
                                        application=None,
                                        device=None,
                                        user=None,
                                        microsoft_graph_identity_application=None,
                                        microsoft_graph_identity_device=None,
                                        microsoft_graph_identity_user=None,
                                        categories=None,
                                        colleagues=None,
                                        is_current=None,
                                        manager=None,
                                        company=None,
                                        description=None,
                                        end_month_year=None,
                                        job_title=None,
                                        role=None,
                                        start_month_year=None,
                                        summary=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['categories'] = categories
    body['colleagues'] = colleagues
    body['is_current'] = is_current
    body['manager'] = manager
    body['detail'] = {}
    body['detail']['company'] = company
    body['detail']['description'] = description
    body['detail']['end_month_year'] = end_month_year
    body['detail']['job_title'] = job_title
    body['detail']['role'] = role
    body['detail']['start_month_year'] = start_month_year
    body['detail']['summary'] = summary
    return client.update_positions(user_id=user_id,
                                   work_position_id=work_position_id,
                                   body=body)


def people_user_profile_update_project(client,
                                       user_id,
                                       project_participation_id,
                                       id_=None,
                                       allowed_audiences=None,
                                       created_date_time=None,
                                       inference=None,
                                       last_modified_date_time=None,
                                       source=None,
                                       application=None,
                                       device=None,
                                       user=None,
                                       microsoft_graph_identity_application=None,
                                       microsoft_graph_identity_device=None,
                                       microsoft_graph_identity_user=None,
                                       categories=None,
                                       collaboration_tags=None,
                                       colleagues=None,
                                       display_name=None,
                                       sponsors=None,
                                       company=None,
                                       description=None,
                                       end_month_year=None,
                                       job_title=None,
                                       role=None,
                                       start_month_year=None,
                                       summary=None,
                                       address=None,
                                       department=None,
                                       microsoft_graph_company_detail_display_name=None,
                                       office_location=None,
                                       pronunciation=None,
                                       web_url=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['categories'] = categories
    body['collaboration_tags'] = collaboration_tags
    body['colleagues'] = colleagues
    body['display_name'] = display_name
    body['sponsors'] = sponsors
    body['detail'] = {}
    body['detail']['company'] = company
    body['detail']['description'] = description
    body['detail']['end_month_year'] = end_month_year
    body['detail']['job_title'] = job_title
    body['detail']['role'] = role
    body['detail']['start_month_year'] = start_month_year
    body['detail']['summary'] = summary
    body['client'] = {}
    body['client']['address'] = address
    body['client']['department'] = department
    body['client']['display_name'] = microsoft_graph_company_detail_display_name
    body['client']['office_location'] = office_location
    body['client']['pronunciation'] = pronunciation
    body['client']['web_url'] = web_url
    return client.update_projects(user_id=user_id,
                                  project_participation_id=project_participation_id,
                                  body=body)


def people_user_profile_update_publication(client,
                                           user_id,
                                           item_publication_id,
                                           id_=None,
                                           allowed_audiences=None,
                                           created_date_time=None,
                                           inference=None,
                                           last_modified_date_time=None,
                                           source=None,
                                           application=None,
                                           device=None,
                                           user=None,
                                           microsoft_graph_identity_application=None,
                                           microsoft_graph_identity_device=None,
                                           microsoft_graph_identity_user=None,
                                           description=None,
                                           display_name=None,
                                           published_date=None,
                                           publisher=None,
                                           thumbnail_url=None,
                                           web_url=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['description'] = description
    body['display_name'] = display_name
    body['published_date'] = published_date
    body['publisher'] = publisher
    body['thumbnail_url'] = thumbnail_url
    body['web_url'] = web_url
    return client.update_publications(user_id=user_id,
                                      item_publication_id=item_publication_id,
                                      body=body)


def people_user_profile_update_skill(client,
                                     user_id,
                                     skill_proficiency_id,
                                     id_=None,
                                     allowed_audiences=None,
                                     created_date_time=None,
                                     inference=None,
                                     last_modified_date_time=None,
                                     source=None,
                                     application=None,
                                     device=None,
                                     user=None,
                                     microsoft_graph_identity_application=None,
                                     microsoft_graph_identity_device=None,
                                     microsoft_graph_identity_user=None,
                                     categories=None,
                                     collaboration_tags=None,
                                     display_name=None,
                                     proficiency=None,
                                     web_url=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['categories'] = categories
    body['collaboration_tags'] = collaboration_tags
    body['display_name'] = display_name
    body['proficiency'] = proficiency
    body['web_url'] = web_url
    return client.update_skills(user_id=user_id,
                                skill_proficiency_id=skill_proficiency_id,
                                body=body)


def people_user_profile_update_web_account(client,
                                           user_id,
                                           web_account_id,
                                           id_=None,
                                           allowed_audiences=None,
                                           created_date_time=None,
                                           inference=None,
                                           last_modified_date_time=None,
                                           source=None,
                                           application=None,
                                           device=None,
                                           user=None,
                                           microsoft_graph_identity_application=None,
                                           microsoft_graph_identity_device=None,
                                           microsoft_graph_identity_user=None,
                                           description=None,
                                           service=None,
                                           status_message=None,
                                           microsoft_graph_web_account_user_id=None,
                                           web_url=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['description'] = description
    body['service'] = service
    body['status_message'] = status_message
    body['user_id'] = microsoft_graph_web_account_user_id
    body['web_url'] = web_url
    return client.update_web_accounts(user_id=user_id,
                                      web_account_id=web_account_id,
                                      body=body)


def people_user_profile_update_website(client,
                                       user_id,
                                       person_website_id,
                                       id_=None,
                                       allowed_audiences=None,
                                       created_date_time=None,
                                       inference=None,
                                       last_modified_date_time=None,
                                       source=None,
                                       application=None,
                                       device=None,
                                       user=None,
                                       microsoft_graph_identity_application=None,
                                       microsoft_graph_identity_device=None,
                                       microsoft_graph_identity_user=None,
                                       categories=None,
                                       description=None,
                                       display_name=None,
                                       web_url=None):
    body = {}
    body['id'] = id_
    body['allowed_audiences'] = allowed_audiences
    body['created_date_time'] = created_date_time
    body['inference'] = inference
    body['last_modified_date_time'] = last_modified_date_time
    body['source'] = source
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['categories'] = categories
    body['description'] = description
    body['display_name'] = display_name
    body['web_url'] = web_url
    return client.update_websites(user_id=user_id,
                                  person_website_id=person_website_id,
                                  body=body)
