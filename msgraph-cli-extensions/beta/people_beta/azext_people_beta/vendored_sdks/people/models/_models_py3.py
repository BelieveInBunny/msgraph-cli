# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._people_enums import *


class collectionofactivitystatistics(msrest.serialization.Model):
    """Collection of activityStatistics.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.microsoftgraphactivitystatistics]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphactivitystatistics]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphactivitystatistics"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofactivitystatistics, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofeducationalactivity(msrest.serialization.Model):
    """Collection of educationalActivity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.microsoftgrapheducationalactivity]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgrapheducationalactivity]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgrapheducationalactivity"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofeducationalactivity, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofitemaddress(msrest.serialization.Model):
    """Collection of itemAddress.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.microsoftgraphitemaddress]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphitemaddress]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphitemaddress"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofitemaddress, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofitememail(msrest.serialization.Model):
    """Collection of itemEmail.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.microsoftgraphitememail]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphitememail]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphitememail"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofitememail, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofitempatent(msrest.serialization.Model):
    """Collection of itemPatent.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.microsoftgraphitempatent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphitempatent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphitempatent"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofitempatent, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofitemphone(msrest.serialization.Model):
    """Collection of itemPhone.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.microsoftgraphitemphone]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphitemphone]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphitemphone"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofitemphone, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofitempublication(msrest.serialization.Model):
    """Collection of itemPublication.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.microsoftgraphitempublication]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphitempublication]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphitempublication"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofitempublication, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionoflanguageproficiency(msrest.serialization.Model):
    """Collection of languageProficiency.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.microsoftgraphlanguageproficiency]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphlanguageproficiency]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphlanguageproficiency"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionoflanguageproficiency, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofperson(msrest.serialization.Model):
    """Collection of person.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.microsoftgraphperson]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphperson]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphperson"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofperson, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpersonanniversary(msrest.serialization.Model):
    """Collection of personAnniversary.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.microsoftgraphpersonanniversary]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpersonanniversary]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpersonanniversary"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpersonanniversary, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpersonannotation(msrest.serialization.Model):
    """Collection of personAnnotation.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.microsoftgraphpersonannotation]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpersonannotation]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpersonannotation"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpersonannotation, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpersonaward(msrest.serialization.Model):
    """Collection of personAward.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.microsoftgraphpersonaward]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpersonaward]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpersonaward"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpersonaward, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpersoncertification(msrest.serialization.Model):
    """Collection of personCertification.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.microsoftgraphpersoncertification]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpersoncertification]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpersoncertification"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpersoncertification, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpersoninterest(msrest.serialization.Model):
    """Collection of personInterest.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.microsoftgraphpersoninterest]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpersoninterest]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpersoninterest"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpersoninterest, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpersonname(msrest.serialization.Model):
    """Collection of personName.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.microsoftgraphpersonname]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpersonname]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpersonname"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpersonname, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofpersonwebsite(msrest.serialization.Model):
    """Collection of personWebsite.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.microsoftgraphpersonwebsite]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphpersonwebsite]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphpersonwebsite"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofpersonwebsite, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofprojectparticipation(msrest.serialization.Model):
    """Collection of projectParticipation.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.microsoftgraphprojectparticipation]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphprojectparticipation]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphprojectparticipation"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofprojectparticipation, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofskillproficiency(msrest.serialization.Model):
    """Collection of skillProficiency.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.microsoftgraphskillproficiency]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphskillproficiency]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphskillproficiency"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofskillproficiency, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofuseraccountinformation(msrest.serialization.Model):
    """Collection of userAccountInformation.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.microsoftgraphuseraccountinformation]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphuseraccountinformation]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphuseraccountinformation"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofuseraccountinformation, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofwebaccount(msrest.serialization.Model):
    """Collection of webAccount.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.microsoftgraphwebaccount]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphwebaccount]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphwebaccount"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofwebaccount, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofworkposition(msrest.serialization.Model):
    """Collection of workPosition.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.microsoftgraphworkposition]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphworkposition]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphworkposition"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofworkposition, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class microsoftgraphentity(msrest.serialization.Model):
    """entity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        id: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphentity, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.id = id


class microsoftgraphactivitystatistics(microsoftgraphentity):
    """activityStatistics.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param activity:  Possible values include: "Email", "Meeting", "Focus", "Chat", "Call".
    :type activity: str or ~people.models.Microsoftgraphanalyticsactivitytype
    :param duration:
    :type duration: ~datetime.timedelta
    :param end_date:
    :type end_date: ~datetime.date
    :param start_date:
    :type start_date: ~datetime.date
    :param time_zone_used:
    :type time_zone_used: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'activity': {'key': 'activity', 'type': 'str'},
        'duration': {'key': 'duration', 'type': 'duration'},
        'end_date': {'key': 'endDate', 'type': 'date'},
        'start_date': {'key': 'startDate', 'type': 'date'},
        'time_zone_used': {'key': 'timeZoneUsed', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        activity: Optional[Union[str, "Microsoftgraphanalyticsactivitytype"]] = None,
        duration: Optional[datetime.timedelta] = None,
        end_date: Optional[datetime.date] = None,
        start_date: Optional[datetime.date] = None,
        time_zone_used: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphactivitystatistics, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.activity = activity
        self.duration = duration
        self.end_date = end_date
        self.start_date = start_date
        self.time_zone_used = time_zone_used


class microsoftgraphcompanydetail(msrest.serialization.Model):
    """companyDetail.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: physicalAddress.
    :type address: ~people.models.microsoftgraphphysicaladdress
    :param department:
    :type department: str
    :param display_name:
    :type display_name: str
    :param office_location:
    :type office_location: str
    :param pronunciation:
    :type pronunciation: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'microsoftgraphphysicaladdress'},
        'department': {'key': 'department', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'office_location': {'key': 'officeLocation', 'type': 'str'},
        'pronunciation': {'key': 'pronunciation', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        address: Optional["microsoftgraphphysicaladdress"] = None,
        department: Optional[str] = None,
        display_name: Optional[str] = None,
        office_location: Optional[str] = None,
        pronunciation: Optional[str] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphcompanydetail, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.address = address
        self.department = department
        self.display_name = display_name
        self.office_location = office_location
        self.pronunciation = pronunciation
        self.web_url = web_url


class microsoftgraphitemfacet(microsoftgraphentity):
    """itemFacet.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~people.models.Microsoftgraphallowedaudiences
    :param created_by: identitySet.
    :type created_by: ~people.models.microsoftgraphidentityset
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~people.models.microsoftgraphinferencedata
    :param last_modified_by: identitySet.
    :type last_modified_by: ~people.models.microsoftgraphidentityset
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~people.models.microsoftgraphpersondatasources
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphidentityset'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'microsoftgraphinferencedata'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'microsoftgraphidentityset'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'microsoftgraphpersondatasources'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        allowed_audiences: Optional[Union[str, "Microsoftgraphallowedaudiences"]] = None,
        created_by: Optional["microsoftgraphidentityset"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        inference: Optional["microsoftgraphinferencedata"] = None,
        last_modified_by: Optional["microsoftgraphidentityset"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        source: Optional["microsoftgraphpersondatasources"] = None,
        **kwargs
    ):
        super(microsoftgraphitemfacet, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.allowed_audiences = allowed_audiences
        self.created_by = created_by
        self.created_date_time = created_date_time
        self.inference = inference
        self.last_modified_by = last_modified_by
        self.last_modified_date_time = last_modified_date_time
        self.source = source


class microsoftgrapheducationalactivity(microsoftgraphitemfacet):
    """educationalActivity.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~people.models.Microsoftgraphallowedaudiences
    :param created_by: identitySet.
    :type created_by: ~people.models.microsoftgraphidentityset
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~people.models.microsoftgraphinferencedata
    :param last_modified_by: identitySet.
    :type last_modified_by: ~people.models.microsoftgraphidentityset
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~people.models.microsoftgraphpersondatasources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param completion_month_year:
    :type completion_month_year: ~datetime.date
    :param end_month_year:
    :type end_month_year: ~datetime.date
    :param institution: institutionData.
    :type institution: ~people.models.microsoftgraphinstitutiondata
    :param program: educationalActivityDetail.
    :type program: ~people.models.microsoftgrapheducationalactivitydetail
    :param start_month_year:
    :type start_month_year: ~datetime.date
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphidentityset'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'microsoftgraphinferencedata'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'microsoftgraphidentityset'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'microsoftgraphpersondatasources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'completion_month_year': {'key': 'completionMonthYear', 'type': 'date'},
        'end_month_year': {'key': 'endMonthYear', 'type': 'date'},
        'institution': {'key': 'institution', 'type': 'microsoftgraphinstitutiondata'},
        'program': {'key': 'program', 'type': 'microsoftgrapheducationalactivitydetail'},
        'start_month_year': {'key': 'startMonthYear', 'type': 'date'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "Microsoftgraphallowedaudiences"]] = None,
        created_by: Optional["microsoftgraphidentityset"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        inference: Optional["microsoftgraphinferencedata"] = None,
        last_modified_by: Optional["microsoftgraphidentityset"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        source: Optional["microsoftgraphpersondatasources"] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        completion_month_year: Optional[datetime.date] = None,
        end_month_year: Optional[datetime.date] = None,
        institution: Optional["microsoftgraphinstitutiondata"] = None,
        program: Optional["microsoftgrapheducationalactivitydetail"] = None,
        start_month_year: Optional[datetime.date] = None,
        **kwargs
    ):
        super(microsoftgrapheducationalactivity, self).__init__(id=id, allowed_audiences=allowed_audiences, created_by=created_by, created_date_time=created_date_time, inference=inference, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, source=source, **kwargs)
        self.additional_properties = additional_properties
        self.completion_month_year = completion_month_year
        self.end_month_year = end_month_year
        self.institution = institution
        self.program = program
        self.start_month_year = start_month_year


class microsoftgrapheducationalactivitydetail(msrest.serialization.Model):
    """educationalActivityDetail.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param abbreviation:
    :type abbreviation: str
    :param activities:
    :type activities: list[str]
    :param awards:
    :type awards: list[str]
    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param fields_of_study:
    :type fields_of_study: list[str]
    :param grade:
    :type grade: str
    :param notes:
    :type notes: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'abbreviation': {'key': 'abbreviation', 'type': 'str'},
        'activities': {'key': 'activities', 'type': '[str]'},
        'awards': {'key': 'awards', 'type': '[str]'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'fields_of_study': {'key': 'fieldsOfStudy', 'type': '[str]'},
        'grade': {'key': 'grade', 'type': 'str'},
        'notes': {'key': 'notes', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        abbreviation: Optional[str] = None,
        activities: Optional[List[str]] = None,
        awards: Optional[List[str]] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        fields_of_study: Optional[List[str]] = None,
        grade: Optional[str] = None,
        notes: Optional[str] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgrapheducationalactivitydetail, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.abbreviation = abbreviation
        self.activities = activities
        self.awards = awards
        self.description = description
        self.display_name = display_name
        self.fields_of_study = fields_of_study
        self.grade = grade
        self.notes = notes
        self.web_url = web_url


class microsoftgraphgeocoordinates(msrest.serialization.Model):
    """geoCoordinates.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param altitude: Optional. The altitude (height), in feet,  above sea level for the item. Read-
     only.
    :type altitude: float
    :param latitude: Optional. The latitude, in decimal, for the item. Read-only.
    :type latitude: float
    :param longitude: Optional. The longitude, in decimal, for the item. Read-only.
    :type longitude: float
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'altitude': {'key': 'altitude', 'type': 'float'},
        'latitude': {'key': 'latitude', 'type': 'float'},
        'longitude': {'key': 'longitude', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        altitude: Optional[float] = None,
        latitude: Optional[float] = None,
        longitude: Optional[float] = None,
        **kwargs
    ):
        super(microsoftgraphgeocoordinates, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.altitude = altitude
        self.latitude = latitude
        self.longitude = longitude


class microsoftgraphidentity(msrest.serialization.Model):
    """identity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The identity's display name. Note that this may not always be available or
     up to date. For example, if a user changes their display name, the API may show the new value
     in a future response, but the items associated with the user won't show up as having changed
     when using delta.
    :type display_name: str
    :param id: Unique identifier for the identity.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        display_name: Optional[str] = None,
        id: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphidentity, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.display_name = display_name
        self.id = id


class microsoftgraphidentityset(msrest.serialization.Model):
    """identitySet.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param application: identity.
    :type application: ~people.models.microsoftgraphidentity
    :param device: identity.
    :type device: ~people.models.microsoftgraphidentity
    :param user: identity.
    :type user: ~people.models.microsoftgraphidentity
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'application': {'key': 'application', 'type': 'microsoftgraphidentity'},
        'device': {'key': 'device', 'type': 'microsoftgraphidentity'},
        'user': {'key': 'user', 'type': 'microsoftgraphidentity'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        application: Optional["microsoftgraphidentity"] = None,
        device: Optional["microsoftgraphidentity"] = None,
        user: Optional["microsoftgraphidentity"] = None,
        **kwargs
    ):
        super(microsoftgraphidentityset, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.application = application
        self.device = device
        self.user = user


class microsoftgraphinferencedata(msrest.serialization.Model):
    """inferenceData.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param confidence_score:
    :type confidence_score: float
    :param user_has_verified_accuracy:
    :type user_has_verified_accuracy: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
        'user_has_verified_accuracy': {'key': 'userHasVerifiedAccuracy', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        confidence_score: Optional[float] = None,
        user_has_verified_accuracy: Optional[bool] = None,
        **kwargs
    ):
        super(microsoftgraphinferencedata, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.confidence_score = confidence_score
        self.user_has_verified_accuracy = user_has_verified_accuracy


class microsoftgraphinstitutiondata(msrest.serialization.Model):
    """institutionData.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param location: physicalAddress.
    :type location: ~people.models.microsoftgraphphysicaladdress
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'location': {'key': 'location', 'type': 'microsoftgraphphysicaladdress'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        location: Optional["microsoftgraphphysicaladdress"] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphinstitutiondata, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.description = description
        self.display_name = display_name
        self.location = location
        self.web_url = web_url


class microsoftgraphitemaddress(microsoftgraphitemfacet):
    """itemAddress.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~people.models.Microsoftgraphallowedaudiences
    :param created_by: identitySet.
    :type created_by: ~people.models.microsoftgraphidentityset
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~people.models.microsoftgraphinferencedata
    :param last_modified_by: identitySet.
    :type last_modified_by: ~people.models.microsoftgraphidentityset
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~people.models.microsoftgraphpersondatasources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param detail: physicalAddress.
    :type detail: ~people.models.microsoftgraphphysicaladdress
    :param display_name:
    :type display_name: str
    :param geo_coordinates: geoCoordinates.
    :type geo_coordinates: ~people.models.microsoftgraphgeocoordinates
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphidentityset'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'microsoftgraphinferencedata'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'microsoftgraphidentityset'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'microsoftgraphpersondatasources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'detail': {'key': 'detail', 'type': 'microsoftgraphphysicaladdress'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'geo_coordinates': {'key': 'geoCoordinates', 'type': 'microsoftgraphgeocoordinates'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "Microsoftgraphallowedaudiences"]] = None,
        created_by: Optional["microsoftgraphidentityset"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        inference: Optional["microsoftgraphinferencedata"] = None,
        last_modified_by: Optional["microsoftgraphidentityset"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        source: Optional["microsoftgraphpersondatasources"] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        detail: Optional["microsoftgraphphysicaladdress"] = None,
        display_name: Optional[str] = None,
        geo_coordinates: Optional["microsoftgraphgeocoordinates"] = None,
        **kwargs
    ):
        super(microsoftgraphitemaddress, self).__init__(id=id, allowed_audiences=allowed_audiences, created_by=created_by, created_date_time=created_date_time, inference=inference, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, source=source, **kwargs)
        self.additional_properties = additional_properties
        self.detail = detail
        self.display_name = display_name
        self.geo_coordinates = geo_coordinates


class microsoftgraphitembody(msrest.serialization.Model):
    """itemBody.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content: The content of the item.
    :type content: str
    :param content_type:  Possible values include: "text", "html".
    :type content_type: str or ~people.models.Microsoftgraphbodytype
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'content': {'key': 'content', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        content: Optional[str] = None,
        content_type: Optional[Union[str, "Microsoftgraphbodytype"]] = None,
        **kwargs
    ):
        super(microsoftgraphitembody, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.content = content
        self.content_type = content_type


class microsoftgraphitememail(microsoftgraphitemfacet):
    """itemEmail.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~people.models.Microsoftgraphallowedaudiences
    :param created_by: identitySet.
    :type created_by: ~people.models.microsoftgraphidentityset
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~people.models.microsoftgraphinferencedata
    :param last_modified_by: identitySet.
    :type last_modified_by: ~people.models.microsoftgraphidentityset
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~people.models.microsoftgraphpersondatasources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address:
    :type address: str
    :param display_name:
    :type display_name: str
    :param type:  Possible values include: "unknown", "work", "personal", "main", "other".
    :type type: str or ~people.models.Microsoftgraphemailtype
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphidentityset'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'microsoftgraphinferencedata'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'microsoftgraphidentityset'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'microsoftgraphpersondatasources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "Microsoftgraphallowedaudiences"]] = None,
        created_by: Optional["microsoftgraphidentityset"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        inference: Optional["microsoftgraphinferencedata"] = None,
        last_modified_by: Optional["microsoftgraphidentityset"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        source: Optional["microsoftgraphpersondatasources"] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        address: Optional[str] = None,
        display_name: Optional[str] = None,
        type: Optional[Union[str, "Microsoftgraphemailtype"]] = None,
        **kwargs
    ):
        super(microsoftgraphitememail, self).__init__(id=id, allowed_audiences=allowed_audiences, created_by=created_by, created_date_time=created_date_time, inference=inference, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, source=source, **kwargs)
        self.additional_properties = additional_properties
        self.address = address
        self.display_name = display_name
        self.type = type


class microsoftgraphitempatent(microsoftgraphitemfacet):
    """itemPatent.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~people.models.Microsoftgraphallowedaudiences
    :param created_by: identitySet.
    :type created_by: ~people.models.microsoftgraphidentityset
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~people.models.microsoftgraphinferencedata
    :param last_modified_by: identitySet.
    :type last_modified_by: ~people.models.microsoftgraphidentityset
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~people.models.microsoftgraphpersondatasources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param is_pending:
    :type is_pending: bool
    :param issued_date:
    :type issued_date: ~datetime.date
    :param issuing_authority:
    :type issuing_authority: str
    :param number:
    :type number: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphidentityset'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'microsoftgraphinferencedata'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'microsoftgraphidentityset'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'microsoftgraphpersondatasources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_pending': {'key': 'isPending', 'type': 'bool'},
        'issued_date': {'key': 'issuedDate', 'type': 'date'},
        'issuing_authority': {'key': 'issuingAuthority', 'type': 'str'},
        'number': {'key': 'number', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "Microsoftgraphallowedaudiences"]] = None,
        created_by: Optional["microsoftgraphidentityset"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        inference: Optional["microsoftgraphinferencedata"] = None,
        last_modified_by: Optional["microsoftgraphidentityset"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        source: Optional["microsoftgraphpersondatasources"] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        is_pending: Optional[bool] = None,
        issued_date: Optional[datetime.date] = None,
        issuing_authority: Optional[str] = None,
        number: Optional[str] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphitempatent, self).__init__(id=id, allowed_audiences=allowed_audiences, created_by=created_by, created_date_time=created_date_time, inference=inference, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, source=source, **kwargs)
        self.additional_properties = additional_properties
        self.description = description
        self.display_name = display_name
        self.is_pending = is_pending
        self.issued_date = issued_date
        self.issuing_authority = issuing_authority
        self.number = number
        self.web_url = web_url


class microsoftgraphitemphone(microsoftgraphitemfacet):
    """itemPhone.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~people.models.Microsoftgraphallowedaudiences
    :param created_by: identitySet.
    :type created_by: ~people.models.microsoftgraphidentityset
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~people.models.microsoftgraphinferencedata
    :param last_modified_by: identitySet.
    :type last_modified_by: ~people.models.microsoftgraphidentityset
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~people.models.microsoftgraphpersondatasources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    :param number:
    :type number: str
    :param type:  Possible values include: "home", "business", "mobile", "other", "assistant",
     "homeFax", "businessFax", "otherFax", "pager", "radio".
    :type type: str or ~people.models.Microsoftgraphphonetype
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphidentityset'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'microsoftgraphinferencedata'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'microsoftgraphidentityset'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'microsoftgraphpersondatasources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'number': {'key': 'number', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "Microsoftgraphallowedaudiences"]] = None,
        created_by: Optional["microsoftgraphidentityset"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        inference: Optional["microsoftgraphinferencedata"] = None,
        last_modified_by: Optional["microsoftgraphidentityset"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        source: Optional["microsoftgraphpersondatasources"] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        display_name: Optional[str] = None,
        number: Optional[str] = None,
        type: Optional[Union[str, "Microsoftgraphphonetype"]] = None,
        **kwargs
    ):
        super(microsoftgraphitemphone, self).__init__(id=id, allowed_audiences=allowed_audiences, created_by=created_by, created_date_time=created_date_time, inference=inference, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, source=source, **kwargs)
        self.additional_properties = additional_properties
        self.display_name = display_name
        self.number = number
        self.type = type


class microsoftgraphitempublication(microsoftgraphitemfacet):
    """itemPublication.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~people.models.Microsoftgraphallowedaudiences
    :param created_by: identitySet.
    :type created_by: ~people.models.microsoftgraphidentityset
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~people.models.microsoftgraphinferencedata
    :param last_modified_by: identitySet.
    :type last_modified_by: ~people.models.microsoftgraphidentityset
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~people.models.microsoftgraphpersondatasources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param published_date:
    :type published_date: ~datetime.date
    :param publisher:
    :type publisher: str
    :param thumbnail_url:
    :type thumbnail_url: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphidentityset'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'microsoftgraphinferencedata'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'microsoftgraphidentityset'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'microsoftgraphpersondatasources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'published_date': {'key': 'publishedDate', 'type': 'date'},
        'publisher': {'key': 'publisher', 'type': 'str'},
        'thumbnail_url': {'key': 'thumbnailUrl', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "Microsoftgraphallowedaudiences"]] = None,
        created_by: Optional["microsoftgraphidentityset"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        inference: Optional["microsoftgraphinferencedata"] = None,
        last_modified_by: Optional["microsoftgraphidentityset"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        source: Optional["microsoftgraphpersondatasources"] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        published_date: Optional[datetime.date] = None,
        publisher: Optional[str] = None,
        thumbnail_url: Optional[str] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphitempublication, self).__init__(id=id, allowed_audiences=allowed_audiences, created_by=created_by, created_date_time=created_date_time, inference=inference, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, source=source, **kwargs)
        self.additional_properties = additional_properties
        self.description = description
        self.display_name = display_name
        self.published_date = published_date
        self.publisher = publisher
        self.thumbnail_url = thumbnail_url
        self.web_url = web_url


class microsoftgraphlanguageproficiency(microsoftgraphitemfacet):
    """languageProficiency.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~people.models.Microsoftgraphallowedaudiences
    :param created_by: identitySet.
    :type created_by: ~people.models.microsoftgraphidentityset
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~people.models.microsoftgraphinferencedata
    :param last_modified_by: identitySet.
    :type last_modified_by: ~people.models.microsoftgraphidentityset
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~people.models.microsoftgraphpersondatasources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    :param proficiency:  Possible values include: "elementary", "conversational", "limitedWorking",
     "professionalWorking", "fullProfessional", "nativeOrBilingual", "unknownFutureValue".
    :type proficiency: str or ~people.models.Microsoftgraphlanguageproficiencylevel
    :param reading:  Possible values include: "elementary", "conversational", "limitedWorking",
     "professionalWorking", "fullProfessional", "nativeOrBilingual", "unknownFutureValue".
    :type reading: str or ~people.models.Microsoftgraphlanguageproficiencylevel
    :param spoken:  Possible values include: "elementary", "conversational", "limitedWorking",
     "professionalWorking", "fullProfessional", "nativeOrBilingual", "unknownFutureValue".
    :type spoken: str or ~people.models.Microsoftgraphlanguageproficiencylevel
    :param tag:
    :type tag: str
    :param written:  Possible values include: "elementary", "conversational", "limitedWorking",
     "professionalWorking", "fullProfessional", "nativeOrBilingual", "unknownFutureValue".
    :type written: str or ~people.models.Microsoftgraphlanguageproficiencylevel
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphidentityset'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'microsoftgraphinferencedata'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'microsoftgraphidentityset'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'microsoftgraphpersondatasources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'proficiency': {'key': 'proficiency', 'type': 'str'},
        'reading': {'key': 'reading', 'type': 'str'},
        'spoken': {'key': 'spoken', 'type': 'str'},
        'tag': {'key': 'tag', 'type': 'str'},
        'written': {'key': 'written', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "Microsoftgraphallowedaudiences"]] = None,
        created_by: Optional["microsoftgraphidentityset"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        inference: Optional["microsoftgraphinferencedata"] = None,
        last_modified_by: Optional["microsoftgraphidentityset"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        source: Optional["microsoftgraphpersondatasources"] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        display_name: Optional[str] = None,
        proficiency: Optional[Union[str, "Microsoftgraphlanguageproficiencylevel"]] = None,
        reading: Optional[Union[str, "Microsoftgraphlanguageproficiencylevel"]] = None,
        spoken: Optional[Union[str, "Microsoftgraphlanguageproficiencylevel"]] = None,
        tag: Optional[str] = None,
        written: Optional[Union[str, "Microsoftgraphlanguageproficiencylevel"]] = None,
        **kwargs
    ):
        super(microsoftgraphlanguageproficiency, self).__init__(id=id, allowed_audiences=allowed_audiences, created_by=created_by, created_date_time=created_date_time, inference=inference, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, source=source, **kwargs)
        self.additional_properties = additional_properties
        self.display_name = display_name
        self.proficiency = proficiency
        self.reading = reading
        self.spoken = spoken
        self.tag = tag
        self.written = written


class microsoftgraphlocaleinfo(msrest.serialization.Model):
    """localeInfo.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: A name representing the user's locale in natural language, for example,
     'English (United States)'.
    :type display_name: str
    :param locale: A locale representation for the user, which includes the user's preferred
     language and country/region. For example, 'en-us'. The language component follows 2-letter
     codes as defined in ISO 639-1, and the country component follows 2-letter codes as defined in
     ISO 3166-1 alpha-2.
    :type locale: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'locale': {'key': 'locale', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        display_name: Optional[str] = None,
        locale: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphlocaleinfo, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.display_name = display_name
        self.locale = locale


class microsoftgraphlocation(msrest.serialization.Model):
    """location.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: physicalAddress.
    :type address: ~people.models.microsoftgraphphysicaladdress
    :param coordinates: outlookGeoCoordinates.
    :type coordinates: ~people.models.microsoftgraphoutlookgeocoordinates
    :param display_name: The name associated with the location.
    :type display_name: str
    :param location_email_address: Optional email address of the location.
    :type location_email_address: str
    :param location_type:  Possible values include: "default", "conferenceRoom", "homeAddress",
     "businessAddress", "geoCoordinates", "streetAddress", "hotel", "restaurant", "localBusiness",
     "postalAddress".
    :type location_type: str or ~people.models.Microsoftgraphlocationtype
    :param location_uri: Optional URI representing the location.
    :type location_uri: str
    :param unique_id: For internal use only.
    :type unique_id: str
    :param unique_id_type:  Possible values include: "unknown", "locationStore", "directory",
     "private", "bing".
    :type unique_id_type: str or ~people.models.Microsoftgraphlocationuniqueidtype
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'microsoftgraphphysicaladdress'},
        'coordinates': {'key': 'coordinates', 'type': 'microsoftgraphoutlookgeocoordinates'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'location_email_address': {'key': 'locationEmailAddress', 'type': 'str'},
        'location_type': {'key': 'locationType', 'type': 'str'},
        'location_uri': {'key': 'locationUri', 'type': 'str'},
        'unique_id': {'key': 'uniqueId', 'type': 'str'},
        'unique_id_type': {'key': 'uniqueIdType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        address: Optional["microsoftgraphphysicaladdress"] = None,
        coordinates: Optional["microsoftgraphoutlookgeocoordinates"] = None,
        display_name: Optional[str] = None,
        location_email_address: Optional[str] = None,
        location_type: Optional[Union[str, "Microsoftgraphlocationtype"]] = None,
        location_uri: Optional[str] = None,
        unique_id: Optional[str] = None,
        unique_id_type: Optional[Union[str, "Microsoftgraphlocationuniqueidtype"]] = None,
        **kwargs
    ):
        super(microsoftgraphlocation, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.address = address
        self.coordinates = coordinates
        self.display_name = display_name
        self.location_email_address = location_email_address
        self.location_type = location_type
        self.location_uri = location_uri
        self.unique_id = unique_id
        self.unique_id_type = unique_id_type


class microsoftgraphoutlookgeocoordinates(msrest.serialization.Model):
    """outlookGeoCoordinates.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param accuracy: The accuracy of the latitude and longitude. As an example, the accuracy can be
     measured in meters, such as the latitude and longitude are accurate to within 50 meters.
    :type accuracy: float
    :param altitude: The altitude of the location.
    :type altitude: float
    :param altitude_accuracy: The accuracy of the altitude.
    :type altitude_accuracy: float
    :param latitude: The latitude of the location.
    :type latitude: float
    :param longitude: The longitude of the location.
    :type longitude: float
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'accuracy': {'key': 'accuracy', 'type': 'float'},
        'altitude': {'key': 'altitude', 'type': 'float'},
        'altitude_accuracy': {'key': 'altitudeAccuracy', 'type': 'float'},
        'latitude': {'key': 'latitude', 'type': 'float'},
        'longitude': {'key': 'longitude', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        accuracy: Optional[float] = None,
        altitude: Optional[float] = None,
        altitude_accuracy: Optional[float] = None,
        latitude: Optional[float] = None,
        longitude: Optional[float] = None,
        **kwargs
    ):
        super(microsoftgraphoutlookgeocoordinates, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.accuracy = accuracy
        self.altitude = altitude
        self.altitude_accuracy = altitude_accuracy
        self.latitude = latitude
        self.longitude = longitude


class microsoftgraphperson(microsoftgraphentity):
    """person.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param birthday: The person's birthday.
    :type birthday: str
    :param company_name: The name of the person's company.
    :type company_name: str
    :param department: The person's department.
    :type department: str
    :param display_name: The person's display name.
    :type display_name: str
    :param email_addresses:
    :type email_addresses: list[~people.models.microsoftgraphrankedemailaddress]
    :param given_name: The person's given name.
    :type given_name: str
    :param is_favorite: true if the user has flagged this person as a favorite.
    :type is_favorite: bool
    :param mailbox_type:
    :type mailbox_type: str
    :param office_location: The location of the person's office.
    :type office_location: str
    :param person_notes: Free-form notes that the user has taken about this person.
    :type person_notes: str
    :param person_type: The type of person.
    :type person_type: str
    :param phones: The person's phone numbers.
    :type phones: list[~people.models.microsoftgraphphone]
    :param postal_addresses: The person's addresses.
    :type postal_addresses: list[~people.models.microsoftgraphlocation]
    :param profession: The person's profession.
    :type profession: str
    :param sources:
    :type sources: list[~people.models.microsoftgraphpersondatasource]
    :param surname: The person's surname.
    :type surname: str
    :param title:
    :type title: str
    :param user_principal_name: The user principal name (UPN) of the person. The UPN is an
     Internet-style login name for the person based on the Internet standard RFC 822. By convention,
     this should map to the person's email name. The general format is alias@domain.
    :type user_principal_name: str
    :param websites: The person's websites.
    :type websites: list[~people.models.microsoftgraphwebsite]
    :param yomi_company: The phonetic Japanese name of the person's company.
    :type yomi_company: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'birthday': {'key': 'birthday', 'type': 'str'},
        'company_name': {'key': 'companyName', 'type': 'str'},
        'department': {'key': 'department', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'email_addresses': {'key': 'emailAddresses', 'type': '[microsoftgraphrankedemailaddress]'},
        'given_name': {'key': 'givenName', 'type': 'str'},
        'is_favorite': {'key': 'isFavorite', 'type': 'bool'},
        'mailbox_type': {'key': 'mailboxType', 'type': 'str'},
        'office_location': {'key': 'officeLocation', 'type': 'str'},
        'person_notes': {'key': 'personNotes', 'type': 'str'},
        'person_type': {'key': 'personType', 'type': 'str'},
        'phones': {'key': 'phones', 'type': '[microsoftgraphphone]'},
        'postal_addresses': {'key': 'postalAddresses', 'type': '[microsoftgraphlocation]'},
        'profession': {'key': 'profession', 'type': 'str'},
        'sources': {'key': 'sources', 'type': '[microsoftgraphpersondatasource]'},
        'surname': {'key': 'surname', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'websites': {'key': 'websites', 'type': '[microsoftgraphwebsite]'},
        'yomi_company': {'key': 'yomiCompany', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        birthday: Optional[str] = None,
        company_name: Optional[str] = None,
        department: Optional[str] = None,
        display_name: Optional[str] = None,
        email_addresses: Optional[List["microsoftgraphrankedemailaddress"]] = None,
        given_name: Optional[str] = None,
        is_favorite: Optional[bool] = None,
        mailbox_type: Optional[str] = None,
        office_location: Optional[str] = None,
        person_notes: Optional[str] = None,
        person_type: Optional[str] = None,
        phones: Optional[List["microsoftgraphphone"]] = None,
        postal_addresses: Optional[List["microsoftgraphlocation"]] = None,
        profession: Optional[str] = None,
        sources: Optional[List["microsoftgraphpersondatasource"]] = None,
        surname: Optional[str] = None,
        title: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        websites: Optional[List["microsoftgraphwebsite"]] = None,
        yomi_company: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphperson, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.birthday = birthday
        self.company_name = company_name
        self.department = department
        self.display_name = display_name
        self.email_addresses = email_addresses
        self.given_name = given_name
        self.is_favorite = is_favorite
        self.mailbox_type = mailbox_type
        self.office_location = office_location
        self.person_notes = person_notes
        self.person_type = person_type
        self.phones = phones
        self.postal_addresses = postal_addresses
        self.profession = profession
        self.sources = sources
        self.surname = surname
        self.title = title
        self.user_principal_name = user_principal_name
        self.websites = websites
        self.yomi_company = yomi_company


class microsoftgraphpersonanniversary(microsoftgraphitemfacet):
    """personAnniversary.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~people.models.Microsoftgraphallowedaudiences
    :param created_by: identitySet.
    :type created_by: ~people.models.microsoftgraphidentityset
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~people.models.microsoftgraphinferencedata
    :param last_modified_by: identitySet.
    :type last_modified_by: ~people.models.microsoftgraphidentityset
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~people.models.microsoftgraphpersondatasources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param date:
    :type date: ~datetime.date
    :param type:  Possible values include: "birthday", "wedding", "unknownFutureValue".
    :type type: str or ~people.models.Microsoftgraphanniversarytype
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphidentityset'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'microsoftgraphinferencedata'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'microsoftgraphidentityset'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'microsoftgraphpersondatasources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'date': {'key': 'date', 'type': 'date'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "Microsoftgraphallowedaudiences"]] = None,
        created_by: Optional["microsoftgraphidentityset"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        inference: Optional["microsoftgraphinferencedata"] = None,
        last_modified_by: Optional["microsoftgraphidentityset"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        source: Optional["microsoftgraphpersondatasources"] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        date: Optional[datetime.date] = None,
        type: Optional[Union[str, "Microsoftgraphanniversarytype"]] = None,
        **kwargs
    ):
        super(microsoftgraphpersonanniversary, self).__init__(id=id, allowed_audiences=allowed_audiences, created_by=created_by, created_date_time=created_date_time, inference=inference, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, source=source, **kwargs)
        self.additional_properties = additional_properties
        self.date = date
        self.type = type


class microsoftgraphpersonannotation(microsoftgraphitemfacet):
    """personAnnotation.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~people.models.Microsoftgraphallowedaudiences
    :param created_by: identitySet.
    :type created_by: ~people.models.microsoftgraphidentityset
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~people.models.microsoftgraphinferencedata
    :param last_modified_by: identitySet.
    :type last_modified_by: ~people.models.microsoftgraphidentityset
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~people.models.microsoftgraphpersondatasources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param detail: itemBody.
    :type detail: ~people.models.microsoftgraphitembody
    :param display_name:
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphidentityset'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'microsoftgraphinferencedata'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'microsoftgraphidentityset'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'microsoftgraphpersondatasources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'detail': {'key': 'detail', 'type': 'microsoftgraphitembody'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "Microsoftgraphallowedaudiences"]] = None,
        created_by: Optional["microsoftgraphidentityset"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        inference: Optional["microsoftgraphinferencedata"] = None,
        last_modified_by: Optional["microsoftgraphidentityset"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        source: Optional["microsoftgraphpersondatasources"] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        detail: Optional["microsoftgraphitembody"] = None,
        display_name: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphpersonannotation, self).__init__(id=id, allowed_audiences=allowed_audiences, created_by=created_by, created_date_time=created_date_time, inference=inference, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, source=source, **kwargs)
        self.additional_properties = additional_properties
        self.detail = detail
        self.display_name = display_name


class microsoftgraphpersonaward(microsoftgraphitemfacet):
    """personAward.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~people.models.Microsoftgraphallowedaudiences
    :param created_by: identitySet.
    :type created_by: ~people.models.microsoftgraphidentityset
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~people.models.microsoftgraphinferencedata
    :param last_modified_by: identitySet.
    :type last_modified_by: ~people.models.microsoftgraphidentityset
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~people.models.microsoftgraphpersondatasources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param issued_date:
    :type issued_date: ~datetime.date
    :param issuing_authority:
    :type issuing_authority: str
    :param thumbnail_url:
    :type thumbnail_url: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphidentityset'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'microsoftgraphinferencedata'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'microsoftgraphidentityset'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'microsoftgraphpersondatasources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'issued_date': {'key': 'issuedDate', 'type': 'date'},
        'issuing_authority': {'key': 'issuingAuthority', 'type': 'str'},
        'thumbnail_url': {'key': 'thumbnailUrl', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "Microsoftgraphallowedaudiences"]] = None,
        created_by: Optional["microsoftgraphidentityset"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        inference: Optional["microsoftgraphinferencedata"] = None,
        last_modified_by: Optional["microsoftgraphidentityset"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        source: Optional["microsoftgraphpersondatasources"] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        issued_date: Optional[datetime.date] = None,
        issuing_authority: Optional[str] = None,
        thumbnail_url: Optional[str] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphpersonaward, self).__init__(id=id, allowed_audiences=allowed_audiences, created_by=created_by, created_date_time=created_date_time, inference=inference, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, source=source, **kwargs)
        self.additional_properties = additional_properties
        self.description = description
        self.display_name = display_name
        self.issued_date = issued_date
        self.issuing_authority = issuing_authority
        self.thumbnail_url = thumbnail_url
        self.web_url = web_url


class microsoftgraphpersoncertification(microsoftgraphitemfacet):
    """personCertification.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~people.models.Microsoftgraphallowedaudiences
    :param created_by: identitySet.
    :type created_by: ~people.models.microsoftgraphidentityset
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~people.models.microsoftgraphinferencedata
    :param last_modified_by: identitySet.
    :type last_modified_by: ~people.models.microsoftgraphidentityset
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~people.models.microsoftgraphpersondatasources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param certification_id:
    :type certification_id: str
    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param end_date:
    :type end_date: ~datetime.date
    :param issued_date:
    :type issued_date: ~datetime.date
    :param issuing_authority:
    :type issuing_authority: str
    :param issuing_company:
    :type issuing_company: str
    :param start_date:
    :type start_date: ~datetime.date
    :param thumbnail_url:
    :type thumbnail_url: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphidentityset'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'microsoftgraphinferencedata'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'microsoftgraphidentityset'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'microsoftgraphpersondatasources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'certification_id': {'key': 'certificationId', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'end_date': {'key': 'endDate', 'type': 'date'},
        'issued_date': {'key': 'issuedDate', 'type': 'date'},
        'issuing_authority': {'key': 'issuingAuthority', 'type': 'str'},
        'issuing_company': {'key': 'issuingCompany', 'type': 'str'},
        'start_date': {'key': 'startDate', 'type': 'date'},
        'thumbnail_url': {'key': 'thumbnailUrl', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "Microsoftgraphallowedaudiences"]] = None,
        created_by: Optional["microsoftgraphidentityset"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        inference: Optional["microsoftgraphinferencedata"] = None,
        last_modified_by: Optional["microsoftgraphidentityset"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        source: Optional["microsoftgraphpersondatasources"] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        certification_id: Optional[str] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        end_date: Optional[datetime.date] = None,
        issued_date: Optional[datetime.date] = None,
        issuing_authority: Optional[str] = None,
        issuing_company: Optional[str] = None,
        start_date: Optional[datetime.date] = None,
        thumbnail_url: Optional[str] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphpersoncertification, self).__init__(id=id, allowed_audiences=allowed_audiences, created_by=created_by, created_date_time=created_date_time, inference=inference, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, source=source, **kwargs)
        self.additional_properties = additional_properties
        self.certification_id = certification_id
        self.description = description
        self.display_name = display_name
        self.end_date = end_date
        self.issued_date = issued_date
        self.issuing_authority = issuing_authority
        self.issuing_company = issuing_company
        self.start_date = start_date
        self.thumbnail_url = thumbnail_url
        self.web_url = web_url


class microsoftgraphpersondatasource(msrest.serialization.Model):
    """personDataSource.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type:
    :type type: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        type: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphpersondatasource, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.type = type


class microsoftgraphpersondatasources(msrest.serialization.Model):
    """personDataSources.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type:
    :type type: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        type: Optional[List[str]] = None,
        **kwargs
    ):
        super(microsoftgraphpersondatasources, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.type = type


class microsoftgraphpersoninterest(microsoftgraphitemfacet):
    """personInterest.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~people.models.Microsoftgraphallowedaudiences
    :param created_by: identitySet.
    :type created_by: ~people.models.microsoftgraphidentityset
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~people.models.microsoftgraphinferencedata
    :param last_modified_by: identitySet.
    :type last_modified_by: ~people.models.microsoftgraphidentityset
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~people.models.microsoftgraphpersondatasources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param categories:
    :type categories: list[str]
    :param collaboration_tags:
    :type collaboration_tags: list[str]
    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphidentityset'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'microsoftgraphinferencedata'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'microsoftgraphidentityset'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'microsoftgraphpersondatasources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'collaboration_tags': {'key': 'collaborationTags', 'type': '[str]'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "Microsoftgraphallowedaudiences"]] = None,
        created_by: Optional["microsoftgraphidentityset"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        inference: Optional["microsoftgraphinferencedata"] = None,
        last_modified_by: Optional["microsoftgraphidentityset"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        source: Optional["microsoftgraphpersondatasources"] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        categories: Optional[List[str]] = None,
        collaboration_tags: Optional[List[str]] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphpersoninterest, self).__init__(id=id, allowed_audiences=allowed_audiences, created_by=created_by, created_date_time=created_date_time, inference=inference, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, source=source, **kwargs)
        self.additional_properties = additional_properties
        self.categories = categories
        self.collaboration_tags = collaboration_tags
        self.description = description
        self.display_name = display_name
        self.web_url = web_url


class microsoftgraphpersonname(microsoftgraphitemfacet):
    """personName.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~people.models.Microsoftgraphallowedaudiences
    :param created_by: identitySet.
    :type created_by: ~people.models.microsoftgraphidentityset
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~people.models.microsoftgraphinferencedata
    :param last_modified_by: identitySet.
    :type last_modified_by: ~people.models.microsoftgraphidentityset
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~people.models.microsoftgraphpersondatasources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    :param first:
    :type first: str
    :param initials:
    :type initials: str
    :param language_tag:
    :type language_tag: str
    :param last:
    :type last: str
    :param maiden:
    :type maiden: str
    :param middle:
    :type middle: str
    :param nickname:
    :type nickname: str
    :param pronunciation: yomiPersonName.
    :type pronunciation: ~people.models.microsoftgraphyomipersonname
    :param suffix:
    :type suffix: str
    :param title:
    :type title: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphidentityset'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'microsoftgraphinferencedata'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'microsoftgraphidentityset'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'microsoftgraphpersondatasources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'first': {'key': 'first', 'type': 'str'},
        'initials': {'key': 'initials', 'type': 'str'},
        'language_tag': {'key': 'languageTag', 'type': 'str'},
        'last': {'key': 'last', 'type': 'str'},
        'maiden': {'key': 'maiden', 'type': 'str'},
        'middle': {'key': 'middle', 'type': 'str'},
        'nickname': {'key': 'nickname', 'type': 'str'},
        'pronunciation': {'key': 'pronunciation', 'type': 'microsoftgraphyomipersonname'},
        'suffix': {'key': 'suffix', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "Microsoftgraphallowedaudiences"]] = None,
        created_by: Optional["microsoftgraphidentityset"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        inference: Optional["microsoftgraphinferencedata"] = None,
        last_modified_by: Optional["microsoftgraphidentityset"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        source: Optional["microsoftgraphpersondatasources"] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        display_name: Optional[str] = None,
        first: Optional[str] = None,
        initials: Optional[str] = None,
        language_tag: Optional[str] = None,
        last: Optional[str] = None,
        maiden: Optional[str] = None,
        middle: Optional[str] = None,
        nickname: Optional[str] = None,
        pronunciation: Optional["microsoftgraphyomipersonname"] = None,
        suffix: Optional[str] = None,
        title: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphpersonname, self).__init__(id=id, allowed_audiences=allowed_audiences, created_by=created_by, created_date_time=created_date_time, inference=inference, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, source=source, **kwargs)
        self.additional_properties = additional_properties
        self.display_name = display_name
        self.first = first
        self.initials = initials
        self.language_tag = language_tag
        self.last = last
        self.maiden = maiden
        self.middle = middle
        self.nickname = nickname
        self.pronunciation = pronunciation
        self.suffix = suffix
        self.title = title


class microsoftgraphpersonwebsite(microsoftgraphitemfacet):
    """personWebsite.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~people.models.Microsoftgraphallowedaudiences
    :param created_by: identitySet.
    :type created_by: ~people.models.microsoftgraphidentityset
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~people.models.microsoftgraphinferencedata
    :param last_modified_by: identitySet.
    :type last_modified_by: ~people.models.microsoftgraphidentityset
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~people.models.microsoftgraphpersondatasources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param categories:
    :type categories: list[str]
    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphidentityset'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'microsoftgraphinferencedata'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'microsoftgraphidentityset'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'microsoftgraphpersondatasources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "Microsoftgraphallowedaudiences"]] = None,
        created_by: Optional["microsoftgraphidentityset"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        inference: Optional["microsoftgraphinferencedata"] = None,
        last_modified_by: Optional["microsoftgraphidentityset"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        source: Optional["microsoftgraphpersondatasources"] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        categories: Optional[List[str]] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphpersonwebsite, self).__init__(id=id, allowed_audiences=allowed_audiences, created_by=created_by, created_date_time=created_date_time, inference=inference, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, source=source, **kwargs)
        self.additional_properties = additional_properties
        self.categories = categories
        self.description = description
        self.display_name = display_name
        self.web_url = web_url


class microsoftgraphphone(msrest.serialization.Model):
    """phone.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param number: The phone number.
    :type number: str
    :param type:  Possible values include: "home", "business", "mobile", "other", "assistant",
     "homeFax", "businessFax", "otherFax", "pager", "radio".
    :type type: str or ~people.models.Microsoftgraphphonetype
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'number': {'key': 'number', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        number: Optional[str] = None,
        type: Optional[Union[str, "Microsoftgraphphonetype"]] = None,
        **kwargs
    ):
        super(microsoftgraphphone, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.number = number
        self.type = type


class microsoftgraphphysicaladdress(msrest.serialization.Model):
    """physicalAddress.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param city: The city.
    :type city: str
    :param country_or_region: The country or region. It's a free-format string value, for example,
     'United States'.
    :type country_or_region: str
    :param postal_code: The postal code.
    :type postal_code: str
    :param post_office_box:
    :type post_office_box: str
    :param state: The state.
    :type state: str
    :param street: The street.
    :type street: str
    :param type:  Possible values include: "unknown", "home", "business", "other".
    :type type: str or ~people.models.Microsoftgraphphysicaladdresstype
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'city': {'key': 'city', 'type': 'str'},
        'country_or_region': {'key': 'countryOrRegion', 'type': 'str'},
        'postal_code': {'key': 'postalCode', 'type': 'str'},
        'post_office_box': {'key': 'postOfficeBox', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'street': {'key': 'street', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        city: Optional[str] = None,
        country_or_region: Optional[str] = None,
        postal_code: Optional[str] = None,
        post_office_box: Optional[str] = None,
        state: Optional[str] = None,
        street: Optional[str] = None,
        type: Optional[Union[str, "Microsoftgraphphysicaladdresstype"]] = None,
        **kwargs
    ):
        super(microsoftgraphphysicaladdress, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.city = city
        self.country_or_region = country_or_region
        self.postal_code = postal_code
        self.post_office_box = post_office_box
        self.state = state
        self.street = street
        self.type = type


class microsoftgraphpositiondetail(msrest.serialization.Model):
    """positionDetail.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param company: companyDetail.
    :type company: ~people.models.microsoftgraphcompanydetail
    :param description:
    :type description: str
    :param end_month_year:
    :type end_month_year: ~datetime.date
    :param job_title:
    :type job_title: str
    :param role:
    :type role: str
    :param start_month_year:
    :type start_month_year: ~datetime.date
    :param summary:
    :type summary: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'company': {'key': 'company', 'type': 'microsoftgraphcompanydetail'},
        'description': {'key': 'description', 'type': 'str'},
        'end_month_year': {'key': 'endMonthYear', 'type': 'date'},
        'job_title': {'key': 'jobTitle', 'type': 'str'},
        'role': {'key': 'role', 'type': 'str'},
        'start_month_year': {'key': 'startMonthYear', 'type': 'date'},
        'summary': {'key': 'summary', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        company: Optional["microsoftgraphcompanydetail"] = None,
        description: Optional[str] = None,
        end_month_year: Optional[datetime.date] = None,
        job_title: Optional[str] = None,
        role: Optional[str] = None,
        start_month_year: Optional[datetime.date] = None,
        summary: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphpositiondetail, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.company = company
        self.description = description
        self.end_month_year = end_month_year
        self.job_title = job_title
        self.role = role
        self.start_month_year = start_month_year
        self.summary = summary


class microsoftgraphprofile(microsoftgraphentity):
    """profile.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param account:
    :type account: list[~people.models.microsoftgraphuseraccountinformation]
    :param addresses:
    :type addresses: list[~people.models.microsoftgraphitemaddress]
    :param anniversaries:
    :type anniversaries: list[~people.models.microsoftgraphpersonanniversary]
    :param awards:
    :type awards: list[~people.models.microsoftgraphpersonaward]
    :param certifications:
    :type certifications: list[~people.models.microsoftgraphpersoncertification]
    :param educational_activities:
    :type educational_activities: list[~people.models.microsoftgrapheducationalactivity]
    :param emails:
    :type emails: list[~people.models.microsoftgraphitememail]
    :param interests:
    :type interests: list[~people.models.microsoftgraphpersoninterest]
    :param languages:
    :type languages: list[~people.models.microsoftgraphlanguageproficiency]
    :param names:
    :type names: list[~people.models.microsoftgraphpersonname]
    :param notes:
    :type notes: list[~people.models.microsoftgraphpersonannotation]
    :param patents:
    :type patents: list[~people.models.microsoftgraphitempatent]
    :param phones:
    :type phones: list[~people.models.microsoftgraphitemphone]
    :param positions:
    :type positions: list[~people.models.microsoftgraphworkposition]
    :param projects:
    :type projects: list[~people.models.microsoftgraphprojectparticipation]
    :param publications:
    :type publications: list[~people.models.microsoftgraphitempublication]
    :param skills:
    :type skills: list[~people.models.microsoftgraphskillproficiency]
    :param web_accounts:
    :type web_accounts: list[~people.models.microsoftgraphwebaccount]
    :param websites:
    :type websites: list[~people.models.microsoftgraphpersonwebsite]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'account': {'key': 'account', 'type': '[microsoftgraphuseraccountinformation]'},
        'addresses': {'key': 'addresses', 'type': '[microsoftgraphitemaddress]'},
        'anniversaries': {'key': 'anniversaries', 'type': '[microsoftgraphpersonanniversary]'},
        'awards': {'key': 'awards', 'type': '[microsoftgraphpersonaward]'},
        'certifications': {'key': 'certifications', 'type': '[microsoftgraphpersoncertification]'},
        'educational_activities': {'key': 'educationalActivities', 'type': '[microsoftgrapheducationalactivity]'},
        'emails': {'key': 'emails', 'type': '[microsoftgraphitememail]'},
        'interests': {'key': 'interests', 'type': '[microsoftgraphpersoninterest]'},
        'languages': {'key': 'languages', 'type': '[microsoftgraphlanguageproficiency]'},
        'names': {'key': 'names', 'type': '[microsoftgraphpersonname]'},
        'notes': {'key': 'notes', 'type': '[microsoftgraphpersonannotation]'},
        'patents': {'key': 'patents', 'type': '[microsoftgraphitempatent]'},
        'phones': {'key': 'phones', 'type': '[microsoftgraphitemphone]'},
        'positions': {'key': 'positions', 'type': '[microsoftgraphworkposition]'},
        'projects': {'key': 'projects', 'type': '[microsoftgraphprojectparticipation]'},
        'publications': {'key': 'publications', 'type': '[microsoftgraphitempublication]'},
        'skills': {'key': 'skills', 'type': '[microsoftgraphskillproficiency]'},
        'web_accounts': {'key': 'webAccounts', 'type': '[microsoftgraphwebaccount]'},
        'websites': {'key': 'websites', 'type': '[microsoftgraphpersonwebsite]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        account: Optional[List["microsoftgraphuseraccountinformation"]] = None,
        addresses: Optional[List["microsoftgraphitemaddress"]] = None,
        anniversaries: Optional[List["microsoftgraphpersonanniversary"]] = None,
        awards: Optional[List["microsoftgraphpersonaward"]] = None,
        certifications: Optional[List["microsoftgraphpersoncertification"]] = None,
        educational_activities: Optional[List["microsoftgrapheducationalactivity"]] = None,
        emails: Optional[List["microsoftgraphitememail"]] = None,
        interests: Optional[List["microsoftgraphpersoninterest"]] = None,
        languages: Optional[List["microsoftgraphlanguageproficiency"]] = None,
        names: Optional[List["microsoftgraphpersonname"]] = None,
        notes: Optional[List["microsoftgraphpersonannotation"]] = None,
        patents: Optional[List["microsoftgraphitempatent"]] = None,
        phones: Optional[List["microsoftgraphitemphone"]] = None,
        positions: Optional[List["microsoftgraphworkposition"]] = None,
        projects: Optional[List["microsoftgraphprojectparticipation"]] = None,
        publications: Optional[List["microsoftgraphitempublication"]] = None,
        skills: Optional[List["microsoftgraphskillproficiency"]] = None,
        web_accounts: Optional[List["microsoftgraphwebaccount"]] = None,
        websites: Optional[List["microsoftgraphpersonwebsite"]] = None,
        **kwargs
    ):
        super(microsoftgraphprofile, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.account = account
        self.addresses = addresses
        self.anniversaries = anniversaries
        self.awards = awards
        self.certifications = certifications
        self.educational_activities = educational_activities
        self.emails = emails
        self.interests = interests
        self.languages = languages
        self.names = names
        self.notes = notes
        self.patents = patents
        self.phones = phones
        self.positions = positions
        self.projects = projects
        self.publications = publications
        self.skills = skills
        self.web_accounts = web_accounts
        self.websites = websites


class microsoftgraphprojectparticipation(microsoftgraphitemfacet):
    """projectParticipation.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~people.models.Microsoftgraphallowedaudiences
    :param created_by: identitySet.
    :type created_by: ~people.models.microsoftgraphidentityset
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~people.models.microsoftgraphinferencedata
    :param last_modified_by: identitySet.
    :type last_modified_by: ~people.models.microsoftgraphidentityset
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~people.models.microsoftgraphpersondatasources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param categories:
    :type categories: list[str]
    :param client: companyDetail.
    :type client: ~people.models.microsoftgraphcompanydetail
    :param collaboration_tags:
    :type collaboration_tags: list[str]
    :param colleagues:
    :type colleagues: list[~people.models.microsoftgraphrelatedperson]
    :param detail: positionDetail.
    :type detail: ~people.models.microsoftgraphpositiondetail
    :param display_name:
    :type display_name: str
    :param sponsors:
    :type sponsors: list[~people.models.microsoftgraphrelatedperson]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphidentityset'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'microsoftgraphinferencedata'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'microsoftgraphidentityset'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'microsoftgraphpersondatasources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'client': {'key': 'client', 'type': 'microsoftgraphcompanydetail'},
        'collaboration_tags': {'key': 'collaborationTags', 'type': '[str]'},
        'colleagues': {'key': 'colleagues', 'type': '[microsoftgraphrelatedperson]'},
        'detail': {'key': 'detail', 'type': 'microsoftgraphpositiondetail'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'sponsors': {'key': 'sponsors', 'type': '[microsoftgraphrelatedperson]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "Microsoftgraphallowedaudiences"]] = None,
        created_by: Optional["microsoftgraphidentityset"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        inference: Optional["microsoftgraphinferencedata"] = None,
        last_modified_by: Optional["microsoftgraphidentityset"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        source: Optional["microsoftgraphpersondatasources"] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        categories: Optional[List[str]] = None,
        client: Optional["microsoftgraphcompanydetail"] = None,
        collaboration_tags: Optional[List[str]] = None,
        colleagues: Optional[List["microsoftgraphrelatedperson"]] = None,
        detail: Optional["microsoftgraphpositiondetail"] = None,
        display_name: Optional[str] = None,
        sponsors: Optional[List["microsoftgraphrelatedperson"]] = None,
        **kwargs
    ):
        super(microsoftgraphprojectparticipation, self).__init__(id=id, allowed_audiences=allowed_audiences, created_by=created_by, created_date_time=created_date_time, inference=inference, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, source=source, **kwargs)
        self.additional_properties = additional_properties
        self.categories = categories
        self.client = client
        self.collaboration_tags = collaboration_tags
        self.colleagues = colleagues
        self.detail = detail
        self.display_name = display_name
        self.sponsors = sponsors


class microsoftgraphrankedemailaddress(msrest.serialization.Model):
    """rankedEmailAddress.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address:
    :type address: str
    :param rank:
    :type rank: float
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'str'},
        'rank': {'key': 'rank', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        address: Optional[str] = None,
        rank: Optional[float] = None,
        **kwargs
    ):
        super(microsoftgraphrankedemailaddress, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.address = address
        self.rank = rank


class microsoftgraphrelatedperson(msrest.serialization.Model):
    """relatedPerson.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    :param relationship:  Possible values include: "manager", "colleague", "directReport",
     "dotLineReport", "assistant", "dotLineManager", "alternateContact", "friend", "spouse",
     "sibling", "child", "parent", "sponsor", "emergencyContact", "other", "unknownFutureValue".
    :type relationship: str or ~people.models.Microsoftgraphpersonrelationship
    :param user_principal_name:
    :type user_principal_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'relationship': {'key': 'relationship', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        display_name: Optional[str] = None,
        relationship: Optional[Union[str, "Microsoftgraphpersonrelationship"]] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphrelatedperson, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.display_name = display_name
        self.relationship = relationship
        self.user_principal_name = user_principal_name


class microsoftgraphserviceinformation(msrest.serialization.Model):
    """serviceInformation.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name:
    :type name: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        name: Optional[str] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphserviceinformation, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.name = name
        self.web_url = web_url


class microsoftgraphsettings(msrest.serialization.Model):
    """settings.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param has_graph_mailbox:
    :type has_graph_mailbox: bool
    :param has_license:
    :type has_license: bool
    :param has_opted_out:
    :type has_opted_out: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'has_graph_mailbox': {'key': 'hasGraphMailbox', 'type': 'bool'},
        'has_license': {'key': 'hasLicense', 'type': 'bool'},
        'has_opted_out': {'key': 'hasOptedOut', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        has_graph_mailbox: Optional[bool] = None,
        has_license: Optional[bool] = None,
        has_opted_out: Optional[bool] = None,
        **kwargs
    ):
        super(microsoftgraphsettings, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.has_graph_mailbox = has_graph_mailbox
        self.has_license = has_license
        self.has_opted_out = has_opted_out


class microsoftgraphskillproficiency(microsoftgraphitemfacet):
    """skillProficiency.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~people.models.Microsoftgraphallowedaudiences
    :param created_by: identitySet.
    :type created_by: ~people.models.microsoftgraphidentityset
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~people.models.microsoftgraphinferencedata
    :param last_modified_by: identitySet.
    :type last_modified_by: ~people.models.microsoftgraphidentityset
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~people.models.microsoftgraphpersondatasources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param categories:
    :type categories: list[str]
    :param collaboration_tags:
    :type collaboration_tags: list[str]
    :param display_name:
    :type display_name: str
    :param proficiency:  Possible values include: "elementary", "limitedWorking",
     "generalProfessional", "advancedProfessional", "expert", "unknownFutureValue".
    :type proficiency: str or ~people.models.Microsoftgraphskillproficiencylevel
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphidentityset'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'microsoftgraphinferencedata'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'microsoftgraphidentityset'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'microsoftgraphpersondatasources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'collaboration_tags': {'key': 'collaborationTags', 'type': '[str]'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'proficiency': {'key': 'proficiency', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "Microsoftgraphallowedaudiences"]] = None,
        created_by: Optional["microsoftgraphidentityset"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        inference: Optional["microsoftgraphinferencedata"] = None,
        last_modified_by: Optional["microsoftgraphidentityset"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        source: Optional["microsoftgraphpersondatasources"] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        categories: Optional[List[str]] = None,
        collaboration_tags: Optional[List[str]] = None,
        display_name: Optional[str] = None,
        proficiency: Optional[Union[str, "Microsoftgraphskillproficiencylevel"]] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphskillproficiency, self).__init__(id=id, allowed_audiences=allowed_audiences, created_by=created_by, created_date_time=created_date_time, inference=inference, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, source=source, **kwargs)
        self.additional_properties = additional_properties
        self.categories = categories
        self.collaboration_tags = collaboration_tags
        self.display_name = display_name
        self.proficiency = proficiency
        self.web_url = web_url


class microsoftgraphuseraccountinformation(microsoftgraphitemfacet):
    """userAccountInformation.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~people.models.Microsoftgraphallowedaudiences
    :param created_by: identitySet.
    :type created_by: ~people.models.microsoftgraphidentityset
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~people.models.microsoftgraphinferencedata
    :param last_modified_by: identitySet.
    :type last_modified_by: ~people.models.microsoftgraphidentityset
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~people.models.microsoftgraphpersondatasources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param age_group:
    :type age_group: str
    :param country_code:
    :type country_code: str
    :param preferred_language_tag: localeInfo.
    :type preferred_language_tag: ~people.models.microsoftgraphlocaleinfo
    :param user_principal_name:
    :type user_principal_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphidentityset'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'microsoftgraphinferencedata'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'microsoftgraphidentityset'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'microsoftgraphpersondatasources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'age_group': {'key': 'ageGroup', 'type': 'str'},
        'country_code': {'key': 'countryCode', 'type': 'str'},
        'preferred_language_tag': {'key': 'preferredLanguageTag', 'type': 'microsoftgraphlocaleinfo'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "Microsoftgraphallowedaudiences"]] = None,
        created_by: Optional["microsoftgraphidentityset"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        inference: Optional["microsoftgraphinferencedata"] = None,
        last_modified_by: Optional["microsoftgraphidentityset"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        source: Optional["microsoftgraphpersondatasources"] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        age_group: Optional[str] = None,
        country_code: Optional[str] = None,
        preferred_language_tag: Optional["microsoftgraphlocaleinfo"] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphuseraccountinformation, self).__init__(id=id, allowed_audiences=allowed_audiences, created_by=created_by, created_date_time=created_date_time, inference=inference, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, source=source, **kwargs)
        self.additional_properties = additional_properties
        self.age_group = age_group
        self.country_code = country_code
        self.preferred_language_tag = preferred_language_tag
        self.user_principal_name = user_principal_name


class microsoftgraphuseranalytics(microsoftgraphentity):
    """userAnalytics.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param settings: settings.
    :type settings: ~people.models.microsoftgraphsettings
    :param activity_statistics:
    :type activity_statistics: list[~people.models.microsoftgraphactivitystatistics]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'settings': {'key': 'settings', 'type': 'microsoftgraphsettings'},
        'activity_statistics': {'key': 'activityStatistics', 'type': '[microsoftgraphactivitystatistics]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        settings: Optional["microsoftgraphsettings"] = None,
        activity_statistics: Optional[List["microsoftgraphactivitystatistics"]] = None,
        **kwargs
    ):
        super(microsoftgraphuseranalytics, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.settings = settings
        self.activity_statistics = activity_statistics


class microsoftgraphwebaccount(microsoftgraphitemfacet):
    """webAccount.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~people.models.Microsoftgraphallowedaudiences
    :param created_by: identitySet.
    :type created_by: ~people.models.microsoftgraphidentityset
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~people.models.microsoftgraphinferencedata
    :param last_modified_by: identitySet.
    :type last_modified_by: ~people.models.microsoftgraphidentityset
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~people.models.microsoftgraphpersondatasources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description:
    :type description: str
    :param service: serviceInformation.
    :type service: ~people.models.microsoftgraphserviceinformation
    :param status_message:
    :type status_message: str
    :param user_id:
    :type user_id: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphidentityset'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'microsoftgraphinferencedata'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'microsoftgraphidentityset'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'microsoftgraphpersondatasources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'service': {'key': 'service', 'type': 'microsoftgraphserviceinformation'},
        'status_message': {'key': 'statusMessage', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "Microsoftgraphallowedaudiences"]] = None,
        created_by: Optional["microsoftgraphidentityset"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        inference: Optional["microsoftgraphinferencedata"] = None,
        last_modified_by: Optional["microsoftgraphidentityset"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        source: Optional["microsoftgraphpersondatasources"] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        service: Optional["microsoftgraphserviceinformation"] = None,
        status_message: Optional[str] = None,
        user_id: Optional[str] = None,
        web_url: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphwebaccount, self).__init__(id=id, allowed_audiences=allowed_audiences, created_by=created_by, created_date_time=created_date_time, inference=inference, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, source=source, **kwargs)
        self.additional_properties = additional_properties
        self.description = description
        self.service = service
        self.status_message = status_message
        self.user_id = user_id
        self.web_url = web_url


class microsoftgraphwebsite(msrest.serialization.Model):
    """website.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: The URL of the website.
    :type address: str
    :param display_name: The display name of the web site.
    :type display_name: str
    :param type:  Possible values include: "other", "home", "work", "blog", "profile".
    :type type: str or ~people.models.Microsoftgraphwebsitetype
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        address: Optional[str] = None,
        display_name: Optional[str] = None,
        type: Optional[Union[str, "Microsoftgraphwebsitetype"]] = None,
        **kwargs
    ):
        super(microsoftgraphwebsite, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.address = address
        self.display_name = display_name
        self.type = type


class microsoftgraphworkposition(microsoftgraphitemfacet):
    """workPosition.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~people.models.Microsoftgraphallowedaudiences
    :param created_by: identitySet.
    :type created_by: ~people.models.microsoftgraphidentityset
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~people.models.microsoftgraphinferencedata
    :param last_modified_by: identitySet.
    :type last_modified_by: ~people.models.microsoftgraphidentityset
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~people.models.microsoftgraphpersondatasources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param categories:
    :type categories: list[str]
    :param colleagues:
    :type colleagues: list[~people.models.microsoftgraphrelatedperson]
    :param detail: positionDetail.
    :type detail: ~people.models.microsoftgraphpositiondetail
    :param is_current:
    :type is_current: bool
    :param manager: relatedPerson.
    :type manager: ~people.models.microsoftgraphrelatedperson
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'microsoftgraphidentityset'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'microsoftgraphinferencedata'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'microsoftgraphidentityset'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'microsoftgraphpersondatasources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'colleagues': {'key': 'colleagues', 'type': '[microsoftgraphrelatedperson]'},
        'detail': {'key': 'detail', 'type': 'microsoftgraphpositiondetail'},
        'is_current': {'key': 'isCurrent', 'type': 'bool'},
        'manager': {'key': 'manager', 'type': 'microsoftgraphrelatedperson'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        allowed_audiences: Optional[Union[str, "Microsoftgraphallowedaudiences"]] = None,
        created_by: Optional["microsoftgraphidentityset"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        inference: Optional["microsoftgraphinferencedata"] = None,
        last_modified_by: Optional["microsoftgraphidentityset"] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        source: Optional["microsoftgraphpersondatasources"] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        categories: Optional[List[str]] = None,
        colleagues: Optional[List["microsoftgraphrelatedperson"]] = None,
        detail: Optional["microsoftgraphpositiondetail"] = None,
        is_current: Optional[bool] = None,
        manager: Optional["microsoftgraphrelatedperson"] = None,
        **kwargs
    ):
        super(microsoftgraphworkposition, self).__init__(id=id, allowed_audiences=allowed_audiences, created_by=created_by, created_date_time=created_date_time, inference=inference, last_modified_by=last_modified_by, last_modified_date_time=last_modified_date_time, source=source, **kwargs)
        self.additional_properties = additional_properties
        self.categories = categories
        self.colleagues = colleagues
        self.detail = detail
        self.is_current = is_current
        self.manager = manager


class microsoftgraphyomipersonname(msrest.serialization.Model):
    """yomiPersonName.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    :param first:
    :type first: str
    :param last:
    :type last: str
    :param maiden:
    :type maiden: str
    :param middle:
    :type middle: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'first': {'key': 'first', 'type': 'str'},
        'last': {'key': 'last', 'type': 'str'},
        'maiden': {'key': 'maiden', 'type': 'str'},
        'middle': {'key': 'middle', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        display_name: Optional[str] = None,
        first: Optional[str] = None,
        last: Optional[str] = None,
        maiden: Optional[str] = None,
        middle: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphyomipersonname, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.display_name = display_name
        self.first = first
        self.last = last
        self.maiden = maiden
        self.middle = middle


class odataerror(msrest.serialization.Model):
    """odataerror.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error: Required.
    :type error: ~people.models.odataerrormain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'error': {'key': 'error', 'type': 'odataerrormain'},
    }

    def __init__(
        self,
        *,
        error: "odataerrormain",
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(odataerror, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.error = error


class odataerrordetail(msrest.serialization.Model):
    """odataerrordetail.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        additional_properties: Optional[Dict[str, object]] = None,
        target: Optional[str] = None,
        **kwargs
    ):
        super(odataerrordetail, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.message = message
        self.target = target


class odataerrormain(msrest.serialization.Model):
    """odataerrormain.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~people.models.odataerrordetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: dict[str, object]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[odataerrordetail]'},
        'innererror': {'key': 'innererror', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        additional_properties: Optional[Dict[str, object]] = None,
        target: Optional[str] = None,
        details: Optional[List["odataerrordetail"]] = None,
        innererror: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(odataerrormain, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror
