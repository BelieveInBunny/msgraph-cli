# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, IO, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class UserOperations(object):
    """UserOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~mail.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def get_inference_classification(
        self,
        user_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Get1ItemsItem"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get2ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphInferenceClassification"
        """Get inferenceClassification from users.

        Get inferenceClassification from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~mail.models.Get1ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str or ~mail.models.Get2ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphInferenceClassification, or the result of cls(response)
        :rtype: ~mail.models.MicrosoftGraphInferenceClassification
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphInferenceClassification"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_inference_classification.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphInferenceClassification', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_inference_classification.metadata = {'url': '/users/{user-id}/inferenceClassification'}  # type: ignore

    def update_inference_classification(
        self,
        user_id,  # type: str
        id=None,  # type: Optional[str]
        overrides=None,  # type: Optional[List["models.MicrosoftGraphInferenceClassificationOverride"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property inferenceClassification in users.

        Update the navigation property inferenceClassification in users.

        :param user_id: key: id of user.
        :type user_id: str
        :param id: Read-only.
        :type id: str
        :param overrides: A set of overrides for a user to always classify messages from specific
         senders in certain ways: focused, or other. Read-only. Nullable.
        :type overrides: list[~mail.models.MicrosoftGraphInferenceClassificationOverride]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphInferenceClassification(id=id, overrides=overrides)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_inference_classification.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphInferenceClassification')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_inference_classification.metadata = {'url': '/users/{user-id}/inferenceClassification'}  # type: ignore

    def delete_inference_classification(
        self,
        user_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property inferenceClassification for users.

        Delete navigation property inferenceClassification for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_inference_classification.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_inference_classification.metadata = {'url': '/users/{user-id}/inferenceClassification'}  # type: ignore

    def list_mail_folder(
        self,
        user_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum6"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum7"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum8"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfMailFolder"]
        """Get mailFolders from users.

        Get mailFolders from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~mail.models.Enum6]
        :param select: Select properties to be returned.
        :type select: list[str or ~mail.models.Enum7]
        :param expand: Expand related entities.
        :type expand: list[str or ~mail.models.Enum8]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfMailFolder or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~mail.models.CollectionOfMailFolder]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfMailFolder"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_mail_folder.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfMailFolder', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_mail_folder.metadata = {'url': '/users/{user-id}/mailFolders'}  # type: ignore

    def create_mail_folder(
        self,
        user_id,  # type: str
        id=None,  # type: Optional[str]
        child_folder_count=None,  # type: Optional[int]
        display_name=None,  # type: Optional[str]
        parent_folder_id=None,  # type: Optional[str]
        total_item_count=None,  # type: Optional[int]
        unread_item_count=None,  # type: Optional[int]
        well_known_name=None,  # type: Optional[str]
        child_folders=None,  # type: Optional[List["models.MicrosoftGraphMailFolder"]]
        message_rules=None,  # type: Optional[List["models.MicrosoftGraphMessageRule"]]
        messages=None,  # type: Optional[List["models.MicrosoftGraphMessage"]]
        multi_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]]
        single_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]]
        user_configurations=None,  # type: Optional[List["models.MicrosoftGraphUserConfiguration"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphMailFolder"
        """Create new navigation property to mailFolders for users.

        Create new navigation property to mailFolders for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param id: Read-only.
        :type id: str
        :param child_folder_count: The number of immediate child mailFolders in the current mailFolder.
        :type child_folder_count: int
        :param display_name: The mailFolder's display name.
        :type display_name: str
        :param parent_folder_id: The unique identifier for the mailFolder's parent mailFolder.
        :type parent_folder_id: str
        :param total_item_count: The number of items in the mailFolder.
        :type total_item_count: int
        :param unread_item_count: The number of items in the mailFolder marked as unread.
        :type unread_item_count: int
        :param well_known_name:
        :type well_known_name: str
        :param child_folders: The collection of child folders in the mailFolder.
        :type child_folders: list[~mail.models.MicrosoftGraphMailFolder]
        :param message_rules: The collection of rules that apply to the user's Inbox folder.
        :type message_rules: list[~mail.models.MicrosoftGraphMessageRule]
        :param messages: The collection of messages in the mailFolder.
        :type messages: list[~mail.models.MicrosoftGraphMessage]
        :param multi_value_extended_properties: The collection of multi-value extended properties
         defined for the mailFolder. Read-only. Nullable.
        :type multi_value_extended_properties: list[~mail.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param single_value_extended_properties: The collection of single-value extended properties
         defined for the mailFolder. Read-only. Nullable.
        :type single_value_extended_properties: list[~mail.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :param user_configurations:
        :type user_configurations: list[~mail.models.MicrosoftGraphUserConfiguration]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMailFolder, or the result of cls(response)
        :rtype: ~mail.models.MicrosoftGraphMailFolder
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMailFolder"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphMailFolder(id=id, child_folder_count=child_folder_count, display_name=display_name, parent_folder_id=parent_folder_id, total_item_count=total_item_count, unread_item_count=unread_item_count, well_known_name=well_known_name, child_folders=child_folders, message_rules=message_rules, messages=messages, multi_value_extended_properties=multi_value_extended_properties, single_value_extended_properties=single_value_extended_properties, user_configurations=user_configurations)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_mail_folder.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphMailFolder')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMailFolder', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_mail_folder.metadata = {'url': '/users/{user-id}/mailFolders'}  # type: ignore

    def get_mail_folder(
        self,
        user_id,  # type: str
        mail_folder_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum14"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum15"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphMailFolder"
        """Get mailFolders from users.

        Get mailFolders from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~mail.models.Enum14]
        :param expand: Expand related entities.
        :type expand: list[str or ~mail.models.Enum15]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMailFolder, or the result of cls(response)
        :rtype: ~mail.models.MicrosoftGraphMailFolder
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMailFolder"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_mail_folder.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMailFolder', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_mail_folder.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}'}  # type: ignore

    def update_mail_folder(
        self,
        user_id,  # type: str
        mail_folder_id,  # type: str
        id=None,  # type: Optional[str]
        child_folder_count=None,  # type: Optional[int]
        display_name=None,  # type: Optional[str]
        parent_folder_id=None,  # type: Optional[str]
        total_item_count=None,  # type: Optional[int]
        unread_item_count=None,  # type: Optional[int]
        well_known_name=None,  # type: Optional[str]
        child_folders=None,  # type: Optional[List["models.MicrosoftGraphMailFolder"]]
        message_rules=None,  # type: Optional[List["models.MicrosoftGraphMessageRule"]]
        messages=None,  # type: Optional[List["models.MicrosoftGraphMessage"]]
        multi_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]]
        single_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]]
        user_configurations=None,  # type: Optional[List["models.MicrosoftGraphUserConfiguration"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property mailFolders in users.

        Update the navigation property mailFolders in users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param id: Read-only.
        :type id: str
        :param child_folder_count: The number of immediate child mailFolders in the current mailFolder.
        :type child_folder_count: int
        :param display_name: The mailFolder's display name.
        :type display_name: str
        :param parent_folder_id: The unique identifier for the mailFolder's parent mailFolder.
        :type parent_folder_id: str
        :param total_item_count: The number of items in the mailFolder.
        :type total_item_count: int
        :param unread_item_count: The number of items in the mailFolder marked as unread.
        :type unread_item_count: int
        :param well_known_name:
        :type well_known_name: str
        :param child_folders: The collection of child folders in the mailFolder.
        :type child_folders: list[~mail.models.MicrosoftGraphMailFolder]
        :param message_rules: The collection of rules that apply to the user's Inbox folder.
        :type message_rules: list[~mail.models.MicrosoftGraphMessageRule]
        :param messages: The collection of messages in the mailFolder.
        :type messages: list[~mail.models.MicrosoftGraphMessage]
        :param multi_value_extended_properties: The collection of multi-value extended properties
         defined for the mailFolder. Read-only. Nullable.
        :type multi_value_extended_properties: list[~mail.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param single_value_extended_properties: The collection of single-value extended properties
         defined for the mailFolder. Read-only. Nullable.
        :type single_value_extended_properties: list[~mail.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :param user_configurations:
        :type user_configurations: list[~mail.models.MicrosoftGraphUserConfiguration]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphMailFolder(id=id, child_folder_count=child_folder_count, display_name=display_name, parent_folder_id=parent_folder_id, total_item_count=total_item_count, unread_item_count=unread_item_count, well_known_name=well_known_name, child_folders=child_folders, message_rules=message_rules, messages=messages, multi_value_extended_properties=multi_value_extended_properties, single_value_extended_properties=single_value_extended_properties, user_configurations=user_configurations)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_mail_folder.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphMailFolder')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_mail_folder.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}'}  # type: ignore

    def delete_mail_folder(
        self,
        user_id,  # type: str
        mail_folder_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property mailFolders for users.

        Delete navigation property mailFolders for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_mail_folder.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_mail_folder.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}'}  # type: ignore

    def list_message(
        self,
        user_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum51"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum52"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum53"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfMessage0"]
        """Get messages from users.

        Get messages from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~mail.models.Enum51]
        :param select: Select properties to be returned.
        :type select: list[str or ~mail.models.Enum52]
        :param expand: Expand related entities.
        :type expand: list[str or ~mail.models.Enum53]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfMessage0 or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~mail.models.CollectionOfMessage0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfMessage0"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_message.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfMessage0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_message.metadata = {'url': '/users/{user-id}/messages'}  # type: ignore

    def create_message(
        self,
        user_id,  # type: str
        id=None,  # type: Optional[str]
        categories=None,  # type: Optional[List[str]]
        change_key=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        bcc_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        body_preview=None,  # type: Optional[str]
        cc_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        conversation_id=None,  # type: Optional[str]
        conversation_index=None,  # type: Optional[bytes]
        has_attachments=None,  # type: Optional[bool]
        importance=None,  # type: Optional[Union[str, "models.MicrosoftGraphImportance"]]
        inference_classification=None,  # type: Optional[Union[str, "models.MicrosoftGraphInferenceClassificationType"]]
        internet_message_headers=None,  # type: Optional[List["models.MicrosoftGraphInternetMessageHeader"]]
        internet_message_id=None,  # type: Optional[str]
        is_delivery_receipt_requested=None,  # type: Optional[bool]
        is_draft=None,  # type: Optional[bool]
        is_read=None,  # type: Optional[bool]
        is_read_receipt_requested=None,  # type: Optional[bool]
        parent_folder_id=None,  # type: Optional[str]
        received_date_time=None,  # type: Optional[datetime.datetime]
        reply_to=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        sent_date_time=None,  # type: Optional[datetime.datetime]
        subject=None,  # type: Optional[str]
        to_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        unique_body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        unsubscribe_data=None,  # type: Optional[List[str]]
        unsubscribe_enabled=None,  # type: Optional[bool]
        web_link=None,  # type: Optional[str]
        attachments=None,  # type: Optional[List["models.MicrosoftGraphAttachment"]]
        extensions=None,  # type: Optional[List["models.MicrosoftGraphExtension"]]
        mentions=None,  # type: Optional[List["models.MicrosoftGraphMention"]]
        multi_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]]
        single_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]]
        address=None,  # type: Optional[str]
        name=None,  # type: Optional[str]
        is_mentioned=None,  # type: Optional[bool]
        microsoft_graph_email_address=None,  # type: Optional[str]
        microsoft_graph_email_address_name=None,  # type: Optional[str]
        completed_date_time=None,  # type: Optional["models.MicrosoftGraphDateTimeZone"]
        due_date_time=None,  # type: Optional["models.MicrosoftGraphDateTimeZone"]
        flag_status=None,  # type: Optional[Union[str, "models.MicrosoftGraphFollowupFlagStatus"]]
        start_date_time=None,  # type: Optional["models.MicrosoftGraphDateTimeZone"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphMessage"
        """Create new navigation property to messages for users.

        Create new navigation property to messages for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param id: Read-only.
        :type id: str
        :param categories: The categories associated with the item.
        :type categories: list[str]
        :param change_key: Identifies the version of the item. Every time the item is changed,
         changeKey changes as well. This allows Exchange to apply changes to the correct version of the
         object. Read-only.
        :type change_key: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param bcc_recipients: The Bcc: recipients for the message.
        :type bcc_recipients: list[~mail.models.MicrosoftGraphRecipient]
        :param body: itemBody.
        :type body: ~mail.models.MicrosoftGraphItemBody
        :param body_preview: The first 255 characters of the message body. It is in text format.
        :type body_preview: str
        :param cc_recipients: The Cc: recipients for the message.
        :type cc_recipients: list[~mail.models.MicrosoftGraphRecipient]
        :param conversation_id: The ID of the conversation the email belongs to.
        :type conversation_id: str
        :param conversation_index: Indicates the position of the message within the conversation.
        :type conversation_index: bytes
        :param has_attachments: Indicates whether the message has attachments. This property doesn't
         include inline attachments, so if a message contains only inline attachments, this property is
         false. To verify the existence of inline attachments, parse the body property to look for a src
         attribute, such as :code:`<IMG src='cid:image001.jpg@01D26CD8.6C05F070'>`.
        :type has_attachments: bool
        :param importance:
        :type importance: str or ~mail.models.MicrosoftGraphImportance
        :param inference_classification:
        :type inference_classification: str or ~mail.models.MicrosoftGraphInferenceClassificationType
        :param internet_message_headers: A collection of message headers defined by RFC5322. The set
         includes message headers indicating the network path taken by a message from the sender to the
         recipient. It can also contain custom message headers that hold app data for the message.
         Returned only on applying a $select query option. Read-only.
        :type internet_message_headers: list[~mail.models.MicrosoftGraphInternetMessageHeader]
        :param internet_message_id: The message ID in the format specified by RFC2822.
        :type internet_message_id: str
        :param is_delivery_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_delivery_receipt_requested: bool
        :param is_draft: Indicates whether the message is a draft. A message is a draft if it hasn't
         been sent yet.
        :type is_draft: bool
        :param is_read: Indicates whether the message has been read.
        :type is_read: bool
        :param is_read_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_read_receipt_requested: bool
        :param parent_folder_id: The unique identifier for the message's parent mailFolder.
        :type parent_folder_id: str
        :param received_date_time: The date and time the message was received.
        :type received_date_time: ~datetime.datetime
        :param reply_to: The email addresses to use when replying.
        :type reply_to: list[~mail.models.MicrosoftGraphRecipient]
        :param sent_date_time: The date and time the message was sent.
        :type sent_date_time: ~datetime.datetime
        :param subject: The subject of the message.
        :type subject: str
        :param to_recipients: The To: recipients for the message.
        :type to_recipients: list[~mail.models.MicrosoftGraphRecipient]
        :param unique_body: itemBody.
        :type unique_body: ~mail.models.MicrosoftGraphItemBody
        :param unsubscribe_data:
        :type unsubscribe_data: list[str]
        :param unsubscribe_enabled:
        :type unsubscribe_enabled: bool
        :param web_link: The URL to open the message in Outlook on the web.You can append an ispopout
         argument to the end of the URL to change how the message is displayed. If ispopout is not
         present or if it is set to 1, then the message is shown in a popout window. If ispopout is set
         to 0, then the browser will show the message in the Outlook on the web review pane.The message
         will open in the browser if you are logged in to your mailbox via Outlook on the web. You will
         be prompted to login if you are not already logged in with the browser.This URL cannot be
         accessed from within an iFrame.
        :type web_link: str
        :param attachments: The fileAttachment and itemAttachment attachments for the message.
        :type attachments: list[~mail.models.MicrosoftGraphAttachment]
        :param extensions: The collection of open extensions defined for the message. Nullable.
        :type extensions: list[~mail.models.MicrosoftGraphExtension]
        :param mentions:
        :type mentions: list[~mail.models.MicrosoftGraphMention]
        :param multi_value_extended_properties: The collection of multi-value extended properties
         defined for the message. Nullable.
        :type multi_value_extended_properties: list[~mail.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param single_value_extended_properties: The collection of single-value extended properties
         defined for the message. Nullable.
        :type single_value_extended_properties: list[~mail.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :param address: The email address of the person or entity.
        :type address: str
        :param name: The display name of the person or entity.
        :type name: str
        :param is_mentioned:
        :type is_mentioned: bool
        :param microsoft_graph_email_address: The email address of the person or entity.
        :type microsoft_graph_email_address: str
        :param microsoft_graph_email_address_name: The display name of the person or entity.
        :type microsoft_graph_email_address_name: str
        :param completed_date_time: dateTimeTimeZone.
        :type completed_date_time: ~mail.models.MicrosoftGraphDateTimeZone
        :param due_date_time: dateTimeTimeZone.
        :type due_date_time: ~mail.models.MicrosoftGraphDateTimeZone
        :param flag_status:
        :type flag_status: str or ~mail.models.MicrosoftGraphFollowupFlagStatus
        :param start_date_time: dateTimeTimeZone.
        :type start_date_time: ~mail.models.MicrosoftGraphDateTimeZone
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMessage, or the result of cls(response)
        :rtype: ~mail.models.MicrosoftGraphMessage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMessage"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphMessage(id=id, categories=categories, change_key=change_key, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, bcc_recipients=bcc_recipients, body=body, body_preview=body_preview, cc_recipients=cc_recipients, conversation_id=conversation_id, conversation_index=conversation_index, has_attachments=has_attachments, importance=importance, inference_classification=inference_classification, internet_message_headers=internet_message_headers, internet_message_id=internet_message_id, is_delivery_receipt_requested=is_delivery_receipt_requested, is_draft=is_draft, is_read=is_read, is_read_receipt_requested=is_read_receipt_requested, parent_folder_id=parent_folder_id, received_date_time=received_date_time, reply_to=reply_to, sent_date_time=sent_date_time, subject=subject, to_recipients=to_recipients, unique_body=unique_body, unsubscribe_data=unsubscribe_data, unsubscribe_enabled=unsubscribe_enabled, web_link=web_link, attachments=attachments, extensions=extensions, mentions=mentions, multi_value_extended_properties=multi_value_extended_properties, single_value_extended_properties=single_value_extended_properties, address_sender_email_address=address, name_sender_email_address_name=name, is_mentioned=is_mentioned, address_from_email_address=microsoft_graph_email_address, name_from_email_address_name=microsoft_graph_email_address_name, completed_date_time=completed_date_time, due_date_time=due_date_time, flag_status=flag_status, start_date_time=start_date_time)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphMessage')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMessage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_message.metadata = {'url': '/users/{user-id}/messages'}  # type: ignore

    def get_message(
        self,
        user_id,  # type: str
        message_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum54"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum55"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphMessage"
        """Get messages from users.

        Get messages from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param message_id: key: id of message.
        :type message_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~mail.models.Enum54]
        :param expand: Expand related entities.
        :type expand: list[str or ~mail.models.Enum55]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMessage, or the result of cls(response)
        :rtype: ~mail.models.MicrosoftGraphMessage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMessage"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'message-id': self._serialize.url("message_id", message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMessage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_message.metadata = {'url': '/users/{user-id}/messages/{message-id}'}  # type: ignore

    def update_message(
        self,
        user_id,  # type: str
        message_id,  # type: str
        id=None,  # type: Optional[str]
        categories=None,  # type: Optional[List[str]]
        change_key=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        bcc_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        body_preview=None,  # type: Optional[str]
        cc_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        conversation_id=None,  # type: Optional[str]
        conversation_index=None,  # type: Optional[bytes]
        has_attachments=None,  # type: Optional[bool]
        importance=None,  # type: Optional[Union[str, "models.MicrosoftGraphImportance"]]
        inference_classification=None,  # type: Optional[Union[str, "models.MicrosoftGraphInferenceClassificationType"]]
        internet_message_headers=None,  # type: Optional[List["models.MicrosoftGraphInternetMessageHeader"]]
        internet_message_id=None,  # type: Optional[str]
        is_delivery_receipt_requested=None,  # type: Optional[bool]
        is_draft=None,  # type: Optional[bool]
        is_read=None,  # type: Optional[bool]
        is_read_receipt_requested=None,  # type: Optional[bool]
        parent_folder_id=None,  # type: Optional[str]
        received_date_time=None,  # type: Optional[datetime.datetime]
        reply_to=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        sent_date_time=None,  # type: Optional[datetime.datetime]
        subject=None,  # type: Optional[str]
        to_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        unique_body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        unsubscribe_data=None,  # type: Optional[List[str]]
        unsubscribe_enabled=None,  # type: Optional[bool]
        web_link=None,  # type: Optional[str]
        attachments=None,  # type: Optional[List["models.MicrosoftGraphAttachment"]]
        extensions=None,  # type: Optional[List["models.MicrosoftGraphExtension"]]
        mentions=None,  # type: Optional[List["models.MicrosoftGraphMention"]]
        multi_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]]
        single_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]]
        address=None,  # type: Optional[str]
        name=None,  # type: Optional[str]
        is_mentioned=None,  # type: Optional[bool]
        microsoft_graph_email_address=None,  # type: Optional[str]
        microsoft_graph_email_address_name=None,  # type: Optional[str]
        completed_date_time=None,  # type: Optional["models.MicrosoftGraphDateTimeZone"]
        due_date_time=None,  # type: Optional["models.MicrosoftGraphDateTimeZone"]
        flag_status=None,  # type: Optional[Union[str, "models.MicrosoftGraphFollowupFlagStatus"]]
        start_date_time=None,  # type: Optional["models.MicrosoftGraphDateTimeZone"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property messages in users.

        Update the navigation property messages in users.

        :param user_id: key: id of user.
        :type user_id: str
        :param message_id: key: id of message.
        :type message_id: str
        :param id: Read-only.
        :type id: str
        :param categories: The categories associated with the item.
        :type categories: list[str]
        :param change_key: Identifies the version of the item. Every time the item is changed,
         changeKey changes as well. This allows Exchange to apply changes to the correct version of the
         object. Read-only.
        :type change_key: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param bcc_recipients: The Bcc: recipients for the message.
        :type bcc_recipients: list[~mail.models.MicrosoftGraphRecipient]
        :param body: itemBody.
        :type body: ~mail.models.MicrosoftGraphItemBody
        :param body_preview: The first 255 characters of the message body. It is in text format.
        :type body_preview: str
        :param cc_recipients: The Cc: recipients for the message.
        :type cc_recipients: list[~mail.models.MicrosoftGraphRecipient]
        :param conversation_id: The ID of the conversation the email belongs to.
        :type conversation_id: str
        :param conversation_index: Indicates the position of the message within the conversation.
        :type conversation_index: bytes
        :param has_attachments: Indicates whether the message has attachments. This property doesn't
         include inline attachments, so if a message contains only inline attachments, this property is
         false. To verify the existence of inline attachments, parse the body property to look for a src
         attribute, such as :code:`<IMG src='cid:image001.jpg@01D26CD8.6C05F070'>`.
        :type has_attachments: bool
        :param importance:
        :type importance: str or ~mail.models.MicrosoftGraphImportance
        :param inference_classification:
        :type inference_classification: str or ~mail.models.MicrosoftGraphInferenceClassificationType
        :param internet_message_headers: A collection of message headers defined by RFC5322. The set
         includes message headers indicating the network path taken by a message from the sender to the
         recipient. It can also contain custom message headers that hold app data for the message.
         Returned only on applying a $select query option. Read-only.
        :type internet_message_headers: list[~mail.models.MicrosoftGraphInternetMessageHeader]
        :param internet_message_id: The message ID in the format specified by RFC2822.
        :type internet_message_id: str
        :param is_delivery_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_delivery_receipt_requested: bool
        :param is_draft: Indicates whether the message is a draft. A message is a draft if it hasn't
         been sent yet.
        :type is_draft: bool
        :param is_read: Indicates whether the message has been read.
        :type is_read: bool
        :param is_read_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_read_receipt_requested: bool
        :param parent_folder_id: The unique identifier for the message's parent mailFolder.
        :type parent_folder_id: str
        :param received_date_time: The date and time the message was received.
        :type received_date_time: ~datetime.datetime
        :param reply_to: The email addresses to use when replying.
        :type reply_to: list[~mail.models.MicrosoftGraphRecipient]
        :param sent_date_time: The date and time the message was sent.
        :type sent_date_time: ~datetime.datetime
        :param subject: The subject of the message.
        :type subject: str
        :param to_recipients: The To: recipients for the message.
        :type to_recipients: list[~mail.models.MicrosoftGraphRecipient]
        :param unique_body: itemBody.
        :type unique_body: ~mail.models.MicrosoftGraphItemBody
        :param unsubscribe_data:
        :type unsubscribe_data: list[str]
        :param unsubscribe_enabled:
        :type unsubscribe_enabled: bool
        :param web_link: The URL to open the message in Outlook on the web.You can append an ispopout
         argument to the end of the URL to change how the message is displayed. If ispopout is not
         present or if it is set to 1, then the message is shown in a popout window. If ispopout is set
         to 0, then the browser will show the message in the Outlook on the web review pane.The message
         will open in the browser if you are logged in to your mailbox via Outlook on the web. You will
         be prompted to login if you are not already logged in with the browser.This URL cannot be
         accessed from within an iFrame.
        :type web_link: str
        :param attachments: The fileAttachment and itemAttachment attachments for the message.
        :type attachments: list[~mail.models.MicrosoftGraphAttachment]
        :param extensions: The collection of open extensions defined for the message. Nullable.
        :type extensions: list[~mail.models.MicrosoftGraphExtension]
        :param mentions:
        :type mentions: list[~mail.models.MicrosoftGraphMention]
        :param multi_value_extended_properties: The collection of multi-value extended properties
         defined for the message. Nullable.
        :type multi_value_extended_properties: list[~mail.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param single_value_extended_properties: The collection of single-value extended properties
         defined for the message. Nullable.
        :type single_value_extended_properties: list[~mail.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :param address: The email address of the person or entity.
        :type address: str
        :param name: The display name of the person or entity.
        :type name: str
        :param is_mentioned:
        :type is_mentioned: bool
        :param microsoft_graph_email_address: The email address of the person or entity.
        :type microsoft_graph_email_address: str
        :param microsoft_graph_email_address_name: The display name of the person or entity.
        :type microsoft_graph_email_address_name: str
        :param completed_date_time: dateTimeTimeZone.
        :type completed_date_time: ~mail.models.MicrosoftGraphDateTimeZone
        :param due_date_time: dateTimeTimeZone.
        :type due_date_time: ~mail.models.MicrosoftGraphDateTimeZone
        :param flag_status:
        :type flag_status: str or ~mail.models.MicrosoftGraphFollowupFlagStatus
        :param start_date_time: dateTimeTimeZone.
        :type start_date_time: ~mail.models.MicrosoftGraphDateTimeZone
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphMessage(id=id, categories=categories, change_key=change_key, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, bcc_recipients=bcc_recipients, body=body, body_preview=body_preview, cc_recipients=cc_recipients, conversation_id=conversation_id, conversation_index=conversation_index, has_attachments=has_attachments, importance=importance, inference_classification=inference_classification, internet_message_headers=internet_message_headers, internet_message_id=internet_message_id, is_delivery_receipt_requested=is_delivery_receipt_requested, is_draft=is_draft, is_read=is_read, is_read_receipt_requested=is_read_receipt_requested, parent_folder_id=parent_folder_id, received_date_time=received_date_time, reply_to=reply_to, sent_date_time=sent_date_time, subject=subject, to_recipients=to_recipients, unique_body=unique_body, unsubscribe_data=unsubscribe_data, unsubscribe_enabled=unsubscribe_enabled, web_link=web_link, attachments=attachments, extensions=extensions, mentions=mentions, multi_value_extended_properties=multi_value_extended_properties, single_value_extended_properties=single_value_extended_properties, address_sender_email_address=address, name_sender_email_address_name=name, is_mentioned=is_mentioned, address_from_email_address=microsoft_graph_email_address, name_from_email_address_name=microsoft_graph_email_address_name, completed_date_time=completed_date_time, due_date_time=due_date_time, flag_status=flag_status, start_date_time=start_date_time)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'message-id': self._serialize.url("message_id", message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphMessage')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_message.metadata = {'url': '/users/{user-id}/messages/{message-id}'}  # type: ignore

    def delete_message(
        self,
        user_id,  # type: str
        message_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property messages for users.

        Delete navigation property messages for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param message_id: key: id of message.
        :type message_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'message-id': self._serialize.url("message_id", message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_message.metadata = {'url': '/users/{user-id}/messages/{message-id}'}  # type: ignore

    def get_message_content(
        self,
        user_id,  # type: str
        message_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> IO
        """Get media content for the navigation property messages from users.

        Get media content for the navigation property messages from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param message_id: key: id of message.
        :type message_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: IO, or the result of cls(response)
        :rtype: IO
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[IO]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/octet-stream, application/json"

        # Construct URL
        url = self.get_message_content.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'message-id': self._serialize.url("message_id", message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/octet-stream, application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = response.stream_download(self._client._pipeline)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_message_content.metadata = {'url': '/users/{user-id}/messages/{message-id}/$value'}  # type: ignore

    def set_message_content(
        self,
        user_id,  # type: str
        message_id,  # type: str
        data,  # type: IO
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update media content for the navigation property messages in users.

        Update media content for the navigation property messages in users.

        :param user_id: key: id of user.
        :type user_id: str
        :param message_id: key: id of message.
        :type message_id: str
        :param data: New media content.
        :type data: IO
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/octet-stream")
        accept = "application/json"

        # Construct URL
        url = self.set_message_content.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'message-id': self._serialize.url("message_id", message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content_kwargs['stream_content'] = data
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    set_message_content.metadata = {'url': '/users/{user-id}/messages/{message-id}/$value'}  # type: ignore
