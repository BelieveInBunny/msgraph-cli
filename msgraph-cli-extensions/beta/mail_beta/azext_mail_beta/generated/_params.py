# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type
)
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_mail_beta.action import (
    AddBccRecipients,
    AddBody,
    AddCcRecipients,
    AddInternetMessageHeaders,
    AddReplyTo,
    AddToRecipients,
    AddAttachments,
    AddExtensions,
    AddMailUserCreateMessageMultiValueExtendedProperties,
    AddMailUserCreateMessageSingleValueExtendedProperties,
    AddFlagCompletedDateTime,
    AddMailUserCreatelFolderMultiValueExtendedProperties,
    AddMailUserCreatelFolderSingleValueExtendedProperties,
    AddUserConfigurations,
    AddOverrides,
    AddCreatedBy
)


def load_arguments(self, _):

    with self.argument_context('mail user delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('if_match', type=str, help='ETag')
        c.argument('message_id', type=str, help='key: id of message')

    with self.argument_context('mail user create-message') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('bcc_recipients', action=AddBccRecipients, nargs='*', help='The Bcc: recipients for the message.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str,
                   help='The first 255 characters of the message body. It is in text format.')
        c.argument('cc_recipients', action=AddCcRecipients, nargs='*', help='The Cc: recipients for the message.')
        c.argument('conversation_id', type=str, help='The ID of the conversation the email belongs to.')
        c.argument('conversation_index', help='Indicates the position of the message within the conversation.')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as :code:`<IMG src=\'cid:image001.jpg@01D26CD8.'
                   '6C05F070\'>`.')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('inference_classification', arg_type=get_enum_type(['focused', 'other']), help='')
        c.argument('internet_message_headers', action=AddInternetMessageHeaders, nargs='*', help='A collection of '
                   'message headers defined by RFC5322. The set includes message headers indicating the network path '
                   'taken by a message from the sender to the recipient. It can also contain custom message headers '
                   'that hold app data for the message.  Returned only on applying a $select query option. Read-only.')
        c.argument('internet_message_id', type=str, help='The message ID in the format specified by RFC2822.')
        c.argument('is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a draft. A '
                   'message is a draft if it hasn\'t been sent yet.')
        c.argument('is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been read.')
        c.argument('is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.')
        c.argument('parent_folder_id', type=str, help='The unique identifier for the message\'s parent mailFolder.')
        c.argument('received_date_time', help='The date and time the message was received.')
        c.argument('reply_to', action=AddReplyTo, nargs='*', help='The email addresses to use when replying.')
        c.argument('sent_date_time', help='The date and time the message was sent.')
        c.argument('subject', type=str, help='The subject of the message.')
        c.argument('to_recipients', action=AddToRecipients, nargs='*', help='The To: recipients for the message.')
        c.argument('unique_body', action=AddBody, nargs='*', help='itemBody')
        c.argument('unsubscribe_data', nargs='*', help='')
        c.argument('unsubscribe_enabled', arg_type=get_three_state_flag(), help='')
        c.argument('web_link', type=str, help='The URL to open the message in Outlook on the web.You can append an '
                   'ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not '
                   'present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to '
                   '0, then the browser will show the message in the Outlook on the web review pane.The message will '
                   'open in the browser if you are logged in to your mailbox via Outlook on the web. You will be '
                   'prompted to login if you are not already logged in with the browser.This URL cannot be accessed '
                   'from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The fileAttachment and itemAttachment '
                   'attachments for the message.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the message. Nullable.')
        c.argument('mentions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMailUserCreateMessageMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the message. '
                   'Nullable.')
        c.argument('single_value_extended_properties', action=AddMailUserCreateMessageSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the message. '
                   'Nullable.')
        c.argument('sender_email_address_address', type=str, help='The email address of the person or entity.')
        c.argument('sender_email_address_name', type=str, help='The display name of the person or entity.')
        c.argument('mentions_preview_is_mentioned', arg_type=get_three_state_flag(), help='')
        c.argument('from_email_address_address', type=str, help='The email address of the person or entity.')
        c.argument('from_email_address_name', type=str, help='The display name of the person or entity.')
        c.argument('flag_completed_date_time', action=AddFlagCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('flag_due_date_time', action=AddFlagCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('flag_flag_status', arg_type=get_enum_type(['notFlagged', 'complete', 'flagged']), help='')
        c.argument('flag_start_date_time', action=AddFlagCompletedDateTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('mail user createl-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('child_folder_count', type=int, help='The number of immediate child mailFolders in the current '
                   'mailFolder.')
        c.argument('display_name', type=str, help='The mailFolder\'s display name.')
        c.argument('parent_folder_id', type=str,
                   help='The unique identifier for the mailFolder\'s parent mailFolder.')
        c.argument('total_item_count', type=int, help='The number of items in the mailFolder.')
        c.argument('unread_item_count', type=int, help='The number of items in the mailFolder marked as unread.')
        c.argument('well_known_name', type=str, help='')
        c.argument('child_folders', type=validate_file_or_dict, help='The collection of child folders in the '
                   'mailFolder. Expected value: json-string/@json-file.')
        c.argument('message_rules', type=validate_file_or_dict, help='The collection of rules that apply to the '
                   'user\'s Inbox folder. Expected value: json-string/@json-file.')
        c.argument('messages', type=validate_file_or_dict, help='The collection of messages in the mailFolder. '
                   'Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMailUserCreatelFolderMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the mailFolder. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddMailUserCreatelFolderSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the mailFolder. '
                   'Read-only. Nullable.')
        c.argument('user_configurations', action=AddUserConfigurations, nargs='*', help='')

    with self.argument_context('mail user get-inference-classification') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user get-message') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user get-message-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')

    with self.argument_context('mail user getl-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user list-message') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user listl-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user set-message-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('data', help='New media content.')

    with self.argument_context('mail user update-inference-classification') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('overrides', action=AddOverrides, nargs='*', help='A set of overrides for a user to always classify '
                   'messages from specific senders in certain ways: focused, or other. Read-only. Nullable.')

    with self.argument_context('mail user update-message') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('bcc_recipients', action=AddBccRecipients, nargs='*', help='The Bcc: recipients for the message.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str,
                   help='The first 255 characters of the message body. It is in text format.')
        c.argument('cc_recipients', action=AddCcRecipients, nargs='*', help='The Cc: recipients for the message.')
        c.argument('conversation_id', type=str, help='The ID of the conversation the email belongs to.')
        c.argument('conversation_index', help='Indicates the position of the message within the conversation.')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as :code:`<IMG src=\'cid:image001.jpg@01D26CD8.'
                   '6C05F070\'>`.')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('inference_classification', arg_type=get_enum_type(['focused', 'other']), help='')
        c.argument('internet_message_headers', action=AddInternetMessageHeaders, nargs='*', help='A collection of '
                   'message headers defined by RFC5322. The set includes message headers indicating the network path '
                   'taken by a message from the sender to the recipient. It can also contain custom message headers '
                   'that hold app data for the message.  Returned only on applying a $select query option. Read-only.')
        c.argument('internet_message_id', type=str, help='The message ID in the format specified by RFC2822.')
        c.argument('is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a draft. A '
                   'message is a draft if it hasn\'t been sent yet.')
        c.argument('is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been read.')
        c.argument('is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.')
        c.argument('parent_folder_id', type=str, help='The unique identifier for the message\'s parent mailFolder.')
        c.argument('received_date_time', help='The date and time the message was received.')
        c.argument('reply_to', action=AddReplyTo, nargs='*', help='The email addresses to use when replying.')
        c.argument('sent_date_time', help='The date and time the message was sent.')
        c.argument('subject', type=str, help='The subject of the message.')
        c.argument('to_recipients', action=AddToRecipients, nargs='*', help='The To: recipients for the message.')
        c.argument('unique_body', action=AddBody, nargs='*', help='itemBody')
        c.argument('unsubscribe_data', nargs='*', help='')
        c.argument('unsubscribe_enabled', arg_type=get_three_state_flag(), help='')
        c.argument('web_link', type=str, help='The URL to open the message in Outlook on the web.You can append an '
                   'ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not '
                   'present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to '
                   '0, then the browser will show the message in the Outlook on the web review pane.The message will '
                   'open in the browser if you are logged in to your mailbox via Outlook on the web. You will be '
                   'prompted to login if you are not already logged in with the browser.This URL cannot be accessed '
                   'from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The fileAttachment and itemAttachment '
                   'attachments for the message.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the message. Nullable.')
        c.argument('mentions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMailUserCreateMessageMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the message. '
                   'Nullable.')
        c.argument('single_value_extended_properties', action=AddMailUserCreateMessageSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the message. '
                   'Nullable.')
        c.argument('sender_email_address_address', type=str, help='The email address of the person or entity.')
        c.argument('sender_email_address_name', type=str, help='The display name of the person or entity.')
        c.argument('mentions_preview_is_mentioned', arg_type=get_three_state_flag(), help='')
        c.argument('from_email_address_address', type=str, help='The email address of the person or entity.')
        c.argument('from_email_address_name', type=str, help='The display name of the person or entity.')
        c.argument('flag_completed_date_time', action=AddFlagCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('flag_due_date_time', action=AddFlagCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('flag_flag_status', arg_type=get_enum_type(['notFlagged', 'complete', 'flagged']), help='')
        c.argument('flag_start_date_time', action=AddFlagCompletedDateTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('mail user updatel-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('child_folder_count', type=int, help='The number of immediate child mailFolders in the current '
                   'mailFolder.')
        c.argument('display_name', type=str, help='The mailFolder\'s display name.')
        c.argument('parent_folder_id', type=str,
                   help='The unique identifier for the mailFolder\'s parent mailFolder.')
        c.argument('total_item_count', type=int, help='The number of items in the mailFolder.')
        c.argument('unread_item_count', type=int, help='The number of items in the mailFolder marked as unread.')
        c.argument('well_known_name', type=str, help='')
        c.argument('child_folders', type=validate_file_or_dict, help='The collection of child folders in the '
                   'mailFolder. Expected value: json-string/@json-file.')
        c.argument('message_rules', type=validate_file_or_dict, help='The collection of rules that apply to the '
                   'user\'s Inbox folder. Expected value: json-string/@json-file.')
        c.argument('messages', type=validate_file_or_dict, help='The collection of messages in the mailFolder. '
                   'Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMailUserCreatelFolderMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the mailFolder. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddMailUserCreatelFolderSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the mailFolder. '
                   'Read-only. Nullable.')
        c.argument('user_configurations', action=AddUserConfigurations, nargs='*', help='')

    with self.argument_context('mail user-inference-classification delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('inference_classification_override_id', type=str,
                   help='key: id of inferenceClassificationOverride')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('mail user-inference-classification create-override') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('classify_as', arg_type=get_enum_type(['focused', 'other']), help='')
        c.argument('sender_email_address_address', type=str, help='The email address of the person or entity.')
        c.argument('sender_email_address_name', type=str, help='The display name of the person or entity.')

    with self.argument_context('mail user-inference-classification get-override') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('inference_classification_override_id', type=str,
                   help='key: id of inferenceClassificationOverride')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-inference-classification list-override') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-inference-classification update-override') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('inference_classification_override_id', type=str,
                   help='key: id of inferenceClassificationOverride')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('classify_as', arg_type=get_enum_type(['focused', 'other']), help='')
        c.argument('sender_email_address_address', type=str, help='The email address of the person or entity.')
        c.argument('sender_email_address_name', type=str, help='The display name of the person or entity.')

    with self.argument_context('mail user-mail-folder delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('mail_folder_id1', type=str, help='key: id of mailFolder')
        c.argument('if_match', type=str, help='ETag')
        c.argument('message_rule_id', type=str, help='key: id of messageRule')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('user_configuration_id', type=str, help='key: id of userConfiguration')

    with self.argument_context('mail user-mail-folder create-child-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('child_folder_count', type=int, help='The number of immediate child mailFolders in the current '
                   'mailFolder.')
        c.argument('display_name', type=str, help='The mailFolder\'s display name.')
        c.argument('parent_folder_id', type=str,
                   help='The unique identifier for the mailFolder\'s parent mailFolder.')
        c.argument('total_item_count', type=int, help='The number of items in the mailFolder.')
        c.argument('unread_item_count', type=int, help='The number of items in the mailFolder marked as unread.')
        c.argument('well_known_name', type=str, help='')
        c.argument('child_folders', type=validate_file_or_dict, help='The collection of child folders in the '
                   'mailFolder. Expected value: json-string/@json-file.')
        c.argument('message_rules', type=validate_file_or_dict, help='The collection of rules that apply to the '
                   'user\'s Inbox folder. Expected value: json-string/@json-file.')
        c.argument('messages', type=validate_file_or_dict, help='The collection of messages in the mailFolder. '
                   'Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMailUserCreatelFolderMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the mailFolder. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddMailUserCreatelFolderSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the mailFolder. '
                   'Read-only. Nullable.')
        c.argument('user_configurations', action=AddUserConfigurations, nargs='*', help='')

    with self.argument_context('mail user-mail-folder create-message') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('bcc_recipients', action=AddBccRecipients, nargs='*', help='The Bcc: recipients for the message.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str,
                   help='The first 255 characters of the message body. It is in text format.')
        c.argument('cc_recipients', action=AddCcRecipients, nargs='*', help='The Cc: recipients for the message.')
        c.argument('conversation_id', type=str, help='The ID of the conversation the email belongs to.')
        c.argument('conversation_index', help='Indicates the position of the message within the conversation.')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as :code:`<IMG src=\'cid:image001.jpg@01D26CD8.'
                   '6C05F070\'>`.')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('inference_classification', arg_type=get_enum_type(['focused', 'other']), help='')
        c.argument('internet_message_headers', action=AddInternetMessageHeaders, nargs='*', help='A collection of '
                   'message headers defined by RFC5322. The set includes message headers indicating the network path '
                   'taken by a message from the sender to the recipient. It can also contain custom message headers '
                   'that hold app data for the message.  Returned only on applying a $select query option. Read-only.')
        c.argument('internet_message_id', type=str, help='The message ID in the format specified by RFC2822.')
        c.argument('is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a draft. A '
                   'message is a draft if it hasn\'t been sent yet.')
        c.argument('is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been read.')
        c.argument('is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.')
        c.argument('parent_folder_id', type=str, help='The unique identifier for the message\'s parent mailFolder.')
        c.argument('received_date_time', help='The date and time the message was received.')
        c.argument('reply_to', action=AddReplyTo, nargs='*', help='The email addresses to use when replying.')
        c.argument('sent_date_time', help='The date and time the message was sent.')
        c.argument('subject', type=str, help='The subject of the message.')
        c.argument('to_recipients', action=AddToRecipients, nargs='*', help='The To: recipients for the message.')
        c.argument('unique_body', action=AddBody, nargs='*', help='itemBody')
        c.argument('unsubscribe_data', nargs='*', help='')
        c.argument('unsubscribe_enabled', arg_type=get_three_state_flag(), help='')
        c.argument('web_link', type=str, help='The URL to open the message in Outlook on the web.You can append an '
                   'ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not '
                   'present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to '
                   '0, then the browser will show the message in the Outlook on the web review pane.The message will '
                   'open in the browser if you are logged in to your mailbox via Outlook on the web. You will be '
                   'prompted to login if you are not already logged in with the browser.This URL cannot be accessed '
                   'from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The fileAttachment and itemAttachment '
                   'attachments for the message.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the message. Nullable.')
        c.argument('mentions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMailUserCreateMessageMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the message. '
                   'Nullable.')
        c.argument('single_value_extended_properties', action=AddMailUserCreateMessageSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the message. '
                   'Nullable.')
        c.argument('sender_email_address_address', type=str, help='The email address of the person or entity.')
        c.argument('sender_email_address_name', type=str, help='The display name of the person or entity.')
        c.argument('mentions_preview_is_mentioned', arg_type=get_three_state_flag(), help='')
        c.argument('from_email_address_address', type=str, help='The email address of the person or entity.')
        c.argument('from_email_address_name', type=str, help='The display name of the person or entity.')
        c.argument('flag_completed_date_time', action=AddFlagCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('flag_due_date_time', action=AddFlagCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('flag_flag_status', arg_type=get_enum_type(['notFlagged', 'complete', 'flagged']), help='')
        c.argument('flag_start_date_time', action=AddFlagCompletedDateTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('mail user-mail-folder create-message-rule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('mail user-mail-folder create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('mail user-mail-folder create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('mail user-mail-folder create-user-configuration') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('binary_data', help='')

    with self.argument_context('mail user-mail-folder get-child-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('mail_folder_id1', type=str, help='key: id of mailFolder')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder get-message') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder get-message-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')

    with self.argument_context('mail user-mail-folder get-message-rule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_rule_id', type=str, help='key: id of messageRule')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder get-user-configuration') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('user_configuration_id', type=str, help='key: id of userConfiguration')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder list-child-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder list-message') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder list-message-rule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder list-user-configuration') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder set-message-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('data', help='New media content.')

    with self.argument_context('mail user-mail-folder update-child-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('mail_folder_id1', type=str, help='key: id of mailFolder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('child_folder_count', type=int, help='The number of immediate child mailFolders in the current '
                   'mailFolder.')
        c.argument('display_name', type=str, help='The mailFolder\'s display name.')
        c.argument('parent_folder_id', type=str,
                   help='The unique identifier for the mailFolder\'s parent mailFolder.')
        c.argument('total_item_count', type=int, help='The number of items in the mailFolder.')
        c.argument('unread_item_count', type=int, help='The number of items in the mailFolder marked as unread.')
        c.argument('well_known_name', type=str, help='')
        c.argument('child_folders', type=validate_file_or_dict, help='The collection of child folders in the '
                   'mailFolder. Expected value: json-string/@json-file.')
        c.argument('message_rules', type=validate_file_or_dict, help='The collection of rules that apply to the '
                   'user\'s Inbox folder. Expected value: json-string/@json-file.')
        c.argument('messages', type=validate_file_or_dict, help='The collection of messages in the mailFolder. '
                   'Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMailUserCreatelFolderMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the mailFolder. '
                   'Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddMailUserCreatelFolderSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the mailFolder. '
                   'Read-only. Nullable.')
        c.argument('user_configurations', action=AddUserConfigurations, nargs='*', help='')

    with self.argument_context('mail user-mail-folder update-message') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('bcc_recipients', action=AddBccRecipients, nargs='*', help='The Bcc: recipients for the message.')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('body_preview', type=str,
                   help='The first 255 characters of the message body. It is in text format.')
        c.argument('cc_recipients', action=AddCcRecipients, nargs='*', help='The Cc: recipients for the message.')
        c.argument('conversation_id', type=str, help='The ID of the conversation the email belongs to.')
        c.argument('conversation_index', help='Indicates the position of the message within the conversation.')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as :code:`<IMG src=\'cid:image001.jpg@01D26CD8.'
                   '6C05F070\'>`.')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='')
        c.argument('inference_classification', arg_type=get_enum_type(['focused', 'other']), help='')
        c.argument('internet_message_headers', action=AddInternetMessageHeaders, nargs='*', help='A collection of '
                   'message headers defined by RFC5322. The set includes message headers indicating the network path '
                   'taken by a message from the sender to the recipient. It can also contain custom message headers '
                   'that hold app data for the message.  Returned only on applying a $select query option. Read-only.')
        c.argument('internet_message_id', type=str, help='The message ID in the format specified by RFC2822.')
        c.argument('is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a draft. A '
                   'message is a draft if it hasn\'t been sent yet.')
        c.argument('is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been read.')
        c.argument('is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.')
        c.argument('parent_folder_id', type=str, help='The unique identifier for the message\'s parent mailFolder.')
        c.argument('received_date_time', help='The date and time the message was received.')
        c.argument('reply_to', action=AddReplyTo, nargs='*', help='The email addresses to use when replying.')
        c.argument('sent_date_time', help='The date and time the message was sent.')
        c.argument('subject', type=str, help='The subject of the message.')
        c.argument('to_recipients', action=AddToRecipients, nargs='*', help='The To: recipients for the message.')
        c.argument('unique_body', action=AddBody, nargs='*', help='itemBody')
        c.argument('unsubscribe_data', nargs='*', help='')
        c.argument('unsubscribe_enabled', arg_type=get_three_state_flag(), help='')
        c.argument('web_link', type=str, help='The URL to open the message in Outlook on the web.You can append an '
                   'ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not '
                   'present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to '
                   '0, then the browser will show the message in the Outlook on the web review pane.The message will '
                   'open in the browser if you are logged in to your mailbox via Outlook on the web. You will be '
                   'prompted to login if you are not already logged in with the browser.This URL cannot be accessed '
                   'from within an iFrame.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='The fileAttachment and itemAttachment '
                   'attachments for the message.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the message. Nullable.')
        c.argument('mentions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMailUserCreateMessageMultiValueExtendedProperties,
                   nargs='*', help='The collection of multi-value extended properties defined for the message. '
                   'Nullable.')
        c.argument('single_value_extended_properties', action=AddMailUserCreateMessageSingleValueExtendedProperties,
                   nargs='*', help='The collection of single-value extended properties defined for the message. '
                   'Nullable.')
        c.argument('sender_email_address_address', type=str, help='The email address of the person or entity.')
        c.argument('sender_email_address_name', type=str, help='The display name of the person or entity.')
        c.argument('mentions_preview_is_mentioned', arg_type=get_three_state_flag(), help='')
        c.argument('from_email_address_address', type=str, help='The email address of the person or entity.')
        c.argument('from_email_address_name', type=str, help='The display name of the person or entity.')
        c.argument('flag_completed_date_time', action=AddFlagCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('flag_due_date_time', action=AddFlagCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('flag_flag_status', arg_type=get_enum_type(['notFlagged', 'complete', 'flagged']), help='')
        c.argument('flag_start_date_time', action=AddFlagCompletedDateTime, nargs='*', help='dateTimeTimeZone')

    with self.argument_context('mail user-mail-folder update-message-rule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_rule_id', type=str, help='key: id of messageRule')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('mail user-mail-folder update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('mail user-mail-folder update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('mail user-mail-folder update-user-configuration') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('user_configuration_id', type=str, help='key: id of userConfiguration')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('binary_data', help='')

    with self.argument_context('mail user-mail-folder-message delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('mention_id', type=str, help='key: id of mention')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('mail user-mail-folder-message create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('mail user-mail-folder-message create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('mail user-mail-folder-message create-mention') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('application', type=str, help='')
        c.argument('client_reference', type=str, help='')
        c.argument('created_by', action=AddCreatedBy, nargs='*', help='emailAddress')
        c.argument('created_date_time', help='')
        c.argument('deep_link', type=str, help='')
        c.argument('mentioned', action=AddCreatedBy, nargs='*', help='emailAddress')
        c.argument('mention_text', type=str, help='')
        c.argument('server_created_date_time', help='')

    with self.argument_context('mail user-mail-folder-message create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('mail user-mail-folder-message create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('mail user-mail-folder-message get-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder-message get-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder-message get-mention') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('mention_id', type=str, help='key: id of mention')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder-message get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder-message get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder-message list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder-message list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder-message list-mention') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder-message list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder-message list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-mail-folder-message update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('mail user-mail-folder-message update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('mail user-mail-folder-message update-mention') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('mention_id', type=str, help='key: id of mention')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('application', type=str, help='')
        c.argument('client_reference', type=str, help='')
        c.argument('created_by', action=AddCreatedBy, nargs='*', help='emailAddress')
        c.argument('created_date_time', help='')
        c.argument('deep_link', type=str, help='')
        c.argument('mentioned', action=AddCreatedBy, nargs='*', help='emailAddress')
        c.argument('mention_text', type=str, help='')
        c.argument('server_created_date_time', help='')

    with self.argument_context('mail user-mail-folder-message update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('mail user-mail-folder-message update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('mail user-message delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('mention_id', type=str, help='key: id of mention')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('mail user-message create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('mail user-message create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('mail user-message create-mention') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('application', type=str, help='')
        c.argument('client_reference', type=str, help='')
        c.argument('created_by', action=AddCreatedBy, nargs='*', help='emailAddress')
        c.argument('created_date_time', help='')
        c.argument('deep_link', type=str, help='')
        c.argument('mentioned', action=AddCreatedBy, nargs='*', help='emailAddress')
        c.argument('mention_text', type=str, help='')
        c.argument('server_created_date_time', help='')

    with self.argument_context('mail user-message create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('mail user-message create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('mail user-message get-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-message get-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-message get-mention') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('mention_id', type=str, help='key: id of mention')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-message get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-message get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-message list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-message list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-message list-mention') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-message list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-message list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('mail user-message update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('mail user-message update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('mail user-message update-mention') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('mention_id', type=str, help='key: id of mention')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('application', type=str, help='')
        c.argument('client_reference', type=str, help='')
        c.argument('created_by', action=AddCreatedBy, nargs='*', help='emailAddress')
        c.argument('created_date_time', help='')
        c.argument('deep_link', type=str, help='')
        c.argument('mentioned', action=AddCreatedBy, nargs='*', help='emailAddress')
        c.argument('mention_text', type=str, help='')
        c.argument('server_created_date_time', help='')

    with self.argument_context('mail user-message update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('mail user-message update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')
