# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, IO, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class DriveListItemOperations(object):
    """DriveListItemOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~files.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_activity(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum205"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum206"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum207"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfItemActivityOld3"]
        """Get activities from drives.

        Get activities from drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~files.models.Enum205]
        :param select: Select properties to be returned.
        :type select: list[str or ~files.models.Enum206]
        :param expand: Expand related entities.
        :type expand: list[str or ~files.models.Enum207]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfItemActivityOld3 or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~files.models.CollectionOfItemActivityOld3]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfItemActivityOld3"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_activity.metadata['url']  # type: ignore
                path_format_arguments = {
                    'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
                    'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfItemActivityOld3', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_activity.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/activities'}  # type: ignore

    def create_activity(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        id=None,  # type: Optional[str]
        times=None,  # type: Optional["models.MicrosoftGraphItemActivityTimeSet"]
        drive_item=None,  # type: Optional["models.MicrosoftGraphDriveItem"]
        list_item=None,  # type: Optional["models.MicrosoftGraphListItem"]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        comment=None,  # type: Optional["models.MicrosoftGraphCommentAction"]
        create=None,  # type: Optional[Dict[str, object]]
        delete=None,  # type: Optional["models.MicrosoftGraphDeleteAction"]
        edit=None,  # type: Optional[Dict[str, object]]
        mention=None,  # type: Optional["models.MicrosoftGraphMentionAction"]
        move=None,  # type: Optional["models.MicrosoftGraphMoveAction"]
        rename=None,  # type: Optional["models.MicrosoftGraphRenameAction"]
        restore=None,  # type: Optional[Dict[str, object]]
        share=None,  # type: Optional["models.MicrosoftGraphShareAction"]
        version=None,  # type: Optional["models.MicrosoftGraphVersionAction"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphItemActivityOld"
        """Create new navigation property to activities for drives.

        Create new navigation property to activities for drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param id: Read-only.
        :type id: str
        :param times: itemActivityTimeSet.
        :type times: ~files.models.MicrosoftGraphItemActivityTimeSet
        :param drive_item: driveItem.
        :type drive_item: ~files.models.MicrosoftGraphDriveItem
        :param list_item: listItem.
        :type list_item: ~files.models.MicrosoftGraphListItem
        :param application: identity.
        :type application: ~files.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~files.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~files.models.MicrosoftGraphIdentity
        :param comment: commentAction.
        :type comment: ~files.models.MicrosoftGraphCommentAction
        :param create: createAction.
        :type create: dict[str, object]
        :param delete: deleteAction.
        :type delete: ~files.models.MicrosoftGraphDeleteAction
        :param edit: editAction.
        :type edit: dict[str, object]
        :param mention: mentionAction.
        :type mention: ~files.models.MicrosoftGraphMentionAction
        :param move: moveAction.
        :type move: ~files.models.MicrosoftGraphMoveAction
        :param rename: renameAction.
        :type rename: ~files.models.MicrosoftGraphRenameAction
        :param restore: restoreAction.
        :type restore: dict[str, object]
        :param share: shareAction.
        :type share: ~files.models.MicrosoftGraphShareAction
        :param version: versionAction.
        :type version: ~files.models.MicrosoftGraphVersionAction
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphItemActivityOld, or the result of cls(response)
        :rtype: ~files.models.MicrosoftGraphItemActivityOld
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphItemActivityOld"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphItemActivityOld(id=id, times=times, drive_item=drive_item, list_item=list_item, application=application, device=device, user=user, comment=comment, create=create, delete=delete, edit=edit, mention=mention, move=move, rename=rename, restore=restore, share=share, version=version)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_activity.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphItemActivityOld')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphItemActivityOld', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_activity.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/activities'}  # type: ignore

    def get_activity(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        item_activity_old_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum208"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum209"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphItemActivityOld"
        """Get activities from drives.

        Get activities from drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param item_activity_old_id: key: id of itemActivityOLD.
        :type item_activity_old_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~files.models.Enum208]
        :param expand: Expand related entities.
        :type expand: list[str or ~files.models.Enum209]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphItemActivityOld, or the result of cls(response)
        :rtype: ~files.models.MicrosoftGraphItemActivityOld
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphItemActivityOld"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_activity.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
            'itemActivityOLD-id': self._serialize.url("item_activity_old_id", item_activity_old_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphItemActivityOld', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_activity.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/activities/{itemActivityOLD-id}'}  # type: ignore

    def update_activity(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        item_activity_old_id,  # type: str
        id=None,  # type: Optional[str]
        times=None,  # type: Optional["models.MicrosoftGraphItemActivityTimeSet"]
        drive_item=None,  # type: Optional["models.MicrosoftGraphDriveItem"]
        list_item=None,  # type: Optional["models.MicrosoftGraphListItem"]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        comment=None,  # type: Optional["models.MicrosoftGraphCommentAction"]
        create=None,  # type: Optional[Dict[str, object]]
        delete=None,  # type: Optional["models.MicrosoftGraphDeleteAction"]
        edit=None,  # type: Optional[Dict[str, object]]
        mention=None,  # type: Optional["models.MicrosoftGraphMentionAction"]
        move=None,  # type: Optional["models.MicrosoftGraphMoveAction"]
        rename=None,  # type: Optional["models.MicrosoftGraphRenameAction"]
        restore=None,  # type: Optional[Dict[str, object]]
        share=None,  # type: Optional["models.MicrosoftGraphShareAction"]
        version=None,  # type: Optional["models.MicrosoftGraphVersionAction"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property activities in drives.

        Update the navigation property activities in drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param item_activity_old_id: key: id of itemActivityOLD.
        :type item_activity_old_id: str
        :param id: Read-only.
        :type id: str
        :param times: itemActivityTimeSet.
        :type times: ~files.models.MicrosoftGraphItemActivityTimeSet
        :param drive_item: driveItem.
        :type drive_item: ~files.models.MicrosoftGraphDriveItem
        :param list_item: listItem.
        :type list_item: ~files.models.MicrosoftGraphListItem
        :param application: identity.
        :type application: ~files.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~files.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~files.models.MicrosoftGraphIdentity
        :param comment: commentAction.
        :type comment: ~files.models.MicrosoftGraphCommentAction
        :param create: createAction.
        :type create: dict[str, object]
        :param delete: deleteAction.
        :type delete: ~files.models.MicrosoftGraphDeleteAction
        :param edit: editAction.
        :type edit: dict[str, object]
        :param mention: mentionAction.
        :type mention: ~files.models.MicrosoftGraphMentionAction
        :param move: moveAction.
        :type move: ~files.models.MicrosoftGraphMoveAction
        :param rename: renameAction.
        :type rename: ~files.models.MicrosoftGraphRenameAction
        :param restore: restoreAction.
        :type restore: dict[str, object]
        :param share: shareAction.
        :type share: ~files.models.MicrosoftGraphShareAction
        :param version: versionAction.
        :type version: ~files.models.MicrosoftGraphVersionAction
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphItemActivityOld(id=id, times=times, drive_item=drive_item, list_item=list_item, application=application, device=device, user=user, comment=comment, create=create, delete=delete, edit=edit, mention=mention, move=move, rename=rename, restore=restore, share=share, version=version)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_activity.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
            'itemActivityOLD-id': self._serialize.url("item_activity_old_id", item_activity_old_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphItemActivityOld')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_activity.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/activities/{itemActivityOLD-id}'}  # type: ignore

    def delete_activity(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        item_activity_old_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property activities for drives.

        Delete navigation property activities for drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param item_activity_old_id: key: id of itemActivityOLD.
        :type item_activity_old_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_activity.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
            'itemActivityOLD-id': self._serialize.url("item_activity_old_id", item_activity_old_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_activity.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/activities/{itemActivityOLD-id}'}  # type: ignore

    def get_analytic(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum214"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum215"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphItemAnalytics"
        """Get analytics from drives.

        Get analytics from drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~files.models.Enum214]
        :param expand: Expand related entities.
        :type expand: list[str or ~files.models.Enum215]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphItemAnalytics, or the result of cls(response)
        :rtype: ~files.models.MicrosoftGraphItemAnalytics
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphItemAnalytics"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_analytic.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphItemAnalytics', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_analytic.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/analytics'}  # type: ignore

    def get_ref_analytic(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> str
        """Get ref of analytics from drives.

        Get ref of analytics from drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str, or the result of cls(response)
        :rtype: str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[str]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_ref_analytic.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_ref_analytic.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/analytics/$ref'}  # type: ignore

    def set_ref_analytic(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        body,  # type: Dict[str, object]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the ref of navigation property analytics in drives.

        Update the ref of navigation property analytics in drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param body: New navigation property ref values.
        :type body: dict[str, object]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.set_ref_analytic.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, '{object}')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    set_ref_analytic.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/analytics/$ref'}  # type: ignore

    def delete_ref_analytic(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete ref of navigation property analytics for drives.

        Delete ref of navigation property analytics for drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_ref_analytic.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_ref_analytic.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/analytics/$ref'}  # type: ignore

    def get_drive_item(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum216"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum217"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphDriveItem"
        """Get driveItem from drives.

        Get driveItem from drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~files.models.Enum216]
        :param expand: Expand related entities.
        :type expand: list[str or ~files.models.Enum217]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphDriveItem, or the result of cls(response)
        :rtype: ~files.models.MicrosoftGraphDriveItem
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphDriveItem"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_drive_item.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphDriveItem', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_drive_item.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/driveItem'}  # type: ignore

    def update_drive_item(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        description=None,  # type: Optional[str]
        e_tag=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        name=None,  # type: Optional[str]
        web_url=None,  # type: Optional[str]
        created_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        last_modified_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        microsoft_graph_item_reference_drive_id=None,  # type: Optional[str]
        drive_type=None,  # type: Optional[str]
        microsoft_graph_item_reference_id=None,  # type: Optional[str]
        microsoft_graph_item_reference_name=None,  # type: Optional[str]
        path=None,  # type: Optional[str]
        share_id=None,  # type: Optional[str]
        sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        site_id=None,  # type: Optional[str]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        audio=None,  # type: Optional["models.MicrosoftGraphAudio"]
        content=None,  # type: Optional[bytes]
        c_tag=None,  # type: Optional[str]
        file_system_info=None,  # type: Optional["models.MicrosoftGraphFileSystemInfo"]
        image=None,  # type: Optional["models.MicrosoftGraphImage"]
        location=None,  # type: Optional["models.MicrosoftGraphGeoCoordinates"]
        photo=None,  # type: Optional["models.MicrosoftGraphPhoto"]
        publication=None,  # type: Optional["models.MicrosoftGraphPublicationFacet"]
        root=None,  # type: Optional[Dict[str, object]]
        microsoft_graph_sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        size=None,  # type: Optional[int]
        video=None,  # type: Optional["models.MicrosoftGraphVideo"]
        web_dav_url=None,  # type: Optional[str]
        activities=None,  # type: Optional[List["models.MicrosoftGraphItemActivityOld"]]
        analytics=None,  # type: Optional["models.MicrosoftGraphItemAnalytics"]
        children=None,  # type: Optional[List["models.MicrosoftGraphDriveItem"]]
        list_item=None,  # type: Optional["models.MicrosoftGraphListItem"]
        permissions=None,  # type: Optional[List["models.MicrosoftGraphPermission"]]
        subscriptions=None,  # type: Optional[List["models.MicrosoftGraphSubscription"]]
        thumbnails=None,  # type: Optional[List["models.MicrosoftGraphThumbnailSet"]]
        versions=None,  # type: Optional[List["models.MicrosoftGraphDriveItemVersion"]]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        microsoft_graph_workbook_application=None,  # type: Optional["models.MicrosoftGraphWorkbookApplication"]
        comments=None,  # type: Optional[List["models.MicrosoftGraphWorkbookComment"]]
        functions=None,  # type: Optional["models.MicrosoftGraphWorkbookFunctions"]
        names=None,  # type: Optional[List["models.MicrosoftGraphWorkbookNamedItem"]]
        operations=None,  # type: Optional[List["models.MicrosoftGraphWorkbookOperation"]]
        tables=None,  # type: Optional[List["models.MicrosoftGraphWorkbookTable"]]
        worksheets=None,  # type: Optional[List["models.MicrosoftGraphWorkbookWorksheet"]]
        microsoft_graph_special_folder_name=None,  # type: Optional[str]
        owner=None,  # type: Optional["models.MicrosoftGraphIdentitySet"]
        scope=None,  # type: Optional[str]
        shared_by=None,  # type: Optional["models.MicrosoftGraphIdentitySet"]
        shared_date_time=None,  # type: Optional[datetime.datetime]
        on_click_telemetry_url=None,  # type: Optional[str]
        created_by=None,  # type: Optional["models.MicrosoftGraphIdentitySet"]
        microsoft_graph_remote_item_created_date_time_created_date_time=None,  # type: Optional[datetime.datetime]
        file=None,  # type: Optional["models.MicrosoftGraphFile"]
        microsoft_graph_file_system_info_file_system_info=None,  # type: Optional["models.MicrosoftGraphFileSystemInfo"]
        folder=None,  # type: Optional["models.MicrosoftGraphFolder"]
        microsoft_graph_remote_item_id=None,  # type: Optional[str]
        microsoft_graph_image=None,  # type: Optional["models.MicrosoftGraphImage"]
        last_modified_by=None,  # type: Optional["models.MicrosoftGraphIdentitySet"]
        microsoft_graph_remote_item_last_modified_date_time_last_modified_date_time=None,  # type: Optional[datetime.datetime]
        microsoft_graph_remote_item_name=None,  # type: Optional[str]
        package=None,  # type: Optional["models.MicrosoftGraphPackage"]
        parent_reference=None,  # type: Optional["models.MicrosoftGraphItemReference"]
        shared=None,  # type: Optional["models.MicrosoftGraphShared"]
        sharepoint_ids1=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        integer_size=None,  # type: Optional[int]
        special_folder=None,  # type: Optional["models.MicrosoftGraphSpecialFolder"]
        microsoft_graph_video=None,  # type: Optional["models.MicrosoftGraphVideo"]
        microsoft_graph_remote_item_web_dav_url_web_dav_url=None,  # type: Optional[str]
        microsoft_graph_remote_item_web_url=None,  # type: Optional[str]
        queued_date_time=None,  # type: Optional[datetime.datetime]
        type=None,  # type: Optional[str]
        child_count=None,  # type: Optional[int]
        view=None,  # type: Optional["models.MicrosoftGraphFolderView"]
        hashes=None,  # type: Optional["models.MicrosoftGraphHashes"]
        mime_type=None,  # type: Optional[str]
        processing_metadata=None,  # type: Optional[bool]
        state=None,  # type: Optional[str]
        album=None,  # type: Optional["models.MicrosoftGraphAlbum"]
        integer_child_count=None,  # type: Optional[int]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property driveItem in drives.

        Update the navigation property driveItem in drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: Date and time of item creation. Read-only.
        :type created_date_time: ~datetime.datetime
        :param description: Provides a user-visible description of the item. Optional.
        :type description: str
        :param e_tag: ETag for the item. Read-only.
        :type e_tag: str
        :param last_modified_date_time: Date and time the item was last modified. Read-only.
        :type last_modified_date_time: ~datetime.datetime
        :param name: The name of the item. Read-write.
        :type name: str
        :param web_url: URL that displays the resource in the browser. Read-only.
        :type web_url: str
        :param created_by_user: Represents an Azure Active Directory user object.
        :type created_by_user: ~files.models.MicrosoftGraphUser
        :param last_modified_by_user: Represents an Azure Active Directory user object.
        :type last_modified_by_user: ~files.models.MicrosoftGraphUser
        :param microsoft_graph_item_reference_drive_id: Unique identifier of the drive instance that
         contains the item. Read-only.
        :type microsoft_graph_item_reference_drive_id: str
        :param drive_type: Identifies the type of drive. See [drive][] resource for values.
        :type drive_type: str
        :param microsoft_graph_item_reference_id: Unique identifier of the item in the drive. Read-
         only.
        :type microsoft_graph_item_reference_id: str
        :param microsoft_graph_item_reference_name: The name of the item being referenced. Read-only.
        :type microsoft_graph_item_reference_name: str
        :param path: Path that can be used to navigate to the item. Read-only.
        :type path: str
        :param share_id: A unique identifier for a shared resource that can be accessed via the
         [Shares][] API.
        :type share_id: str
        :param sharepoint_ids: sharepointIds.
        :type sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
        :param site_id:
        :type site_id: str
        :param application: identity.
        :type application: ~files.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~files.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~files.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~files.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~files.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~files.models.MicrosoftGraphIdentity
        :param audio: audio.
        :type audio: ~files.models.MicrosoftGraphAudio
        :param content: The content stream, if the item represents a file.
        :type content: bytes
        :param c_tag: An eTag for the content of the item. This eTag is not changed if only the
         metadata is changed. Note This property is not returned if the item is a folder. Read-only.
        :type c_tag: str
        :param file_system_info: fileSystemInfo.
        :type file_system_info: ~files.models.MicrosoftGraphFileSystemInfo
        :param image: image.
        :type image: ~files.models.MicrosoftGraphImage
        :param location: geoCoordinates.
        :type location: ~files.models.MicrosoftGraphGeoCoordinates
        :param photo: photo.
        :type photo: ~files.models.MicrosoftGraphPhoto
        :param publication: publicationFacet.
        :type publication: ~files.models.MicrosoftGraphPublicationFacet
        :param root: root.
        :type root: dict[str, object]
        :param microsoft_graph_sharepoint_ids: sharepointIds.
        :type microsoft_graph_sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
        :param size: Size of the item in bytes. Read-only.
        :type size: long
        :param video: video.
        :type video: ~files.models.MicrosoftGraphVideo
        :param web_dav_url: WebDAV compatible URL for the item.
        :type web_dav_url: str
        :param activities: The list of recent activities that took place on this item.
        :type activities: list[~files.models.MicrosoftGraphItemActivityOld]
        :param analytics: itemAnalytics.
        :type analytics: ~files.models.MicrosoftGraphItemAnalytics
        :param children: Collection containing Item objects for the immediate children of Item. Only
         items representing folders have children. Read-only. Nullable.
        :type children: list[~files.models.MicrosoftGraphDriveItem]
        :param list_item: listItem.
        :type list_item: ~files.models.MicrosoftGraphListItem
        :param permissions: The set of permissions for the item. Read-only. Nullable.
        :type permissions: list[~files.models.MicrosoftGraphPermission]
        :param subscriptions: The set of subscriptions on the item. Only supported on the root of a
         drive.
        :type subscriptions: list[~files.models.MicrosoftGraphSubscription]
        :param thumbnails: Collection containing [ThumbnailSet][] objects associated with the item. For
         more info, see [getting thumbnails][]. Read-only. Nullable.
        :type thumbnails: list[~files.models.MicrosoftGraphThumbnailSet]
        :param versions: The list of previous versions of the item. For more info, see [getting
         previous versions][]. Read-only. Nullable.
        :type versions: list[~files.models.MicrosoftGraphDriveItemVersion]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param microsoft_graph_workbook_application: workbookApplication.
        :type microsoft_graph_workbook_application: ~files.models.MicrosoftGraphWorkbookApplication
        :param comments:
        :type comments: list[~files.models.MicrosoftGraphWorkbookComment]
        :param functions: workbookFunctions.
        :type functions: ~files.models.MicrosoftGraphWorkbookFunctions
        :param names: Represents a collection of workbook scoped named items (named ranges and
         constants). Read-only.
        :type names: list[~files.models.MicrosoftGraphWorkbookNamedItem]
        :param operations: The status of workbook operations. Getting an operation collection is not
         supported, but you can get the status of a long-running operation if the Location header is
         returned in the response. Read-only.
        :type operations: list[~files.models.MicrosoftGraphWorkbookOperation]
        :param tables: Represents a collection of tables associated with the workbook. Read-only.
        :type tables: list[~files.models.MicrosoftGraphWorkbookTable]
        :param worksheets: Represents a collection of worksheets associated with the workbook. Read-
         only.
        :type worksheets: list[~files.models.MicrosoftGraphWorkbookWorksheet]
        :param microsoft_graph_special_folder_name: The unique identifier for this item in the
         /drive/special collection.
        :type microsoft_graph_special_folder_name: str
        :param owner: identitySet.
        :type owner: ~files.models.MicrosoftGraphIdentitySet
        :param scope: Indicates the scope of how the item is shared: anonymous, organization, or users.
         Read-only.
        :type scope: str
        :param shared_by: identitySet.
        :type shared_by: ~files.models.MicrosoftGraphIdentitySet
        :param shared_date_time: The UTC date and time when the item was shared. Read-only.
        :type shared_date_time: ~datetime.datetime
        :param on_click_telemetry_url: A callback URL that can be used to record telemetry information.
         The application should issue a GET on this URL if the user interacts with this item to improve
         the quality of results.
        :type on_click_telemetry_url: str
        :param created_by: identitySet.
        :type created_by: ~files.models.MicrosoftGraphIdentitySet
        :param microsoft_graph_remote_item_created_date_time_created_date_time: Date and time of item
         creation. Read-only.
        :type microsoft_graph_remote_item_created_date_time_created_date_time: ~datetime.datetime
        :param file: file.
        :type file: ~files.models.MicrosoftGraphFile
        :param microsoft_graph_file_system_info_file_system_info: fileSystemInfo.
        :type microsoft_graph_file_system_info_file_system_info: ~files.models.MicrosoftGraphFileSystemInfo
        :param folder: folder.
        :type folder: ~files.models.MicrosoftGraphFolder
        :param microsoft_graph_remote_item_id: Unique identifier for the remote item in its drive.
         Read-only.
        :type microsoft_graph_remote_item_id: str
        :param microsoft_graph_image: image.
        :type microsoft_graph_image: ~files.models.MicrosoftGraphImage
        :param last_modified_by: identitySet.
        :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
        :param microsoft_graph_remote_item_last_modified_date_time_last_modified_date_time: Date and
         time the item was last modified. Read-only.
        :type microsoft_graph_remote_item_last_modified_date_time_last_modified_date_time: ~datetime.datetime
        :param microsoft_graph_remote_item_name: Optional. Filename of the remote item. Read-only.
        :type microsoft_graph_remote_item_name: str
        :param package: package.
        :type package: ~files.models.MicrosoftGraphPackage
        :param parent_reference: itemReference.
        :type parent_reference: ~files.models.MicrosoftGraphItemReference
        :param shared: shared.
        :type shared: ~files.models.MicrosoftGraphShared
        :param sharepoint_ids1: sharepointIds.
        :type sharepoint_ids1: ~files.models.MicrosoftGraphSharepointIds
        :param integer_size: Size of the remote item. Read-only.
        :type integer_size: long
        :param special_folder: specialFolder.
        :type special_folder: ~files.models.MicrosoftGraphSpecialFolder
        :param microsoft_graph_video: video.
        :type microsoft_graph_video: ~files.models.MicrosoftGraphVideo
        :param microsoft_graph_remote_item_web_dav_url_web_dav_url: DAV compatible URL for the item.
        :type microsoft_graph_remote_item_web_dav_url_web_dav_url: str
        :param microsoft_graph_remote_item_web_url: URL that displays the resource in the browser.
         Read-only.
        :type microsoft_graph_remote_item_web_url: str
        :param queued_date_time: Date and time the pending binary operation was queued in UTC time.
         Read-only.
        :type queued_date_time: ~datetime.datetime
        :param type: A string indicating the type of package. While oneNote is the only currently
         defined value, you should expect other package types to be returned and handle them
         accordingly.
        :type type: str
        :param child_count: Number of children contained immediately within this container.
        :type child_count: int
        :param view: folderView.
        :type view: ~files.models.MicrosoftGraphFolderView
        :param hashes: hashes.
        :type hashes: ~files.models.MicrosoftGraphHashes
        :param mime_type: The MIME type for the file. This is determined by logic on the server and
         might not be the value provided when the file was uploaded. Read-only.
        :type mime_type: str
        :param processing_metadata:
        :type processing_metadata: bool
        :param state: Represents the state of the deleted item.
        :type state: str
        :param album: album.
        :type album: ~files.models.MicrosoftGraphAlbum
        :param integer_child_count:
        :type integer_child_count: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphDriveItem(id=id, created_date_time=created_date_time, description=description, e_tag=e_tag, last_modified_date_time=last_modified_date_time, name=name, web_url=web_url, created_by_user=created_by_user, last_modified_by_user=last_modified_by_user, drive_id=microsoft_graph_item_reference_drive_id, drive_type=drive_type, id_parent_reference_id=microsoft_graph_item_reference_id, name_parent_reference_name=microsoft_graph_item_reference_name, path=path, share_id=share_id, sharepoint_ids=sharepoint_ids, site_id=site_id, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, audio=audio, content=content, c_tag=c_tag, file_system_info=file_system_info, image=image, location=location, photo=photo, publication=publication, root=root, sharepoint_ids=microsoft_graph_sharepoint_ids, size=size, video=video, web_dav_url=web_dav_url, activities=activities, analytics=analytics, children=children, list_item=list_item, permissions=permissions, subscriptions=subscriptions, thumbnails=thumbnails, versions=versions, id_workbook_id=microsoft_graph_entity_id, application=microsoft_graph_workbook_application, comments=comments, functions=functions, names=names, operations=operations, tables=tables, worksheets=worksheets, name_special_folder_name=microsoft_graph_special_folder_name, owner=owner, scope=scope, shared_by=shared_by, shared_date_time=shared_date_time, on_click_telemetry_url=on_click_telemetry_url, created_by=created_by, created_date_time_remote_item_created_date_time=microsoft_graph_remote_item_created_date_time_created_date_time, file=file, file_system_info_remote_item_file_system_info=microsoft_graph_file_system_info_file_system_info, folder=folder, id_remote_item_id=microsoft_graph_remote_item_id, image_remote_item_image=microsoft_graph_image, last_modified_by=last_modified_by, last_modified_date_time_remote_item_last_modified_date_time=microsoft_graph_remote_item_last_modified_date_time_last_modified_date_time, name_remote_item_name=microsoft_graph_remote_item_name, package=package, parent_reference=parent_reference, shared=shared, sharepoint_ids_remote_item_sharepoint_ids=sharepoint_ids1, size_remote_item_size=integer_size, special_folder=special_folder, video_remote_item_video=microsoft_graph_video, web_dav_url_remote_item_web_dav_url=microsoft_graph_remote_item_web_dav_url_web_dav_url, web_url_remote_item_web_url=microsoft_graph_remote_item_web_url, queued_date_time=queued_date_time, type=type, child_count_folder_child_count=child_count, view=view, hashes=hashes, mime_type=mime_type, processing_metadata=processing_metadata, state=state, album=album, child_count_bundle_child_count=integer_child_count)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_drive_item.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphDriveItem')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_drive_item.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/driveItem'}  # type: ignore

    def delete_drive_item(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property driveItem for drives.

        Delete navigation property driveItem for drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_drive_item.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_drive_item.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/driveItem'}  # type: ignore

    def get_drive_item_content(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> IO
        """Get media content for the navigation property driveItem from drives.

        Get media content for the navigation property driveItem from drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: IO, or the result of cls(response)
        :rtype: IO
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[IO]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/octet-stream, application/json"

        # Construct URL
        url = self.get_drive_item_content.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = response.stream_download(self._client._pipeline)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_drive_item_content.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/driveItem/content'}  # type: ignore

    def set_drive_item_content(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        data,  # type: IO
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update media content for the navigation property driveItem in drives.

        Update media content for the navigation property driveItem in drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param data: New media content.
        :type data: IO
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/octet-stream")
        accept = "application/json"

        # Construct URL
        url = self.set_drive_item_content.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content_kwargs['stream_content'] = data
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    set_drive_item_content.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/driveItem/content'}  # type: ignore

    def get_field(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        select=None,  # type: Optional[List[str]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphFieldValueSet"
        """Get fields from drives.

        Get fields from drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param select: Select properties to be returned.
        :type select: list[str]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphFieldValueSet, or the result of cls(response)
        :rtype: ~files.models.MicrosoftGraphFieldValueSet
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphFieldValueSet"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_field.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphFieldValueSet', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_field.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/fields'}  # type: ignore

    def update_field(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property fields in drives.

        Update the navigation property fields in drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param id: Read-only.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphFieldValueSet(id=id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_field.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphFieldValueSet')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_field.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/fields'}  # type: ignore

    def delete_field(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property fields for drives.

        Delete navigation property fields for drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_field.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_field.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/fields'}  # type: ignore

    def create_link(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        type=None,  # type: Optional[str]
        scope=None,  # type: Optional[str]
        expiration_date_time=None,  # type: Optional[datetime.datetime]
        password=None,  # type: Optional[str]
        recipients=None,  # type: Optional[List["models.MicrosoftGraphDriveRecipient"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphPermission"
        """Invoke action createLink.

        Invoke action createLink.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param type:
        :type type: str
        :param scope:
        :type scope: str
        :param expiration_date_time:
        :type expiration_date_time: ~datetime.datetime
        :param password:
        :type password: str
        :param recipients:
        :type recipients: list[~files.models.MicrosoftGraphDriveRecipient]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPermission, or the result of cls(response)
        :rtype: ~files.models.MicrosoftGraphPermission
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPermission"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.PathsVput3UDrivesDriveIdListItemsListitemIdMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema(type=type, scope=scope, expiration_date_time=expiration_date_time, password=password, recipients=recipients)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_link.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'PathsVput3UDrivesDriveIdListItemsListitemIdMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPermission', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_link.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/microsoft.graph.createLink'}  # type: ignore

    def get_activity_by_interval(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        start_date_time,  # type: str
        end_date_time,  # type: str
        interval,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> List["models.MicrosoftGraphItemActivityStat"]
        """Invoke function getActivitiesByInterval.

        Invoke function getActivitiesByInterval.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param start_date_time:
        :type start_date_time: str
        :param end_date_time:
        :type end_date_time: str
        :param interval:
        :type interval: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MicrosoftGraphItemActivityStat, or the result of cls(response)
        :rtype: list[~files.models.MicrosoftGraphItemActivityStat]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.MicrosoftGraphItemActivityStat"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_activity_by_interval.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
            'startDateTime': self._serialize.url("start_date_time", start_date_time, 'str'),
            'endDateTime': self._serialize.url("end_date_time", end_date_time, 'str'),
            'interval': self._serialize.url("interval", interval, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[MicrosoftGraphItemActivityStat]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_activity_by_interval.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/microsoft.graph.getActivitiesByInterval(startDateTime=\'{startDateTime}\',endDateTime=\'{endDateTime}\',interval=\'{interval}\')'}  # type: ignore

    def list_version(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum218"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum219"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum220"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfListItemVersion1"]
        """Get versions from drives.

        Get versions from drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~files.models.Enum218]
        :param select: Select properties to be returned.
        :type select: list[str or ~files.models.Enum219]
        :param expand: Expand related entities.
        :type expand: list[str or ~files.models.Enum220]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfListItemVersion1 or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~files.models.CollectionOfListItemVersion1]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfListItemVersion1"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_version.metadata['url']  # type: ignore
                path_format_arguments = {
                    'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
                    'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfListItemVersion1', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_version.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/versions'}  # type: ignore

    def create_version(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        id=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        publication=None,  # type: Optional["models.MicrosoftGraphPublicationFacet"]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphListItemVersion"
        """Create new navigation property to versions for drives.

        Create new navigation property to versions for drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param id: Read-only.
        :type id: str
        :param last_modified_date_time: Date and time the version was last modified. Read-only.
        :type last_modified_date_time: ~datetime.datetime
        :param publication: publicationFacet.
        :type publication: ~files.models.MicrosoftGraphPublicationFacet
        :param application: identity.
        :type application: ~files.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~files.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~files.models.MicrosoftGraphIdentity
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphListItemVersion, or the result of cls(response)
        :rtype: ~files.models.MicrosoftGraphListItemVersion
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphListItemVersion"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphListItemVersion(id=id, last_modified_date_time=last_modified_date_time, publication=publication, application=application, device=device, user=user, id_fields_id=microsoft_graph_entity_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_version.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphListItemVersion')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphListItemVersion', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_version.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/versions'}  # type: ignore

    def get_version(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        list_item_version_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum221"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum222"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphListItemVersion"
        """Get versions from drives.

        Get versions from drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param list_item_version_id: key: id of listItemVersion.
        :type list_item_version_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~files.models.Enum221]
        :param expand: Expand related entities.
        :type expand: list[str or ~files.models.Enum222]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphListItemVersion, or the result of cls(response)
        :rtype: ~files.models.MicrosoftGraphListItemVersion
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphListItemVersion"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_version.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
            'listItemVersion-id': self._serialize.url("list_item_version_id", list_item_version_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphListItemVersion', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_version.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/versions/{listItemVersion-id}'}  # type: ignore

    def update_version(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        list_item_version_id,  # type: str
        id=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        publication=None,  # type: Optional["models.MicrosoftGraphPublicationFacet"]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property versions in drives.

        Update the navigation property versions in drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param list_item_version_id: key: id of listItemVersion.
        :type list_item_version_id: str
        :param id: Read-only.
        :type id: str
        :param last_modified_date_time: Date and time the version was last modified. Read-only.
        :type last_modified_date_time: ~datetime.datetime
        :param publication: publicationFacet.
        :type publication: ~files.models.MicrosoftGraphPublicationFacet
        :param application: identity.
        :type application: ~files.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~files.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~files.models.MicrosoftGraphIdentity
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphListItemVersion(id=id, last_modified_date_time=last_modified_date_time, publication=publication, application=application, device=device, user=user, id_fields_id=microsoft_graph_entity_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_version.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
            'listItemVersion-id': self._serialize.url("list_item_version_id", list_item_version_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphListItemVersion')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_version.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/versions/{listItemVersion-id}'}  # type: ignore

    def delete_version(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        list_item_version_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property versions for drives.

        Delete navigation property versions for drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param list_item_version_id: key: id of listItemVersion.
        :type list_item_version_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_version.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
            'listItemVersion-id': self._serialize.url("list_item_version_id", list_item_version_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_version.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}/versions/{listItemVersion-id}'}  # type: ignore
